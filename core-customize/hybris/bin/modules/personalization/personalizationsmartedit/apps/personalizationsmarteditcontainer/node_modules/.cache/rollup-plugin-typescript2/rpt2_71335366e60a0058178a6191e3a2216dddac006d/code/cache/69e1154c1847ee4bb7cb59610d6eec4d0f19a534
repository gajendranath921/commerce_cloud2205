{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { isEqual, cloneDeep } from 'lodash';\r\nimport { TriggerType } from 'personalizationcommons';\r\nimport { IConfirmationModalService, stringUtils } from 'smarteditcommons';\r\nimport { TriggerService } from '../TriggerService';\r\nimport { SegmentDragAndDropService } from './SegmentDragAndDropService';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"SegmentNodeComponent\", {\r\n    selector: 'segment-node',\r\n    template: `<div cdkDropList [id]=\"node.uid\" [cdkDropListData]=\"node\" [cdkDropListConnectedTo]=\"connectedDropListsIds\" (cdkDropListDropped)=\"onDragDrop($event)\" [cdkDropListSortingDisabled]=\"false\" [cdkDropListEnterPredicate]=\"canBeDropped\" [ngClass]=\"{'perso-segments-tree__layout': isContainer(node), 'perso-segments-tree__empty-container': isEmptyContainer(node), 'perso-segments-tree__collapsed-container': collapsed }\"><div><div class=\"perso-segments-tree\" [ngClass]=\"{'perso-segments-tree__node': isItem(node), 'perso-segments-tree__container': isContainer(node)}\"><div *ngIf=\"isContainer(node)\"><div class=\"perso-segments-tree__toggle\" (click)=\"toggle()\" title=\"{{collapsed ? 'personalization.commons.icon.title.expand' : 'personalization.commons.icon.title.collapse' | translate}}\" [ngClass]=\"collapsed ? 'sap-icon--navigation-right-arrow' : 'sap-icon--navigation-down-arrow'\"></div><div class=\"perso-segments-tree__dropdown\"><se-select [model]=\"node.operation.id\" (modelChange)=\"operationChange($event)\" [fetchStrategy]=\"fetchStrategy\" [resetSearchInput]=\"false\" [searchEnabled]=\"false\"></se-select></div></div><div *ngIf=\"isItem(node)\" class=\"perso-segments-tree__node-content\">{{ node.selectedSegment.code }}</div><div *ngIf=\"isContainer(node)\" class=\"perso-segments-tree__angular-ui-tree-handle--empty\"></div><div><span class=\"perso-segments-tree__pull-right\"><a *ngIf=\"isItem(node)\" class=\"perso-segments-tree__actions perso-segments-tree__node-icon\" (click)=\"duplicateItem(node)\" title=\"{{'personalization.commons.icon.title.duplicate' | translate}}\"><span class=\"sap-icon--duplicate\"></span> </a><a *ngIf=\"!isTopContainer()\" class=\"perso-segments-tree__actions\" (click)=\"removeItem(node?.uid)\"><div *ngIf=\"isContainer(node)\" class=\"btn btn-link perso-segments-tree__container-btn-icon fd-has-margin-left-tiny\" title=\"{{'personalization.commons.icon.title.remove' | translate}}\"><span class=\"sap-icon--decline\"></span></div><div *ngIf=\"isItem(node)\" class=\"perso-segments-tree__node-icon\" title=\"{{'personalization.commons.icon.title.remove' | translate}}\"><span class=\"sap-icon--decline\"></span></div></a></span><button *ngIf=\"isContainer(node)\" class=\"fd-button--light perso-segments-tree__btn\" (click)=\"newSubItem('container')\"><span translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.group.button\"></span></button></div></div><div *ngIf=\"isEmptyContainer(node) && !collapsed\" class=\"perso-segments-tree__empty-container-node\"><div class=\"perso-segments-tree__empty-container-node-text\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.dropzone\"></div></div><ol *ngIf=\"!collapsed\"><li cdkDrag [id]=\"innerNode.uid\" [cdkDragData]=\"innerNode\" (cdkDragStarted)=\"onDragStarted($event)\" (cdkDragMoved)=\"onDragMoved($event)\" (cdkDragReleased)=\"onDragReleased()\" *ngFor=\"let innerNode of node.nodes\"><segment-node [node]=\"innerNode\" [expression]=\"expression\" [connectedDropListsIds]=\"connectedDropListsIds\" (expressionChange)=\"handleUpdate($event)\" (onDrop)=\"onDragDrop($event)\" (onDragStart)=\"onDragStarted($event)\"></segment-node></li></ol></div></div>`,\r\n    styles: [`ol{position:relative;margin:0;padding:0;list-style:none}.cdk-drag{list-style-type:none}.cdk-drag-preview{z-index:2000!important}.cdk-drag-placeholder{opacity:0!important}.cdk-drop-list-dragging{border-top:2px dashed rgba(0,0,0,.4);border-right:2px dashed rgba(0,0,0,.4);border-bottom:2px dashed rgba(0,0,0,.4)}`]\r\n});\r\nlet SegmentNodeComponent = class SegmentNodeComponent {\r\n    constructor(triggerService, confirmationModalService, translateService, dragDropService) {\r\n        this.triggerService = triggerService;\r\n        this.confirmationModalService = confirmationModalService;\r\n        this.translateService = translateService;\r\n        this.dragDropService = dragDropService;\r\n        this.canBeDropped = (drag, drop) => {\r\n            const isNotItem = !this.isItem(this.node);\r\n            if (this.dragDropService.currentHoverDropListId === null) {\r\n                return isNotItem;\r\n            }\r\n            return drop.id === this.dragDropService.currentHoverDropListId && isNotItem;\r\n        };\r\n        this.connectedDropListsIds = [];\r\n        this.expressionChange = new EventEmitter();\r\n        this.onDrop = new EventEmitter();\r\n        this.onDragStart = new EventEmitter();\r\n        this.collapsed = false;\r\n        this.elementToDuplicate = null;\r\n    }\r\n    ngOnInit() {\r\n        this.fetchStrategy = {\r\n            fetchAll: () => Promise.resolve(this.triggerService.actions)\r\n        };\r\n    }\r\n    onDragDrop(event) {\r\n        this.onDrop.emit(event);\r\n    }\r\n    onDragStarted(event) {\r\n        event.source.element.nativeElement.style.zIndex = '2000';\r\n        this.onDragStart.emit(event);\r\n    }\r\n    onDragMoved(event) {\r\n        this.dragDropService.dragMoved(event);\r\n    }\r\n    onDragReleased() {\r\n        this.dragDropService.dragReleased();\r\n    }\r\n    newSubItem(type) {\r\n        this.node.nodes.unshift({\r\n            uid: stringUtils.generateIdentifier(),\r\n            type,\r\n            operation: type === TriggerType.ITEM_TYPE\r\n                ? {}\r\n                : cloneDeep(this.triggerService.actions[0]),\r\n            nodes: []\r\n        });\r\n        this.collapsed = false;\r\n        this.expressionChange.emit(this.expression);\r\n    }\r\n    removeItem(uid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.triggerService.isNotEmptyContainer(this.node)) {\r\n                yield this.confirmationModalService.confirm({\r\n                    description: this.translateService.instant('personalization.modal.customizationvariationmanagement.targetgrouptab.segments.removecontainerconfirmation')\r\n                });\r\n                this.removeFromNode(uid);\r\n                this.expressionChange.emit(this.expression);\r\n            }\r\n            else {\r\n                this.removeFromNode(uid);\r\n                this.expressionChange.emit(this.expression);\r\n            }\r\n        });\r\n    }\r\n    operationChange(operation) {\r\n        this.node.operation = this.triggerService.actions.find((action) => action.id === operation);\r\n        this.expressionChange.emit(this.expression);\r\n    }\r\n    toggle() {\r\n        this.collapsed = !this.collapsed;\r\n    }\r\n    duplicateItem(elementToDuplicate) {\r\n        this.elementToDuplicate = elementToDuplicate;\r\n        this.expression[0].nodes.some(this.findElementAndDuplicate, this);\r\n        this.expressionChange.emit(this.expression);\r\n    }\r\n    handleUpdate(exp) {\r\n        this.expressionChange.emit(exp);\r\n    }\r\n    isContainerWithDropzone(element) {\r\n        return this.isContainer(element) && element.nodes.length === 1;\r\n    }\r\n    isItem(element) {\r\n        return this.triggerService.isItem(element);\r\n    }\r\n    isContainer(element) {\r\n        return this.triggerService.isContainer(element);\r\n    }\r\n    isTopContainer() {\r\n        return isEqual(this.expression[0], this.node);\r\n    }\r\n    isEmptyContainer(node) {\r\n        return this.isContainer(node) && node.nodes.length === 0;\r\n    }\r\n    findElementAndDuplicate(element, index, array) {\r\n        if (this.elementToDuplicate === element) {\r\n            array.splice(index, 0, cloneDeep(Object.assign(Object.assign({}, this.elementToDuplicate), { uid: stringUtils.generateIdentifier() })));\r\n            return true;\r\n        }\r\n        if (this.isContainer(element)) {\r\n            element.nodes.some(this.findElementAndDuplicate, this);\r\n        }\r\n        return false;\r\n    }\r\n    removeFromNode(uid) {\r\n        const target = this.findParentByUid(uid);\r\n        target.nodes = target.nodes.filter((node) => node.uid !== uid);\r\n    }\r\n    findParentByUid(uid) {\r\n        let target = null;\r\n        const findParent = (parent) => {\r\n            const hasChild = (parent.nodes || []).find((n) => n.uid === uid);\r\n            if (hasChild) {\r\n                target = parent;\r\n                return;\r\n            }\r\n            for (let i = 0; i < parent.nodes.length; i++) {\r\n                if (parent.nodes[i].uid) {\r\n                    findParent(parent.nodes[i]);\r\n                }\r\n            }\r\n        };\r\n        findParent(this.expression[0]);\r\n        return target;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], SegmentNodeComponent.prototype, \"expression\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], SegmentNodeComponent.prototype, \"node\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], SegmentNodeComponent.prototype, \"connectedDropListsIds\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], SegmentNodeComponent.prototype, \"expressionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], SegmentNodeComponent.prototype, \"onDrop\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], SegmentNodeComponent.prototype, \"onDragStart\", void 0);\r\nSegmentNodeComponent = __decorate([\r\n    Component({\r\n        selector: 'segment-node',\r\n        template: `<div cdkDropList [id]=\"node.uid\" [cdkDropListData]=\"node\" [cdkDropListConnectedTo]=\"connectedDropListsIds\" (cdkDropListDropped)=\"onDragDrop($event)\" [cdkDropListSortingDisabled]=\"false\" [cdkDropListEnterPredicate]=\"canBeDropped\" [ngClass]=\"{'perso-segments-tree__layout': isContainer(node), 'perso-segments-tree__empty-container': isEmptyContainer(node), 'perso-segments-tree__collapsed-container': collapsed }\"><div><div class=\"perso-segments-tree\" [ngClass]=\"{'perso-segments-tree__node': isItem(node), 'perso-segments-tree__container': isContainer(node)}\"><div *ngIf=\"isContainer(node)\"><div class=\"perso-segments-tree__toggle\" (click)=\"toggle()\" title=\"{{collapsed ? 'personalization.commons.icon.title.expand' : 'personalization.commons.icon.title.collapse' | translate}}\" [ngClass]=\"collapsed ? 'sap-icon--navigation-right-arrow' : 'sap-icon--navigation-down-arrow'\"></div><div class=\"perso-segments-tree__dropdown\"><se-select [model]=\"node.operation.id\" (modelChange)=\"operationChange($event)\" [fetchStrategy]=\"fetchStrategy\" [resetSearchInput]=\"false\" [searchEnabled]=\"false\"></se-select></div></div><div *ngIf=\"isItem(node)\" class=\"perso-segments-tree__node-content\">{{ node.selectedSegment.code }}</div><div *ngIf=\"isContainer(node)\" class=\"perso-segments-tree__angular-ui-tree-handle--empty\"></div><div><span class=\"perso-segments-tree__pull-right\"><a *ngIf=\"isItem(node)\" class=\"perso-segments-tree__actions perso-segments-tree__node-icon\" (click)=\"duplicateItem(node)\" title=\"{{'personalization.commons.icon.title.duplicate' | translate}}\"><span class=\"sap-icon--duplicate\"></span> </a><a *ngIf=\"!isTopContainer()\" class=\"perso-segments-tree__actions\" (click)=\"removeItem(node?.uid)\"><div *ngIf=\"isContainer(node)\" class=\"btn btn-link perso-segments-tree__container-btn-icon fd-has-margin-left-tiny\" title=\"{{'personalization.commons.icon.title.remove' | translate}}\"><span class=\"sap-icon--decline\"></span></div><div *ngIf=\"isItem(node)\" class=\"perso-segments-tree__node-icon\" title=\"{{'personalization.commons.icon.title.remove' | translate}}\"><span class=\"sap-icon--decline\"></span></div></a></span><button *ngIf=\"isContainer(node)\" class=\"fd-button--light perso-segments-tree__btn\" (click)=\"newSubItem('container')\"><span translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.group.button\"></span></button></div></div><div *ngIf=\"isEmptyContainer(node) && !collapsed\" class=\"perso-segments-tree__empty-container-node\"><div class=\"perso-segments-tree__empty-container-node-text\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.dropzone\"></div></div><ol *ngIf=\"!collapsed\"><li cdkDrag [id]=\"innerNode.uid\" [cdkDragData]=\"innerNode\" (cdkDragStarted)=\"onDragStarted($event)\" (cdkDragMoved)=\"onDragMoved($event)\" (cdkDragReleased)=\"onDragReleased()\" *ngFor=\"let innerNode of node.nodes\"><segment-node [node]=\"innerNode\" [expression]=\"expression\" [connectedDropListsIds]=\"connectedDropListsIds\" (expressionChange)=\"handleUpdate($event)\" (onDrop)=\"onDragDrop($event)\" (onDragStart)=\"onDragStarted($event)\"></segment-node></li></ol></div></div>`,\r\n        styles: [`ol{position:relative;margin:0;padding:0;list-style:none}.cdk-drag{list-style-type:none}.cdk-drag-preview{z-index:2000!important}.cdk-drag-placeholder{opacity:0!important}.cdk-drop-list-dragging{border-top:2px dashed rgba(0,0,0,.4);border-right:2px dashed rgba(0,0,0,.4);border-bottom:2px dashed rgba(0,0,0,.4)}`]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [TriggerService,\r\n        IConfirmationModalService,\r\n        TranslateService,\r\n        SegmentDragAndDropService])\r\n], SegmentNodeComponent);\r\nexport { SegmentNodeComponent };\r\n//# sourceMappingURL=SegmentNodeComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+cdk@8.2.3_ecb0ad61817e3ede6ce462931a5e5041/node_modules/@angular/cdk/drag-drop.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationcommons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/TriggerService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/segmentView/SegmentDragAndDropService.ts"],"map":"{\"version\":3,\"file\":\"SegmentNodeComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/management/manageCustomizationView/segmentView/SegmentNodeComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/node_modules/.cache/rollup-plugin-typescript2/placeholder/management/manageCustomizationView/segmentView/SegmentNodeComponent.d.ts","writeByteOrderMark":false,"text":"import { CdkDrag, CdkDragDrop, CdkDragStart, CdkDragMove, CdkDropList } from '@angular/cdk/drag-drop';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Trigger, TriggerAction, TriggerActionId, TriggerType } from 'personalizationcommons';\r\nimport { FetchStrategy, IConfirmationModalService } from 'smarteditcommons';\r\nimport { TriggerService } from '../TriggerService';\r\nimport { SegmentDragAndDropService } from './SegmentDragAndDropService';\r\nexport declare class SegmentNodeComponent {\r\n    private triggerService;\r\n    private confirmationModalService;\r\n    private translateService;\r\n    private dragDropService;\r\n    expression: Trigger[];\r\n    node: Trigger;\r\n    connectedDropListsIds: string[];\r\n    expressionChange: EventEmitter<Trigger[]>;\r\n    onDrop: EventEmitter<CdkDragDrop<Trigger>>;\r\n    onDragStart: EventEmitter<CdkDragStart>;\r\n    fetchStrategy: FetchStrategy<TriggerAction>;\r\n    collapsed: boolean;\r\n    private elementToDuplicate;\r\n    constructor(triggerService: TriggerService, confirmationModalService: IConfirmationModalService, translateService: TranslateService, dragDropService: SegmentDragAndDropService);\r\n    ngOnInit(): void;\r\n    onDragDrop(event: CdkDragDrop<Trigger>): void;\r\n    onDragStarted(event: CdkDragStart<any>): void;\r\n    onDragMoved(event: CdkDragMove<any>): void;\r\n    onDragReleased(): void;\r\n    canBeDropped: (drag: CdkDrag, drop: CdkDropList) => boolean;\r\n    newSubItem(type: TriggerType): void;\r\n    removeItem(uid: string): Promise<void>;\r\n    operationChange(operation: TriggerActionId): void;\r\n    toggle(): void;\r\n    duplicateItem(elementToDuplicate: Trigger): void;\r\n    handleUpdate(exp: Trigger[]): void;\r\n    isContainerWithDropzone(element: Trigger): boolean;\r\n    isItem(element: Trigger): boolean;\r\n    isContainer(element: Trigger): boolean;\r\n    isTopContainer(): boolean;\r\n    isEmptyContainer(node: Trigger): boolean;\r\n    private findElementAndDuplicate;\r\n    private removeFromNode;\r\n    private findParentByUid;\r\n}\r\n"}}
