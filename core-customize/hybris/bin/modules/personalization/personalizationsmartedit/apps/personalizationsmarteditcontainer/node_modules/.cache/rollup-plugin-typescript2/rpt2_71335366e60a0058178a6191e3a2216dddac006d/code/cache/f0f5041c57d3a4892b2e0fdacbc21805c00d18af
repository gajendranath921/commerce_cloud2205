{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TriggerType, TriggerActionId } from 'personalizationcommons';\r\nimport { SeDowngradeService, stringUtils } from 'smarteditcommons';\r\nlet /* @ngInject */ TriggerService = class /* @ngInject */ TriggerService {\r\n    constructor() {\r\n        this.actions = [\r\n            {\r\n                id: TriggerActionId.AND,\r\n                name: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.and'\r\n            },\r\n            {\r\n                id: TriggerActionId.OR,\r\n                name: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.or'\r\n            },\r\n            {\r\n                id: TriggerActionId.NOT,\r\n                name: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.not'\r\n            }\r\n        ];\r\n        this.supportedTypes = [\r\n            TriggerType.DEFAULT_TRIGGER,\r\n            TriggerType.SEGMENT_TRIGGER,\r\n            TriggerType.EXPRESSION_TRIGGER\r\n        ];\r\n    }\r\n    isContainer(element) {\r\n        return this.isElementOfType(element, TriggerType.CONTAINER_TYPE);\r\n    }\r\n    isEmptyContainer(element) {\r\n        return this.isContainer(element) && element.nodes.length === 0;\r\n    }\r\n    isNotEmptyContainer(element) {\r\n        return this.isContainer(element) && element.nodes.length > 0;\r\n    }\r\n    isDropzone(element) {\r\n        return this.isElementOfType(element, TriggerType.DROPZONE_TYPE);\r\n    }\r\n    isItem(element) {\r\n        return this.isElementOfType(element, TriggerType.ITEM_TYPE);\r\n    }\r\n    isValidExpression(element) {\r\n        if (!element) {\r\n            return false;\r\n        }\r\n        if (this.isContainer(element)) {\r\n            return (element.nodes &&\r\n                element.nodes.length > 0 &&\r\n                element.nodes.every((node) => this.isValidExpression(node)));\r\n        }\r\n        else {\r\n            return element.selectedSegment !== undefined;\r\n        }\r\n    }\r\n    buildTriggers(form, existingTriggers) {\r\n        let trigger = {};\r\n        if (this.isDefaultData(form)) {\r\n            trigger = this.buildDefaultTrigger();\r\n        }\r\n        else if (!!(form === null || form === void 0 ? void 0 : form.expression) && form.expression.length > 0) {\r\n            const element = form.expression[0];\r\n            if (this.isEmptyContainer(element)) {\r\n                trigger = {};\r\n            }\r\n            else if (this.isExpressionData(element)) {\r\n                trigger = this.buildExpressionTrigger(element);\r\n            }\r\n            else {\r\n                trigger = this.buildSegmentTrigger(element);\r\n            }\r\n        }\r\n        return this.mergeTriggers(existingTriggers, trigger);\r\n    }\r\n    buildData(triggers) {\r\n        let trigger = {};\r\n        let data = this.getBaseData();\r\n        if (triggers && Array.isArray(triggers) && triggers.length > 0) {\r\n            trigger = triggers.filter((elem) => this.isSupportedTrigger(elem))[0];\r\n        }\r\n        if (this.isDefaultTrigger(trigger)) {\r\n            // we leave baseData - it will be used if user removes default trigger\r\n        }\r\n        else if (this.isExpressionTrigger(trigger)) {\r\n            data = this.buildExpressionTriggerData(trigger);\r\n        }\r\n        else if (this.isSegmentTrigger(trigger)) {\r\n            data = this.buildSegmentTriggerData(trigger);\r\n        }\r\n        return data;\r\n    }\r\n    isDefault(triggers) {\r\n        const defaultTrigger = (triggers || []).filter((elem) => this.isDefaultTrigger(elem))[0];\r\n        return triggers && defaultTrigger ? true : false;\r\n    }\r\n    getExpressionAsString(expressionContainer) {\r\n        let retStr = '';\r\n        if (expressionContainer === undefined) {\r\n            return retStr;\r\n        }\r\n        const currOperator = this.isNegation(expressionContainer)\r\n            ? 'AND'\r\n            : expressionContainer.operation.id;\r\n        retStr += this.isNegation(expressionContainer) ? ' NOT ' : '';\r\n        retStr += '(';\r\n        if (this.isEmptyContainer(expressionContainer)) {\r\n            retStr += ' [] ';\r\n        }\r\n        else {\r\n            expressionContainer.nodes.forEach((element, index) => {\r\n                if (this.isEmptyContainer(element)) {\r\n                    retStr += index > 0 ? ' ' + currOperator + ' ( [] )' : '( [] )';\r\n                }\r\n                else {\r\n                    retStr += index > 0 ? ' ' + currOperator + ' ' : '';\r\n                    retStr += this.isItem(element)\r\n                        ? element.selectedSegment.code\r\n                        : this.getExpressionAsString(element);\r\n                }\r\n            });\r\n        }\r\n        retStr += ')';\r\n        return retStr;\r\n    }\r\n    isElementOfType(element, myType) {\r\n        return typeof element !== 'undefined' ? element.type === myType : false;\r\n    }\r\n    isNegation(element) {\r\n        return this.isContainer(element) && element.operation.id === 'NOT';\r\n    }\r\n    isDefaultData(form) {\r\n        return !!(form === null || form === void 0 ? void 0 : form.isDefault);\r\n    }\r\n    isExpressionData(element) {\r\n        return (element.operation.id === TriggerActionId.NOT ||\r\n            element.nodes.some((item) => !this.isItem(item)));\r\n    }\r\n    isSupportedTrigger(trigger) {\r\n        return this.supportedTypes.indexOf(trigger.type) >= 0;\r\n    }\r\n    isDefaultTrigger(trigger) {\r\n        return this.isElementOfType(trigger, TriggerType.DEFAULT_TRIGGER);\r\n    }\r\n    isSegmentTrigger(trigger) {\r\n        return this.isElementOfType(trigger, TriggerType.SEGMENT_TRIGGER);\r\n    }\r\n    isExpressionTrigger(trigger) {\r\n        return this.isElementOfType(trigger, TriggerType.EXPRESSION_TRIGGER);\r\n    }\r\n    isGroupExpressionData(expression) {\r\n        return this.isElementOfType(expression, TriggerType.GROUP_EXPRESSION);\r\n    }\r\n    isSegmentExpressionData(expression) {\r\n        return this.isElementOfType(expression, TriggerType.SEGMENT_EXPRESSION);\r\n    }\r\n    isNegationExpressionData(expression) {\r\n        return this.isElementOfType(expression, TriggerType.NEGATION_EXPRESSION);\r\n    }\r\n    // ------------------------ FORM DATA -> TRIGGER ---------------------------\r\n    buildSegmentsForTrigger(element) {\r\n        return element.nodes\r\n            .filter((node) => this.isItem(node))\r\n            .map((node) => node.selectedSegment);\r\n    }\r\n    buildExpressionForTrigger(element) {\r\n        if (this.isNegation(element)) {\r\n            const negationElements = [];\r\n            element.nodes.forEach((node) => {\r\n                negationElements.push(this.buildExpressionForTrigger(node));\r\n            });\r\n            return {\r\n                type: TriggerType.NEGATION_EXPRESSION,\r\n                element: {\r\n                    type: TriggerType.GROUP_EXPRESSION,\r\n                    operator: TriggerActionId.AND,\r\n                    elements: negationElements\r\n                }\r\n            };\r\n        }\r\n        else if (this.isContainer(element)) {\r\n            const groupElements = [];\r\n            element.nodes.forEach((node) => {\r\n                groupElements.push(this.buildExpressionForTrigger(node));\r\n            });\r\n            return {\r\n                type: TriggerType.GROUP_EXPRESSION,\r\n                operator: element.operation.id,\r\n                elements: groupElements\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                type: TriggerType.SEGMENT_EXPRESSION,\r\n                code: element.selectedSegment.code\r\n            };\r\n        }\r\n    }\r\n    buildDefaultTrigger() {\r\n        return {\r\n            type: TriggerType.DEFAULT_TRIGGER\r\n        };\r\n    }\r\n    buildExpressionTrigger(element) {\r\n        return {\r\n            type: TriggerType.EXPRESSION_TRIGGER,\r\n            expression: this.buildExpressionForTrigger(element)\r\n        };\r\n    }\r\n    buildSegmentTrigger(element) {\r\n        return {\r\n            type: TriggerType.SEGMENT_TRIGGER,\r\n            groupBy: element.operation.id,\r\n            segments: this.buildSegmentsForTrigger(element)\r\n        };\r\n    }\r\n    mergeTriggers(triggers, target) {\r\n        if (typeof triggers === 'undefined') {\r\n            return [target];\r\n        }\r\n        const index = triggers.findIndex((t) => t.type === target.type);\r\n        if (index >= 0) {\r\n            target.code = triggers[index].code;\r\n        }\r\n        // remove other instanced of supported types (there can be only one) but maintain unsupported types\r\n        const result = triggers.filter((trigger) => !this.isSupportedTrigger(trigger));\r\n        result.push(target);\r\n        return result;\r\n    }\r\n    // ------------------------ TRIGGER -> FORM DATA ---------------------------\r\n    buildContainer(actionId) {\r\n        const action = this.actions.filter((a) => a.id === actionId)[0];\r\n        return {\r\n            type: TriggerType.CONTAINER_TYPE,\r\n            operation: action,\r\n            nodes: [],\r\n            uid: stringUtils.generateIdentifier()\r\n        };\r\n    }\r\n    buildItem(value) {\r\n        return {\r\n            type: TriggerType.ITEM_TYPE,\r\n            operation: null,\r\n            selectedSegment: {\r\n                code: value\r\n            },\r\n            nodes: [],\r\n            uid: stringUtils.generateIdentifier()\r\n        };\r\n    }\r\n    getBaseData() {\r\n        const data = this.buildContainer(TriggerActionId.AND);\r\n        return [data];\r\n    }\r\n    buildExpressionFromTrigger(expression) {\r\n        let data;\r\n        if (this.isGroupExpressionData(expression)) {\r\n            data = this.buildContainer(expression.operator);\r\n            data.nodes = expression.elements.map((item) => this.buildExpressionFromTrigger(item));\r\n        }\r\n        else if (this.isNegationExpressionData(expression)) {\r\n            data = this.buildContainer(TriggerActionId.NOT);\r\n            const element = this.buildExpressionFromTrigger(expression.element);\r\n            if (this.isGroupExpressionData(expression.element) &&\r\n                expression.element.operator === 'AND') {\r\n                data.nodes = element.nodes;\r\n            }\r\n            else {\r\n                data.nodes.push(element);\r\n            }\r\n        }\r\n        else if (this.isSegmentExpressionData(expression)) {\r\n            data = this.buildItem(expression.code);\r\n        }\r\n        return data;\r\n    }\r\n    buildSegmentTriggerData(trigger) {\r\n        const data = this.buildContainer(trigger.groupBy);\r\n        trigger.segments.forEach((segment) => {\r\n            data.nodes.push(this.buildItem(segment.code));\r\n        });\r\n        return [data];\r\n    }\r\n    buildExpressionTriggerData(trigger) {\r\n        const data = this.buildExpressionFromTrigger(trigger.expression);\r\n        return [data];\r\n    }\r\n};\r\n/* @ngInject */ TriggerService = __decorate([\r\n    SeDowngradeService()\r\n], /* @ngInject */ TriggerService);\r\nexport { /* @ngInject */ TriggerService };\r\n//# sourceMappingURL=TriggerService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationcommons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"TriggerService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/management/manageCustomizationView/TriggerService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/node_modules/.cache/rollup-plugin-typescript2/placeholder/management/manageCustomizationView/TriggerService.d.ts","writeByteOrderMark":false,"text":"import { TargetGroupState, TriggerAction, Trigger } from 'personalizationcommons';\r\nexport declare class TriggerService {\r\n    readonly actions: TriggerAction[];\r\n    private readonly supportedTypes;\r\n    isContainer(element: Trigger): boolean;\r\n    isEmptyContainer(element: Trigger): boolean;\r\n    isNotEmptyContainer(element: Trigger): boolean;\r\n    isDropzone(element: Trigger): boolean;\r\n    isItem(element: Trigger): boolean;\r\n    isValidExpression(element: Trigger): boolean;\r\n    buildTriggers(form: TargetGroupState, existingTriggers: Trigger[]): Trigger[];\r\n    buildData(triggers: any): Trigger[];\r\n    isDefault(triggers: Trigger[]): boolean;\r\n    getExpressionAsString(expressionContainer: Trigger): string;\r\n    private isElementOfType;\r\n    private isNegation;\r\n    private isDefaultData;\r\n    private isExpressionData;\r\n    private isSupportedTrigger;\r\n    private isDefaultTrigger;\r\n    private isSegmentTrigger;\r\n    private isExpressionTrigger;\r\n    private isGroupExpressionData;\r\n    private isSegmentExpressionData;\r\n    private isNegationExpressionData;\r\n    private buildSegmentsForTrigger;\r\n    private buildExpressionForTrigger;\r\n    private buildDefaultTrigger;\r\n    private buildExpressionTrigger;\r\n    private buildSegmentTrigger;\r\n    private mergeTriggers;\r\n    private buildContainer;\r\n    private buildItem;\r\n    private getBaseData;\r\n    private buildExpressionFromTrigger;\r\n    private buildSegmentTriggerData;\r\n    private buildExpressionTriggerData;\r\n}\r\n"}}
