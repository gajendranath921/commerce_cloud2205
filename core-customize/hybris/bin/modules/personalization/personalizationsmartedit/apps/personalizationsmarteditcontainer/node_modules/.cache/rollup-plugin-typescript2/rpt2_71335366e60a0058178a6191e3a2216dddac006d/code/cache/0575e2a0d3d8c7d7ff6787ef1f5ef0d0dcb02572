{"code":"import { __awaiter, __decorate, __metadata, __param } from \"tslib\";\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { cloneDeep } from 'lodash';\r\nimport { PersonalizationsmarteditMessageHandler, PersonalizationsmarteditUtils, TriggerType } from 'personalizationcommons';\r\nimport { stringUtils, YJQUERY_TOKEN } from 'smarteditcommons';\r\nimport { PersonalizationsmarteditRestService } from '../../../service/PersonalizationsmarteditRestService';\r\nimport { TriggerService } from '../TriggerService';\r\nimport { SegmentItemPrinterComponent } from './SegmentItemPrinterComponent';\r\nimport { SegmentNodeComponent } from './SegmentNodeComponent';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"SegmentViewComponent\", {\r\n    selector: 'segment-view',\r\n    template: `<label class=\"fd-form__label\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.targetgroupexpression\"></label><div><div class=\"form-group\"><segment-expression-as-html [segmentExpression]=\"expression[0]\"></segment-expression-as-html></div><div class=\"form-group\"><label class=\"fd-form__label\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments\"></label><se-select [model]=\"singleSegment.code\" (modelChange)=\"segmentSelectedEvent($event)\" [fetchStrategy]=\"segmentFetchStrategy\" [itemComponent]=\"segmentPrinterComponent\" [(reset)]=\"resetSelect\" [placeholder]=\"'personalization.modal.customizationvariationmanagement.targetgrouptab.segments.placeholder'\"></se-select></div><segment-node *ngFor=\"let node of expression\" [node]=\"node\" [expression]=\"expression\" [connectedDropListsIds]=\"connectedDropListsIds\" (expressionChange)=\"handleTreeUpdated($event)\" (onDrop)=\"onDropHandler($event)\" (onDragStart)=\"onDragStart($event)\"></segment-node></div>`\r\n});\r\nlet SegmentViewComponent = class SegmentViewComponent {\r\n    constructor(personalizationsmarteditRestService, personalizationsmarteditMessageHandler, triggerService, personalizationsmarteditUtils, translateService, yjQuery) {\r\n        this.personalizationsmarteditRestService = personalizationsmarteditRestService;\r\n        this.personalizationsmarteditMessageHandler = personalizationsmarteditMessageHandler;\r\n        this.triggerService = triggerService;\r\n        this.personalizationsmarteditUtils = personalizationsmarteditUtils;\r\n        this.translateService = translateService;\r\n        this.yjQuery = yjQuery;\r\n        this.expressionChange = new EventEmitter();\r\n        this.segments = [];\r\n        this.singleSegment = { code: null };\r\n        this.triggerLookupMap = {};\r\n        this.actions = this.triggerService.actions;\r\n        this.segmentPrinterComponent = SegmentItemPrinterComponent;\r\n        this.nodeTemplate = SegmentNodeComponent;\r\n        this.connectedDropListsIds = [];\r\n    }\r\n    ngOnInit() {\r\n        this.triggers = this.triggers || (this.targetGroupState.selectedVariation || {}).triggers;\r\n        this.expression = this.expression || this.targetGroupState.expression;\r\n        if (this.triggers && this.triggers.length > 0) {\r\n            this.expression = this.triggerService.buildData(this.triggers);\r\n        }\r\n        else {\r\n            this.expression = [\r\n                {\r\n                    uid: stringUtils.generateIdentifier(),\r\n                    type: TriggerType.CONTAINER_TYPE,\r\n                    operation: this.actions[0],\r\n                    nodes: []\r\n                }\r\n            ];\r\n        }\r\n        this.syncExpressionOnTriggerData();\r\n        this.elementToScroll = this.yjQuery('.se-slider-panel__body');\r\n        this.segmentFetchStrategy = {\r\n            fetchPage: (search, pageSize, currentPage) => this.loadSegmentItems(search, pageSize, currentPage),\r\n            fetchEntity: (id) => Promise.resolve(this.segments.find((segment) => segment.code === id))\r\n        };\r\n        this.getIdsRecursive(this.rootExpression);\r\n    }\r\n    get rootExpression() {\r\n        var _a;\r\n        return ((_a = this.expression) === null || _a === void 0 ? void 0 : _a.length) ? this.expression[0] : null;\r\n    }\r\n    segmentSelectedEvent(itemCode) {\r\n        if (!itemCode) {\r\n            this.singleSegment = { code: null };\r\n            return;\r\n        }\r\n        const item = this.segments.find((segment) => segment.code === itemCode);\r\n        this.expression = [\r\n            Object.assign(Object.assign({}, this.rootExpression), { nodes: [\r\n                    {\r\n                        type: TriggerType.ITEM_TYPE,\r\n                        operation: null,\r\n                        selectedSegment: item,\r\n                        nodes: [],\r\n                        uid: stringUtils.generateIdentifier()\r\n                    }\r\n                ].concat(this.rootExpression.nodes) })\r\n        ];\r\n        this.getIdsRecursive(this.rootExpression);\r\n        setTimeout(() => {\r\n            this.resetSelect();\r\n        });\r\n        this.syncExpressionOnTriggerData();\r\n    }\r\n    handleTreeUpdated(expression) {\r\n        this.triggerLookupMap = {};\r\n        this.expression = cloneDeep(expression);\r\n        this.getIdsRecursive(this.rootExpression);\r\n        this.syncExpressionOnTriggerData();\r\n    }\r\n    onDropHandler(event) {\r\n        this.scrollZoneVisible = false;\r\n        if (event.container.id === event.previousContainer.id) {\r\n            const container = this.triggerLookupMap[event.container.id];\r\n            moveItemInArray(container.nodes, event.previousIndex, event.currentIndex);\r\n        }\r\n        else {\r\n            const target = this.triggerLookupMap[event.container.id];\r\n            target.nodes.splice(event.currentIndex, 0, event.item.data);\r\n            const previous = this.triggerLookupMap[event.previousContainer.id];\r\n            previous.nodes.splice(previous.nodes.findIndex((n) => n.uid === event.item.data.uid), 1);\r\n        }\r\n        this.handleTreeUpdated(this.expression);\r\n    }\r\n    onDragStart() {\r\n        this.scrollZoneVisible = this.isScrollZoneVisible();\r\n    }\r\n    loadSegmentItems(search, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const response = yield this.personalizationsmarteditRestService.getSegments({\r\n                    code: search,\r\n                    pageSize,\r\n                    currentPage\r\n                });\r\n                this.personalizationsmarteditUtils.uniqueArray(this.segments, response.segments || []);\r\n                return Object.assign(Object.assign({}, response), { results: response.results.map((item) => (Object.assign(Object.assign({}, item), { id: item.code }))) });\r\n            }\r\n            catch (_a) {\r\n                this.personalizationsmarteditMessageHandler.sendError(this.translateService.instant('personalization.error.gettingsegments'));\r\n            }\r\n        });\r\n    }\r\n    syncExpressionOnTriggerData() {\r\n        this.expressionChange.emit(this.expression);\r\n    }\r\n    getIdsRecursive(item) {\r\n        this.triggerLookupMap[item.uid] = item;\r\n        (item.nodes || []).forEach((childItem) => {\r\n            if (!this.triggerService.isItem(childItem)) {\r\n                this.getIdsRecursive(childItem);\r\n            }\r\n        });\r\n        this.connectedDropListsIds = Object.keys(this.triggerLookupMap).reverse();\r\n    }\r\n    isScrollZoneVisible() {\r\n        const element = this.yjQuery('.se-slider-panel__body').get(0);\r\n        if (element) {\r\n            return element.scrollHeight > element.clientHeight;\r\n        }\r\n        return false;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], SegmentViewComponent.prototype, \"targetGroupState\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], SegmentViewComponent.prototype, \"expressionChange\", void 0);\r\nSegmentViewComponent = __decorate([\r\n    Component({\r\n        selector: 'segment-view',\r\n        template: `<label class=\"fd-form__label\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.targetgroupexpression\"></label><div><div class=\"form-group\"><segment-expression-as-html [segmentExpression]=\"expression[0]\"></segment-expression-as-html></div><div class=\"form-group\"><label class=\"fd-form__label\" translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments\"></label><se-select [model]=\"singleSegment.code\" (modelChange)=\"segmentSelectedEvent($event)\" [fetchStrategy]=\"segmentFetchStrategy\" [itemComponent]=\"segmentPrinterComponent\" [(reset)]=\"resetSelect\" [placeholder]=\"'personalization.modal.customizationvariationmanagement.targetgrouptab.segments.placeholder'\"></se-select></div><segment-node *ngFor=\"let node of expression\" [node]=\"node\" [expression]=\"expression\" [connectedDropListsIds]=\"connectedDropListsIds\" (expressionChange)=\"handleTreeUpdated($event)\" (onDrop)=\"onDropHandler($event)\" (onDragStart)=\"onDragStart($event)\"></segment-node></div>`\r\n    }),\r\n    __param(5, Inject(YJQUERY_TOKEN)),\r\n    __metadata(\"design:paramtypes\", [PersonalizationsmarteditRestService,\r\n        PersonalizationsmarteditMessageHandler,\r\n        TriggerService,\r\n        PersonalizationsmarteditUtils,\r\n        TranslateService, Function])\r\n], SegmentViewComponent);\r\nexport { SegmentViewComponent };\r\n//# sourceMappingURL=SegmentViewComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+cdk@8.2.3_ecb0ad61817e3ede6ce462931a5e5041/node_modules/@angular/cdk/drag-drop.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationcommons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/service/PersonalizationsmarteditRestService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/TriggerService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/segmentView/SegmentItemPrinterComponent.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/segmentView/SegmentNodeComponent.ts"],"map":"{\"version\":3,\"file\":\"SegmentViewComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/management/manageCustomizationView/segmentView/SegmentViewComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/node_modules/.cache/rollup-plugin-typescript2/placeholder/management/manageCustomizationView/segmentView/SegmentViewComponent.d.ts","writeByteOrderMark":false,"text":"import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport { EventEmitter, OnInit } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PersonalizationsmarteditMessageHandler, PersonalizationsmarteditUtils, Segment, TargetGroupState, Trigger, TriggerAction } from 'personalizationcommons';\r\nimport { FetchStrategy, SelectReset } from 'smarteditcommons';\r\nimport { PersonalizationsmarteditRestService } from '../../../service/PersonalizationsmarteditRestService';\r\nimport { TriggerService } from '../TriggerService';\r\nimport { SegmentItemPrinterComponent } from './SegmentItemPrinterComponent';\r\nimport { SegmentNodeComponent } from './SegmentNodeComponent';\r\nexport declare class SegmentViewComponent implements OnInit {\r\n    private personalizationsmarteditRestService;\r\n    private personalizationsmarteditMessageHandler;\r\n    private triggerService;\r\n    private personalizationsmarteditUtils;\r\n    private translateService;\r\n    private yjQuery;\r\n    targetGroupState: TargetGroupState;\r\n    expressionChange: EventEmitter<Trigger[]>;\r\n    expression: Trigger[];\r\n    segmentPrinterComponent: typeof SegmentItemPrinterComponent;\r\n    nodeTemplate: typeof SegmentNodeComponent;\r\n    elementToScroll: JQuery<HTMLElement>;\r\n    scrollZoneVisible: boolean;\r\n    actions: TriggerAction[];\r\n    segments: Segment[];\r\n    singleSegment: Segment;\r\n    segmentFetchStrategy: FetchStrategy<Segment>;\r\n    resetSelect: SelectReset;\r\n    connectedDropListsIds: string[];\r\n    private triggers;\r\n    private triggerLookupMap;\r\n    constructor(personalizationsmarteditRestService: PersonalizationsmarteditRestService, personalizationsmarteditMessageHandler: PersonalizationsmarteditMessageHandler, triggerService: TriggerService, personalizationsmarteditUtils: PersonalizationsmarteditUtils, translateService: TranslateService, yjQuery: JQueryStatic);\r\n    ngOnInit(): void;\r\n    get rootExpression(): Trigger;\r\n    segmentSelectedEvent(itemCode: string): void;\r\n    handleTreeUpdated(expression: Trigger[]): void;\r\n    onDropHandler(event: CdkDragDrop<Trigger>): void;\r\n    onDragStart(): void;\r\n    loadSegmentItems(search: string, pageSize: number, currentPage: number): Promise<any>;\r\n    private syncExpressionOnTriggerData;\r\n    private getIdsRecursive;\r\n    private isScrollZoneVisible;\r\n}\r\n"}}
