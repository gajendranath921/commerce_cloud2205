{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { TriggerActionId } from 'personalizationcommons';\r\nimport { TriggerService } from '../TriggerService';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"SegmentExpressionAsHtmlComponent\", {\r\n    selector: 'segment-expression-as-html',\r\n    template: `<span *ngFor=\"let word of expression\"><span *ngIf=\"operators.includes(word)\" class=\"pe-customization-modal__expression-text\">&nbsp;{{ segmentActionI18n[word] | translate }}&nbsp;</span><se-tooltip *ngIf=\"word === emptyGroup\" [triggers]=\"['mouseenter', 'mouseleave']\"><span se-tooltip-trigger class=\"pe-customization-modal__expression-alert-icon sap-icon--alert\"></span> <span se-tooltip-body translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.group.tooltip\"></span></se-tooltip><span *ngIf=\"!emptyGroupAndOperators.includes(word)\">{{ word }}</span></span>`,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n});\r\nlet SegmentExpressionAsHtmlComponent = class SegmentExpressionAsHtmlComponent {\r\n    constructor(triggerService) {\r\n        this.triggerService = triggerService;\r\n        this.expression = [];\r\n        this.segmentActionI18n = {\r\n            [TriggerActionId.AND]: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.and',\r\n            [TriggerActionId.OR]: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.or',\r\n            [TriggerActionId.NOT]: 'personalization.modal.customizationvariationmanagement.targetgrouptab.expression.not'\r\n        };\r\n        this.operators = ['AND', 'OR', 'NOT'];\r\n        this.emptyGroup = '[]';\r\n        this.emptyGroupAndOperators = this.operators.concat(this.emptyGroup);\r\n    }\r\n    ngOnInit() {\r\n        if (!this.segmentExpression) {\r\n            return;\r\n        }\r\n        this.update();\r\n    }\r\n    ngOnChanges() {\r\n        this.update();\r\n    }\r\n    update() {\r\n        this.expression = this.isSegmentExpression(this.segmentExpression)\r\n            ? this.buildExpression(this.segmentExpression)\r\n            : this.mapExpressionToString(this.segmentExpression);\r\n    }\r\n    buildExpression(segmentExpression) {\r\n        const expression = this.triggerService.buildData(segmentExpression)[0];\r\n        return this.mapExpressionToString(expression);\r\n    }\r\n    mapExpressionToString(expression) {\r\n        return this.triggerService.getExpressionAsString(expression).split(' ');\r\n    }\r\n    isSegmentExpression(expression) {\r\n        return typeof expression.operation === 'undefined';\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], SegmentExpressionAsHtmlComponent.prototype, \"segmentExpression\", void 0);\r\nSegmentExpressionAsHtmlComponent = __decorate([\r\n    Component({\r\n        selector: 'segment-expression-as-html',\r\n        template: `<span *ngFor=\"let word of expression\"><span *ngIf=\"operators.includes(word)\" class=\"pe-customization-modal__expression-text\">&nbsp;{{ segmentActionI18n[word] | translate }}&nbsp;</span><se-tooltip *ngIf=\"word === emptyGroup\" [triggers]=\"['mouseenter', 'mouseleave']\"><span se-tooltip-trigger class=\"pe-customization-modal__expression-alert-icon sap-icon--alert\"></span> <span se-tooltip-body translate=\"personalization.modal.customizationvariationmanagement.targetgrouptab.segments.group.tooltip\"></span></se-tooltip><span *ngIf=\"!emptyGroupAndOperators.includes(word)\">{{ word }}</span></span>`,\r\n        changeDetection: ChangeDetectionStrategy.OnPush\r\n    }),\r\n    __metadata(\"design:paramtypes\", [TriggerService])\r\n], SegmentExpressionAsHtmlComponent);\r\nexport { SegmentExpressionAsHtmlComponent };\r\n//# sourceMappingURL=SegmentExpressionAsHtmlComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationcommons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/src/management/manageCustomizationView/TriggerService.ts"],"map":"{\"version\":3,\"file\":\"SegmentExpressionAsHtmlComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/management/manageCustomizationView/segmentExpressionAsHtml/SegmentExpressionAsHtmlComponent.ts\"],\"names\":[],\"mappings\":\";AACA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAqB,MAAM,eAAe,CAAC;AAC7F,OAAO,EAAE,eAAe,EAA8B,MAAM,wBAAwB,CAAC;AAErF,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;0FACxC;IACP,QAAQ,EAAE,4BAA4B;IACtC,QAAQ,EAAE,olBAAolB;IAC9lB,eAAe,EAAE,uBAAuB,CAAC,MAAM;CAClD;AACD,IAAa,gCAAgC,GAA7C,MAAa,gCAAgC;IAUzC,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAC9C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAI,CAAC,iBAAiB,GAAG;YACrB,CAAC,eAAe,CAAC,GAAG,CAAC,EACjB,sFAAsF;YAC1F,CAAC,eAAe,CAAC,EAAE,CAAC,EAChB,qFAAqF;YACzF,CAAC,eAAe,CAAC,GAAG,CAAC,EACjB,sFAAsF;SAC7F,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACzE,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACzB,OAAO;SACV;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,WAAW;QACP,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,MAAM;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC9D,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC9C,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7D,CAAC;IAEO,eAAe,CAAC,iBAAoC;QACxD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IAEO,qBAAqB,CAAC,UAAmB;QAC7C,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5E,CAAC;IAEO,mBAAmB,CAAC,UAAe;QACvC,OAAO,OAAO,UAAU,CAAC,SAAS,KAAK,WAAW,CAAC;IACvD,CAAC;CACJ,CAAA;AAvDY;IAAR,KAAK,EAAE;;2EAA4D;AAD3D,gCAAgC;IAL5C,SAAS,CAAC;QACP,QAAQ,EAAE,4BAA4B;QACtC,QAAQ,EAAE,olBAAolB;QAC9lB,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAClD,CAAC;qCAWsC,cAAc;GAVzC,gCAAgC,CAwD5C;SAxDY,gCAAgC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/personalization/personalizationsmartedit/apps/personalizationsmarteditcontainer/node_modules/.cache/rollup-plugin-typescript2/placeholder/management/manageCustomizationView/segmentExpressionAsHtml/SegmentExpressionAsHtmlComponent.d.ts","writeByteOrderMark":false,"text":"import { OnChanges, OnInit } from '@angular/core';\r\nimport { SegmentExpression, Trigger } from 'personalizationcommons';\r\nimport { TypedMap } from 'smarteditcommons';\r\nimport { TriggerService } from '../TriggerService';\r\nexport declare class SegmentExpressionAsHtmlComponent implements OnInit, OnChanges {\r\n    private triggerService;\r\n    segmentExpression: SegmentExpression | Trigger | undefined;\r\n    expression: string[];\r\n    readonly segmentActionI18n: TypedMap<string>;\r\n    readonly operators: string[];\r\n    readonly emptyGroup: string;\r\n    readonly emptyGroupAndOperators: string[];\r\n    constructor(triggerService: TriggerService);\r\n    ngOnInit(): void;\r\n    ngOnChanges(): void;\r\n    private update;\r\n    private buildExpression;\r\n    private mapExpressionToString;\r\n    private isSegmentExpression;\r\n}\r\n"}}
