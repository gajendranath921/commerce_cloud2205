{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CrossFrameEventService, IAlertService, IAuthenticationService, OperationContextRegistered, OPERATION_CONTEXT, IRestServiceFactory, SeDowngradeService, TimerService } from 'smarteditcommons';\r\nimport { JOB_STATUS } from '../dtos';\r\nimport { DEFAULT_SYNCHRONIZATION_EVENT } from '../modules/synchronizationPanel';\r\nexport const CATALOG_SYNC_INTERVAL_IN_MILLISECONDS = 5000;\r\nlet /* @ngInject */ SynchronizationService = class /* @ngInject */ SynchronizationService {\r\n    constructor(restServiceFactory, timerService, translateService, alertService, authenticationService, crossFrameEventService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.timerService = timerService;\r\n        this.translateService = translateService;\r\n        this.alertService = alertService;\r\n        this.authenticationService = authenticationService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        // Constants\r\n        this.BASE_URL = '/cmswebservices';\r\n        this.SYNC_JOB_INFO_BY_TARGET_URI = '/cmswebservices/v1/catalogs/:catalog/synchronizations/targetversions/:target';\r\n        this.SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI = '/cmswebservices/v1/catalogs/:catalog/versions/:source/synchronizations/versions/:target';\r\n        this.intervalHandle = {};\r\n        this.syncRequested = [];\r\n        this.syncJobInfoByTargetRestService = this.restServiceFactory.get(this.SYNC_JOB_INFO_BY_TARGET_URI);\r\n        this.syncJobInfoBySourceAndTargetRestService = this.restServiceFactory.get(this.SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI, 'catalog');\r\n    }\r\n    /**\r\n     * This method is used to synchronize a catalog between two catalog versions.\r\n     * It sends the SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event if successful.\r\n     */\r\n    updateCatalogSync(catalog) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n            this.addCatalogSyncRequest(jobKey);\r\n            try {\r\n                const response = yield this.syncJobInfoBySourceAndTargetRestService.save({\r\n                    catalog: catalog.catalogId,\r\n                    source: catalog.sourceCatalogVersion,\r\n                    target: catalog.targetCatalogVersion\r\n                });\r\n                return response;\r\n            }\r\n            catch (reason) {\r\n                const translationErrorMsg = this.translateService.instant('sync.running.error.msg', {\r\n                    catalogName: catalog.name\r\n                });\r\n                if (reason.statusText === 'Conflict') {\r\n                    this.alertService.showDanger({\r\n                        message: translationErrorMsg\r\n                    });\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getCatalogSyncStatus(catalog) {\r\n        if (catalog.sourceCatalogVersion) {\r\n            return this.getSyncJobInfoBySourceAndTarget(catalog);\r\n        }\r\n        else {\r\n            return this.getLastSyncJobInfoByTarget(catalog);\r\n        }\r\n    }\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getSyncJobInfoBySourceAndTarget(catalog) {\r\n        return this.syncJobInfoBySourceAndTargetRestService.get({\r\n            catalog: catalog.catalogId,\r\n            source: catalog.sourceCatalogVersion,\r\n            target: catalog.targetCatalogVersion\r\n        });\r\n    }\r\n    /**\r\n     * This method is used to get the status of the last synchronization job.\r\n     */\r\n    getLastSyncJobInfoByTarget(catalog) {\r\n        return this.syncJobInfoByTargetRestService.get({\r\n            catalog: catalog.catalogId,\r\n            target: catalog.targetCatalogVersion\r\n        });\r\n    }\r\n    /**\r\n     * This method starts the auto synchronization status update in a catalog between two given catalog versions.\r\n     */\r\n    startAutoGetSyncData(catalog, callback) {\r\n        const { catalogId, sourceCatalogVersion, targetCatalogVersion } = catalog;\r\n        const jobKey = this._getJobKey(catalogId, sourceCatalogVersion, targetCatalogVersion);\r\n        const syncJobTimer = this.timerService.createTimer(() => this._autoSyncCallback(catalog, callback, jobKey), CATALOG_SYNC_INTERVAL_IN_MILLISECONDS);\r\n        syncJobTimer.start();\r\n        this.intervalHandle[jobKey] = syncJobTimer;\r\n    }\r\n    /**\r\n     * This method stops the auto synchronization status update in a catalog between two given catalog versions\r\n     * or it marks the job with discardWhenNextSynced = true if there is a synchronization in progress. If the job is\r\n     * marked with discardWhenNextSynced = true then it will be discarded when the synchronization process is finished or aborted.\r\n     */\r\n    stopAutoGetSyncData(catalog) {\r\n        const jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n        if (this.intervalHandle[jobKey]) {\r\n            if (this.syncRequested.indexOf(jobKey) > -1) {\r\n                this.intervalHandle[jobKey].discardWhenNextSynced = true;\r\n            }\r\n            else {\r\n                this.intervalHandle[jobKey].stop();\r\n                this.intervalHandle[jobKey] = undefined;\r\n            }\r\n        }\r\n    }\r\n    _autoSyncCallback(catalog, callback, jobKey) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.authenticationService.isAuthenticated(this.BASE_URL);\r\n            if (!response) {\r\n                this.stopAutoGetSyncData(catalog);\r\n            }\r\n            const syncStatus = yield this.getCatalogSyncStatus(catalog);\r\n            const syncJob = this.syncRequestedCallback(catalog)(syncStatus);\r\n            callback(syncJob);\r\n            if (!this.intervalHandle[jobKey]) {\r\n                this.startAutoGetSyncData(catalog, callback);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Method sends SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event when synchronization process is finished.\r\n     * It also stops polling if the job is not needed anymore (i.e. was marked with discardWhenNextSynced = true).\r\n     */\r\n    syncRequestedCallback(catalog) {\r\n        const jobKey = this._getJobKey(catalog.catalogId, catalog.sourceCatalogVersion, catalog.targetCatalogVersion);\r\n        return (response) => {\r\n            if (this.catalogSyncInProgress(jobKey)) {\r\n                if (this.catalogSyncFinished(response)) {\r\n                    this.removeCatalogSyncRequest(jobKey);\r\n                    this.crossFrameEventService.publish(DEFAULT_SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED, catalog);\r\n                }\r\n                if ((this.intervalHandle[jobKey].discardWhenNextSynced &&\r\n                    this.catalogSyncFinished(response)) ||\r\n                    this.catalogSyncAborted(response)) {\r\n                    this.intervalHandle[jobKey].stop();\r\n                    this.intervalHandle[jobKey] = undefined;\r\n                    this.removeCatalogSyncRequest(jobKey);\r\n                }\r\n            }\r\n            return response;\r\n        };\r\n    }\r\n    catalogSyncInProgress(jobKey) {\r\n        return this.syncRequested.indexOf(jobKey) > -1;\r\n    }\r\n    catalogSyncFinished(response) {\r\n        return response.syncStatus === JOB_STATUS.FINISHED;\r\n    }\r\n    catalogSyncAborted(response) {\r\n        return response.syncStatus === JOB_STATUS.ABORTED;\r\n    }\r\n    removeCatalogSyncRequest(jobKey) {\r\n        const index = this.syncRequested.indexOf(jobKey);\r\n        if (index > -1) {\r\n            this.syncRequested.splice(index, 1);\r\n        }\r\n    }\r\n    addCatalogSyncRequest(jobKey) {\r\n        if (this.syncRequested.indexOf(jobKey) === -1) {\r\n            this.syncRequested.push(jobKey);\r\n        }\r\n    }\r\n    _getJobKey(catalogId, sourceCatalogVersion, targetCatalogVersion) {\r\n        return catalogId + '_' + sourceCatalogVersion + '_' + targetCatalogVersion;\r\n    }\r\n};\r\n/* @ngInject */ SynchronizationService = __decorate([\r\n    OperationContextRegistered('/cmswebservices/v1/catalogs/:catalog/synchronizations/targetversions/:target', OPERATION_CONTEXT.CMS),\r\n    OperationContextRegistered('/cmswebservices/v1/catalogs/:catalog/versions/:source/synchronizations/versions/:target', OPERATION_CONTEXT.CMS),\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        TimerService,\r\n        TranslateService,\r\n        IAlertService,\r\n        IAuthenticationService,\r\n        CrossFrameEventService])\r\n], /* @ngInject */ SynchronizationService);\r\nexport { /* @ngInject */ SynchronizationService };\r\n//# sourceMappingURL=synchronizationService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/modules/synchronizationPanel/index.ts"],"map":"{\"version\":3,\"file\":\"synchronizationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/synchronizationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/synchronizationService.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { CrossFrameEventService, IAlertService, IAuthenticationService, IRestServiceFactory, Timer, TimerService } from 'smarteditcommons';\r\nimport { ISyncJob } from '../dtos';\r\nexport declare const CATALOG_SYNC_INTERVAL_IN_MILLISECONDS = 5000;\r\nexport interface DiscardableTimer extends Timer {\r\n    discardWhenNextSynced?: boolean;\r\n}\r\nexport declare class SynchronizationService {\r\n    private restServiceFactory;\r\n    private timerService;\r\n    private translateService;\r\n    private alertService;\r\n    private authenticationService;\r\n    private crossFrameEventService;\r\n    private readonly BASE_URL;\r\n    private readonly SYNC_JOB_INFO_BY_TARGET_URI;\r\n    private readonly SYNC_JOB_INFO_BY_SOURCE_AND_TARGET_URI;\r\n    private intervalHandle;\r\n    private syncRequested;\r\n    private syncJobInfoByTargetRestService;\r\n    private syncJobInfoBySourceAndTargetRestService;\r\n    constructor(restServiceFactory: IRestServiceFactory, timerService: TimerService, translateService: TranslateService, alertService: IAlertService, authenticationService: IAuthenticationService, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     * This method is used to synchronize a catalog between two catalog versions.\r\n     * It sends the SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event if successful.\r\n     */\r\n    updateCatalogSync(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getCatalogSyncStatus(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job between two catalog versions.\r\n     */\r\n    getSyncJobInfoBySourceAndTarget(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method is used to get the status of the last synchronization job.\r\n     */\r\n    getLastSyncJobInfoByTarget(catalog: ISyncJob): Promise<ISyncJob>;\r\n    /**\r\n     * This method starts the auto synchronization status update in a catalog between two given catalog versions.\r\n     */\r\n    startAutoGetSyncData(catalog: ISyncJob, callback: (job: ISyncJob) => void): void;\r\n    /**\r\n     * This method stops the auto synchronization status update in a catalog between two given catalog versions\r\n     * or it marks the job with discardWhenNextSynced = true if there is a synchronization in progress. If the job is\r\n     * marked with discardWhenNextSynced = true then it will be discarded when the synchronization process is finished or aborted.\r\n     */\r\n    stopAutoGetSyncData(catalog: ISyncJob): void;\r\n    private _autoSyncCallback;\r\n    /**\r\n     * Method sends SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED event when synchronization process is finished.\r\n     * It also stops polling if the job is not needed anymore (i.e. was marked with discardWhenNextSynced = true).\r\n     */\r\n    private syncRequestedCallback;\r\n    private catalogSyncInProgress;\r\n    private catalogSyncFinished;\r\n    private catalogSyncAborted;\r\n    private removeCatalogSyncRequest;\r\n    private addCatalogSyncRequest;\r\n    private _getJobKey;\r\n}\r\n"}}
