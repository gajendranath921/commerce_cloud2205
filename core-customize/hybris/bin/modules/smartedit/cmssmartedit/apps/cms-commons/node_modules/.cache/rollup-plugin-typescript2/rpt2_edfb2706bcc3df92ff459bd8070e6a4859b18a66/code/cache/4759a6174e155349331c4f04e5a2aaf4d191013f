{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { authorizationEvictionTag, rarelyChangingContent, Cached, ISessionService, SeDowngradeService, LogService, IRestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available type permission names for a given item\r\n */\r\nexport var TypePermissionNames;\r\n(function (TypePermissionNames) {\r\n    TypePermissionNames[\"CREATE\"] = \"create\";\r\n    TypePermissionNames[\"READ\"] = \"read\";\r\n    TypePermissionNames[\"CHANGE\"] = \"change\";\r\n    TypePermissionNames[\"REMOVE\"] = \"remove\";\r\n})(TypePermissionNames || (TypePermissionNames = {}));\r\n/**\r\n * Rest Service to retrieve the type permissions.\r\n */\r\nlet /* @ngInject */ TypePermissionsRestService = class /* @ngInject */ TypePermissionsRestService {\r\n    constructor(logService, sessionService, restServiceFactory) {\r\n        this.logService = logService;\r\n        this.sessionService = sessionService;\r\n        this.URI = '/permissionswebservices/v1/permissions/types/search';\r\n        this.resource = restServiceFactory.get(this.URI);\r\n    }\r\n    /**\r\n     * Determines if the current user has CREATE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CREATE access to the type or false otherwise).\r\n     */\r\n    hasCreatePermissionForTypes(types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.CREATE);\r\n    }\r\n    /**\r\n     * Determines if the current user has READ access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionForTypes(types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.READ);\r\n    }\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CHANGE access to the type or false otherwise).\r\n     */\r\n    hasUpdatePermissionForTypes(types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.CHANGE);\r\n    }\r\n    /**\r\n     * Determines if the current user has REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has REMOVE access to the type or false otherwise).\r\n     */\r\n    hasDeletePermissionForTypes(types) {\r\n        return this.getPermissionsForTypesAndName(types, TypePermissionNames.REMOVE);\r\n    }\r\n    /**\r\n     * Determines if the current user has READ, CREATE, CHANGE, REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap of TypedMap object with key (the code) and\r\n     * value (true if the user has corresponding access to the type or false otherwise).\r\n     * {\r\n     *  \"typeA\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": true},\r\n     *  \"typeB\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": false}\r\n     * }\r\n     */\r\n    hasAllPermissionsForTypes(types) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const initialMap = {};\r\n            const permissionsForTypes = yield this.getAllPermissionsForTypes(types);\r\n            return permissionsForTypes.reduce((map, permissionsResult) => {\r\n                if (permissionsResult.permissions) {\r\n                    map[permissionsResult.id] = {};\r\n                    map[permissionsResult.id][TypePermissionNames.READ] = this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.READ);\r\n                    map[permissionsResult.id][TypePermissionNames.CHANGE] = this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.CHANGE);\r\n                    map[permissionsResult.id][TypePermissionNames.CREATE] = this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.CREATE);\r\n                    map[permissionsResult.id][TypePermissionNames.REMOVE] = this.getPermissionByNameAndResult(permissionsResult, TypePermissionNames.REMOVE);\r\n                }\r\n                return map;\r\n            }, initialMap);\r\n        });\r\n    }\r\n    getAllPermissionsForTypes(types) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (types.length === 0) {\r\n                return [];\r\n            }\r\n            const user = yield this.sessionService.getCurrentUsername();\r\n            if (!user) {\r\n                return [];\r\n            }\r\n            try {\r\n                const permissionNames = [\r\n                    TypePermissionNames.CREATE,\r\n                    TypePermissionNames.CHANGE,\r\n                    TypePermissionNames.READ,\r\n                    TypePermissionNames.REMOVE\r\n                ].join(',');\r\n                const result = yield this.resource.queryByPost({ principalUid: user }, { types: types.join(','), permissionNames });\r\n                return result.permissionsList || [];\r\n            }\r\n            catch (error) {\r\n                if (error) {\r\n                    this.logService.error(`TypePermissionsRestService - no composed types ${types} exist`);\r\n                }\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    getPermissionByNameAndResult(permissionsResult, permissionName) {\r\n        const foundPermission = permissionsResult.permissions.find((permission) => permission.key === permissionName);\r\n        return JSON.parse(foundPermission.value);\r\n    }\r\n    getPermissionsForTypesAndName(types, permissionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const permissionsForTypes = yield this.getAllPermissionsForTypes(types);\r\n            return permissionsForTypes.reduce((map, permissionsResult) => {\r\n                if (permissionsResult.permissions) {\r\n                    map[permissionsResult.id] = this.getPermissionByNameAndResult(permissionsResult, permissionName);\r\n                }\r\n                return map;\r\n            }, {});\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Array]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ TypePermissionsRestService.prototype, \"getAllPermissionsForTypes\", null);\r\n/* @ngInject */ TypePermissionsRestService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        ISessionService,\r\n        IRestServiceFactory])\r\n], /* @ngInject */ TypePermissionsRestService);\r\nexport { /* @ngInject */ TypePermissionsRestService };\r\n//# sourceMappingURL=TypePermissionsRestService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"TypePermissionsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/TypePermissionsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/TypePermissionsRestService.d.ts","writeByteOrderMark":false,"text":"import { ISessionService, TypedMap, LogService, IRestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available type permission names for a given item\r\n */\r\nexport declare enum TypePermissionNames {\r\n    CREATE = \"create\",\r\n    READ = \"read\",\r\n    CHANGE = \"change\",\r\n    REMOVE = \"remove\"\r\n}\r\n/**\r\n * Rest Service to retrieve the type permissions.\r\n */\r\nexport declare class TypePermissionsRestService {\r\n    private logService;\r\n    private sessionService;\r\n    private readonly URI;\r\n    private readonly resource;\r\n    constructor(logService: LogService, sessionService: ISessionService, restServiceFactory: IRestServiceFactory);\r\n    /**\r\n     * Determines if the current user has CREATE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CREATE access to the type or false otherwise).\r\n     */\r\n    hasCreatePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has READ access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has CHANGE access to the type or false otherwise).\r\n     */\r\n    hasUpdatePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap object with key (the code) and\r\n     * value (true if the user has REMOVE access to the type or false otherwise).\r\n     */\r\n    hasDeletePermissionForTypes(types: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has READ, CREATE, CHANGE, REMOVE access to the given types.\r\n     *\r\n     * @param types The codes of all types.\r\n     * @returns A promise that resolves to a TypedMap of TypedMap object with key (the code) and\r\n     * value (true if the user has corresponding access to the type or false otherwise).\r\n     * {\r\n     *  \"typeA\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": true},\r\n     *  \"typeB\": {\"read\": true, \"change\": false, \"create\": true, \"remove\": false}\r\n     * }\r\n     */\r\n    hasAllPermissionsForTypes(types: string[]): Promise<TypedMap<TypedMap<boolean>>>;\r\n    private getAllPermissionsForTypes;\r\n    private getPermissionByNameAndResult;\r\n    private getPermissionsForTypesAndName;\r\n}\r\n"}}
