{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { difference } from 'lodash';\r\nimport { authorizationEvictionTag, rarelyChangingContent, Cached, IRestServiceFactory, ISessionService, SeDowngradeService, LogService } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available attribute permission names for a given item\r\n */\r\nexport var AttributePermissionNames;\r\n(function (AttributePermissionNames) {\r\n    AttributePermissionNames[\"READ\"] = \"read\";\r\n    AttributePermissionNames[\"CHANGE\"] = \"change\";\r\n})(AttributePermissionNames || (AttributePermissionNames = {}));\r\n/**\r\n * Rest Service to retrieve attribute permissions.\r\n */\r\nlet /* @ngInject */ AttributePermissionsRestService = class /* @ngInject */ AttributePermissionsRestService {\r\n    constructor(restServiceFactory, sessionService, logService) {\r\n        this.sessionService = sessionService;\r\n        this.logService = logService;\r\n        this.ATTRIBUTE_PERMISSIONS_URI = '/permissionswebservices/v1/permissions/attributes/search';\r\n        this.permissionRestService = restServiceFactory.get(this.ATTRIBUTE_PERMISSIONS_URI);\r\n    }\r\n    /**\r\n     * Determines if the current user has READ access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their read permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their read permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionOnAttributesInType(type, attributeNames) {\r\n        return this.getPermissionsForAttributesAndNameByType(type, attributeNames, AttributePermissionNames.READ);\r\n    }\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their change permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their change permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasChangePermissionOnAttributesInType(type, attributeNames) {\r\n        return this.getPermissionsForAttributesAndNameByType(type, attributeNames, AttributePermissionNames.CHANGE);\r\n    }\r\n    /**\r\n     * @internal\r\n     *\r\n     * This method retrieves ALL the permissions the current user has on the given attributes. Attributes are expected with the following format:\r\n     * - type.attribute name\r\n     * For example, for an attribute called approvalStatus within the type ContentPage, the given attribute must be:\r\n     * - ContentPage.approvalStatus\r\n     *\r\n     * Note: This method is cached.\r\n     *\r\n     * @param attributes The list of attributes for which to retrieve permissions\r\n     * @returns A promise that resolves to a list of IPermissionsRestServiceResult, each of which\r\n     * represents the permissions of one of the given attributes.\r\n     */\r\n    getAllPermissionsForAttributes(attributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (attributes.length <= 0) {\r\n                return [];\r\n            }\r\n            const user = yield this.sessionService.getCurrentUsername();\r\n            if (!user) {\r\n                return [];\r\n            }\r\n            try {\r\n                const result = yield this.permissionRestService.queryByPost({ principalUid: user }, {\r\n                    attributes: attributes.join(','),\r\n                    permissionNames: AttributePermissionNames.CHANGE + ',' + AttributePermissionNames.READ\r\n                });\r\n                return result.permissionsList || [];\r\n            }\r\n            catch (error) {\r\n                if (error) {\r\n                    this.logService.error(`AttributePermissionsRestService - couldn't retrieve attribute permissions ${attributes}`);\r\n                }\r\n                return [];\r\n            }\r\n        });\r\n    }\r\n    getPermissionsForAttributesAndNameByType(type, attributes, permissionName) {\r\n        const convertedAttributeNames = attributes.map((attr) => type + '.' + attr);\r\n        return this.getPermissionsForAttributesAndName(convertedAttributeNames, permissionName).then((attributePermissionsByTypeMap) => attributePermissionsByTypeMap[type]);\r\n    }\r\n    getPermissionsForAttributesAndName(attributes, permissionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const result = yield this.getAllPermissionsForAttributes(attributes);\r\n            const allPermissions = this.concatPermissionsNotFound(attributes, result);\r\n            return allPermissions.reduce((attributePermissionsByTypeMap, permissionsResult) => {\r\n                if (permissionsResult.permissions) {\r\n                    const typeAttributePair = this.parsePermissionsResultId(permissionsResult.id);\r\n                    if (!attributePermissionsByTypeMap[typeAttributePair.type]) {\r\n                        attributePermissionsByTypeMap[typeAttributePair.type] = {};\r\n                    }\r\n                    attributePermissionsByTypeMap[typeAttributePair.type][typeAttributePair.attribute] = this.getPermissionByNameFromResult(permissionsResult, permissionName);\r\n                }\r\n                return attributePermissionsByTypeMap;\r\n            }, {});\r\n        });\r\n    }\r\n    parsePermissionsResultId(id) {\r\n        const tokens = id.split('.');\r\n        if (tokens.length !== 2) {\r\n            throw new Error('AttributePermissionsRestService - Received invalid attribute permissions');\r\n        }\r\n        return {\r\n            type: tokens[0],\r\n            attribute: tokens[1]\r\n        };\r\n    }\r\n    getPermissionByNameFromResult(permissionsResult, permissionName) {\r\n        const foundPermission = permissionsResult.permissions.find((permission) => permission.key === permissionName);\r\n        return JSON.parse(foundPermission.value);\r\n    }\r\n    concatPermissionsNotFound(attributes, permissionsFound) {\r\n        const permissionKeysFound = permissionsFound.map((permission) => permission.id);\r\n        const permissionKeysNotFound = difference(attributes, permissionKeysFound);\r\n        return permissionsFound.concat(permissionKeysNotFound.map((key) => ({\r\n            id: key,\r\n            permissions: [\r\n                {\r\n                    key: AttributePermissionNames.READ,\r\n                    value: 'false'\r\n                },\r\n                {\r\n                    key: AttributePermissionNames.CHANGE,\r\n                    value: 'false'\r\n                }\r\n            ]\r\n        })));\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Array]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ AttributePermissionsRestService.prototype, \"getAllPermissionsForAttributes\", null);\r\n/* @ngInject */ AttributePermissionsRestService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        ISessionService,\r\n        LogService])\r\n], /* @ngInject */ AttributePermissionsRestService);\r\nexport { /* @ngInject */ AttributePermissionsRestService };\r\n//# sourceMappingURL=AttributePermissionsRestService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"AttributePermissionsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/AttributePermissionsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/AttributePermissionsRestService.d.ts","writeByteOrderMark":false,"text":"import { IRestServiceFactory, ISessionService, TypedMap, LogService } from 'smarteditcommons';\r\n/**\r\n * An enum type representing available attribute permission names for a given item\r\n */\r\nexport declare enum AttributePermissionNames {\r\n    READ = \"read\",\r\n    CHANGE = \"change\"\r\n}\r\n/**\r\n * Rest Service to retrieve attribute permissions.\r\n */\r\nexport declare class AttributePermissionsRestService {\r\n    private sessionService;\r\n    private logService;\r\n    private readonly ATTRIBUTE_PERMISSIONS_URI;\r\n    private readonly permissionRestService;\r\n    constructor(restServiceFactory: IRestServiceFactory, sessionService: ISessionService, logService: LogService);\r\n    /**\r\n     * Determines if the current user has READ access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their read permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their read permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasReadPermissionOnAttributesInType(type: string, attributeNames: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * Determines if the current user has CHANGE access to the given attributes in the given type.\r\n     *\r\n     * @param type The type enclosing the attributes for which to evaluate their change permissions.\r\n     * @param attributeNames The names of the attributes for which to evaluate their change permissions.\r\n     * @returns A promise that resolves to a TypedMap object with key (the attribute name) and\r\n     * value (true if the user has READ access to the type or false otherwise).\r\n     */\r\n    hasChangePermissionOnAttributesInType(type: string, attributeNames: string[]): Promise<TypedMap<boolean>>;\r\n    /**\r\n     * @internal\r\n     *\r\n     * This method retrieves ALL the permissions the current user has on the given attributes. Attributes are expected with the following format:\r\n     * - type.attribute name\r\n     * For example, for an attribute called approvalStatus within the type ContentPage, the given attribute must be:\r\n     * - ContentPage.approvalStatus\r\n     *\r\n     * Note: This method is cached.\r\n     *\r\n     * @param attributes The list of attributes for which to retrieve permissions\r\n     * @returns A promise that resolves to a list of IPermissionsRestServiceResult, each of which\r\n     * represents the permissions of one of the given attributes.\r\n     */\r\n    private getAllPermissionsForAttributes;\r\n    private getPermissionsForAttributesAndNameByType;\r\n    private getPermissionsForAttributesAndName;\r\n    private parsePermissionsResultId;\r\n    private getPermissionByNameFromResult;\r\n    private concatPermissionsNotFound;\r\n}\r\n"}}
