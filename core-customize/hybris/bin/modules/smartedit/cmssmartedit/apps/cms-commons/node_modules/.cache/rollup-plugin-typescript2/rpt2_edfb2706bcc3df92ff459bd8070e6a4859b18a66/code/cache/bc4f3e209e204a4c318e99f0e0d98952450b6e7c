{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { pageChangeEvictionTag, rarelyChangingContent, Cached, IPageInfoService, IRestServiceFactory, SeDowngradeService, CmsitemsRestService } from 'smarteditcommons';\r\nimport { IPageContentSlotsComponentsRestService, PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI } from '../dao';\r\n/**\r\n * Service which manages component types and items.\r\n */\r\nlet /* @ngInject */ ComponentService = class /* @ngInject */ ComponentService {\r\n    constructor(restServiceFactory, cmsitemsRestService, pageInfoService, pageContentSlotsComponentsRestService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.pageContentSlotsComponentsRestService = pageContentSlotsComponentsRestService;\r\n        this.pageComponentTypesRestServiceURI = '/cmssmarteditwebservices/v1/catalogs/:catalogId/versions/:catalogVersion/pages/:pageId/types';\r\n        this.pageComponentTypesRestService = this.restServiceFactory.get(this.pageComponentTypesRestServiceURI);\r\n        this.restServiceForAddExistingComponent = this.restServiceFactory.get(PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI);\r\n    }\r\n    /**\r\n     * Fetches all component types that are applicable to the current page.\r\n     *\r\n     * @returns A promise resolving to a page of component types applicable to the current page.\r\n     */\r\n    getSupportedComponentTypesForCurrentPage(payload) {\r\n        return this.pageComponentTypesRestService.get(payload);\r\n    }\r\n    /**\r\n     * Given a component info and the component payload, a new componentItem is created and added to a slot\r\n     */\r\n    createNewComponent(componentInfo, componentPayload) {\r\n        const payload = {\r\n            name: componentInfo.name,\r\n            slotId: componentInfo.targetSlotId,\r\n            pageId: componentInfo.pageId,\r\n            position: componentInfo.position,\r\n            typeCode: componentInfo.componentType,\r\n            itemtype: componentInfo.componentType,\r\n            catalogVersion: componentInfo.catalogVersionUuid,\r\n            uid: '',\r\n            uuid: ''\r\n        };\r\n        // TODO: consider refactor. Remove the if statement, rely on TypeScript.\r\n        if (typeof componentPayload === 'object') {\r\n            for (const property in componentPayload) {\r\n                if (componentPayload.hasOwnProperty(property)) {\r\n                    payload[property] = componentPayload[property];\r\n                }\r\n            }\r\n        }\r\n        else if (componentPayload) {\r\n            throw new Error(`ComponentService.createNewComponent() - Illegal componentPayload - [${componentPayload}]`);\r\n        }\r\n        return this.cmsitemsRestService.create(payload);\r\n    }\r\n    /**\r\n     * Given a component payload related to an existing component, it will be updated with the new supplied values.\r\n     */\r\n    updateComponent(componentPayload) {\r\n        return this.cmsitemsRestService.update(componentPayload);\r\n    }\r\n    /**\r\n     * Add an existing component item to a slot.\r\n     *\r\n     * @param pageId used to identify the page containing the slot in the current template.\r\n     * @param componentId used to identify the existing component which will be added to the slot.\r\n     * @param slotId used to identify the slot in the current template.\r\n     * @param position used to identify the position in the slot in the current template.\r\n     */\r\n    addExistingComponent(pageId, componentId, slotId, position) {\r\n        return this.restServiceForAddExistingComponent.save({\r\n            pageId,\r\n            slotId,\r\n            componentId,\r\n            position\r\n        });\r\n    }\r\n    /**\r\n     * Load a component identified by its id.\r\n     */\r\n    loadComponentItem(id) {\r\n        return this.cmsitemsRestService.getById(id);\r\n    }\r\n    /**\r\n     * All existing component items for the provided content catalog are retrieved in the form of pages\r\n     * used for pagination especially when the result set is very large.\r\n     *\r\n     * E.g. Add Components -> Saved Components.\r\n     *\r\n     * @returns A promise resolving to a page of component items retrieved from the provided catalog version.\r\n     */\r\n    loadPagedComponentItemsByCatalogVersion(payload) {\r\n        const requestParams = {\r\n            pageSize: payload.pageSize,\r\n            currentPage: payload.page,\r\n            mask: payload.mask,\r\n            sort: 'name',\r\n            typeCode: 'AbstractCMSComponent',\r\n            catalogId: payload.catalogId,\r\n            catalogVersion: payload.catalogVersion,\r\n            itemSearchParams: ''\r\n        };\r\n        return this.cmsitemsRestService.get(requestParams);\r\n    }\r\n    /**\r\n     * Returns slot IDs for the given componentUuid.\r\n     *\r\n     * E.g. Edit Component on Storefront and click Save button.\r\n     */\r\n    getSlotsForComponent(componentUuid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const allSlotsToComponents = yield this.getContentSlotsForComponents();\r\n            return Object.entries(allSlotsToComponents)\r\n                .filter(([, components]) => components.find((component) => component.uuid === componentUuid))\r\n                .map(([slotId]) => slotId);\r\n        });\r\n    }\r\n    getContentSlotsForComponents() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageId = yield this.pageInfoService.getPageUID();\r\n            return yield this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageId);\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [pageChangeEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ ComponentService.prototype, \"getSupportedComponentTypesForCurrentPage\", null);\r\n/* @ngInject */ ComponentService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        CmsitemsRestService,\r\n        IPageInfoService,\r\n        IPageContentSlotsComponentsRestService])\r\n], /* @ngInject */ ComponentService);\r\nexport { /* @ngInject */ ComponentService };\r\n//# sourceMappingURL=ComponentService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dao/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"ComponentService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ComponentService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ComponentService.d.ts","writeByteOrderMark":false,"text":"import { IPageInfoService, IRestServiceFactory, CmsitemsRestService, IPage, CMSItem } from 'smarteditcommons';\r\nimport { IPageContentSlotsComponentsRestService } from '../dao';\r\nimport { CMSItemStructure } from '../dtos';\r\n/**\r\n * The payload that contains the information of the page of components to load\r\n */\r\nexport interface LoadPagedComponentsRequestPayload {\r\n    /**\r\n     * The current page number.\r\n     */\r\n    page: number;\r\n    /**\r\n     * The number of elements that a page can contain.\r\n     */\r\n    pageSize: number;\r\n    /**\r\n     * The search string to filter the results.\r\n     */\r\n    mask: string;\r\n    typeCode: string;\r\n    /**\r\n     * The id of the catalog for which to retrieve the component items.\r\n     */\r\n    catalogId: string;\r\n    /**\r\n     * The id of the catalog version for which to retrieve the component items.\r\n     */\r\n    catalogVersion: string;\r\n}\r\n/**\r\n * Describes the information of the component types to load.\r\n */\r\nexport interface LoadPagedComponentTypesRequestPayload {\r\n    catalogId: string;\r\n    catalogVersion: string;\r\n    pageId: string;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    mask: string;\r\n}\r\n/**\r\n * The basic information of the ComponentType to be created and added to the slot.\r\n */\r\ninterface ComponentInfo {\r\n    name: string;\r\n    /**\r\n     * Identifies the slot in the current template.\r\n     */\r\n    slotId: string;\r\n    /**\r\n     * Identifies the current page template.\r\n     */\r\n    pageId: string;\r\n    /**\r\n     * Identifies the position in the slot in the current template.\r\n     */\r\n    position: number;\r\n    typeCode: string;\r\n    itemtype: string;\r\n    catalogVersion: string;\r\n    targetSlotId?: string;\r\n    componentType?: string;\r\n    catalogVersionUuid?: string;\r\n}\r\n/**\r\n * Service which manages component types and items.\r\n */\r\nexport declare class ComponentService {\r\n    private restServiceFactory;\r\n    private cmsitemsRestService;\r\n    private pageInfoService;\r\n    private pageContentSlotsComponentsRestService;\r\n    private pageComponentTypesRestService;\r\n    private restServiceForAddExistingComponent;\r\n    private readonly pageComponentTypesRestServiceURI;\r\n    constructor(restServiceFactory: IRestServiceFactory, cmsitemsRestService: CmsitemsRestService, pageInfoService: IPageInfoService, pageContentSlotsComponentsRestService: IPageContentSlotsComponentsRestService);\r\n    /**\r\n     * Fetches all component types that are applicable to the current page.\r\n     *\r\n     * @returns A promise resolving to a page of component types applicable to the current page.\r\n     */\r\n    getSupportedComponentTypesForCurrentPage(payload: LoadPagedComponentTypesRequestPayload): Promise<IPage<CMSItemStructure>>;\r\n    /**\r\n     * Given a component info and the component payload, a new componentItem is created and added to a slot\r\n     */\r\n    createNewComponent(componentInfo: ComponentInfo, componentPayload: CMSItem): Promise<CMSItem>;\r\n    /**\r\n     * Given a component payload related to an existing component, it will be updated with the new supplied values.\r\n     */\r\n    updateComponent(componentPayload: CMSItem): Promise<CMSItem>;\r\n    /**\r\n     * Add an existing component item to a slot.\r\n     *\r\n     * @param pageId used to identify the page containing the slot in the current template.\r\n     * @param componentId used to identify the existing component which will be added to the slot.\r\n     * @param slotId used to identify the slot in the current template.\r\n     * @param position used to identify the position in the slot in the current template.\r\n     */\r\n    addExistingComponent(pageId: string, componentId: string, slotId: string, position: number): Promise<void>;\r\n    /**\r\n     * Load a component identified by its id.\r\n     */\r\n    loadComponentItem(id: string): Promise<CMSItem>;\r\n    /**\r\n     * All existing component items for the provided content catalog are retrieved in the form of pages\r\n     * used for pagination especially when the result set is very large.\r\n     *\r\n     * E.g. Add Components -> Saved Components.\r\n     *\r\n     * @returns A promise resolving to a page of component items retrieved from the provided catalog version.\r\n     */\r\n    loadPagedComponentItemsByCatalogVersion(payload: LoadPagedComponentsRequestPayload): Promise<IPage<CMSItem>>;\r\n    /**\r\n     * Returns slot IDs for the given componentUuid.\r\n     *\r\n     * E.g. Edit Component on Storefront and click Save button.\r\n     */\r\n    getSlotsForComponent(componentUuid: string): Promise<string[]>;\r\n    private getContentSlotsForComponents;\r\n}\r\nexport {};\r\n"}}
