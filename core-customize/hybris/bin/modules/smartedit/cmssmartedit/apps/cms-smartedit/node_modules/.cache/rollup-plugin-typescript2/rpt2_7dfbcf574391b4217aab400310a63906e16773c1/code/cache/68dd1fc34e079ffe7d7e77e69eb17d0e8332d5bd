{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { COMPONENT_CREATED_EVENT, COMPONENT_REMOVED_EVENT, COMPONENT_UPDATED_EVENT, IPageContentSlotsComponentsRestService, ISlotVisibilityService } from 'cmscommons';\r\nimport { CrossFrameEventService, IPageInfoService, LogService, SeDowngradeService, ComponentHandlerService, GatewayProxied } from 'smarteditcommons';\r\n/**\r\n * The slot visibility service provides methods to manage all backend calls and loads an internal\r\n * structure that provides the necessary data to the slot visibility button and slot visibility component.\r\n */\r\nlet /* @ngInject */ SlotVisibilityService = class /* @ngInject */ SlotVisibilityService extends ISlotVisibilityService {\r\n    constructor(crossFrameEventService, componentHandlerService, logService, pageInfoService, pageContentSlotsComponentsRestService) {\r\n        super();\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.componentHandlerService = componentHandlerService;\r\n        this.logService = logService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.pageContentSlotsComponentsRestService = pageContentSlotsComponentsRestService;\r\n        this.crossFrameEventService.subscribe(COMPONENT_CREATED_EVENT, () => this.clearComponentsCache());\r\n        this.crossFrameEventService.subscribe(COMPONENT_UPDATED_EVENT, () => this.clearComponentsCache());\r\n        this.crossFrameEventService.subscribe(COMPONENT_REMOVED_EVENT, () => this.clearComponentsCache());\r\n    }\r\n    /**\r\n     * Returns the list of hidden components for a given slotId\r\n     *\r\n     * @param slotId the slot id\r\n     *\r\n     * @returns A promise that resolves to a list of hidden components for the slotId\r\n     */\r\n    getHiddenComponents(slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const slots = yield this.getSlotToComponentsMap();\r\n            const filteredSlots = this.filterVisibleComponents(slots);\r\n            return filteredSlots[slotId] || [];\r\n        });\r\n    }\r\n    /**\r\n     * Reloads and cache's the pagesContentSlotsComponents for the current page in context.\r\n     * this method can be called when ever a component is added or modified to the slot so that the pagesContentSlotsComponents is re-evaluated.\r\n     *\r\n     * @returns A promise that resolves to the contentSlot - Components [] map for the page in context.\r\n     */\r\n    reloadSlotsInfo() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const pageUid = yield this.pageInfoService.getPageUID();\r\n                this.pageContentSlotsComponentsRestService.clearCache();\r\n                return this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageUid);\r\n            }\r\n            catch (exception) {\r\n                this.logService.error('SlotVisibilityService::reloadSlotsInfo - failed call to pageInfoService.getPageUID');\r\n                throw exception;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Function that filters the given SlotsToComponentsMap to return only those components that are hidden in the storefront.\r\n     * @param allSlotsToComponentsMap object containing slotId - components list.\r\n     *\r\n     * @return allSlotsToComponentsMap object containing slotId - components list.\r\n     */\r\n    filterVisibleComponents(allSlotsToComponentsMap) {\r\n        Object.keys(allSlotsToComponentsMap).forEach((slotId) => {\r\n            const jQueryComponents = this.componentHandlerService.getOriginalComponentsWithinSlot(slotId);\r\n            const componentsOnDOM = jQueryComponents\r\n                .get()\r\n                .map((component) => this.componentHandlerService.getId(component));\r\n            const hiddenComponents = allSlotsToComponentsMap[slotId].filter((component) => !componentsOnDOM.includes(component.uid));\r\n            allSlotsToComponentsMap[slotId] = hiddenComponents;\r\n        });\r\n        return allSlotsToComponentsMap;\r\n    }\r\n    /**\r\n     * Function to load slot to component map for the current page in context\r\n     */\r\n    getSlotToComponentsMap() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const pageUid = yield this.pageInfoService.getPageUID();\r\n                return this.pageContentSlotsComponentsRestService.getSlotsToComponentsMapForPageUid(pageUid);\r\n            }\r\n            catch (exception) {\r\n                this.logService.error('SlotVisibilityService::getSlotToComponentsMap - failed call to pageInfoService.getPageUID');\r\n                throw exception;\r\n            }\r\n        });\r\n    }\r\n    clearComponentsCache() {\r\n        this.pageContentSlotsComponentsRestService.clearCache();\r\n    }\r\n};\r\n/* @ngInject */ SlotVisibilityService = __decorate([\r\n    SeDowngradeService(ISlotVisibilityService),\r\n    GatewayProxied('getHiddenComponents'),\r\n    __metadata(\"design:paramtypes\", [CrossFrameEventService,\r\n        ComponentHandlerService,\r\n        LogService,\r\n        IPageInfoService,\r\n        IPageContentSlotsComponentsRestService])\r\n], /* @ngInject */ SlotVisibilityService);\r\nexport { /* @ngInject */ SlotVisibilityService };\r\n//# sourceMappingURL=SlotVisibilityServiceInner.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotVisibilityServiceInner.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotVisibilityServiceInner.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SlotVisibilityServiceInner.d.ts","writeByteOrderMark":false,"text":"import { ICMSComponent, IPageContentSlotsComponentsRestService, ISlotVisibilityService } from 'cmscommons';\r\nimport { CrossFrameEventService, IPageInfoService, LogService, TypedMap, ComponentHandlerService } from 'smarteditcommons';\r\n/**\r\n * The slot visibility service provides methods to manage all backend calls and loads an internal\r\n * structure that provides the necessary data to the slot visibility button and slot visibility component.\r\n */\r\nexport declare class SlotVisibilityService extends ISlotVisibilityService {\r\n    private crossFrameEventService;\r\n    private componentHandlerService;\r\n    private logService;\r\n    private pageInfoService;\r\n    private pageContentSlotsComponentsRestService;\r\n    constructor(crossFrameEventService: CrossFrameEventService, componentHandlerService: ComponentHandlerService, logService: LogService, pageInfoService: IPageInfoService, pageContentSlotsComponentsRestService: IPageContentSlotsComponentsRestService);\r\n    /**\r\n     * Returns the list of hidden components for a given slotId\r\n     *\r\n     * @param slotId the slot id\r\n     *\r\n     * @returns A promise that resolves to a list of hidden components for the slotId\r\n     */\r\n    getHiddenComponents(slotId: string): Promise<ICMSComponent[]>;\r\n    /**\r\n     * Reloads and cache's the pagesContentSlotsComponents for the current page in context.\r\n     * this method can be called when ever a component is added or modified to the slot so that the pagesContentSlotsComponents is re-evaluated.\r\n     *\r\n     * @returns A promise that resolves to the contentSlot - Components [] map for the page in context.\r\n     */\r\n    reloadSlotsInfo(): Promise<TypedMap<ICMSComponent[]>>;\r\n    /**\r\n     * Function that filters the given SlotsToComponentsMap to return only those components that are hidden in the storefront.\r\n     * @param allSlotsToComponentsMap object containing slotId - components list.\r\n     *\r\n     * @return allSlotsToComponentsMap object containing slotId - components list.\r\n     */\r\n    private filterVisibleComponents;\r\n    /**\r\n     * Function to load slot to component map for the current page in context\r\n     */\r\n    private getSlotToComponentsMap;\r\n    private clearComponentsCache;\r\n}\r\n"}}
