{"code":"import { __awaiter, __decorate, __metadata, __param } from \"tslib\";\r\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\r\nimport { DEFAULT_SYNCHRONIZATION_POLLING, DEFAULT_SYNCHRONIZATION_STATUSES } from 'cmscommons';\r\nimport { CrossFrameEventService, EVENT_OUTER_FRAME_CLICKED, IPageInfoService, CONTEXTUAL_MENU_ITEM_DATA } from 'smarteditcommons';\r\nimport { SlotSynchronizationService } from '../../services/SlotSynchronizationService';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"SlotSyncButtonComponent\", {\r\n    selector: 'slot-sync-button',\r\n    template: `<div class=\"se-slot-sync-button-template\" *ngIf=\"isReady\"><se-popup-overlay [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isPopupOpened\" (popupOverlayOnHide)=\"onPopupHide()\"><div><se-tooltip *ngIf=\"newSlotIsNotSynchronized && !slotIsShared\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [additionalClasses]=\"['se-slot-ctx-menu__tooltip-area']\"><span class=\"se-slot-ctx-menu__popover-ancor\" se-tooltip-trigger></span><div class=\"se-popover--inner-content\" se-tooltip-body translate=\"se.cms.slot.sync.from.page.level\"></div></se-tooltip><se-tooltip *ngIf=\"newSlotIsNotSynchronized && slotIsShared\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [additionalClasses]=\"['se-slot-ctx-menu__tooltip-area']\"><span class=\"se-slot-ctx-menu__popover-ancor\" se-tooltip-trigger></span><div se-tooltip-body class=\"se-popover--inner-content\" translate=\"se.cms.slot.sync.from.catalog.level\"></div></se-tooltip><button type=\"button\" (click)=\"dropdownToggle()\" class=\"se-slot-ctx-menu__dropdown-toggle\" [ngClass]=\"{\n                'se-slot-ctx-menu__dropdown-toggle--open': isPopupOpened,\n                'se-slot-ctx-menu__dropdown-toggle--disabled': newSlotIsNotSynchronized\n            }\" id=\"slot-sync-button-{{slotId}}\"><span class=\"sap-icon--synchronize se-slot-ctx-menu__dropdown-toggle-icon\"></span> <span *ngIf=\"!isSlotInSync\" class=\"sap-icon--alert se-slot-sync__btn-status se-slot-ctx-menu__dropdown-toggle-add-on\"></span></button></div><div class=\"se-slot__dropdown-menu\" se-popup-overlay-body><div class=\"se-toolbar-menu-content__wrapper\" *ngIf=\"isPopupOpened\"><div class=\"se-slot-contextual-menu__header\" translate=\"se.cms.synchronization.slot.header\"></div><div class=\"se-slot-sync__body\"><se-slot-synchronization-panel-wrapper [slotId]=\"slotId\"></se-slot-synchronization-panel-wrapper></div></div></div></se-popup-overlay></div>`,\r\n    styles: [`slot-sync-button .se-slot-ctx-menu__tooltip-area{position:absolute}slot-sync-button .se-slot-ctx-menu__tooltip-area,slot-sync-button .se-slot-ctx-menu__tooltip-area .fd-popover__control,slot-sync-button .se-slot-ctx-menu__tooltip-area>div{width:100%;height:100%}`],\r\n    encapsulation: ViewEncapsulation.None\r\n});\r\nlet SlotSyncButtonComponent = class SlotSyncButtonComponent {\r\n    constructor(contextualMenuItem, slotSynchronizationService, pageInfoService, crossFrameEventService) {\r\n        this.contextualMenuItem = contextualMenuItem;\r\n        this.slotSynchronizationService = slotSynchronizationService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.buttonName = 'slotSyncButton';\r\n        this.isPopupOpened = false;\r\n        this.isReady = false;\r\n        this.isSlotInSync = true;\r\n        this.newSlotIsNotSynchronized = false;\r\n        this.slotIsShared = false;\r\n        this.popupConfig = {\r\n            halign: 'left',\r\n            valign: 'bottom',\r\n            additionalClasses: [\r\n                'se-slot-ctx-menu__divider',\r\n                'se-slot-ctx-menu__dropdown-toggle-wrapper'\r\n            ]\r\n        };\r\n    }\r\n    ngOnInit() {\r\n        this.unregisterSyncPolling = this.crossFrameEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, () => this.getSyncStatus());\r\n        this.unregisterOuterFrameClicked = this.crossFrameEventService.subscribe(EVENT_OUTER_FRAME_CLICKED, () => {\r\n            this.isPopupOpened = false;\r\n        });\r\n        return this.getSyncStatus();\r\n    }\r\n    ngOnDestroy() {\r\n        this.unregisterSyncPolling();\r\n        this.unregisterOuterFrameClicked();\r\n    }\r\n    ngDoCheck() {\r\n        if (this.isPopupOpenedPreviousValue !== this.isPopupOpened) {\r\n            this.contextualMenuItem.setRemainOpen(this.buttonName, this.isPopupOpened);\r\n            this.isPopupOpenedPreviousValue = this.isPopupOpened;\r\n        }\r\n    }\r\n    get slotId() {\r\n        return this.contextualMenuItem.componentAttributes.smarteditComponentId;\r\n    }\r\n    dropdownToggle() {\r\n        this.isPopupOpened = !this.isPopupOpened;\r\n    }\r\n    onPopupHide() {\r\n        this.isPopupOpened = false;\r\n    }\r\n    getSyncStatus() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageUUID = yield this.pageInfoService.getPageUUID();\r\n            const syncStatus = yield this.slotSynchronizationService.getSyncStatus(pageUUID, this.slotId);\r\n            if (this.slotSynchronizationService.syncStatusExists(syncStatus)) {\r\n                this.isSlotInSync = this.statusIsInSync(syncStatus);\r\n                this.newSlotIsNotSynchronized = this.slotHasBeenSynchronizedAtLeastOnce(syncStatus);\r\n                this.slotIsShared = syncStatus.fromSharedDependency;\r\n                this.isReady = true;\r\n            }\r\n            else {\r\n                this.isReady = false;\r\n            }\r\n        });\r\n    }\r\n    statusIsInSync(syncStatus) {\r\n        return (syncStatus === null || syncStatus === void 0 ? void 0 : syncStatus.status) === DEFAULT_SYNCHRONIZATION_STATUSES.IN_SYNC;\r\n    }\r\n    slotHasBeenSynchronizedAtLeastOnce(syncStatus) {\r\n        return !syncStatus.lastSyncStatus;\r\n    }\r\n};\r\nSlotSyncButtonComponent = __decorate([\r\n    Component({\r\n        selector: 'slot-sync-button',\r\n        template: `<div class=\"se-slot-sync-button-template\" *ngIf=\"isReady\"><se-popup-overlay [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isPopupOpened\" (popupOverlayOnHide)=\"onPopupHide()\"><div><se-tooltip *ngIf=\"newSlotIsNotSynchronized && !slotIsShared\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [additionalClasses]=\"['se-slot-ctx-menu__tooltip-area']\"><span class=\"se-slot-ctx-menu__popover-ancor\" se-tooltip-trigger></span><div class=\"se-popover--inner-content\" se-tooltip-body translate=\"se.cms.slot.sync.from.page.level\"></div></se-tooltip><se-tooltip *ngIf=\"newSlotIsNotSynchronized && slotIsShared\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [additionalClasses]=\"['se-slot-ctx-menu__tooltip-area']\"><span class=\"se-slot-ctx-menu__popover-ancor\" se-tooltip-trigger></span><div se-tooltip-body class=\"se-popover--inner-content\" translate=\"se.cms.slot.sync.from.catalog.level\"></div></se-tooltip><button type=\"button\" (click)=\"dropdownToggle()\" class=\"se-slot-ctx-menu__dropdown-toggle\" [ngClass]=\"{\n                'se-slot-ctx-menu__dropdown-toggle--open': isPopupOpened,\n                'se-slot-ctx-menu__dropdown-toggle--disabled': newSlotIsNotSynchronized\n            }\" id=\"slot-sync-button-{{slotId}}\"><span class=\"sap-icon--synchronize se-slot-ctx-menu__dropdown-toggle-icon\"></span> <span *ngIf=\"!isSlotInSync\" class=\"sap-icon--alert se-slot-sync__btn-status se-slot-ctx-menu__dropdown-toggle-add-on\"></span></button></div><div class=\"se-slot__dropdown-menu\" se-popup-overlay-body><div class=\"se-toolbar-menu-content__wrapper\" *ngIf=\"isPopupOpened\"><div class=\"se-slot-contextual-menu__header\" translate=\"se.cms.synchronization.slot.header\"></div><div class=\"se-slot-sync__body\"><se-slot-synchronization-panel-wrapper [slotId]=\"slotId\"></se-slot-synchronization-panel-wrapper></div></div></div></se-popup-overlay></div>`,\r\n        styles: [`slot-sync-button .se-slot-ctx-menu__tooltip-area{position:absolute}slot-sync-button .se-slot-ctx-menu__tooltip-area,slot-sync-button .se-slot-ctx-menu__tooltip-area .fd-popover__control,slot-sync-button .se-slot-ctx-menu__tooltip-area>div{width:100%;height:100%}`],\r\n        encapsulation: ViewEncapsulation.None\r\n    }),\r\n    __param(0, Inject(CONTEXTUAL_MENU_ITEM_DATA)),\r\n    __metadata(\"design:paramtypes\", [Object, SlotSynchronizationService,\r\n        IPageInfoService,\r\n        CrossFrameEventService])\r\n], SlotSyncButtonComponent);\r\nexport { SlotSyncButtonComponent };\r\n//# sourceMappingURL=SlotSyncButtonComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotSynchronizationService.ts"],"map":"{\"version\":3,\"file\":\"SlotSyncButtonComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/synchronize/SlotSyncButtonComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/synchronize/SlotSyncButtonComponent.d.ts","writeByteOrderMark":false,"text":"import { OnInit, OnDestroy, DoCheck } from '@angular/core';\r\nimport { CrossFrameEventService, PopupOverlayConfig, IPageInfoService, ContextualMenuItemData } from 'smarteditcommons';\r\nimport { SlotSynchronizationService } from '../../services/SlotSynchronizationService';\r\nexport declare class SlotSyncButtonComponent implements OnInit, OnDestroy, DoCheck {\r\n    private contextualMenuItem;\r\n    private slotSynchronizationService;\r\n    private pageInfoService;\r\n    private crossFrameEventService;\r\n    isPopupOpened: boolean;\r\n    isReady: boolean;\r\n    isSlotInSync: boolean;\r\n    newSlotIsNotSynchronized: boolean;\r\n    popupConfig: PopupOverlayConfig;\r\n    slotIsShared: boolean;\r\n    private buttonName;\r\n    private isPopupOpenedPreviousValue;\r\n    private unregisterOuterFrameClicked;\r\n    private unregisterSyncPolling;\r\n    constructor(contextualMenuItem: ContextualMenuItemData, slotSynchronizationService: SlotSynchronizationService, pageInfoService: IPageInfoService, crossFrameEventService: CrossFrameEventService);\r\n    ngOnInit(): Promise<void>;\r\n    ngOnDestroy(): void;\r\n    ngDoCheck(): void;\r\n    get slotId(): string;\r\n    dropdownToggle(): void;\r\n    onPopupHide(): void;\r\n    private getSyncStatus;\r\n    private statusIsInSync;\r\n    private slotHasBeenSynchronizedAtLeastOnce;\r\n}\r\n"}}
