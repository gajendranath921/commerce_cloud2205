{"code":"import { __awaiter, __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport { COMPONENT_CREATED_EVENT, COMPONENT_REMOVED_EVENT, COMPONENT_UPDATED_EVENT } from 'cmscommons';\r\nimport { CrossFrameEventService, EVENTS, LogService, OVERLAY_RERENDERED_EVENT, PromiseUtils, SeDowngradeService, UUID_ATTRIBUTE, YJQUERY_TOKEN, CMSModesService, CmsitemsRestService } from 'smarteditcommons';\r\n/**\r\n * This service is used to fetch and cache components information.\r\n * This service keeps track of components added, edited and removed. It also automatically fetches and caches components when they are visible in the viewport (and invalidates them).\r\n *\r\n * This service is intended to be used to improve the performance of the application by reducing the number of xhr calls to the cmsitems api.\r\n * Example:\r\n * - a component in the overlay that is doing a fetch to the cmsitems api should use this service instead of using cmsitemsRestService.\r\n *   When a lot of components are rendered in the overlay we want to avoid one xhr call per component, but instead use this service that is listening\r\n *   to the 'OVERLAY_RERENDERED_EVENT' and fetch components information in batch (POST to cmsitems endpoint with an Array of uuids).\r\n */\r\nlet /* @ngInject */ ComponentInfoService = class /* @ngInject */ ComponentInfoService {\r\n    constructor(yjQuery, logService, crossFrameEventService, cmsitemsRestService, promiseUtils, cMSModesService) {\r\n        this.yjQuery = yjQuery;\r\n        this.logService = logService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.cMSModesService = cMSModesService;\r\n        this.cachedComponents = {};\r\n        this.promisesQueue = {};\r\n        this.crossFrameEventService.subscribe(OVERLAY_RERENDERED_EVENT, (eventId, data) => {\r\n            this.onOverlayReRendered(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_CREATED_EVENT, (eventId, data) => {\r\n            this.onComponentAdded(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_UPDATED_EVENT, (eventId, data) => {\r\n            this.onComponentAdded(data);\r\n        });\r\n        this.crossFrameEventService.subscribe(COMPONENT_REMOVED_EVENT, (eventId, data) => {\r\n            this.onComponentRemoved(data);\r\n        });\r\n        // clear cache\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, () => this.clearCache());\r\n        this.crossFrameEventService.subscribe(EVENTS.USER_HAS_CHANGED, () => this.clearCache());\r\n    }\r\n    /**\r\n     * @internal\r\n     * Returns a Promise that will be resolved with the component identified by the given uuid.\r\n     * When called this method works like this:\r\n     * - If the component is in the cache, the promise resolves right away.\r\n     * - If the component is not in the cache, and the forceRetrieval flag is not set, this method won't call the cmsItem backend API right away.\r\n     *   Instead, it waits until the component is cached (e.g., it is added to the overlay).\r\n     * - If the forceRetrieval flag is set, then the method will call the cmsItem backend API right away.\r\n     *\r\n     * @param uuid The uuid of the item to retrieve\r\n     * @param forceRetrieval Boolean flag. It specifies whether to retrieve the cmsItem right away.\r\n     * @returns Promise that will be resolved only if the component was added previously in the overlay and if not will resolve only when the component is added to the overlay.\r\n     *\r\n     */\r\n    getById(uuid, forceRetrieval) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const uuidSelector = `[${UUID_ATTRIBUTE}='${uuid}']`;\r\n            if (!forceRetrieval &&\r\n                !this.cachedComponents[uuid] &&\r\n                !document.querySelectorAll(uuidSelector).length) {\r\n                // For hidden components that are not present in the DOM\r\n                forceRetrieval = true;\r\n            }\r\n            if (this.isComponentCached(uuid)) {\r\n                return this.cachedComponents[uuid];\r\n            }\r\n            else if (forceRetrieval) {\r\n                return this.getComponentDataByUUID(uuid);\r\n            }\r\n            else {\r\n                const deferred = this.promisesQueue[uuid] || this.promiseUtils.defer();\r\n                if (!this.promisesQueue[uuid]) {\r\n                    this.promisesQueue[uuid] = deferred;\r\n                }\r\n                return deferred.promise;\r\n            }\r\n        });\r\n    }\r\n    resolvePromises(data) {\r\n        (data.response ? data.response : [data]).forEach((component) => {\r\n            this.cachedComponents[component.uuid] = component;\r\n            if (this.promisesQueue[component.uuid]) {\r\n                this.promisesQueue[component.uuid].resolve(component);\r\n                delete this.promisesQueue[component.uuid];\r\n            }\r\n        });\r\n    }\r\n    rejectPromises(uuids, error) {\r\n        this.logService.error('componentInfoService:: getById error:', error.message);\r\n        uuids.forEach((uuid) => {\r\n            if (this.promisesQueue[uuid]) {\r\n                this.promisesQueue[uuid].reject(error);\r\n                delete this.promisesQueue[uuid];\r\n            }\r\n        });\r\n    }\r\n    getComponentDataByUUID(uuid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const response = yield this.cmsitemsRestService.getById(uuid);\r\n                this.resolvePromises(response);\r\n                return this.cachedComponents[uuid];\r\n            }\r\n            catch (error) {\r\n                this.rejectPromises([uuid], error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    getComponentsDataByUUIDs(uuids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const components = yield this.cmsitemsRestService.getByIds(uuids, 'DEFAULT');\r\n                this.resolvePromises(components);\r\n            }\r\n            catch (e) {\r\n                this.rejectPromises(uuids, e);\r\n            }\r\n        });\r\n    }\r\n    onComponentsAddedToOverlay(addedComponentsDomElements) {\r\n        const uuids = addedComponentsDomElements\r\n            .map((component) => this.yjQuery(component).attr(UUID_ATTRIBUTE))\r\n            .filter((uuid) => !Object.keys(this.cachedComponents).includes(uuid));\r\n        if (uuids.length) {\r\n            this.getComponentsDataByUUIDs(uuids);\r\n        }\r\n    }\r\n    // delete from the cache the components that were removed from the DOM\r\n    // note: components that are still in the DOM were only removed from the overlay\r\n    onComponentsRemovedFromOverlay(removedComponentsDomElements) {\r\n        removedComponentsDomElements\r\n            .filter((component) => {\r\n            const uuidSelector = `[${UUID_ATTRIBUTE}='${this.yjQuery(component).attr(UUID_ATTRIBUTE)}']`;\r\n            return !this.yjQuery(uuidSelector).length;\r\n        })\r\n            .filter((component) => Object.keys(this.cachedComponents).includes(this.yjQuery(component).attr(UUID_ATTRIBUTE)))\r\n            .map((component) => this.yjQuery(component).attr(UUID_ATTRIBUTE))\r\n            .forEach((uuid) => {\r\n            delete this.cachedComponents[uuid];\r\n        });\r\n    }\r\n    forceAddComponent(cmsComponentToAdd) {\r\n        this.resolvePromises({\r\n            response: [cmsComponentToAdd]\r\n        });\r\n    }\r\n    forceRemoveComponent(componentToRemove) {\r\n        delete this.cachedComponents[componentToRemove.uuid];\r\n    }\r\n    isComponentCached(componentUuid) {\r\n        return !!this.cachedComponents[componentUuid];\r\n    }\r\n    clearCache() {\r\n        this.cachedComponents = {};\r\n        this.promisesQueue = {};\r\n    }\r\n    //  CMSX-10058: In versioning perspective, edit page is not allowed, do not need to update the component cache\r\n    onOverlayReRendered(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const isVersioningPerspectiveActive = yield this.cMSModesService.isVersioningPerspectiveActive();\r\n            if (data && !isVersioningPerspectiveActive) {\r\n                if (data.addedComponents && data.addedComponents.length) {\r\n                    this.onComponentsAddedToOverlay(data.addedComponents);\r\n                }\r\n                if (data.removedComponents && data.removedComponents.length) {\r\n                    this.onComponentsRemovedFromOverlay(data.removedComponents);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // Components added & removed from storefront page.\r\n    onComponentAdded(data) {\r\n        this.forceAddComponent(data);\r\n    }\r\n    onComponentRemoved(data) {\r\n        this.forceRemoveComponent(data);\r\n    }\r\n};\r\n/* @ngInject */ ComponentInfoService = __decorate([\r\n    SeDowngradeService(),\r\n    __param(0, Inject(YJQUERY_TOKEN)),\r\n    __metadata(\"design:paramtypes\", [Function, LogService,\r\n        CrossFrameEventService,\r\n        CmsitemsRestService,\r\n        PromiseUtils,\r\n        CMSModesService])\r\n], /* @ngInject */ ComponentInfoService);\r\nexport { /* @ngInject */ ComponentInfoService };\r\n//# sourceMappingURL=ComponentInfoService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ComponentInfoService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ComponentInfoService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ComponentInfoService.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\n/// <reference types=\"jquery\" />\r\nimport { ICMSComponent } from 'cmscommons';\r\nimport { CrossFrameEventService, LogService, PromiseUtils, CMSModesService, CmsitemsRestService } from 'smarteditcommons';\r\n/**\r\n * This service is used to fetch and cache components information.\r\n * This service keeps track of components added, edited and removed. It also automatically fetches and caches components when they are visible in the viewport (and invalidates them).\r\n *\r\n * This service is intended to be used to improve the performance of the application by reducing the number of xhr calls to the cmsitems api.\r\n * Example:\r\n * - a component in the overlay that is doing a fetch to the cmsitems api should use this service instead of using cmsitemsRestService.\r\n *   When a lot of components are rendered in the overlay we want to avoid one xhr call per component, but instead use this service that is listening\r\n *   to the 'OVERLAY_RERENDERED_EVENT' and fetch components information in batch (POST to cmsitems endpoint with an Array of uuids).\r\n */\r\nexport declare class ComponentInfoService {\r\n    private yjQuery;\r\n    private logService;\r\n    private crossFrameEventService;\r\n    private cmsitemsRestService;\r\n    private promiseUtils;\r\n    private cMSModesService;\r\n    private cachedComponents;\r\n    private promisesQueue;\r\n    constructor(yjQuery: JQueryStatic, logService: LogService, crossFrameEventService: CrossFrameEventService, cmsitemsRestService: CmsitemsRestService, promiseUtils: PromiseUtils, cMSModesService: CMSModesService);\r\n    /**\r\n     * @internal\r\n     * Returns a Promise that will be resolved with the component identified by the given uuid.\r\n     * When called this method works like this:\r\n     * - If the component is in the cache, the promise resolves right away.\r\n     * - If the component is not in the cache, and the forceRetrieval flag is not set, this method won't call the cmsItem backend API right away.\r\n     *   Instead, it waits until the component is cached (e.g., it is added to the overlay).\r\n     * - If the forceRetrieval flag is set, then the method will call the cmsItem backend API right away.\r\n     *\r\n     * @param uuid The uuid of the item to retrieve\r\n     * @param forceRetrieval Boolean flag. It specifies whether to retrieve the cmsItem right away.\r\n     * @returns Promise that will be resolved only if the component was added previously in the overlay and if not will resolve only when the component is added to the overlay.\r\n     *\r\n     */\r\n    getById(uuid: string, forceRetrieval?: boolean): Promise<ICMSComponent>;\r\n    private resolvePromises;\r\n    private rejectPromises;\r\n    private getComponentDataByUUID;\r\n    private getComponentsDataByUUIDs;\r\n    private onComponentsAddedToOverlay;\r\n    private onComponentsRemovedFromOverlay;\r\n    private forceAddComponent;\r\n    private forceRemoveComponent;\r\n    private isComponentCached;\r\n    private clearCache;\r\n    private onOverlayReRendered;\r\n    private onComponentAdded;\r\n    private onComponentRemoved;\r\n}\r\n"}}
