{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { SlotContainerService } from 'cmssmartedit/services/SlotContainerService';\r\nimport { IContextualMenuService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * This service is used to retrieve menu items that are available to be used with hidden components.\r\n */\r\nlet /* @ngInject */ HiddenComponentMenuService = class /* @ngInject */ HiddenComponentMenuService {\r\n    constructor(contextualMenuService, slotContainerService) {\r\n        this.contextualMenuService = contextualMenuService;\r\n        this.slotContainerService = slotContainerService;\r\n        this.MENU_ITEM_EXTERNAL = 'externalcomponentbutton';\r\n        this.MENU_ITEM_CLONE = 'clonecomponentbutton';\r\n        this.MENU_ITEM_REMOVE = 'se.cms.remove';\r\n        this.allowedItems = {};\r\n        this.setDefaultItemsAllowed();\r\n    }\r\n    /**\r\n     * This method is used to set the list of items that can be used with hidden components.\r\n     *\r\n     * @param itemsToAllow The ID of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    allowItemsInHiddenComponentMenu(itemsToAllow) {\r\n        itemsToAllow.forEach((item) => {\r\n            this.allowedItems[item] = true;\r\n        });\r\n    }\r\n    /**\r\n     * This method removes a provided set of allowed menu items if previously allowed.\r\n     *\r\n     * @param itemsToDisallow An array containing the ID's of the menu items that cannot be used any longer with hidden\r\n     * components.\r\n     *\r\n     */\r\n    removeAllowedItemsInHiddenComponentMenu(itemsToDisallow) {\r\n        itemsToDisallow.forEach((item) => {\r\n            delete this.allowedItems[item];\r\n        });\r\n    }\r\n    /**\r\n     * This method retrieves the list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     * @returns The list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    getAllowedItemsInHiddenComponentMenu() {\r\n        return Object.keys(this.allowedItems);\r\n    }\r\n    /**\r\n     * This method is used to retrieve the menu items available to be used in the provided component. To do so,\r\n     * this method retrieves contextual menu items available for the provided component and filters out the ones that cannot\r\n     * be used in hidden components. For example, assuming that a visible component has 'drag and drop' and 'remove'\r\n     * contextual menu items, if the component is hidden it should only have the remove button available, since the\r\n     * drag and drop operation is meaningless if the component is hidden. Hence, this service will retrieve only\r\n     * the remove item.\r\n     *\r\n     * @param component The hidden component for which to retrieve its menu items.\r\n     * @param slotId The SmartEdit id of the slot where the component is located.\r\n     *\r\n     * @returns Promise that resolves to an array of contextual menu items available for the component\r\n     * provided.\r\n     */\r\n    getItemsForHiddenComponent(component, slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.validateComponent(component);\r\n            const configuration = yield this.buildComponentInfo(slotId, component);\r\n            return this.getAllowedItemsForComponent(component, configuration);\r\n        });\r\n    }\r\n    validateComponent(component) {\r\n        if (!component) {\r\n            throw new Error('HiddenComponentMenuService - Component cannot be null.');\r\n        }\r\n        if (!component.uid) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a uid.');\r\n        }\r\n        if (!component.typeCode) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a type code.');\r\n        }\r\n        if (!component.uuid) {\r\n            throw new Error('HiddenComponentMenuService - Component needs a uuid.');\r\n        }\r\n    }\r\n    setDefaultItemsAllowed() {\r\n        this.allowItemsInHiddenComponentMenu([\r\n            this.MENU_ITEM_EXTERNAL,\r\n            this.MENU_ITEM_CLONE,\r\n            this.MENU_ITEM_REMOVE\r\n        ]);\r\n    }\r\n    buildComponentInfo(slotId, component) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentContainer = yield this.slotContainerService.getComponentContainer(slotId, component.uuid);\r\n            return {\r\n                componentType: component.typeCode,\r\n                componentId: component.uid,\r\n                componentAttributes: {\r\n                    smarteditCatalogVersionUuid: component.catalogVersion,\r\n                    smarteditComponentId: component.uid,\r\n                    smarteditComponentType: component.componentType,\r\n                    smarteditComponentUuid: component.uuid,\r\n                    smarteditElementUuid: null\r\n                },\r\n                containerType: componentContainer ? componentContainer.containerType : null,\r\n                containerId: componentContainer ? componentContainer.containerId : null,\r\n                element: null,\r\n                isComponentHidden: true,\r\n                slotId,\r\n                iLeftBtns: 0\r\n            };\r\n        });\r\n    }\r\n    getAllowedItemsForComponent(component, configuration) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const menuItems = this.contextualMenuService.getContextualMenuByType(component.typeCode);\r\n            const allowedActionsPromises = menuItems\r\n                .filter((item) => this.allowedItems[item.key] && !!item.condition)\r\n                .map((item) => __awaiter(this, void 0, void 0, function* () {\r\n                let isEnabled;\r\n                try {\r\n                    isEnabled = yield item.condition(configuration);\r\n                }\r\n                catch (_a) {\r\n                    isEnabled = false;\r\n                }\r\n                return { isEnabled, item };\r\n            }));\r\n            const allowedActions = (yield Promise.all(allowedActionsPromises))\r\n                .filter(({ isEnabled }) => isEnabled)\r\n                .map(({ item }) => item);\r\n            return { buttons: allowedActions, configuration };\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ HiddenComponentMenuService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IContextualMenuService,\r\n        SlotContainerService])\r\n], /* @ngInject */ HiddenComponentMenuService);\r\nexport { /* @ngInject */ HiddenComponentMenuService };\r\n//# sourceMappingURL=HiddenComponentMenuService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/IHiddenComponentMenu.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotContainerService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"HiddenComponentMenuService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/HiddenComponentMenuService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/HiddenComponentMenuService.d.ts","writeByteOrderMark":false,"text":"import { ICMSComponent } from 'cmscommons';\r\nimport { IHiddenComponentMenu } from 'cmssmartedit/services/IHiddenComponentMenu';\r\nimport { SlotContainerService } from 'cmssmartedit/services/SlotContainerService';\r\nimport { IContextualMenuService } from 'smarteditcommons';\r\n/**\r\n * This service is used to retrieve menu items that are available to be used with hidden components.\r\n */\r\nexport declare class HiddenComponentMenuService {\r\n    private contextualMenuService;\r\n    private slotContainerService;\r\n    private readonly MENU_ITEM_EXTERNAL;\r\n    private readonly MENU_ITEM_CLONE;\r\n    private readonly MENU_ITEM_REMOVE;\r\n    private allowedItems;\r\n    constructor(contextualMenuService: IContextualMenuService, slotContainerService: SlotContainerService);\r\n    /**\r\n     * This method is used to set the list of items that can be used with hidden components.\r\n     *\r\n     * @param itemsToAllow The ID of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    allowItemsInHiddenComponentMenu(itemsToAllow: string[]): void;\r\n    /**\r\n     * This method removes a provided set of allowed menu items if previously allowed.\r\n     *\r\n     * @param itemsToDisallow An array containing the ID's of the menu items that cannot be used any longer with hidden\r\n     * components.\r\n     *\r\n     */\r\n    removeAllowedItemsInHiddenComponentMenu(itemsToDisallow: string[]): void;\r\n    /**\r\n     * This method retrieves the list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     * @returns The list of IDs of the menu items that can be used with hidden components.\r\n     *\r\n     */\r\n    getAllowedItemsInHiddenComponentMenu(): string[];\r\n    /**\r\n     * This method is used to retrieve the menu items available to be used in the provided component. To do so,\r\n     * this method retrieves contextual menu items available for the provided component and filters out the ones that cannot\r\n     * be used in hidden components. For example, assuming that a visible component has 'drag and drop' and 'remove'\r\n     * contextual menu items, if the component is hidden it should only have the remove button available, since the\r\n     * drag and drop operation is meaningless if the component is hidden. Hence, this service will retrieve only\r\n     * the remove item.\r\n     *\r\n     * @param component The hidden component for which to retrieve its menu items.\r\n     * @param slotId The SmartEdit id of the slot where the component is located.\r\n     *\r\n     * @returns Promise that resolves to an array of contextual menu items available for the component\r\n     * provided.\r\n     */\r\n    getItemsForHiddenComponent(component: ICMSComponent, slotId: string): Promise<IHiddenComponentMenu>;\r\n    private validateComponent;\r\n    private setDefaultItemsAllowed;\r\n    private buildComponentInfo;\r\n    private getAllowedItemsForComponent;\r\n}\r\n"}}
