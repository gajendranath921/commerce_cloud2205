{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { SeDowngradeService, ISyncPollingService } from 'smarteditcommons';\r\nlet /* @ngInject */ SlotSynchronizationService = class /* @ngInject */ SlotSynchronizationService {\r\n    constructor(syncPollingService) {\r\n        this.syncPollingService = syncPollingService;\r\n    }\r\n    /**\r\n     * Returns the sync status for the slot.\r\n     * @param pageUUID - the page where the slot is situated.\r\n     * @param slotId - the slot id for which to retrieve the sync status.\r\n     * @returns the sync status object, or null if not found.\r\n     */\r\n    getSyncStatus(pageUUID, slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const syncStatus = yield this.syncPollingService.getSyncStatus(pageUUID);\r\n            const syncFromSelected = this.findSlotStatus(syncStatus.selectedDependencies || [], slotId);\r\n            if (syncFromSelected !== null) {\r\n                syncFromSelected.fromSharedDependency = false;\r\n                return syncFromSelected;\r\n            }\r\n            else {\r\n                const syncFromShared = this.findSlotStatus(syncStatus.sharedDependencies || [], slotId);\r\n                if (syncFromShared !== null) {\r\n                    syncFromShared.fromSharedDependency = true;\r\n                    return syncFromShared;\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n    performSync(array, uriContext) {\r\n        return this.syncPollingService.performSync(array, uriContext);\r\n    }\r\n    /**\r\n     * Verifies whether the sync status exists. The sync status for the slot does not exists when\r\n     * the slot comes from a parent catalog in multicountry environment.\r\n     * @param syncStatus - the object to verify.\r\n     * @returns true if the sync status exists, false otherwise.\r\n     */\r\n    syncStatusExists(syncStatus) {\r\n        return !!syncStatus;\r\n    }\r\n    /**\r\n     * Returns the slot sync status from the list of dependencies by slot id.\r\n     * @param dependencies - the list of dependencies to verify\r\n     * @param slotId - the slot for which to find a sync status\r\n     * @returns the sync status or null if cannot be find.\r\n     */\r\n    findSlotStatus(dependencies, slotId) {\r\n        return dependencies.find((slot) => slot.name === slotId) || null;\r\n    }\r\n};\r\n/* @ngInject */ SlotSynchronizationService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [ISyncPollingService])\r\n], /* @ngInject */ SlotSynchronizationService);\r\nexport { /* @ngInject */ SlotSynchronizationService };\r\n//# sourceMappingURL=SlotSynchronizationService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotSynchronizationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotSynchronizationService.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,EAGH,kBAAkB,EAElB,mBAAmB,EACtB,MAAM,kBAAkB,CAAC;AAG1B,iDAAA;IACI,YAAoB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE/D;;;;;OAKG;IACU,aAAa,CAAC,QAAgB,EAAE,MAAc;;YACvD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzE,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,oBAAoB,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YAC5F,IAAI,gBAAgB,KAAK,IAAI,EAAE;gBAC3B,gBAAgB,CAAC,oBAAoB,GAAG,KAAK,CAAC;gBAC9C,OAAO,gBAAgB,CAAC;aAC3B;iBAAM;gBACH,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,kBAAkB,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;gBACxF,IAAI,cAAc,KAAK,IAAI,EAAE;oBACzB,cAAc,CAAC,oBAAoB,GAAG,IAAI,CAAC;oBAC3C,OAAO,cAAc,CAAC;iBACzB;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,WAAW,CAAC,KAAyB,EAAE,UAAuB;QACjE,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACI,gBAAgB,CAAC,UAAuB;QAC3C,OAAO,CAAC,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACK,cAAc,CAAC,YAA2B,EAAE,MAAc;QAC9D,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC;IACrE,CAAC;CACJ,CAAA;AAhDD;IADC,kBAAkB,EAAE;qCAEuB,mBAAmB;8CA+C9D\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SlotSynchronizationService.d.ts","writeByteOrderMark":false,"text":"import { ISyncJob, ISyncStatus } from 'cmscommons';\r\nimport { IUriContext, Nullable, TypedMap, ISyncPollingService } from 'smarteditcommons';\r\nexport declare class SlotSynchronizationService {\r\n    private syncPollingService;\r\n    constructor(syncPollingService: ISyncPollingService);\r\n    /**\r\n     * Returns the sync status for the slot.\r\n     * @param pageUUID - the page where the slot is situated.\r\n     * @param slotId - the slot id for which to retrieve the sync status.\r\n     * @returns the sync status object, or null if not found.\r\n     */\r\n    getSyncStatus(pageUUID: string, slotId: string): Promise<Nullable<ISyncStatus>>;\r\n    performSync(array: TypedMap<string>[], uriContext: IUriContext): Promise<ISyncJob>;\r\n    /**\r\n     * Verifies whether the sync status exists. The sync status for the slot does not exists when\r\n     * the slot comes from a parent catalog in multicountry environment.\r\n     * @param syncStatus - the object to verify.\r\n     * @returns true if the sync status exists, false otherwise.\r\n     */\r\n    syncStatusExists(syncStatus: ISyncStatus): boolean;\r\n    /**\r\n     * Returns the slot sync status from the list of dependencies by slot id.\r\n     * @param dependencies - the list of dependencies to verify\r\n     * @param slotId - the slot for which to find a sync status\r\n     * @returns the sync status or null if cannot be find.\r\n     */\r\n    private findSlotStatus;\r\n}\r\n"}}
