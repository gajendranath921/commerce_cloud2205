{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { SeDowngradeService, CmsitemsRestService, PageContentSlotsService } from 'smarteditcommons';\r\n/**\r\n * SlotUnsharedService provides methods to interact with the backend for unshared slot information.\r\n */\r\nlet /* @ngInject */ SlotUnsharedService = class /* @ngInject */ SlotUnsharedService {\r\n    constructor(cmsItemsRestService, pageContentSlotsService) {\r\n        this.cmsItemsRestService = cmsItemsRestService;\r\n        this.pageContentSlotsService = pageContentSlotsService;\r\n        this.slotUnsharedStatus = 'OVERRIDE';\r\n    }\r\n    /**\r\n     * Checks if the slot is unshared and returns true in case slot is unshared and returns false if it is not.\r\n     * Based on this service method the slot unshared button is shown or hidden for a particular slotId.\r\n     *\r\n     * @param slotId The uid of the slot\r\n     *\r\n     * @returns promise that resolves to true if slot is unshared; Otherwise false.\r\n     */\r\n    isSlotUnshared(slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const slotStatus = yield this.pageContentSlotsService.getSlotStatus(slotId);\r\n            return slotStatus === this.slotUnsharedStatus;\r\n        });\r\n    }\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId) {\r\n        return this.pageContentSlotsService.isSlotShared(slotId);\r\n    }\r\n    /**\r\n     * This method is used to revert an unshared slot to a shared slot.\r\n     * This operation is immutable.\r\n     *\r\n     * @param slotUuid The uuid of the slot\r\n     */\r\n    revertToSharedSlot(slotUuid) {\r\n        return this.cmsItemsRestService.delete(slotUuid);\r\n    }\r\n};\r\n/* @ngInject */ SlotUnsharedService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [CmsitemsRestService,\r\n        PageContentSlotsService])\r\n], /* @ngInject */ SlotUnsharedService);\r\nexport { /* @ngInject */ SlotUnsharedService };\r\n//# sourceMappingURL=SlotUnsharedService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SlotUnsharedService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotUnsharedService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,uBAAuB,EAAE,MAAM,kBAAkB,CAAC;AAEpG;;GAEG;AAEH,0CAAA;IAGI,YACY,mBAAwC,EACxC,uBAAgD;QADhD,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,4BAAuB,GAAvB,uBAAuB,CAAyB;QAJ3C,uBAAkB,GAAG,UAAU,CAAC;IAK9C,CAAC;IAEJ;;;;;;;OAOG;IACU,cAAc,CAAC,MAAc;;YACtC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAE5E,OAAO,UAAU,KAAK,IAAI,CAAC,kBAAkB,CAAC;QAClD,CAAC;KAAA;IAED;;;;;;;OAOG;IACI,YAAY,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,QAAgB;QACtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;CACJ,CAAA;AA3CD;IADC,kBAAkB,EAAE;qCAKgB,mBAAmB;QACf,uBAAuB;uCAsC/D\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SlotUnsharedService.d.ts","writeByteOrderMark":false,"text":"import { CmsitemsRestService, PageContentSlotsService } from 'smarteditcommons';\r\n/**\r\n * SlotUnsharedService provides methods to interact with the backend for unshared slot information.\r\n */\r\nexport declare class SlotUnsharedService {\r\n    private cmsItemsRestService;\r\n    private pageContentSlotsService;\r\n    private readonly slotUnsharedStatus;\r\n    constructor(cmsItemsRestService: CmsitemsRestService, pageContentSlotsService: PageContentSlotsService);\r\n    /**\r\n     * Checks if the slot is unshared and returns true in case slot is unshared and returns false if it is not.\r\n     * Based on this service method the slot unshared button is shown or hidden for a particular slotId.\r\n     *\r\n     * @param slotId The uid of the slot\r\n     *\r\n     * @returns promise that resolves to true if slot is unshared; Otherwise false.\r\n     */\r\n    isSlotUnshared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * This method is used to revert an unshared slot to a shared slot.\r\n     * This operation is immutable.\r\n     *\r\n     * @param slotUuid The uuid of the slot\r\n     */\r\n    revertToSharedSlot(slotUuid: string): Promise<void>;\r\n}\r\n"}}
