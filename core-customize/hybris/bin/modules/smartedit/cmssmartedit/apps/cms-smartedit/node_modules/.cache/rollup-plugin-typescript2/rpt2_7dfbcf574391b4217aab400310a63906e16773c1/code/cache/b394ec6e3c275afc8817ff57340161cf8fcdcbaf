{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ComponentService, IComponentVisibilityAlertService, PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI, ISlotVisibilityService, COMPONENT_CREATED_EVENT, COMPONENT_UPDATED_EVENT } from 'cmscommons';\r\nimport { CrossFrameEventService, EVENT_SMARTEDIT_COMPONENT_UPDATED, IAlertService, IPageInfoService, IRenderService, IRestServiceFactory, ISharedDataService, LogService, objectUtils, SeDowngradeService, SystemEventService, EXPERIENCE_STORAGE_KEY, IEditorModalService } from 'smarteditcommons';\r\nconst contentSlotComponentsResourceLocation = `${PAGES_CONTENT_SLOT_COMPONENT_RESOURCE_URI}/pages/:pageId/contentslots/:currentSlotId/components/:componentId`;\r\n/**\r\n * This service provides methods that allow adding or removing components in the page.\r\n */\r\nlet /* @ngInject */ ComponentEditingFacade = class /* @ngInject */ ComponentEditingFacade {\r\n    constructor(alertService, componentService, componentVisibilityAlertService, crossFrameEventService, editorModalService, logService, pageInfoService, renderService, restServiceFactory, slotVisibilityService, sharedDataService, systemEventService, translateService) {\r\n        this.alertService = alertService;\r\n        this.componentService = componentService;\r\n        this.componentVisibilityAlertService = componentVisibilityAlertService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.editorModalService = editorModalService;\r\n        this.logService = logService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.renderService = renderService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.slotVisibilityService = slotVisibilityService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.systemEventService = systemEventService;\r\n        this.translateService = translateService;\r\n    }\r\n    /**\r\n     * Adds a new component to the slot and opens a component modal to edit its properties.\r\n     *\r\n     * @param slotInfo The target slot for the new component.\r\n     * @param catalogVersionUuid The catalog version on which to create the new component\r\n     * @param componentType The type of the new component to add.\r\n     * @param position The position in the slot where to add the new component.\r\n     *\r\n     */\r\n    addNewComponentToSlot(slotInfo, catalogVersionUuid, componentType, position) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentAttributes = {\r\n                smarteditComponentType: componentType,\r\n                catalogVersionUuid\r\n            };\r\n            const editedComponent = yield this.editorModalService.open(componentAttributes, slotInfo.targetSlotUUId, position);\r\n            this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                itemId: editedComponent.uuid,\r\n                itemType: editedComponent.itemtype,\r\n                catalogVersion: editedComponent.catalogVersion,\r\n                restricted: editedComponent.restricted,\r\n                slotId: slotInfo.targetSlotId,\r\n                visible: editedComponent.visible\r\n            });\r\n            this.crossFrameEventService.publish(COMPONENT_CREATED_EVENT, editedComponent);\r\n            return this.renderSlots([slotInfo.targetSlotId], editedComponent.uid, slotInfo.targetSlotId, true);\r\n        });\r\n    }\r\n    /**\r\n     * Adds an existing component to the slot and display an Alert whenever the component is either hidden or restricted.\r\n     *\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param dragInfo The dragInfo object containing the componentId, componentUuid and componentType.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    addExistingComponentToSlot(targetSlotId, dragInfo, position) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageId = yield this.pageInfoService.getPageUID();\r\n            let item;\r\n            try {\r\n                yield this.componentService.addExistingComponent(pageId, dragInfo.componentId, targetSlotId, position);\r\n                item = yield this.componentService.loadComponentItem(dragInfo.componentUuid);\r\n            }\r\n            catch (error) {\r\n                this.generateAndAlertErrorMessage(dragInfo.componentId, targetSlotId, error);\r\n                return Promise.reject();\r\n            }\r\n            this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                itemId: dragInfo.componentUuid,\r\n                itemType: dragInfo.componentType,\r\n                catalogVersion: item.catalogVersion,\r\n                restricted: item.restricted,\r\n                slotId: targetSlotId,\r\n                visible: item.visible\r\n            });\r\n            // 1. First update the cache.\r\n            this.systemEventService.publish(COMPONENT_UPDATED_EVENT, item);\r\n            // 2. Then replay decorators (via EVENT_SMARTEDIT_COMPONENT_UPDATED).\r\n            // This is important because there might be existing instances of the component in the page that need to\r\n            // be updated. For example, if the component was not shared, it would not show the SharedComponent contextual button.\r\n            // However, if a user adds another instance into the page then the component becomes shared. Both instances of the\r\n            // component must show that the component is shared now. Thus, the first instance needs to be updated too.\r\n            this.crossFrameEventService.publish(EVENT_SMARTEDIT_COMPONENT_UPDATED, {\r\n                componentId: dragInfo.componentId,\r\n                componentType: dragInfo.componentType,\r\n                componentUuid: dragInfo.componentUuid,\r\n                requiresReplayingDecorators: true\r\n            });\r\n            return this.renderSlots(targetSlotId, dragInfo.componentId, targetSlotId, true);\r\n        });\r\n    }\r\n    /**\r\n     * This methods clones an existing component to the slot by opening a component modal to edit its properties.\r\n     */\r\n    cloneExistingComponentToSlot(componentInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentItem = yield this.componentService\r\n                .loadComponentItem(componentInfo.dragInfo.componentUuid)\r\n                .catch((error) => {\r\n                this.generateAndAlertErrorMessage(componentInfo.dragInfo.componentId, componentInfo.targetSlotId, error);\r\n                return Promise.reject();\r\n            });\r\n            const experience = (yield this.sharedDataService.get(EXPERIENCE_STORAGE_KEY));\r\n            const component = objectUtils.copy(componentItem);\r\n            // While cloning an existing components, remove some parameters, reset catalogVersion to the version of the page.\r\n            // If cloning an existing component, prefix name and drop restrictions - doing this here will make generic editor dirty and enable save by default.\r\n            component.componentUuid = component.uuid;\r\n            component.cloneComponent = true;\r\n            component.catalogVersion = experience.pageContext.catalogVersionUuid;\r\n            component.name = `${this.translateService.instant('se.cms.component.name.clone.of.prefix')} ${component.name}`;\r\n            delete component.uuid;\r\n            delete component.uid;\r\n            delete component.slots;\r\n            delete component.restrictions;\r\n            delete component.creationtime;\r\n            delete component.modifiedtime;\r\n            const componentAttributes = {\r\n                smarteditComponentType: componentInfo.dragInfo.componentType,\r\n                catalogVersionUuid: experience.pageContext.catalogVersionUuid,\r\n                content: objectUtils.copy(component),\r\n                initialDirty: true\r\n            };\r\n            const updatedComponent = yield this.editorModalService.open(componentAttributes, componentInfo.targetSlotId, componentInfo.position);\r\n            this.componentVisibilityAlertService.checkAndAlertOnComponentVisibility({\r\n                itemId: updatedComponent.uuid,\r\n                itemType: updatedComponent.itemtype,\r\n                catalogVersion: updatedComponent.catalogVersion,\r\n                restricted: updatedComponent.restricted,\r\n                slotId: componentInfo.targetSlotId,\r\n                visible: updatedComponent.visible\r\n            });\r\n            this.crossFrameEventService.publish(COMPONENT_CREATED_EVENT, updatedComponent);\r\n            return this.renderSlots(componentInfo.targetSlotId, updatedComponent.uid, componentInfo.targetSlotId, true);\r\n        });\r\n    }\r\n    /**\r\n     * This methods moves a component from two slots in a page.\r\n     *\r\n     * @param sourceSlotId The ID of the slot where the component is initially located.\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param componentId The ID of the component to add into the slot.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    moveComponent(sourceSlotId, targetSlotId, componentId, position) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.contentSlotComponentsRestService =\r\n                this.contentSlotComponentsRestService ||\r\n                    this.restServiceFactory.get(contentSlotComponentsResourceLocation, 'componentId');\r\n            const pageId = yield this.pageInfoService.getPageUID();\r\n            try {\r\n                yield this.contentSlotComponentsRestService.update({\r\n                    pageId,\r\n                    currentSlotId: sourceSlotId,\r\n                    componentId,\r\n                    slotId: targetSlotId,\r\n                    position\r\n                });\r\n            }\r\n            catch (error) {\r\n                this.generateAndAlertErrorMessage(componentId, targetSlotId, error, {\r\n                    message: 'se.cms.draganddrop.move.failed',\r\n                    messagePlaceholders: {\r\n                        slotID: targetSlotId,\r\n                        componentID: componentId\r\n                    }\r\n                });\r\n                return Promise.reject();\r\n            }\r\n            return this.renderSlots([sourceSlotId, targetSlotId], componentId, targetSlotId);\r\n        });\r\n    }\r\n    generateAndAlertSuccessMessage(sourceComponentId, targetSlotId) {\r\n        this.alertService.showSuccess({\r\n            message: 'se.cms.draganddrop.success',\r\n            messagePlaceholders: {\r\n                sourceComponentId,\r\n                targetSlotId\r\n            }\r\n        });\r\n    }\r\n    generateAndAlertErrorMessage(sourceComponentId, targetSlotId, requestResponse, alertConf) {\r\n        if (this.hasErrorResponseErrors(requestResponse)) {\r\n            this.alertService.showDanger({\r\n                message: 'se.cms.draganddrop.error',\r\n                messagePlaceholders: {\r\n                    sourceComponentId,\r\n                    targetSlotId,\r\n                    detailedError: requestResponse.error.errors[0].message\r\n                }\r\n            });\r\n        }\r\n        else if (alertConf) {\r\n            this.alertService.showDanger(alertConf);\r\n        }\r\n    }\r\n    hasErrorResponseErrors(response) {\r\n        var _a, _b;\r\n        return !!(((_b = (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.length) > 0);\r\n    }\r\n    renderSlots(slots, sourceComponentId, targetSlotId, showSuccess) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.renderService.renderSlots(slots);\r\n            }\r\n            catch (error) {\r\n                this.logService.error(`${this.constructor.name}.renderSlots::renderService.renderSlots - targetSlotId:`, targetSlotId);\r\n                this.logService.error(error);\r\n                this.generateAndAlertErrorMessage(sourceComponentId, targetSlotId, error);\r\n                return Promise.reject(error);\r\n            }\r\n            try {\r\n                yield this.slotVisibilityService.reloadSlotsInfo();\r\n                if (showSuccess) {\r\n                    this.generateAndAlertSuccessMessage(sourceComponentId, targetSlotId);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.logService.error(`${this.constructor.name}.renderSlots::slotVisibilityService.reloadSlotsInfo`);\r\n                this.logService.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ ComponentEditingFacade = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IAlertService,\r\n        ComponentService,\r\n        IComponentVisibilityAlertService,\r\n        CrossFrameEventService,\r\n        IEditorModalService,\r\n        LogService,\r\n        IPageInfoService,\r\n        IRenderService,\r\n        IRestServiceFactory,\r\n        ISlotVisibilityService,\r\n        ISharedDataService,\r\n        SystemEventService,\r\n        TranslateService])\r\n], /* @ngInject */ ComponentEditingFacade);\r\nexport { /* @ngInject */ ComponentEditingFacade };\r\n//# sourceMappingURL=ComponentEditingFacade.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ComponentEditingFacade.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/dragAndDrop/ComponentEditingFacade.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/dragAndDrop/ComponentEditingFacade.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { ComponentService, IComponentVisibilityAlertService, ISlotVisibilityService } from 'cmscommons';\r\nimport { CrossFrameEventService, IAlertService, IPageInfoService, IRenderService, IRestServiceFactory, ISharedDataService, LogService, SystemEventService, IEditorModalService } from 'smarteditcommons';\r\nexport interface SlotInfo {\r\n    /** The Uid of the slot where to drop the component. */\r\n    targetSlotId: string;\r\n    /** The UUid of the slot where to drop the component. */\r\n    targetSlotUUId?: string;\r\n}\r\n/** Represents the properties of the component required to create a clone. */\r\ninterface CloneComponentInfo extends SlotInfo {\r\n    dragInfo: DragInfo;\r\n    /** The position in the slot where to add the new component. */\r\n    position: number;\r\n}\r\n/** Represents the component to be added to a slot. */\r\ninterface DragInfo {\r\n    componentId: string;\r\n    componentUuid: string;\r\n    componentType: string;\r\n}\r\n/**\r\n * This service provides methods that allow adding or removing components in the page.\r\n */\r\nexport declare class ComponentEditingFacade {\r\n    private alertService;\r\n    private componentService;\r\n    private componentVisibilityAlertService;\r\n    private crossFrameEventService;\r\n    private editorModalService;\r\n    private logService;\r\n    private pageInfoService;\r\n    private renderService;\r\n    private restServiceFactory;\r\n    private slotVisibilityService;\r\n    private sharedDataService;\r\n    private systemEventService;\r\n    private translateService;\r\n    private contentSlotComponentsRestService;\r\n    constructor(alertService: IAlertService, componentService: ComponentService, componentVisibilityAlertService: IComponentVisibilityAlertService, crossFrameEventService: CrossFrameEventService, editorModalService: IEditorModalService, logService: LogService, pageInfoService: IPageInfoService, renderService: IRenderService, restServiceFactory: IRestServiceFactory, slotVisibilityService: ISlotVisibilityService, sharedDataService: ISharedDataService, systemEventService: SystemEventService, translateService: TranslateService);\r\n    /**\r\n     * Adds a new component to the slot and opens a component modal to edit its properties.\r\n     *\r\n     * @param slotInfo The target slot for the new component.\r\n     * @param catalogVersionUuid The catalog version on which to create the new component\r\n     * @param componentType The type of the new component to add.\r\n     * @param position The position in the slot where to add the new component.\r\n     *\r\n     */\r\n    addNewComponentToSlot(slotInfo: SlotInfo, catalogVersionUuid: string, componentType: string, position: number): Promise<void>;\r\n    /**\r\n     * Adds an existing component to the slot and display an Alert whenever the component is either hidden or restricted.\r\n     *\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param dragInfo The dragInfo object containing the componentId, componentUuid and componentType.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    addExistingComponentToSlot(targetSlotId: string, dragInfo: DragInfo, position: number): Promise<void>;\r\n    /**\r\n     * This methods clones an existing component to the slot by opening a component modal to edit its properties.\r\n     */\r\n    cloneExistingComponentToSlot(componentInfo: CloneComponentInfo): Promise<void>;\r\n    /**\r\n     * This methods moves a component from two slots in a page.\r\n     *\r\n     * @param sourceSlotId The ID of the slot where the component is initially located.\r\n     * @param targetSlotId The ID of the slot where to drop the component.\r\n     * @param componentId The ID of the component to add into the slot.\r\n     * @param position The position in the slot where to add the component.\r\n     */\r\n    moveComponent(sourceSlotId: string, targetSlotId: string, componentId: string, position: number): Promise<void>;\r\n    private generateAndAlertSuccessMessage;\r\n    private generateAndAlertErrorMessage;\r\n    private hasErrorResponseErrors;\r\n    private renderSlots;\r\n}\r\nexport {};\r\n"}}
