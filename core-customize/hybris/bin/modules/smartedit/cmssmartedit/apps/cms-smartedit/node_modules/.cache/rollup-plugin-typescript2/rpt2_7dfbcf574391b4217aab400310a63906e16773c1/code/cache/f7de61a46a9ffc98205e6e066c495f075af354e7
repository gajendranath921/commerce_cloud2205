{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { Component, Input } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SlotStatus } from 'cmscommons';\r\nimport { IAlertServiceType, IPageInfoService, SeDowngradeComponent, IPageService, PageContentSlotsService } from 'smarteditcommons';\r\nimport { SlotSynchronizationService } from '../../services/SlotSynchronizationService';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"SlotSynchronizationPanelWrapperComponent\", {\r\n    selector: 'se-slot-synchronization-panel-wrapper',\r\n    template: `<se-synchronization-panel [itemId]=\"slotId\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" [selectAllLabel]=\"'se.cms.synchronization.slots.select.all.components'\" (getApi)=\"getApi($event)\"></se-synchronization-panel>`\r\n});\r\nlet /* @ngInject */ SlotSynchronizationPanelWrapperComponent = class /* @ngInject */ SlotSynchronizationPanelWrapperComponent {\r\n    constructor(pageService, pageInfoService, slotSynchronizationService, pageContentSlotsService, translateService) {\r\n        this.pageService = pageService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.slotSynchronizationService = slotSynchronizationService;\r\n        this.pageContentSlotsService = pageContentSlotsService;\r\n        this.translateService = translateService;\r\n        this.getSyncStatus = () => __awaiter(this, void 0, void 0, function* () {\r\n            const pageId = yield this.pageInfoService.getPageUID();\r\n            const syncStatus = yield this.slotSynchronizationService.getSyncStatus(pageId, this.slotId);\r\n            if (!this.slotSynchronizationService.syncStatusExists(syncStatus)) {\r\n                throw new Error('The SlotSynchronizationPanel must only be called for the slot whose sync status is available.');\r\n            }\r\n            const isDisallowed = yield this.isSyncDisallowed();\r\n            if (isDisallowed) {\r\n                this.disableSync();\r\n            }\r\n            return syncStatus;\r\n        });\r\n        this.performSync = (itemsToSync) => this.slotSynchronizationService.performSync(itemsToSync, null);\r\n    }\r\n    getApi(api) {\r\n        this.synchronizationPanelApi = api;\r\n    }\r\n    isSyncDisallowed() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const [isPageSlot, isPageApproved] = yield Promise.all([\r\n                this.isPageSlot(),\r\n                this.isPageApproved()\r\n            ]);\r\n            return isPageSlot && !isPageApproved;\r\n        });\r\n    }\r\n    isPageSlot() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const slotStatus = yield this.pageContentSlotsService.getSlotStatus(this.slotId);\r\n            return slotStatus === SlotStatus.PAGE || slotStatus === SlotStatus.OVERRIDE;\r\n        });\r\n    }\r\n    isPageApproved() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageUuid = yield this.pageInfoService.getPageUUID();\r\n            return this.pageService.isPageApproved(pageUuid);\r\n        });\r\n    }\r\n    disableSync() {\r\n        this.synchronizationPanelApi.setMessage({\r\n            type: IAlertServiceType.WARNING,\r\n            description: this.translateService.instant('se.cms.synchronization.slot.disabled.msg')\r\n        });\r\n        this.synchronizationPanelApi.disableItemList(true);\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], /* @ngInject */ SlotSynchronizationPanelWrapperComponent.prototype, \"slotId\", void 0);\r\n/* @ngInject */ SlotSynchronizationPanelWrapperComponent = __decorate([\r\n    SeDowngradeComponent(),\r\n    Component({\r\n        selector: 'se-slot-synchronization-panel-wrapper',\r\n        template: `<se-synchronization-panel [itemId]=\"slotId\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" [selectAllLabel]=\"'se.cms.synchronization.slots.select.all.components'\" (getApi)=\"getApi($event)\"></se-synchronization-panel>`\r\n    }),\r\n    __metadata(\"design:paramtypes\", [IPageService,\r\n        IPageInfoService,\r\n        SlotSynchronizationService,\r\n        PageContentSlotsService,\r\n        TranslateService])\r\n], /* @ngInject */ SlotSynchronizationPanelWrapperComponent);\r\nexport { /* @ngInject */ SlotSynchronizationPanelWrapperComponent };\r\n//# sourceMappingURL=SlotSynchronizationPanelWrapperComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/src/services/SlotSynchronizationService.ts"],"map":"{\"version\":3,\"file\":\"SlotSynchronizationPanelWrapperComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/synchronize/SlotSynchronizationPanelWrapperComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/synchronize/SlotSynchronizationPanelWrapperComponent.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { ISynchronizationPanelApi, ISyncStatus, ISyncJob } from 'cmscommons';\r\nimport { IPageInfoService, TypedMap, Nullable, IPageService, PageContentSlotsService } from 'smarteditcommons';\r\nimport { SlotSynchronizationService } from '../../services/SlotSynchronizationService';\r\nexport declare class SlotSynchronizationPanelWrapperComponent {\r\n    private pageService;\r\n    private pageInfoService;\r\n    private slotSynchronizationService;\r\n    private pageContentSlotsService;\r\n    private translateService;\r\n    slotId: string;\r\n    private synchronizationPanelApi;\r\n    constructor(pageService: IPageService, pageInfoService: IPageInfoService, slotSynchronizationService: SlotSynchronizationService, pageContentSlotsService: PageContentSlotsService, translateService: TranslateService);\r\n    getApi(api: ISynchronizationPanelApi): void;\r\n    getSyncStatus: () => Promise<Nullable<ISyncStatus>>;\r\n    performSync: (itemsToSync: TypedMap<string>[]) => Promise<ISyncJob>;\r\n    private isSyncDisallowed;\r\n    private isPageSlot;\r\n    private isPageApproved;\r\n    private disableSync;\r\n}\r\n"}}
