{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { CONTEXT_SITE_ID } from 'cmscommons';\r\nimport { isEmpty, cloneDeep } from 'lodash';\r\nimport { CrossFrameEventService, EVENTS, ICatalogService, ISharedDataService, IUrlService, SeDowngradeService, EXPERIENCE_STORAGE_KEY, CmsitemsRestService } from 'smarteditcommons';\r\nlet /* @ngInject */ PageFacade = class /* @ngInject */ PageFacade {\r\n    constructor(cmsitemsRestService, crossFrameEventService, sharedDataService, urlService, catalogService) {\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.urlService = urlService;\r\n        this.catalogService = catalogService;\r\n    }\r\n    /**\r\n     * Determines if a ContentPage with a given label exists in the given catalog and catalog version\r\n     *\r\n     * @param label The label to search for\r\n     * @param catalogId The catalog ID to search in for the ContentPage\r\n     * @param catalogVersion The catalog version to search in for the ContentPage\r\n     * @return Promise resolving to a boolean determining if the ContentPage exists\r\n     */\r\n    contentPageWithLabelExists(label, catalogId, catalogVersion) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const requestParams = {\r\n                pageSize: 10,\r\n                currentPage: 0,\r\n                typeCode: 'ContentPage',\r\n                itemSearchParams: 'label:' + label,\r\n                catalogId,\r\n                catalogVersion\r\n            };\r\n            const result = yield this.cmsitemsRestService.get(requestParams);\r\n            return result && !isEmpty(result.response);\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves the experience and builds a uri context based on its page context\r\n     *\r\n     * @returns the page uriContext\r\n     */\r\n    retrievePageUriContext() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const experience = (yield this.sharedDataService.get(EXPERIENCE_STORAGE_KEY));\r\n            if (!experience) {\r\n                throw new Error('pageFacade - could not retrieve an experience from sharedDataService');\r\n            }\r\n            if (!experience.pageContext) {\r\n                return null;\r\n            }\r\n            return this.urlService.buildUriContext(experience.pageContext.siteId, experience.pageContext.catalogId, experience.pageContext.catalogVersion);\r\n        });\r\n    }\r\n    /**\r\n     * @param page The object representing the CMS page item to create\r\n     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If\r\n     * the request fails, it resolves with errors from the backend.\r\n     */\r\n    createPage(page) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!page.catalogVersion) {\r\n                page.catalogVersion = yield this.catalogService.getCatalogVersionUUid();\r\n            }\r\n            if (page.onlyOneRestrictionMustApply === undefined) {\r\n                page.onlyOneRestrictionMustApply = false;\r\n            }\r\n            if (page.restrictions === undefined) {\r\n                page.restrictions = [];\r\n            }\r\n            const newlyCreatedPage = yield this.cmsitemsRestService.create(page);\r\n            this.crossFrameEventService.publish(EVENTS.PAGE_CREATED, page);\r\n            return newlyCreatedPage;\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new CMS page item for a given site.\r\n     *\r\n     * @param page The object representing the CMS page item to create\r\n     * @param siteUid The uid of the target site.\r\n     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If\r\n     * the request fails, it resolves with errors from the backend.\r\n     */\r\n    createPageForSite(page, siteUid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const catalogVersionUUid = yield this.catalogService.getCatalogVersionUUid();\r\n            page.catalogVersion = page.catalogVersion || catalogVersionUUid;\r\n            if (page.onlyOneRestrictionMustApply === undefined) {\r\n                page.onlyOneRestrictionMustApply = false;\r\n            }\r\n            page = cloneDeep(page);\r\n            page[CONTEXT_SITE_ID] = siteUid;\r\n            const newlyCreatedPage = yield this.cmsitemsRestService.create(page);\r\n            this.crossFrameEventService.publish(EVENTS.PAGE_CREATED, page);\r\n            return newlyCreatedPage;\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ PageFacade = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [CmsitemsRestService,\r\n        CrossFrameEventService,\r\n        ISharedDataService,\r\n        IUrlService,\r\n        ICatalogService])\r\n], /* @ngInject */ PageFacade);\r\nexport { /* @ngInject */ PageFacade };\r\n//# sourceMappingURL=PageFacade.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PageFacade.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/facades/PageFacade.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/facades/PageFacade.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, ICatalogService, ISharedDataService, IUriContext, IUrlService, CmsitemsRestService, ICMSPage } from 'smarteditcommons';\r\nexport declare class PageFacade {\r\n    private cmsitemsRestService;\r\n    private crossFrameEventService;\r\n    private sharedDataService;\r\n    private urlService;\r\n    private catalogService;\r\n    constructor(cmsitemsRestService: CmsitemsRestService, crossFrameEventService: CrossFrameEventService, sharedDataService: ISharedDataService, urlService: IUrlService, catalogService: ICatalogService);\r\n    /**\r\n     * Determines if a ContentPage with a given label exists in the given catalog and catalog version\r\n     *\r\n     * @param label The label to search for\r\n     * @param catalogId The catalog ID to search in for the ContentPage\r\n     * @param catalogVersion The catalog version to search in for the ContentPage\r\n     * @return Promise resolving to a boolean determining if the ContentPage exists\r\n     */\r\n    contentPageWithLabelExists(label: string, catalogId: string, catalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * Retrieves the experience and builds a uri context based on its page context\r\n     *\r\n     * @returns the page uriContext\r\n     */\r\n    retrievePageUriContext(): Promise<IUriContext>;\r\n    /**\r\n     * @param page The object representing the CMS page item to create\r\n     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If\r\n     * the request fails, it resolves with errors from the backend.\r\n     */\r\n    createPage(page: ICMSPage): Promise<ICMSPage>;\r\n    /**\r\n     * Creates a new CMS page item for a given site.\r\n     *\r\n     * @param page The object representing the CMS page item to create\r\n     * @param siteUid The uid of the target site.\r\n     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If\r\n     * the request fails, it resolves with errors from the backend.\r\n     */\r\n    createPageForSite(page: ICMSPage, siteUid: string): Promise<ICMSPage>;\r\n}\r\n"}}
