{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { IAlertService, IConfirmationModalService, IExperienceService, IPageInfoService, SeDowngradeService, PageVersioningService, PageVersionSelectionService } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from '../../../services/GenericEditorModalService';\r\n/**\r\n * Used to manage a page version.\r\n */\r\nlet /* @ngInject */ ManagePageVersionService = class /* @ngInject */ ManagePageVersionService {\r\n    constructor(alertService, experienceService, confirmationModalService, genericEditorModalService, pageInfoService, pageVersioningService, pageVersionSelectionService) {\r\n        this.alertService = alertService;\r\n        this.experienceService = experienceService;\r\n        this.confirmationModalService = confirmationModalService;\r\n        this.genericEditorModalService = genericEditorModalService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.pageVersioningService = pageVersioningService;\r\n        this.pageVersionSelectionService = pageVersionSelectionService;\r\n    }\r\n    createPageVersion() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageUuid = yield this.pageInfoService.getPageUUID();\r\n            const componentData = this.getComponentDataForEditor(pageUuid, null);\r\n            return this.genericEditorModalService.open(componentData, (result) => __awaiter(this, void 0, void 0, function* () {\r\n                const experience = {\r\n                    versionId: result.uid\r\n                };\r\n                yield this.experienceService.updateExperience(experience);\r\n                this.alertService.showSuccess('se.cms.versions.create.alert.success');\r\n                this.pageVersionSelectionService.selectPageVersion(result);\r\n            }));\r\n        });\r\n    }\r\n    editPageVersion(versionDetails) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageUuid = yield this.pageInfoService.getPageUUID();\r\n            const componentData = this.getComponentDataForEditor(pageUuid, versionDetails);\r\n            return this.genericEditorModalService.open(componentData, (result) => {\r\n                this.pageVersionSelectionService.updatePageVersionDetails(result);\r\n            });\r\n        });\r\n    }\r\n    deletePageVersion(versionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageUuid = yield this.pageInfoService.getPageUUID();\r\n            yield this.confirmationModalService.confirm({\r\n                title: 'se.cms.actionitem.page.version.delete.confirmation.title',\r\n                description: 'se.cms.actionitem.page.version.delete.confirmation.description'\r\n            });\r\n            yield this.pageVersioningService.deletePageVersion(pageUuid, versionId);\r\n            this.alertService.showSuccess('se.cms.versions.delete.alert.success');\r\n            // reload experience to display current page if deleting the current\r\n            const selectedVersion = this.pageVersionSelectionService.getSelectedPageVersion();\r\n            if (selectedVersion && selectedVersion.uid === versionId) {\r\n                yield this.experienceService.updateExperience();\r\n                this.pageVersionSelectionService.deselectPageVersion();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns an object that contains the information to be displayed and edited in the modal.\r\n     *\r\n     * @param pageUuid the uuid of the page.\r\n     * @param content the content to be populated in the editor, null for create mode.\r\n     */\r\n    getComponentDataForEditor(pageUuid, content) {\r\n        const componentData = {\r\n            title: content ? 'se.cms.versions.edit' : 'se.cms.versions.create',\r\n            structure: {\r\n                attributes: [\r\n                    {\r\n                        cmsStructureType: 'ShortString',\r\n                        qualifier: 'label',\r\n                        i18nKey: 'se.cms.versions.editor.label.name',\r\n                        required: true\r\n                    },\r\n                    {\r\n                        cmsStructureType: 'ShortString',\r\n                        qualifier: 'description',\r\n                        i18nKey: 'se.cms.versions.editor.description.name'\r\n                    }\r\n                ]\r\n            },\r\n            contentApi: this.pageVersioningService.getResourceURI().replace(':pageUuid', pageUuid)\r\n        };\r\n        if (content) {\r\n            componentData.content = content;\r\n            componentData.componentUuid = content.uid;\r\n            componentData.componentType = 'versioning';\r\n        }\r\n        return componentData;\r\n    }\r\n};\r\n/* @ngInject */ ManagePageVersionService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IAlertService,\r\n        IExperienceService,\r\n        IConfirmationModalService,\r\n        GenericEditorModalService,\r\n        IPageInfoService,\r\n        PageVersioningService,\r\n        PageVersionSelectionService])\r\n], /* @ngInject */ ManagePageVersionService);\r\nexport { /* @ngInject */ ManagePageVersionService };\r\n//# sourceMappingURL=ManagePageVersionService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/GenericEditorModalService.ts"],"map":"{\"version\":3,\"file\":\"ManagePageVersionService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/versioning/services/ManagePageVersionService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/versioning/services/ManagePageVersionService.d.ts","writeByteOrderMark":false,"text":"import { IAlertService, IConfirmationModalService, IExperienceService, IPageInfoService, IPageVersion, PageVersioningService, PageVersionSelectionService } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from '../../../services/GenericEditorModalService';\r\n/**\r\n * Used to manage a page version.\r\n */\r\nexport declare class ManagePageVersionService {\r\n    private alertService;\r\n    private experienceService;\r\n    private confirmationModalService;\r\n    private genericEditorModalService;\r\n    private pageInfoService;\r\n    private pageVersioningService;\r\n    private pageVersionSelectionService;\r\n    constructor(alertService: IAlertService, experienceService: IExperienceService, confirmationModalService: IConfirmationModalService, genericEditorModalService: GenericEditorModalService, pageInfoService: IPageInfoService, pageVersioningService: PageVersioningService, pageVersionSelectionService: PageVersionSelectionService);\r\n    createPageVersion(): Promise<IPageVersion>;\r\n    editPageVersion(versionDetails: IPageVersion): Promise<IPageVersion>;\r\n    deletePageVersion(versionId: string): Promise<void>;\r\n    /**\r\n     * Returns an object that contains the information to be displayed and edited in the modal.\r\n     *\r\n     * @param pageUuid the uuid of the page.\r\n     * @param content the content to be populated in the editor, null for create mode.\r\n     */\r\n    private getComponentDataForEditor;\r\n}\r\n"}}
