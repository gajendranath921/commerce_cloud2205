{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { assign } from 'lodash';\r\nimport { PAGE_CONTEXT_CATALOG, PAGE_CONTEXT_CATALOG_VERSION, PAGE_CONTEXT_SITE_ID, RestServiceFactory, SeDowngradeService, URIBuilder } from 'smarteditcommons';\r\n/** Provides REST services for the CMS pages rest endpoint. */\r\nlet /* @ngInject */ PagesRestService = class /* @ngInject */ PagesRestService {\r\n    constructor(restServiceFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.URI = `/cmswebservices/v1/sites/${PAGE_CONTEXT_SITE_ID}/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/pages/:pageUid`;\r\n    }\r\n    /**\r\n     * Fetches a list of pages for a given array of UIDs.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @returns A promise resolving to a list of pages, or an empty list.\r\n     */\r\n    get(uids) {\r\n        return this.restServiceFactory\r\n            .get(this.URI, 'pageUid')\r\n            .get({ uids })\r\n            .then((response) => response.pages);\r\n    }\r\n    /**\r\n     * Fetches a page for a given UID.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @param pageUid A page UID of the page to fetch\r\n     */\r\n    getById(pageUid) {\r\n        return this.restServiceFactory.get(this.URI, 'pageUid').get({ pageUid });\r\n    }\r\n    /**\r\n     * Updates a page for a given site, catalog, and catalog version.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @param pageUid The page UID of the page to update.\r\n     * @param payload The page object to be applied to the page resource as it exists on the backend.\r\n     *\r\n     * @returns A promise that resolves to a JSON object representing the updated page.\r\n     */\r\n    update(pageUid, payload) {\r\n        const uri = new URIBuilder(this.URI).replaceParams(payload).build();\r\n        const extendedParams = assign({\r\n            pageUid\r\n        }, payload);\r\n        return this.restServiceFactory.get(uri, 'pageUid').update(extendedParams);\r\n    }\r\n};\r\n/* @ngInject */ PagesRestService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [RestServiceFactory])\r\n], /* @ngInject */ PagesRestService);\r\nexport { /* @ngInject */ PagesRestService };\r\n//# sourceMappingURL=PagesRestService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PagesRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/dao/PagesRestService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,OAAO,EACH,oBAAoB,EACpB,4BAA4B,EAC5B,oBAAoB,EACpB,kBAAkB,EAClB,kBAAkB,EAClB,UAAU,EAEb,MAAM,kBAAkB,CAAC;AAE1B,8DAA8D;AAE9D,uCAAA;IAGI,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAFzC,QAAG,GAAG,4BAA4B,oBAAoB,aAAa,oBAAoB,aAAa,4BAA4B,iBAAiB,CAAC;IAEtG,CAAC;IAE9D;;;;;OAKG;IACI,GAAG,CAAC,IAAc;QACrB,OAAO,IAAI,CAAC,kBAAkB;aACzB,GAAG,CAAwB,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC;aAC/C,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC;aACb,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,OAAO,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,OAAe,EAAE,OAAiB;QAC5C,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QACpE,MAAM,cAAc,GAAG,MAAM,CACzB;YACI,OAAO;SACV,EACD,OAAO,CACV,CAAC;QACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9E,CAAC;CACJ,CAAA;AA/CD;IADC,kBAAkB,EAAE;qCAIuB,kBAAkB;oCA4C7D\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/dao/PagesRestService.d.ts","writeByteOrderMark":false,"text":"import { RestServiceFactory, ICMSPage } from 'smarteditcommons';\r\n/** Provides REST services for the CMS pages rest endpoint. */\r\nexport declare class PagesRestService {\r\n    private restServiceFactory;\r\n    private readonly URI;\r\n    constructor(restServiceFactory: RestServiceFactory);\r\n    /**\r\n     * Fetches a list of pages for a given array of UIDs.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @returns A promise resolving to a list of pages, or an empty list.\r\n     */\r\n    get(uids: string[]): Promise<ICMSPage[]>;\r\n    /**\r\n     * Fetches a page for a given UID.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @param pageUid A page UID of the page to fetch\r\n     */\r\n    getById(pageUid: string): Promise<ICMSPage>;\r\n    /**\r\n     * Updates a page for a given site, catalog, and catalog version.\r\n     * It uses the current site, catalog and catalog version from the session.\r\n     *\r\n     * @param pageUid The page UID of the page to update.\r\n     * @param payload The page object to be applied to the page resource as it exists on the backend.\r\n     *\r\n     * @returns A promise that resolves to a JSON object representing the updated page.\r\n     */\r\n    update(pageUid: string, payload: ICMSPage): Promise<ICMSPage>;\r\n}\r\n"}}
