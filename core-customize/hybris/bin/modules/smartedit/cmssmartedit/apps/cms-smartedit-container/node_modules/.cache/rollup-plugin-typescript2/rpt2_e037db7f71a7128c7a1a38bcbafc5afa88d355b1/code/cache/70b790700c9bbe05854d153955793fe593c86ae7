{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { CMSITEMS_UPDATE_EVENT, DEFAULT_SYNCHRONIZATION_EVENT, DEFAULT_SYNCHRONIZATION_POLLING, SynchronizationResourceService } from 'cmscommons';\r\nimport { throttle } from 'lodash';\r\nimport { from } from 'rxjs';\r\nimport { share } from 'rxjs/internal/operators';\r\nimport { CrossFrameEventService, GatewayProxied, InvalidateCache, ICatalogService, IExperienceService, IPageInfoService, SystemEventService, TimerService, SeDowngradeService, LogService, OVERLAY_RERENDERED_EVENT, EVENTS, stringUtils, windowUtils, cmsitemsEvictionTag, ISyncPollingService } from 'smarteditcommons';\r\nlet /* @ngInject */ SyncPollingService = class /* @ngInject */ SyncPollingService extends ISyncPollingService {\r\n    constructor(logService, pageInfoService, experienceService, catalogService, synchronizationResourceService, crossFrameEventService, systemEventService, timerService) {\r\n        super();\r\n        this.logService = logService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.experienceService = experienceService;\r\n        this.catalogService = catalogService;\r\n        this.synchronizationResourceService = synchronizationResourceService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.systemEventService = systemEventService;\r\n        this.timerService = timerService;\r\n        this.SYNC_POLLING_THROTTLE = 500;\r\n        this.syncStatus = {};\r\n        this.triggers = new Set();\r\n        this.syncPollingTimer = null;\r\n        this.refreshInterval = null;\r\n        this.syncPageObservableMap = new Map();\r\n        this.initSyncPolling();\r\n    }\r\n    performSync(array, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentPageFromActiveCatalog = yield this.isCurrentPageFromActiveCatalog();\r\n            if (currentPageFromActiveCatalog) {\r\n                return Promise.reject();\r\n            }\r\n            const activeVersion = yield this.catalogService.getContentCatalogActiveVersion(uriContext);\r\n            return this.synchronizationResourceService\r\n                .getPageSynchronizationPostRestService(uriContext)\r\n                .save({\r\n                target: activeVersion,\r\n                items: array\r\n            });\r\n        });\r\n    }\r\n    getSyncStatus(pageUUID, uriContext, forceGetSynchronization) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (forceGetSynchronization) {\r\n                this.clearSyncPageObservableMap();\r\n            }\r\n            if (this.syncStatus[pageUUID] &&\r\n                pageUUID === this.syncStatus[pageUUID].itemId &&\r\n                !forceGetSynchronization) {\r\n                return this.syncStatus[pageUUID];\r\n            }\r\n            let _pageUUID;\r\n            try {\r\n                _pageUUID = yield this.getPageUUID(pageUUID);\r\n            }\r\n            catch (_a) {\r\n                this.logService.error('syncPollingService::getSyncStatus - failed call to getPageUUID');\r\n                this.syncPollingTimer.stop();\r\n                return this.fetchSyncStatus(pageUUID, uriContext);\r\n            }\r\n            try {\r\n                const syncStatus = yield this.fetchSyncStatus(_pageUUID, uriContext);\r\n                const syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);\r\n                this.startSync(syncPollingType);\r\n                return syncStatus;\r\n            }\r\n            catch (_b) {\r\n                this.logService.error('syncPollingService::getSyncStatus - failed call to fetchSyncStatus');\r\n                return Promise.reject();\r\n            }\r\n        });\r\n    }\r\n    fetchSyncStatus(_pageUUID, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const pageUUID = yield this.getPageUUID(_pageUUID);\r\n                if (!pageUUID) {\r\n                    return {};\r\n                }\r\n                const currentPageFromActiveCatalog = yield this.isCurrentPageFromActiveCatalog();\r\n                if (currentPageFromActiveCatalog) {\r\n                    return Promise.reject();\r\n                }\r\n                const activeVersion = yield this.catalogService.getContentCatalogActiveVersion(uriContext);\r\n                const uniqueKeyForPage = stringUtils.encode(pageUUID);\r\n                const syncPageObservable = this.syncPageObservableMap.get(uniqueKeyForPage);\r\n                // Re-use pre-existing Observable to avoid concurrent HTTP call to the same synchronization url.\r\n                return syncPageObservable\r\n                    ? syncPageObservable.toPromise()\r\n                    : this.fetchPageSynchronization(activeVersion, pageUUID, uriContext).toPromise();\r\n            }\r\n            catch (err) {\r\n                this.stopSync();\r\n                this.logService.warn(err);\r\n            }\r\n        });\r\n    }\r\n    /*\r\n     * This method is used to change the speed (up/down) of the sync polling. EventId could be syncPollingSpeedUp or syncPollingSlowDown.\r\n     * If multiple services are changing the speed of the polling and in order to differentiate between them 'key' must to be used and it should be unique among the services.\r\n     * For example: key could be servicePrefix + pageUuid/itemId\r\n     * If at least one service needs fast polling, refreshInterval will be set to fast polling. If none of them needs fast polling, refreshInterval will be set to slow polling.\r\n     */\r\n    changePollingSpeed(eventId, key) {\r\n        if (eventId === DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP) {\r\n            this.syncStatus = {};\r\n            if (key && !this.triggers.has(key)) {\r\n                this.triggers.add(key);\r\n            }\r\n            this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME;\r\n        }\r\n        else {\r\n            if (key) {\r\n                this.triggers.delete(key);\r\n            }\r\n            if (this.triggers.size === 0) {\r\n                this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;\r\n            }\r\n        }\r\n        this.syncPollingTimer.restart(this.refreshInterval);\r\n    }\r\n    fetchPageSynchronization(activeVersion, pageUUID, uriContext) {\r\n        const syncObservable = from(this.getPageSlotSyncStatus(uriContext, pageUUID, activeVersion));\r\n        const uniqueKeyForPage = stringUtils.encode(pageUUID);\r\n        this.syncPageObservableMap.set(uniqueKeyForPage, syncObservable);\r\n        return syncObservable.pipe(share());\r\n    }\r\n    getPageSlotSyncStatus(uriContext, pageUUID, activeVersion) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const syncStatus = yield this.synchronizationResourceService\r\n                .getPageSynchronizationGetRestService(uriContext)\r\n                .get({\r\n                pageUid: pageUUID,\r\n                target: activeVersion\r\n            });\r\n            const lastSyncStatus = this.syncStatus[syncStatus.itemId];\r\n            if (JSON.stringify(syncStatus) !== JSON.stringify(lastSyncStatus)) {\r\n                this.crossFrameEventService.publish(DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, syncStatus);\r\n                if (!lastSyncStatus ||\r\n                    syncStatus.lastModifiedDate !== lastSyncStatus.lastModifiedDate ||\r\n                    syncStatus.status !== lastSyncStatus.status) {\r\n                    this.crossFrameEventService.publish(CMSITEMS_UPDATE_EVENT);\r\n                    this.crossFrameEventService.publish(EVENTS.PAGE_UPDATED, {\r\n                        uuid: pageUUID\r\n                    });\r\n                }\r\n            }\r\n            this.syncStatus[syncStatus.itemId] = syncStatus;\r\n            this.clearSyncPageObservableMap();\r\n            return syncStatus;\r\n        });\r\n    }\r\n    stopSync() {\r\n        if (this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.stop();\r\n        }\r\n        this.clearSyncStatus();\r\n    }\r\n    startSync(syncPollingType) {\r\n        if (!this.syncPollingTimer.isActive()) {\r\n            this.changePollingSpeed(syncPollingType || DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN);\r\n        }\r\n    }\r\n    initSyncPolling() {\r\n        this.refreshInterval = DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;\r\n        /**\r\n         * When multiple items needs sync polling at different paces (either slow or fast),\r\n         * triggers array makes sure to set to fast polling even if any one of them needs fast polling.\r\n         */\r\n        this.triggers.clear();\r\n        this.syncStatus = {};\r\n        const changePolling = this.changePollingSpeed.bind(this);\r\n        this.systemEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP, changePolling);\r\n        this.systemEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN, changePolling);\r\n        this.crossFrameEventService.subscribe(DEFAULT_SYNCHRONIZATION_POLLING.FETCH_SYNC_STATUS_ONCE, (eventId, pageUUID) => {\r\n            this.fetchSyncStatus(pageUUID);\r\n        });\r\n        this.crossFrameEventService.subscribe(OVERLAY_RERENDERED_EVENT, throttle(() => {\r\n            if (this.syncPollingTimer.isActive()) {\r\n                this.fetchSyncStatus();\r\n            }\r\n        }, this.SYNC_POLLING_THROTTLE));\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, () => {\r\n            this.clearSyncStatus();\r\n            this.clearSyncPageObservableMap();\r\n        });\r\n        this.crossFrameEventService.subscribe(DEFAULT_SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED, () => {\r\n            this.syncStatus = {};\r\n            this.fetchSyncStatus();\r\n        });\r\n        // fetchSyncStatus callback uses current page uuid by default\r\n        this.syncPollingTimer = this.timerService.createTimer(() => this.fetchSyncStatus(), this.refreshInterval);\r\n        // start sync polling if it is a storefront page\r\n        if (windowUtils.getGatewayTargetFrame()) {\r\n            const syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);\r\n            this.startSync(syncPollingType);\r\n        }\r\n    }\r\n    clearSyncPageObservableMap() {\r\n        this.syncPageObservableMap.clear();\r\n    }\r\n    clearSyncStatus() {\r\n        this.syncStatus = {};\r\n    }\r\n    getPageUUID(_pageUUID) {\r\n        return !stringUtils.isBlank(_pageUUID)\r\n            ? Promise.resolve(_pageUUID)\r\n            : this.pageInfoService.getPageUUID();\r\n    }\r\n    isCurrentPageFromActiveCatalog() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentExperience = yield this.experienceService.getCurrentExperience();\r\n            return currentExperience.pageContext\r\n                ? currentExperience.pageContext.active\r\n                : currentExperience.catalogDescriptor.active;\r\n        });\r\n    }\r\n    getSyncPollingTypeFromInterval(interval) {\r\n        return interval === DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME\r\n            ? DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP\r\n            : DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN;\r\n    }\r\n};\r\n__decorate([\r\n    InvalidateCache(cmsitemsEvictionTag),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Array, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ SyncPollingService.prototype, \"performSync\", null);\r\n/* @ngInject */ SyncPollingService = __decorate([\r\n    SeDowngradeService(ISyncPollingService),\r\n    GatewayProxied('getSyncStatus', 'fetchSyncStatus', 'changePollingSpeed', 'registerSyncPollingEvents', 'performSync'),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        IPageInfoService,\r\n        IExperienceService,\r\n        ICatalogService,\r\n        SynchronizationResourceService,\r\n        CrossFrameEventService,\r\n        SystemEventService,\r\n        TimerService])\r\n], /* @ngInject */ SyncPollingService);\r\nexport { /* @ngInject */ SyncPollingService };\r\n//# sourceMappingURL=SyncPollingServiceOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/internal/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SyncPollingServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SyncPollingServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SyncPollingServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { ISyncJob, ISyncStatus, SynchronizationResourceService } from 'cmscommons';\r\nimport { CrossFrameEventService, ICatalogService, IExperienceService, IPageInfoService, IUriContext, SystemEventService, TimerService, TypedMap, LogService, ISyncPollingService } from 'smarteditcommons';\r\nexport declare class SyncPollingService extends ISyncPollingService {\r\n    private logService;\r\n    private pageInfoService;\r\n    private experienceService;\r\n    private catalogService;\r\n    private synchronizationResourceService;\r\n    private crossFrameEventService;\r\n    private systemEventService;\r\n    private timerService;\r\n    SYNC_POLLING_THROTTLE: number;\r\n    private syncStatus;\r\n    private triggers;\r\n    private syncPollingTimer;\r\n    private refreshInterval;\r\n    private syncPageObservableMap;\r\n    constructor(logService: LogService, pageInfoService: IPageInfoService, experienceService: IExperienceService, catalogService: ICatalogService, synchronizationResourceService: SynchronizationResourceService, crossFrameEventService: CrossFrameEventService, systemEventService: SystemEventService, timerService: TimerService);\r\n    performSync(array: TypedMap<string>[], uriContext: IUriContext): Promise<ISyncJob>;\r\n    getSyncStatus(pageUUID?: string, uriContext?: IUriContext, forceGetSynchronization?: boolean): Promise<ISyncStatus>;\r\n    fetchSyncStatus(_pageUUID?: string, uriContext?: IUriContext): Promise<ISyncStatus>;\r\n    changePollingSpeed(eventId: string, key?: string): void;\r\n    private fetchPageSynchronization;\r\n    private getPageSlotSyncStatus;\r\n    private stopSync;\r\n    private startSync;\r\n    private initSyncPolling;\r\n    private clearSyncPageObservableMap;\r\n    private clearSyncStatus;\r\n    private getPageUUID;\r\n    private isCurrentPageFromActiveCatalog;\r\n    private getSyncPollingTypeFromInterval;\r\n}\r\n"}}
