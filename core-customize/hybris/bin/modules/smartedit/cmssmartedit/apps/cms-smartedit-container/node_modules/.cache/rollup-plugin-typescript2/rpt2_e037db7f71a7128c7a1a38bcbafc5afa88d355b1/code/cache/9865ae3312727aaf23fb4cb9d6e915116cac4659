{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Service used to handle standard OCC validation errors received from the backend.\r\n */\r\nlet /* @ngInject */ MediaBackendValidationHandler = class /* @ngInject */ MediaBackendValidationHandler {\r\n    /**\r\n     * Extracts validation errors from the provided response and appends them to a specified contextual errors list.\r\n     *\r\n     * The expected error response from the backend matches the contract of the following response example:\r\n     *\r\n     * ```\r\n     *      var response = {\r\n     *          data: {\r\n     *              errors: [{\r\n     *                  type: 'ValidationError',\r\n     *                  subject: 'mySubject',\r\n     *                  message: 'Some validation exception occurred'\r\n     *              }, {\r\n     *                  type: 'SomeOtherError',\r\n     *                  subject: 'mySubject'\r\n     *                  message: 'Some other exception occurred'\r\n     *              }]\r\n     *          }\r\n     *      }\r\n     * ```\r\n     * or just matched the backend error for media folder\r\n     *      var response = {\r\n     *          data: {\r\n     *              errors: [{\r\n     *                  type: 'UnknownIdentifierError',\r\n     *                  message: 'No media folder with qualifier xxx can be found.'\r\n     *              }, {\r\n     *                  type: 'AmbiguousIdentifierException',\r\n     *                  message: 'More than one media folder with qualifier xxx found.'\r\n     *              }]\r\n     *          }\r\n     *      }\r\n     *\r\n     * Example of use:\r\n     * ```\r\n     *      const errorsContext = [];\r\n     *      mediaBackendValidationHandler.handleResponse(response, errorsContext);\r\n     * ```\r\n     *\r\n     * The resulting errorsContext would be as follows:\r\n     * ```\r\n     *      [{\r\n     *          subject: 'mySubject',\r\n     *          message: 'Some validation exception occurred'\r\n     *      }]\r\n     * ```\r\n     *\r\n     * @param response A response consisting of a list of errors. For details of the expected format, see the example above.\r\n     * @param errorsContext An array that all validation errors are appended to. It is an output parameter.\r\n     * @returns The error context list originally provided, or a new list, appended with the validation errors.\r\n     */\r\n    handleResponse(response, errorsContext) {\r\n        var _a;\r\n        errorsContext = errorsContext || [];\r\n        if ((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors) {\r\n            response.error.errors\r\n                .filter((error) => this.isValidationError(error))\r\n                .forEach(({ subject, message }) => {\r\n                if (subject) {\r\n                    errorsContext.push({\r\n                        subject,\r\n                        message\r\n                    });\r\n                }\r\n            });\r\n            response.error.errors\r\n                .filter((error) => this.isMediaFolderError(error))\r\n                .forEach(({ type, message }) => {\r\n                errorsContext.push({\r\n                    subject: 'folder',\r\n                    message\r\n                });\r\n            });\r\n            response.error.errors\r\n                .filter((error) => this.isUploadSizeError(error))\r\n                .forEach(() => {\r\n                errorsContext.push({\r\n                    subject: 'code',\r\n                    message: 'se.max.upload.size.exceeded.error'\r\n                });\r\n            });\r\n        }\r\n        return errorsContext;\r\n    }\r\n    isValidationError(error) {\r\n        return error.type === 'ValidationError';\r\n    }\r\n    isUploadSizeError(error) {\r\n        return error.type === 'MaxUploadSizeExceededError';\r\n    }\r\n    isMediaFolderError(error) {\r\n        return (error.type === 'UnknownIdentifierError' || error.type === 'AmbiguousIdentifierException');\r\n    }\r\n};\r\n/* @ngInject */ MediaBackendValidationHandler = __decorate([\r\n    SeDowngradeService()\r\n], /* @ngInject */ MediaBackendValidationHandler);\r\nexport { /* @ngInject */ MediaBackendValidationHandler };\r\n//# sourceMappingURL=MediaBackendValidationHandler.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"MediaBackendValidationHandler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/media/services/MediaBackendValidationHandler.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,kBAAkB,EAAgD,MAAM,kBAAkB,CAAC;AAEpG;;GAEG;AAEH,oDAAA;IACI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkDG;IACI,cAAc,CAAC,QAAuB,EAAE,aAAqB;;QAChE,aAAa,GAAG,aAAa,IAAI,EAAE,CAAC;QACpC,UAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,0CAAE,MAAM,EAAE;YACzB,QAAQ,CAAC,KAAK,CAAC,MAAM;iBAChB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;iBAChD,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAmB,EAAE,EAAE;gBAC/C,IAAI,OAAO,EAAE;oBACT,aAAa,CAAC,IAAI,CAAC;wBACf,OAAO;wBACP,OAAO;qBACV,CAAC,CAAC;iBACN;YACL,CAAC,CAAC,CAAC;YACP,QAAQ,CAAC,KAAK,CAAC,MAAM;iBAChB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;iBACjD,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAgB,EAAE,EAAE;gBACzC,aAAa,CAAC,IAAI,CAAC;oBACf,OAAO,EAAE,QAAQ;oBACjB,OAAO;iBACV,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YACP,QAAQ,CAAC,KAAK,CAAC,MAAM;iBAChB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;iBAChD,OAAO,CAAC,GAAG,EAAE;gBACV,aAAa,CAAC,IAAI,CAAC;oBACf,OAAO,EAAE,MAAM;oBACf,OAAO,EAAE,mCAAmC;iBAC/C,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACV;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAEO,iBAAiB,CAAC,KAAmB;QACzC,OAAO,KAAK,CAAC,IAAI,KAAK,iBAAiB,CAAC;IAC5C,CAAC;IAEO,iBAAiB,CAAC,KAAmB;QACzC,OAAO,KAAK,CAAC,IAAI,KAAK,4BAA4B,CAAC;IACvD,CAAC;IAEO,kBAAkB,CAAC,KAAmB;QAC1C,OAAO,CACH,KAAK,CAAC,IAAI,KAAK,wBAAwB,IAAI,KAAK,CAAC,IAAI,KAAK,8BAA8B,CAC3F,CAAC;IACN,CAAC;CACJ,CAAA;AAlGD;IADC,kBAAkB,EAAE;iDAmGpB\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/media/services/MediaBackendValidationHandler.d.ts","writeByteOrderMark":false,"text":"import { ErrorResponse } from 'smarteditcommons';\r\n/**\r\n * Service used to handle standard OCC validation errors received from the backend.\r\n */\r\nexport declare class MediaBackendValidationHandler {\r\n    /**\r\n     * Extracts validation errors from the provided response and appends them to a specified contextual errors list.\r\n     *\r\n     * The expected error response from the backend matches the contract of the following response example:\r\n     *\r\n     * ```\r\n     *      var response = {\r\n     *          data: {\r\n     *              errors: [{\r\n     *                  type: 'ValidationError',\r\n     *                  subject: 'mySubject',\r\n     *                  message: 'Some validation exception occurred'\r\n     *              }, {\r\n     *                  type: 'SomeOtherError',\r\n     *                  subject: 'mySubject'\r\n     *                  message: 'Some other exception occurred'\r\n     *              }]\r\n     *          }\r\n     *      }\r\n     * ```\r\n     * or just matched the backend error for media folder\r\n     *      var response = {\r\n     *          data: {\r\n     *              errors: [{\r\n     *                  type: 'UnknownIdentifierError',\r\n     *                  message: 'No media folder with qualifier xxx can be found.'\r\n     *              }, {\r\n     *                  type: 'AmbiguousIdentifierException',\r\n     *                  message: 'More than one media folder with qualifier xxx found.'\r\n     *              }]\r\n     *          }\r\n     *      }\r\n     *\r\n     * Example of use:\r\n     * ```\r\n     *      const errorsContext = [];\r\n     *      mediaBackendValidationHandler.handleResponse(response, errorsContext);\r\n     * ```\r\n     *\r\n     * The resulting errorsContext would be as follows:\r\n     * ```\r\n     *      [{\r\n     *          subject: 'mySubject',\r\n     *          message: 'Some validation exception occurred'\r\n     *      }]\r\n     * ```\r\n     *\r\n     * @param response A response consisting of a list of errors. For details of the expected format, see the example above.\r\n     * @param errorsContext An array that all validation errors are appended to. It is an output parameter.\r\n     * @returns The error context list originally provided, or a new list, appended with the validation errors.\r\n     */\r\n    handleResponse(response: ErrorResponse, errorsContext?: any[]): any[];\r\n    private isValidationError;\r\n    private isUploadSizeError;\r\n    private isMediaFolderError;\r\n}\r\n"}}
