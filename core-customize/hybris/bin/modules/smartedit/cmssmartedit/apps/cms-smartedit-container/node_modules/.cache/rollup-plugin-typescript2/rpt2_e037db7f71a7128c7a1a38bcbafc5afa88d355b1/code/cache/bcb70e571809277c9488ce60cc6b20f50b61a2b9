{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { PAGE_CONTEXT_CATALOG } from 'cmscommons';\r\nimport { cloneDeep } from 'lodash';\r\nimport { pageDeletionEvictionTag, pageRestoredEvictionTag, rarelyChangingContent, Cached, CrossFrameEventService, IAlertService, ICatalogService, IPageInfoService, IRestServiceFactory, IWaitDialogService, SmarteditRoutingService, SystemEventService, SeDowngradeService, IConfirmationModalService, EVENT_CONTENT_CATALOG_UPDATE, EVENTS, LogService, PAGE_CONTEXT_SITE_ID, ISharedDataService, EXPERIENCE_STORAGE_KEY, CmsitemsRestService, CMSPageStatus, WorkflowService } from 'smarteditcommons';\r\nimport { CatalogVersionRestService, PagesVariationsRestService } from '../../dao';\r\nimport { PageRestoredAlertService } from '../actionableAlert';\r\nimport { HomepageService, HomepageType } from '../pageDisplayConditions';\r\nimport { PageRestoreModalService } from './pageRestore/PageRestoreModalService';\r\nexport var CMSPageOperation;\r\n(function (CMSPageOperation) {\r\n    CMSPageOperation[\"TRASH_PAGE\"] = \"TRASH_PAGE\";\r\n})(CMSPageOperation || (CMSPageOperation = {}));\r\nlet /* @ngInject */ ManagePageService = class /* @ngInject */ ManagePageService {\r\n    constructor(logService, smarteditRoutingService, alertService, cmsitemsRestService, systemEventService, crossFrameEventService, pageInfoService, confirmationModalService, pagesVariationsRestService, waitDialogService, pageRestoreModalService, pageRestoredAlertService, homepageService, workflowService, catalogService, restServiceFactory, sharedDataService, catalogVersionRestService) {\r\n        this.logService = logService;\r\n        this.smarteditRoutingService = smarteditRoutingService;\r\n        this.alertService = alertService;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.systemEventService = systemEventService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.confirmationModalService = confirmationModalService;\r\n        this.pagesVariationsRestService = pagesVariationsRestService;\r\n        this.waitDialogService = waitDialogService;\r\n        this.pageRestoreModalService = pageRestoreModalService;\r\n        this.pageRestoredAlertService = pageRestoredAlertService;\r\n        this.homepageService = homepageService;\r\n        this.workflowService = workflowService;\r\n        this.catalogService = catalogService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.sharedDataService = sharedDataService;\r\n        this.catalogVersionRestService = catalogVersionRestService;\r\n        this.resourcePageOperationsURI = `/cmssmarteditwebservices/v1/sites/${PAGE_CONTEXT_SITE_ID}/catalogs/${PAGE_CONTEXT_CATALOG}/pages/:pageId/operations`;\r\n    }\r\n    /**\r\n     * Get the number of soft deleted pages for the provided context.\r\n     */\r\n    getSoftDeletedPagesCount(uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const requestParams = {\r\n                pageSize: 10,\r\n                currentPage: 0,\r\n                typeCode: 'AbstractPage',\r\n                itemSearchParams: 'pageStatus:deleted',\r\n                catalogId: uriContext.CURRENT_CONTEXT_CATALOG,\r\n                catalogVersion: uriContext.CURRENT_CONTEXT_CATALOG_VERSION,\r\n                fields: 'BASIC'\r\n            };\r\n            const result = yield this.cmsitemsRestService.get(requestParams);\r\n            return result.pagination.totalCount;\r\n        });\r\n    }\r\n    /**\r\n     * This method triggers the soft deletion of a CMS page.\r\n     *\r\n     * @param pageInfo The page object containing the uuid and the name of the page to be deleted.\r\n     */\r\n    softDeletePage(pageInfo, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const _pageInfo = cloneDeep(pageInfo);\r\n            const builtURIContext = {\r\n                catalogId: uriContext.CURRENT_CONTEXT_CATALOG,\r\n                catalogVersion: uriContext.CURRENT_CONTEXT_CATALOG_VERSION,\r\n                siteId: uriContext.CURRENT_CONTEXT_SITE_ID\r\n            };\r\n            const confirmationModalDescription = yield this.getConfirmationModalDescription(_pageInfo, uriContext);\r\n            const operationConfirmed = yield this.confirmSoftDelete(confirmationModalDescription, pageInfo.name);\r\n            if (!operationConfirmed) {\r\n                return;\r\n            }\r\n            try {\r\n                _pageInfo.identifier = pageInfo.uuid;\r\n                _pageInfo.pageStatus = CMSPageStatus.DELETED;\r\n                yield this.cmsitemsRestService.update(_pageInfo);\r\n                this.crossFrameEventService.publish(EVENTS.PAGE_DELETED);\r\n                this.alertService.showSuccess({\r\n                    message: 'se.cms.actionitem.page.trash.alert.success.description',\r\n                    messagePlaceholders: {\r\n                        pageName: pageInfo.name\r\n                    }\r\n                });\r\n                this.smarteditRoutingService.go('/ng/pages/:siteId/:catalogId/:catalogVersion'\r\n                    .replace(':siteId', builtURIContext.siteId)\r\n                    .replace(':catalogId', builtURIContext.catalogId)\r\n                    .replace(':catalogVersion', builtURIContext.catalogVersion));\r\n            }\r\n            catch (exception) {\r\n                this.logService.warn('Something went wrong when soft deleting page', exception);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * This method triggers the permanent deletion of a CMS page.\r\n     */\r\n    hardDeletePage(pageInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const operationConfirmed = yield this.confirmHardDelete(pageInfo.name);\r\n            if (!operationConfirmed) {\r\n                return;\r\n            }\r\n            yield this.cmsitemsRestService.delete(pageInfo.uuid);\r\n            this.alertService.showSuccess('se.cms.page.permanently.delete.alert.success');\r\n            this.systemEventService.publishAsync(EVENT_CONTENT_CATALOG_UPDATE);\r\n            this.crossFrameEventService.publish(EVENTS.PAGE_DELETED);\r\n        });\r\n    }\r\n    /**\r\n     *  This method triggers the restoration a CMS page.\r\n     */\r\n    restorePage(pageInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const _pageInfo = cloneDeep(pageInfo);\r\n            _pageInfo.pageStatus = CMSPageStatus.ACTIVE;\r\n            _pageInfo.identifier = pageInfo.uuid;\r\n            this.waitDialogService.showWaitModal(null);\r\n            try {\r\n                const response = yield this.cmsitemsRestService.update(_pageInfo, {\r\n                    headers: { 'Ignore-Interceptor': 'NonValidationErrorInterceptor' }\r\n                });\r\n                this.waitDialogService.hideWaitModal();\r\n                this.systemEventService.publishAsync(EVENT_CONTENT_CATALOG_UPDATE, response);\r\n                this.pageRestoredAlertService.displayPageRestoredSuccessAlert(_pageInfo);\r\n                this.crossFrameEventService.publish(EVENTS.PAGE_RESTORED);\r\n            }\r\n            catch (exception) {\r\n                const errors = exception.error.errors;\r\n                this.waitDialogService.hideWaitModal();\r\n                this.pageRestoreModalService.handleRestoreValidationErrors(_pageInfo, errors);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * This method indicates whether the given page can be soft deleted.\r\n     * Only the following pages are eligible for soft deletion:\r\n     * 1. the variation pages\r\n     * 2. the primary pages associated with no variation pages\r\n     * 3. the page is not in a workflow\r\n     */\r\n    isPageTrashable(cmsPage, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const [hasFallbackHomepageOrIsPrimaryWithoutVariations, isInWorkflow] = yield Promise.all([\r\n                    this.hasFallbackHomepageOrIsPrimaryWithoutVariations(cmsPage, uriContext),\r\n                    this.workflowService.isPageInWorkflow(cmsPage)\r\n                ]);\r\n                return hasFallbackHomepageOrIsPrimaryWithoutVariations && !isInWorkflow;\r\n            }\r\n            catch (_a) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Determines whether page can be cloned or not\r\n     *\r\n     * Checks if there is permission for given page in given catalog version to be cloned\r\n     * This method uses only \"outer\" parts for that check so there is no need for iframe to be available\r\n     *\r\n     * !NOTE: Logic here is very similar to logic used in RulesAndPermissionsRegistrationService where \"se.cloneable.page\" rule is registered.\r\n     * So if any changes are done here it should be considered to adjust those changes in mentioned service as well.\r\n     *\r\n     */\r\n    isPageCloneable(pageUuid, catalogVersion) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const catalogDescriptor = (yield this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)).catalogDescriptor;\r\n            const pageUriContext = {\r\n                CURRENT_CONTEXT_SITE_ID: catalogDescriptor.siteId,\r\n                CURRENT_CONTEXT_CATALOG: catalogDescriptor.catalogId,\r\n                CURRENT_CONTEXT_CATALOG_VERSION: catalogDescriptor.catalogVersion\r\n            };\r\n            const [catalogs, pageInfo, targets] = yield Promise.all([\r\n                this.catalogService.getContentCatalogsForSite(catalogDescriptor.siteId),\r\n                this.cmsitemsRestService.getById(pageUuid),\r\n                this.catalogVersionRestService.getCloneableTargets(pageUriContext)\r\n            ]);\r\n            // Inspired by ExperienceServiceOuter#updateExperiencePageContext\r\n            const pageContext = catalogs\r\n                // merge catalog and catalog.parents into one array to simplify searching\r\n                .reduce((acc, catalog) => {\r\n                if (catalog.parents && catalog.parents.length) {\r\n                    acc = acc.concat(catalog.parents);\r\n                }\r\n                return acc;\r\n            }, [...catalogs])\r\n                // flattening versions\r\n                .reduce((acc, catalog) => acc.concat(catalog.versions), [])\r\n                // finding demanded version\r\n                .find((version) => version.uuid === catalogVersion);\r\n            if (pageContext === null || pageContext === void 0 ? void 0 : pageContext.active) {\r\n                return targets.versions.length > 0 && !pageInfo.copyToCatalogsDisabled;\r\n            }\r\n            return targets.versions.length > 0;\r\n        });\r\n    }\r\n    /**\r\n     * Get the disabled trash tooltip message.\r\n     */\r\n    getDisabledTrashTooltipMessage(pageInfo, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let translate = 'se.cms.tooltip.movetotrash';\r\n            const isPageInWorkflow = yield this.workflowService.isPageInWorkflow(pageInfo);\r\n            const homepageType = yield this.homepageService.getHomepageType(pageInfo, uriContext);\r\n            if (homepageType === HomepageType.CURRENT) {\r\n                translate = 'se.cms.tooltip.current.homepage.movetotrash';\r\n            }\r\n            else if (homepageType === HomepageType.OLD) {\r\n                translate = 'se.cms.tooltip.old.homepage.movetotrash';\r\n            }\r\n            else if (isPageInWorkflow) {\r\n                translate = 'se.cms.tooltip.page.in.workflow.movetotrash';\r\n            }\r\n            return translate;\r\n        });\r\n    }\r\n    /**\r\n     * Will trash the given page in the corresponding active catalog version.\r\n     */\r\n    trashPageInActiveCatalogVersion(pageUid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const uriContext = yield this.catalogService.retrieveUriContext();\r\n            const activeVersion = yield this.catalogService.getContentCatalogActiveVersion(uriContext);\r\n            const operationConfirmed = yield this.confirmTrashingPageInActiveCatalogVersion(activeVersion);\r\n            if (!operationConfirmed) {\r\n                return;\r\n            }\r\n            try {\r\n                this.pageOperationsRESTService = this.restServiceFactory.get(this.resourcePageOperationsURI.replace(':pageId', pageUid));\r\n                yield this.pageOperationsRESTService.save({\r\n                    operation: 'TRASH_PAGE',\r\n                    sourceCatalogVersion: uriContext.CURRENT_CONTEXT_CATALOG_VERSION,\r\n                    targetCatalogVersion: activeVersion\r\n                });\r\n                this.alertService.showSuccess({\r\n                    message: 'se.cms.sync.page.status.success.alert',\r\n                    messagePlaceholders: {\r\n                        pageId: pageUid,\r\n                        catalogVersion: activeVersion\r\n                    }\r\n                });\r\n            }\r\n            catch (exception) {\r\n                this.logService.warn('trashPageInActiveCatalogVersion - page could not be trashed', exception);\r\n            }\r\n        });\r\n    }\r\n    getConfirmationModalDescription(pageInfo, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const pageUUID = yield this.pageInfoService.getPageUUID();\r\n                if (!pageUUID) {\r\n                    this.logService.error('deletePageService::deletePage - pageUUID is undefined');\r\n                    return Promise.reject();\r\n                }\r\n                const homepageType = yield this.homepageService.getHomepageType(pageInfo, uriContext);\r\n                if (homepageType !== null || pageInfo.homepage) {\r\n                    return 'se.cms.actionitem.page.trash.confirmation.description.storefront.homepage';\r\n                }\r\n                return 'se.cms.actionitem.page.trash.confirmation.description.storefront';\r\n            }\r\n            catch (_a) {\r\n                return 'se.cms.actionitem.page.trash.confirmation.description.pagelist';\r\n            }\r\n        });\r\n    }\r\n    confirmSoftDelete(description, pageName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.confirmationModalService.confirm({\r\n                    description,\r\n                    descriptionPlaceholders: {\r\n                        pageName\r\n                    },\r\n                    title: 'se.cms.actionitem.page.trash.confirmation.title'\r\n                });\r\n                return true;\r\n            }\r\n            catch (_a) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    confirmHardDelete(pageName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.confirmationModalService.confirm({\r\n                    title: 'se.cms.actionitem.page.permanently.delete.confirmation.title',\r\n                    description: 'se.cms.actionitem.page.permanently.delete.confirmation.description',\r\n                    descriptionPlaceholders: {\r\n                        pageName\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            catch (_a) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    confirmTrashingPageInActiveCatalogVersion(activeVersion) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.confirmationModalService.confirm({\r\n                    title: 'se.cms.sync.page.status.confirm.title',\r\n                    description: 'se.cms.sync.page.status.confirm.description',\r\n                    descriptionPlaceholders: {\r\n                        catalogVersion: activeVersion\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            catch (_a) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    hasFallbackHomepageOrIsPrimaryWithoutVariations(cmsPage, uriContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const homepageType = yield this.homepageService.getHomepageType(cmsPage, uriContext);\r\n            if (homepageType !== null || cmsPage.homepage) {\r\n                return this.homepageService.hasFallbackHomePage(uriContext);\r\n            }\r\n            const variationPagesUids = yield this.pagesVariationsRestService.getVariationsForPrimaryPageId(cmsPage.uid);\r\n            return variationPagesUids.length === 0;\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({\r\n        actions: [rarelyChangingContent],\r\n        tags: [pageDeletionEvictionTag, pageRestoredEvictionTag]\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ ManagePageService.prototype, \"getSoftDeletedPagesCount\", null);\r\n/* @ngInject */ ManagePageService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        SmarteditRoutingService,\r\n        IAlertService,\r\n        CmsitemsRestService,\r\n        SystemEventService,\r\n        CrossFrameEventService,\r\n        IPageInfoService,\r\n        IConfirmationModalService,\r\n        PagesVariationsRestService,\r\n        IWaitDialogService,\r\n        PageRestoreModalService,\r\n        PageRestoredAlertService,\r\n        HomepageService,\r\n        WorkflowService,\r\n        ICatalogService,\r\n        IRestServiceFactory,\r\n        ISharedDataService,\r\n        CatalogVersionRestService])\r\n], /* @ngInject */ ManagePageService);\r\nexport { /* @ngInject */ ManagePageService };\r\n//# sourceMappingURL=ManagePageService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/dao/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/actionableAlert/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/pageDisplayConditions/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/pages/pageRestore/PageRestoreModalService.ts"],"map":"{\"version\":3,\"file\":\"ManagePageService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/pages/ManagePageService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/pages/ManagePageService.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, IAlertService, ICatalogService, IPageInfoService, IRestServiceFactory, IUriContext, IWaitDialogService, SmarteditRoutingService, SystemEventService, IConfirmationModalService, LogService, ISharedDataService, CmsitemsRestService, ICMSPage, WorkflowService } from 'smarteditcommons';\r\nimport { CatalogVersionRestService, PagesVariationsRestService } from '../../dao';\r\nimport { PageRestoredAlertService } from '../actionableAlert';\r\nimport { HomepageService } from '../pageDisplayConditions';\r\nimport { PageRestoreModalService } from './pageRestore/PageRestoreModalService';\r\nexport declare enum CMSPageOperation {\r\n    TRASH_PAGE = \"TRASH_PAGE\"\r\n}\r\nexport interface CMSPageOperationPayload {\r\n    catalogId?: string;\r\n    operation: CMSPageOperation;\r\n    sourceCatalogVersion: string;\r\n    targetCatalogVersion: string;\r\n}\r\nexport declare class ManagePageService {\r\n    private readonly logService;\r\n    private readonly smarteditRoutingService;\r\n    private readonly alertService;\r\n    private readonly cmsitemsRestService;\r\n    private readonly systemEventService;\r\n    private readonly crossFrameEventService;\r\n    private readonly pageInfoService;\r\n    private readonly confirmationModalService;\r\n    private readonly pagesVariationsRestService;\r\n    private readonly waitDialogService;\r\n    private readonly pageRestoreModalService;\r\n    private readonly pageRestoredAlertService;\r\n    private readonly homepageService;\r\n    private readonly workflowService;\r\n    private readonly catalogService;\r\n    private readonly restServiceFactory;\r\n    private readonly sharedDataService;\r\n    private readonly catalogVersionRestService;\r\n    private readonly resourcePageOperationsURI;\r\n    private pageOperationsRESTService;\r\n    constructor(logService: LogService, smarteditRoutingService: SmarteditRoutingService, alertService: IAlertService, cmsitemsRestService: CmsitemsRestService, systemEventService: SystemEventService, crossFrameEventService: CrossFrameEventService, pageInfoService: IPageInfoService, confirmationModalService: IConfirmationModalService, pagesVariationsRestService: PagesVariationsRestService, waitDialogService: IWaitDialogService, pageRestoreModalService: PageRestoreModalService, pageRestoredAlertService: PageRestoredAlertService, homepageService: HomepageService, workflowService: WorkflowService, catalogService: ICatalogService, restServiceFactory: IRestServiceFactory, sharedDataService: ISharedDataService, catalogVersionRestService: CatalogVersionRestService);\r\n    /**\r\n     * Get the number of soft deleted pages for the provided context.\r\n     */\r\n    getSoftDeletedPagesCount(uriContext: IUriContext): Promise<number>;\r\n    /**\r\n     * This method triggers the soft deletion of a CMS page.\r\n     *\r\n     * @param pageInfo The page object containing the uuid and the name of the page to be deleted.\r\n     */\r\n    softDeletePage(pageInfo: ICMSPage, uriContext: IUriContext): Promise<void>;\r\n    /**\r\n     * This method triggers the permanent deletion of a CMS page.\r\n     */\r\n    hardDeletePage(pageInfo: ICMSPage): Promise<void>;\r\n    /**\r\n     *  This method triggers the restoration a CMS page.\r\n     */\r\n    restorePage(pageInfo: ICMSPage): Promise<void>;\r\n    /**\r\n     * This method indicates whether the given page can be soft deleted.\r\n     * Only the following pages are eligible for soft deletion:\r\n     * 1. the variation pages\r\n     * 2. the primary pages associated with no variation pages\r\n     * 3. the page is not in a workflow\r\n     */\r\n    isPageTrashable(cmsPage: ICMSPage, uriContext: IUriContext): Promise<boolean>;\r\n    /**\r\n     * Determines whether page can be cloned or not\r\n     *\r\n     * Checks if there is permission for given page in given catalog version to be cloned\r\n     * This method uses only \"outer\" parts for that check so there is no need for iframe to be available\r\n     *\r\n     * !NOTE: Logic here is very similar to logic used in RulesAndPermissionsRegistrationService where \"se.cloneable.page\" rule is registered.\r\n     * So if any changes are done here it should be considered to adjust those changes in mentioned service as well.\r\n     *\r\n     */\r\n    isPageCloneable(pageUuid: string, catalogVersion: string): Promise<boolean>;\r\n    /**\r\n     * Get the disabled trash tooltip message.\r\n     */\r\n    getDisabledTrashTooltipMessage(pageInfo: ICMSPage, uriContext: IUriContext): Promise<string>;\r\n    /**\r\n     * Will trash the given page in the corresponding active catalog version.\r\n     */\r\n    trashPageInActiveCatalogVersion(pageUid: string): Promise<void>;\r\n    private getConfirmationModalDescription;\r\n    private confirmSoftDelete;\r\n    private confirmHardDelete;\r\n    private confirmTrashingPageInActiveCatalogVersion;\r\n    private hasFallbackHomepageOrIsPrimaryWithoutVariations;\r\n}\r\n"}}
