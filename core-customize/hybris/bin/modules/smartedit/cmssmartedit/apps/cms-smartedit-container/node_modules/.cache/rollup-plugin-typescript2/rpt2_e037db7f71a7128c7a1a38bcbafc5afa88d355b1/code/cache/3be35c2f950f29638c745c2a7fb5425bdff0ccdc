{"code":"import { __awaiter, __decorate, __metadata, __param } from \"tslib\";\r\nimport { Component, Inject } from '@angular/core';\r\nimport { TypePermissionsRestService } from 'cmscommons';\r\nimport { isEmpty } from 'lodash';\r\nimport { CLICK_DROPDOWN, GENERIC_EDITOR_WIDGET_DATA, LogService, SeDowngradeComponent, SystemEventService, ISharedDataService, FILE_VALIDATION_CONFIG, IFileValidation } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from 'smarteditcontainer';\r\nimport { CMS_CLEAR_MEDIA_CONTAINER_SELECTED_OPTION, MAX_UPLOAD_FILE_SIZE } from '../../../../../constants';\r\nexport const MediaContainerClonePrefix = 'clone_';\r\nexport var MediaFormatType;\r\n(function (MediaFormatType) {\r\n    MediaFormatType[\"widescreen\"] = \"widescreen\";\r\n    MediaFormatType[\"desktop\"] = \"desktop\";\r\n    MediaFormatType[\"tablet\"] = \"tablet\";\r\n    MediaFormatType[\"mobile\"] = \"mobile\";\r\n})(MediaFormatType || (MediaFormatType = {}));\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"MediaContainerComponent\", {\r\n    selector: 'se-media-container',\r\n    template: `<div *ngIf=\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\"><se-media-container-selector [eventNameAffix]=\"selectorEventNameAffix\" [isAdvancedCloning]=\"isAdvancedCloning()\" [initialName]=\"initialMediaContainerName\" [name]=\"getMediaContainerName()\" [isEditable]=\"field.editable\" (nameChange)=\"onMediaContainerNameChange($event)\" (onCreate)=\"onMediaContainerCreate($event)\" (onRemove)=\"onMediaContainerRemove()\" (onSelect)=\"setMediaContainer($event)\" (onCreationInProgressChange)=\"onMediaContainerCreationInProgressChange($event)\"></se-media-container-selector></div><div class=\"se-media-container-field\" *ngIf=\"canShowMediaFormatWithUploadForm()\"><div class=\"se-media-container-field__media-list\"><se-media-format class=\"se-media-container-cell\" *ngFor=\"let format of field.options\" [ngClass]=\"getMediaContainerCellClassName(format.id)\" [errorMessages]=\"field.messages\" [isEditable]=\"field.editable\" [isUnderEdit]=\"isMediaFormatUnderEdit(format.id)\" [isFieldDisabled]=\"isFieldDisabled()\" [mediaUuid]=\"model[lang]?.medias[format.id]\" [mediaFormat]=\"format.id\" [mediaLabel]=\"format.label\" [allowMediaType]=\"field.allowMediaType\" (onFileSelect)=\"onFileSelect($event, format.id)\" (onDelete)=\"removeMediaByFormat(format.id)\"></se-media-format></div><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\" [image]=\"image.file\" [allowMediaType]=\"field.allowMediaType\" [maxUploadFileSize]=\"maxUploadFileSize\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onFileUploadSuccess($event, image.format)\"></se-media-upload-form><se-media-errors [errors]=\"fileValidationErrors\" [maxUploadFileSize]=\"maxUploadFileSize\"></se-media-errors></div><div *ngIf=\"!hasReadPermissionOnMediaRelatedTypes\"><span translate=\"se.cms.media.typepermissions.error\" [translateParams]=\"{ containedTypes: field.containedTypes }\"></span></div>`\r\n});\r\nlet /* @ngInject */ MediaContainerComponent = class /* @ngInject */ MediaContainerComponent {\r\n    constructor(systemEventService, logService, typePermissionsRestService, loadConfigManagerService, fileValidationService, sharedDataService, data) {\r\n        this.systemEventService = systemEventService;\r\n        this.logService = logService;\r\n        this.typePermissionsRestService = typePermissionsRestService;\r\n        this.loadConfigManagerService = loadConfigManagerService;\r\n        this.fileValidationService = fileValidationService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.sessionStorage = window.sessionStorage;\r\n        ({\r\n            field: this.field,\r\n            model: this.model,\r\n            editor: this.editor,\r\n            qualifier: this.lang,\r\n            isFieldDisabled: this.isFieldDisabled\r\n        } = data);\r\n        this.selectorEventNameAffix = `${this.field.qualifier}_${this.lang}`;\r\n        if (this.field.dependsOnField) {\r\n            this.field.hideFieldWidget = true;\r\n            const onDependsOnValueChangedEventName = `${this.editor.id}${this.field.dependsOnField}${CLICK_DROPDOWN}`;\r\n            this.unRegDependsOnValueChanged = this.systemEventService.subscribe(onDependsOnValueChangedEventName, (_eventId, value) => this.onDependsOnValueChanged(value));\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.model[this.lang]) {\r\n                this.setMediaContainer({\r\n                    catalogVersion: undefined,\r\n                    medias: {},\r\n                    qualifier: undefined,\r\n                    mediaContainerUuid: undefined\r\n                });\r\n            }\r\n            const maxUploadFileSizeConfiguration = yield this.sharedDataService.get(MAX_UPLOAD_FILE_SIZE);\r\n            this.maxUploadFileSize =\r\n                maxUploadFileSizeConfiguration && typeof maxUploadFileSizeConfiguration === 'number'\r\n                    ? maxUploadFileSizeConfiguration\r\n                    : FILE_VALIDATION_CONFIG.DEFAULT_MAX_UPLOAD_FILE_SIZE;\r\n            yield this.initHasReadPermissionOnMediaRelatedTypes();\r\n            yield this.initAdvancedMediaContainerManagementEnabled();\r\n            this.initialMediaContainerNameKey = `${this.editor.id}_InitialMediaContainerName_${this.lang}`;\r\n            this.resetModelForClone();\r\n            this.getInitialMediaContainerName();\r\n        });\r\n    }\r\n    getMediaContainerName() {\r\n        var _a;\r\n        return ((_a = this.model[this.lang]) === null || _a === void 0 ? void 0 : _a.qualifier) || '';\r\n    }\r\n    getInitialMediaContainerName() {\r\n        var _a, _b;\r\n        if (!!this.editor.initialContent.cloneComponent) {\r\n            const initialCloneMediaContainerName = this.sessionStorage.getItem(this.initialMediaContainerNameKey);\r\n            this.initialMediaContainerName =\r\n                initialCloneMediaContainerName || ((_a = this.model[this.lang]) === null || _a === void 0 ? void 0 : _a.qualifier) || '';\r\n        }\r\n        else {\r\n            this.initialMediaContainerName = ((_b = this.model[this.lang]) === null || _b === void 0 ? void 0 : _b.qualifier) || '';\r\n        }\r\n    }\r\n    getMediaContainerCellClassName(format) {\r\n        return `se-media-container-cell--${format}`;\r\n    }\r\n    setMediaContainer(mediaContainer) {\r\n        this.model[this.lang] = mediaContainer;\r\n    }\r\n    canShowMediaFormatWithUploadForm() {\r\n        return (this.hasReadPermissionOnMediaRelatedTypes &&\r\n            (this.isMediaContainerSelected() ||\r\n                this.mediaContainerCreationInProgress ||\r\n                !this.advancedMediaContainerManagementEnabled));\r\n    }\r\n    isMediaFormatUnderEdit(format) {\r\n        var _a;\r\n        return format === ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format);\r\n    }\r\n    onFileSelect(files, format) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const imageFormat = format || ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format);\r\n            this.resetImage();\r\n            try {\r\n                const file = files[0];\r\n                yield this.fileValidationService.validate(file, this.maxUploadFileSize, this.fileValidationErrors);\r\n                this.image = {\r\n                    file,\r\n                    format: imageFormat\r\n                };\r\n            }\r\n            catch (_b) {\r\n                this.logService.warn('Invalid file');\r\n            }\r\n        });\r\n    }\r\n    onFileUploadSuccess(uuid, format) {\r\n        this.setMediaUuidForFormat(uuid, format);\r\n        this.resetErrors();\r\n        this.resetImage();\r\n    }\r\n    resetErrors() {\r\n        if (this.field.hasErrors) {\r\n            this.field.hasErrors = false;\r\n            this.field.messages = [];\r\n            const controls = this.editor.form.group.controls;\r\n            for (const tabName of Object.keys(controls)) {\r\n                controls[tabName].updateValueAndValidity();\r\n            }\r\n        }\r\n    }\r\n    onMediaContainerCreate(name) {\r\n        this.clearModel();\r\n        this.onMediaContainerNameChange(name);\r\n        this.model[this.lang].medias = {};\r\n    }\r\n    onMediaContainerRemove() {\r\n        this.clearModel();\r\n    }\r\n    onMediaContainerNameChange(name) {\r\n        this.model[this.lang].qualifier = name;\r\n    }\r\n    onMediaContainerCreationInProgressChange(inProgress) {\r\n        this.mediaContainerCreationInProgress = inProgress;\r\n    }\r\n    removeMediaByFormat(format) {\r\n        delete this.model[this.lang].medias[format];\r\n    }\r\n    isAdvancedCloning() {\r\n        return !!this.editor.initialContent.cloneComponent;\r\n    }\r\n    onDependsOnValueChanged(value) {\r\n        this.field.hideFieldWidget = value !== this.field.dependsOnValue;\r\n        if (this.field.hideFieldWidget) {\r\n            if (this.model[this.lang]) {\r\n                this.setMediaContainer({\r\n                    catalogVersion: undefined,\r\n                    medias: {},\r\n                    qualifier: undefined,\r\n                    mediaContainerUuid: undefined\r\n                });\r\n            }\r\n            const clearSelectMediaContainerEventName = `mediaContainer_${this.selectorEventNameAffix}_${CMS_CLEAR_MEDIA_CONTAINER_SELECTED_OPTION}`;\r\n            this.systemEventService.publishAsync(clearSelectMediaContainerEventName);\r\n        }\r\n    }\r\n    initAdvancedMediaContainerManagementEnabled() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const configurations = yield this.loadConfigManagerService.loadAsObject();\r\n            this.advancedMediaContainerManagementEnabled =\r\n                configurations.advancedMediaContainerManagement || false;\r\n        });\r\n    }\r\n    initHasReadPermissionOnMediaRelatedTypes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const permissionsResult = yield this.typePermissionsRestService.hasAllPermissionsForTypes(this.field.containedTypes);\r\n                this.hasReadPermissionOnMediaRelatedTypes = this.field.containedTypes.every((type) => permissionsResult[type].read);\r\n            }\r\n            catch (error) {\r\n                this.hasReadPermissionOnMediaRelatedTypes = false;\r\n                this.logService.warn('Failed to retrieve type permissions', error);\r\n            }\r\n        });\r\n    }\r\n    setMediaUuidForFormat(uuid, format) {\r\n        this.model[this.lang].medias[format] = uuid;\r\n    }\r\n    isMediaContainerSelected() {\r\n        return !isEmpty(this.model[this.lang]);\r\n    }\r\n    resetImage() {\r\n        this.fileValidationErrors = [];\r\n        this.image = null;\r\n    }\r\n    clearModel() {\r\n        Object.keys(this.model[this.lang]).forEach((key) => delete this.model[this.lang][key]);\r\n    }\r\n    resetModelForClone() {\r\n        if (!!this.editor.initialContent.cloneComponent) {\r\n            if (this.model[this.lang] &&\r\n                this.model[this.lang].mediaContainerUuid &&\r\n                this.model[this.lang].qualifier) {\r\n                this.sessionStorage.setItem(this.initialMediaContainerNameKey, this.model[this.lang].qualifier);\r\n                const cloneMediaName = `${MediaContainerClonePrefix}${this.model[this.lang].qualifier.trim()}_${Date.now().toString().substr(7, 10)}`;\r\n                this.onMediaContainerNameChange(cloneMediaName);\r\n                delete this.model[this.lang].mediaContainerUuid;\r\n                delete this.model[this.lang].catalogVersion;\r\n            }\r\n        }\r\n    }\r\n};\r\n/* @ngInject */ MediaContainerComponent = __decorate([\r\n    SeDowngradeComponent(),\r\n    Component({\r\n        selector: 'se-media-container',\r\n        template: `<div *ngIf=\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\"><se-media-container-selector [eventNameAffix]=\"selectorEventNameAffix\" [isAdvancedCloning]=\"isAdvancedCloning()\" [initialName]=\"initialMediaContainerName\" [name]=\"getMediaContainerName()\" [isEditable]=\"field.editable\" (nameChange)=\"onMediaContainerNameChange($event)\" (onCreate)=\"onMediaContainerCreate($event)\" (onRemove)=\"onMediaContainerRemove()\" (onSelect)=\"setMediaContainer($event)\" (onCreationInProgressChange)=\"onMediaContainerCreationInProgressChange($event)\"></se-media-container-selector></div><div class=\"se-media-container-field\" *ngIf=\"canShowMediaFormatWithUploadForm()\"><div class=\"se-media-container-field__media-list\"><se-media-format class=\"se-media-container-cell\" *ngFor=\"let format of field.options\" [ngClass]=\"getMediaContainerCellClassName(format.id)\" [errorMessages]=\"field.messages\" [isEditable]=\"field.editable\" [isUnderEdit]=\"isMediaFormatUnderEdit(format.id)\" [isFieldDisabled]=\"isFieldDisabled()\" [mediaUuid]=\"model[lang]?.medias[format.id]\" [mediaFormat]=\"format.id\" [mediaLabel]=\"format.label\" [allowMediaType]=\"field.allowMediaType\" (onFileSelect)=\"onFileSelect($event, format.id)\" (onDelete)=\"removeMediaByFormat(format.id)\"></se-media-format></div><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\" [image]=\"image.file\" [allowMediaType]=\"field.allowMediaType\" [maxUploadFileSize]=\"maxUploadFileSize\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onFileUploadSuccess($event, image.format)\"></se-media-upload-form><se-media-errors [errors]=\"fileValidationErrors\" [maxUploadFileSize]=\"maxUploadFileSize\"></se-media-errors></div><div *ngIf=\"!hasReadPermissionOnMediaRelatedTypes\"><span translate=\"se.cms.media.typepermissions.error\" [translateParams]=\"{ containedTypes: field.containedTypes }\"></span></div>`\r\n    }),\r\n    __param(6, Inject(GENERIC_EDITOR_WIDGET_DATA)),\r\n    __metadata(\"design:paramtypes\", [SystemEventService,\r\n        LogService,\r\n        TypePermissionsRestService,\r\n        LoadConfigManagerService,\r\n        IFileValidation,\r\n        ISharedDataService, Object])\r\n], /* @ngInject */ MediaContainerComponent);\r\nexport { /* @ngInject */ MediaContainerComponent };\r\n//# sourceMappingURL=MediaContainerComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/constants.ts"],"map":"{\"version\":3,\"file\":\"MediaContainerComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/genericEditor/media/components/mediaContainer/MediaContainerComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/media/components/mediaContainer/MediaContainerComponent.d.ts","writeByteOrderMark":false,"text":"import { OnInit } from '@angular/core';\r\nimport { TypePermissionsRestService } from 'cmscommons';\r\nimport { ErrorContext, GenericEditorField, GenericEditorWidgetData, LogService, SystemEventService, TypedMap, ISharedDataService, IFileValidation } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from 'smarteditcontainer';\r\nexport declare const MediaContainerClonePrefix = \"clone_\";\r\nexport interface MediaContainer {\r\n    catalogVersion: string;\r\n    medias: {\r\n        [index in MediaFormatType]: string;\r\n    } | unknown;\r\n    qualifier: string;\r\n    mediaContainerUuid: string;\r\n}\r\nexport declare enum MediaFormatType {\r\n    widescreen = \"widescreen\",\r\n    desktop = \"desktop\",\r\n    tablet = \"tablet\",\r\n    mobile = \"mobile\"\r\n}\r\nexport declare class MediaContainerComponent implements OnInit {\r\n    private systemEventService;\r\n    private logService;\r\n    private typePermissionsRestService;\r\n    private loadConfigManagerService;\r\n    private fileValidationService;\r\n    private sharedDataService;\r\n    image: {\r\n        file: File;\r\n        format: MediaFormatType;\r\n    };\r\n    advancedMediaContainerManagementEnabled: boolean;\r\n    hasReadPermissionOnMediaRelatedTypes: boolean;\r\n    mediaContainerCreationInProgress: boolean;\r\n    selectorEventNameAffix: string;\r\n    fileValidationErrors: ErrorContext[];\r\n    initialMediaContainerName: string;\r\n    field: GenericEditorField;\r\n    model: TypedMap<MediaContainer | undefined>;\r\n    lang: string;\r\n    isFieldDisabled: () => boolean;\r\n    maxUploadFileSize: number;\r\n    private initialMediaContainerNameKey;\r\n    private editor;\r\n    private unRegDependsOnValueChanged;\r\n    private sessionStorage;\r\n    constructor(systemEventService: SystemEventService, logService: LogService, typePermissionsRestService: TypePermissionsRestService, loadConfigManagerService: LoadConfigManagerService, fileValidationService: IFileValidation, sharedDataService: ISharedDataService, data: GenericEditorWidgetData<TypedMap<MediaContainer>>);\r\n    ngOnInit(): Promise<void>;\r\n    getMediaContainerName(): string;\r\n    getInitialMediaContainerName(): void;\r\n    getMediaContainerCellClassName(format: MediaFormatType): string;\r\n    setMediaContainer(mediaContainer: MediaContainer): void;\r\n    canShowMediaFormatWithUploadForm(): boolean;\r\n    isMediaFormatUnderEdit(format: MediaFormatType): boolean;\r\n    onFileSelect(files: FileList, format?: MediaFormatType): Promise<void>;\r\n    onFileUploadSuccess(uuid: string, format: MediaFormatType): void;\r\n    resetErrors(): void;\r\n    onMediaContainerCreate(name: string): void;\r\n    onMediaContainerRemove(): void;\r\n    onMediaContainerNameChange(name: string): void;\r\n    onMediaContainerCreationInProgressChange(inProgress: boolean): void;\r\n    removeMediaByFormat(format: MediaFormatType): void;\r\n    isAdvancedCloning(): boolean;\r\n    private onDependsOnValueChanged;\r\n    private initAdvancedMediaContainerManagementEnabled;\r\n    private initHasReadPermissionOnMediaRelatedTypes;\r\n    private setMediaUuidForFormat;\r\n    private isMediaContainerSelected;\r\n    private resetImage;\r\n    private clearModel;\r\n    private resetModelForClone;\r\n}\r\n"}}
