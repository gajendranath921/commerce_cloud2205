{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { perspectiveChangedEvictionTag, userEvictionTag, pageChangeEvictionTag, Cached, MEDIA_FOLDER_PATH, RestServiceFactory, SeDowngradeService, frequentlyChangingContent, ISettingsService, promiseUtils } from 'smarteditcommons';\r\n/**\r\n * The MediaFolderService is used to access media folders which been created in backoffice\r\n */\r\nlet /* @ngInject */ MediaFolderService = class /* @ngInject */ MediaFolderService {\r\n    constructor(restServiceFactory, settingsService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.settingsService = settingsService;\r\n        this.mediaFolderListService = this.restServiceFactory.get(MEDIA_FOLDER_PATH);\r\n        this._mediaFolderFetchStrategy = {\r\n            fetchPage: (mask, pageSize, currentPage) => __awaiter(this, void 0, void 0, function* () { return this.mediaFoldersFetchPage(mask, pageSize, currentPage); }),\r\n            fetchEntity: (id) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve({ id, name: id, qualifier: id }); })\r\n        };\r\n    }\r\n    /**\r\n     * Strategy necessary to display media folder in a paged way.\r\n     * It contains a method to retrieve pages of media folder.\r\n     * Such strategy is necessary to work with media folder in SelectComponent.\r\n     */\r\n    get mediaFoldersFetchStrategy() {\r\n        return this._mediaFolderFetchStrategy;\r\n    }\r\n    getDefaultFolder() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { error: getFolderError, data: defaultFolder } = yield promiseUtils.attempt(this.settingsService.get('smartedit.mediaUploadDefaultFolder'));\r\n            if (getFolderError) {\r\n                return Promise.resolve('');\r\n            }\r\n            return defaultFolder;\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of media folders that match the given mask\r\n     */\r\n    getMediaFolders(pageable) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const list = yield this.mediaFolderListService.get({\r\n                mask: pageable.mask,\r\n                pageSize: pageable.pageSize,\r\n                currentPage: pageable.currentPage\r\n            });\r\n            return list;\r\n        });\r\n    }\r\n    mediaFoldersFetchPage(mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { mediaFolders, pagination } = yield this.getMediaFolders({\r\n                mask,\r\n                pageSize,\r\n                currentPage\r\n            });\r\n            const items = mediaFolders.map((folder) => (Object.assign(Object.assign({}, folder), { id: folder.qualifier, name: folder.qualifier })));\r\n            return {\r\n                pagination,\r\n                results: items\r\n            };\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({\r\n        actions: [frequentlyChangingContent],\r\n        tags: [userEvictionTag, perspectiveChangedEvictionTag, pageChangeEvictionTag]\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ MediaFolderService.prototype, \"getMediaFolders\", null);\r\n/* @ngInject */ MediaFolderService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [RestServiceFactory,\r\n        ISettingsService])\r\n], /* @ngInject */ MediaFolderService);\r\nexport { /* @ngInject */ MediaFolderService };\r\n//# sourceMappingURL=MediaFolderService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"MediaFolderService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/media/services/MediaFolderService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EACH,6BAA6B,EAC7B,eAAe,EACf,qBAAqB,EACrB,MAAM,EACN,iBAAiB,EAMjB,kBAAkB,EAClB,kBAAkB,EAClB,yBAAyB,EACzB,gBAAgB,EAChB,YAAY,EACf,MAAM,kBAAkB,CAAC;AAgB1B;;GAEG;AAEH,yCAAA;IAII,YACY,kBAAsC,EACtC,eAAiC;QADjC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,oBAAe,GAAf,eAAe,CAAkB;QAEzC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAC7E,IAAI,CAAC,yBAAyB,GAAG;YAC7B,SAAS,EAAE,CACP,IAAY,EACZ,QAAgB,EAChB,WAAmB,EACiB,EAAE,gDACtC,OAAA,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAA,GAAA;YAC3D,WAAW,EAAE,CAAO,EAAU,EAAkC,EAAE,gDAC9D,OAAA,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAA,GAAA;SACvD,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,IAAI,yBAAyB;QACzB,OAAO,IAAI,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IAEY,gBAAgB;;YACzB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAC7E,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,oCAAoC,CAAC,CACjE,CAAC;YACF,IAAI,cAAc,EAAE;gBAChB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC9B;YACD,OAAO,aAAa,CAAC;QACzB,CAAC;KAAA;IAED;;OAEG;IAKW,eAAe,CAAC,QAAkB;;YAC5C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC;gBAC/C,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,WAAW,EAAE,QAAQ,CAAC,WAAW;aACpC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEa,qBAAqB,CAC/B,IAAY,EACZ,QAAgB,EAChB,WAAmB;;YAEnB,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC;gBAC5D,IAAI;gBACJ,QAAQ;gBACR,WAAW;aACd,CAAC,CAAC;YAEH,MAAM,KAAK,GAA4B,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,iCAC7D,MAAM,KACT,EAAE,EAAE,MAAM,CAAC,SAAS,EACpB,IAAI,EAAE,MAAM,CAAC,SAAS,IACxB,CAAC,CAAC;YAEJ,OAAO;gBACH,UAAU;gBACV,OAAO,EAAE,KAAK;aACjB,CAAC;QACN,CAAC;KAAA;CACJ,CAAA;AAhCG;IAJC,MAAM,CAAC;QACJ,OAAO,EAAE,CAAC,yBAAyB,CAAC;QACpC,IAAI,EAAE,CAAC,eAAe,EAAE,6BAA6B,EAAE,qBAAqB,CAAC;KAChF,CAAC;;;;yEASD;AAvDL;IADC,kBAAkB,EAAE;qCAMe,kBAAkB;QACrB,gBAAgB;sCAyEhD\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/media/services/MediaFolderService.d.ts","writeByteOrderMark":false,"text":"import { FetchStrategy, SelectItem, Page, RestServiceFactory, ISettingsService } from 'smarteditcommons';\r\n/**\r\n * Interface for media folder\r\n */\r\nexport interface IMediaFolder {\r\n    qualifier: string;\r\n}\r\nexport interface MediaFolderPage extends Page<IMediaFolder> {\r\n    mediaFolders: IMediaFolder[];\r\n}\r\nexport declare type MediaFolderSelectItem = IMediaFolder & SelectItem;\r\nexport declare type MediaFolderFetchStrategy = FetchStrategy<MediaFolderSelectItem>;\r\n/**\r\n * The MediaFolderService is used to access media folders which been created in backoffice\r\n */\r\nexport declare class MediaFolderService {\r\n    private restServiceFactory;\r\n    private settingsService;\r\n    private readonly mediaFolderListService;\r\n    private _mediaFolderFetchStrategy;\r\n    constructor(restServiceFactory: RestServiceFactory, settingsService: ISettingsService);\r\n    /**\r\n     * Strategy necessary to display media folder in a paged way.\r\n     * It contains a method to retrieve pages of media folder.\r\n     * Such strategy is necessary to work with media folder in SelectComponent.\r\n     */\r\n    get mediaFoldersFetchStrategy(): MediaFolderFetchStrategy;\r\n    getDefaultFolder(): Promise<string>;\r\n    /**\r\n     * Returns a list of media folders that match the given mask\r\n     */\r\n    private getMediaFolders;\r\n    private mediaFoldersFetchPage;\r\n}\r\n"}}
