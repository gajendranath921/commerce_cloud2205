{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { IPerspectiveService, LogService, SeDowngradeComponent, CMSModesService, PageVersioningService } from 'smarteditcommons';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"VersionsPanelComponent\", {\r\n    selector: 'se-versions-panel',\r\n    template: `<div class=\"se-toolbar-menu-content--wrapper\"><div class=\"se-toolbar-menu-content__header\"><div class=\"se-toolbar-menu-content__header-title\" translate=\"se.cms.actionitem.page.versions\"></div><button class=\"se-versions-panel__manage-btn fd-button fd-button--compact\" *ngIf=\"showManageButton\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversions.name\"></button></div><div class=\"se-versions-toolbar-menu-content__body\" [ngClass]=\"{ 'se-versions-toolbar-menu-content__body--narrow': showManageButton }\"><se-versions-search [versionsFoundCount]=\"versionsFound\" [showSearchControls]=\"pageHasVersions()\" (searchTermChange)=\"onSearchTermChanged($event)\"></se-versions-search><div><se-infinite-scrolling class=\"se-versions-panel__infinite-scroll\" *ngIf=\"pageHasVersionsOrIsLoading()\" [pageSize]=\"10\" [mask]=\"searchTerm\" [fetchPage]=\"fetchPageOfVersions\" (itemsChange)=\"onVersionItemsLoaded($event)\"><div *ngFor=\"let item of versionItems; let isLast = last\"><se-version-item [ngClass]=\"{ 'se-version-item--last': isLast }\" [pageVersion]=\"item\"></se-version-item></div></se-infinite-scrolling><div class=\"se-versions-panel__empty-list\" *ngIf=\"!pageHasVersionsOrIsLoading()\"><img src=\"static-resources/images/emptyVersions.svg\" alt=\"no versions\"/> <span class=\"se-versions-panel__no-versions-message\" translate=\"se.cms.toolbaritem.versioning.noversionsfound\"></span> <a class=\"se-versions-panel__manage-link fd-link\" *ngIf=\"showManageLink\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversionslink.name\"></a></div></div></div></div>`,\r\n    styles: [`.se-versions-panel .se-toolbar-menu-content__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-versions-panel .se-toolbar-menu-content__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-versions-panel .se-versions-toolbar-menu-content__body .se-infinite-scrolling__container{width:340px;max-height:350px;overflow-y:auto;margin-bottom:8px}.se-versions-panel .se-versions-toolbar-menu-content__body--narrow .se-infinite-scrolling__container{width:300px}.se-versions-panel__empty-list{display:flex;flex-direction:column;align-items:center;color:#51555a;width:280px;padding:20px}.se-versions-panel__no-versions-message{padding:8px 0 4px}.se-versions-panel__manage-link{margin-bottom:20px;cursor:pointer}.se-versions-panel__manage-link:hover{text-decoration:none}`],\r\n    encapsulation: ViewEncapsulation.None,\r\n    host: {\r\n        '[class.se-versions-panel]': 'true'\r\n    },\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n});\r\nlet /* @ngInject */ VersionsPanelComponent = class /* @ngInject */ VersionsPanelComponent {\r\n    constructor(pageVersioningService, perspectiveService, logService, cdr) {\r\n        this.pageVersioningService = pageVersioningService;\r\n        this.perspectiveService = perspectiveService;\r\n        this.logService = logService;\r\n        this.cdr = cdr;\r\n        this.switchMode = new EventEmitter();\r\n        this.searchTerm = '';\r\n        this.totalPageVersions = 0;\r\n        this.isLoading = true;\r\n        this.VERSIONING_MODE_KEY = CMSModesService.VERSIONING_PERSPECTIVE_KEY;\r\n        this.fetchPageOfVersions = (search, pageSize, currentPage) => this.loadVersions(search, pageSize, currentPage);\r\n    }\r\n    ngOnInit() {\r\n        this.showManageLink = this.canShowManageLink();\r\n    }\r\n    onVersionItemsLoaded(versionItems) {\r\n        this.versionItems = versionItems;\r\n    }\r\n    onSearchTermChanged(newSearchTerm) {\r\n        this.searchTerm = newSearchTerm;\r\n    }\r\n    switchToVersioningMode() {\r\n        this.perspectiveService.switchTo(this.VERSIONING_MODE_KEY);\r\n        this.switchMode.emit();\r\n    }\r\n    pageHasVersions() {\r\n        return this.totalPageVersions > 0;\r\n    }\r\n    pageHasVersionsOrIsLoading() {\r\n        return this.pageHasVersions() || this.isLoading;\r\n    }\r\n    canShowManageButton() {\r\n        return this.showManageLink && this.pageHasVersions();\r\n    }\r\n    canShowManageLink() {\r\n        const activePerspective = this.perspectiveService.getActivePerspective();\r\n        return activePerspective && activePerspective.key !== this.VERSIONING_MODE_KEY;\r\n    }\r\n    loadVersions(mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const page = yield this.pageVersioningService.findPageVersions({\r\n                    pageUuid: this.pageUuid,\r\n                    currentPage,\r\n                    mask,\r\n                    pageSize\r\n                });\r\n                this.versionsFound = page.pagination.totalCount;\r\n                if (this.isLoading) {\r\n                    this.isLoading = false;\r\n                    this.totalPageVersions = this.versionsFound;\r\n                    this.showManageButton = this.canShowManageButton();\r\n                }\r\n                if (!this.cdr.destroyed) {\r\n                    this.cdr.detectChanges();\r\n                }\r\n                return page;\r\n            }\r\n            catch (_a) {\r\n                this.logService.error(`Cannot find page versions for page ${this.pageUuid}.`);\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], /* @ngInject */ VersionsPanelComponent.prototype, \"pageUuid\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], /* @ngInject */ VersionsPanelComponent.prototype, \"switchMode\", void 0);\r\n/* @ngInject */ VersionsPanelComponent = __decorate([\r\n    SeDowngradeComponent(),\r\n    Component({\r\n        selector: 'se-versions-panel',\r\n        template: `<div class=\"se-toolbar-menu-content--wrapper\"><div class=\"se-toolbar-menu-content__header\"><div class=\"se-toolbar-menu-content__header-title\" translate=\"se.cms.actionitem.page.versions\"></div><button class=\"se-versions-panel__manage-btn fd-button fd-button--compact\" *ngIf=\"showManageButton\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversions.name\"></button></div><div class=\"se-versions-toolbar-menu-content__body\" [ngClass]=\"{ 'se-versions-toolbar-menu-content__body--narrow': showManageButton }\"><se-versions-search [versionsFoundCount]=\"versionsFound\" [showSearchControls]=\"pageHasVersions()\" (searchTermChange)=\"onSearchTermChanged($event)\"></se-versions-search><div><se-infinite-scrolling class=\"se-versions-panel__infinite-scroll\" *ngIf=\"pageHasVersionsOrIsLoading()\" [pageSize]=\"10\" [mask]=\"searchTerm\" [fetchPage]=\"fetchPageOfVersions\" (itemsChange)=\"onVersionItemsLoaded($event)\"><div *ngFor=\"let item of versionItems; let isLast = last\"><se-version-item [ngClass]=\"{ 'se-version-item--last': isLast }\" [pageVersion]=\"item\"></se-version-item></div></se-infinite-scrolling><div class=\"se-versions-panel__empty-list\" *ngIf=\"!pageHasVersionsOrIsLoading()\"><img src=\"static-resources/images/emptyVersions.svg\" alt=\"no versions\"/> <span class=\"se-versions-panel__no-versions-message\" translate=\"se.cms.toolbaritem.versioning.noversionsfound\"></span> <a class=\"se-versions-panel__manage-link fd-link\" *ngIf=\"showManageLink\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversionslink.name\"></a></div></div></div></div>`,\r\n        styles: [`.se-versions-panel .se-toolbar-menu-content__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-versions-panel .se-toolbar-menu-content__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-versions-panel .se-versions-toolbar-menu-content__body .se-infinite-scrolling__container{width:340px;max-height:350px;overflow-y:auto;margin-bottom:8px}.se-versions-panel .se-versions-toolbar-menu-content__body--narrow .se-infinite-scrolling__container{width:300px}.se-versions-panel__empty-list{display:flex;flex-direction:column;align-items:center;color:#51555a;width:280px;padding:20px}.se-versions-panel__no-versions-message{padding:8px 0 4px}.se-versions-panel__manage-link{margin-bottom:20px;cursor:pointer}.se-versions-panel__manage-link:hover{text-decoration:none}`],\r\n        encapsulation: ViewEncapsulation.None,\r\n        host: {\r\n            '[class.se-versions-panel]': 'true'\r\n        },\r\n        changeDetection: ChangeDetectionStrategy.OnPush\r\n    }),\r\n    __metadata(\"design:paramtypes\", [PageVersioningService,\r\n        IPerspectiveService,\r\n        LogService,\r\n        ChangeDetectorRef])\r\n], /* @ngInject */ VersionsPanelComponent);\r\nexport { /* @ngInject */ VersionsPanelComponent };\r\n//# sourceMappingURL=VersionsPanelComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"VersionsPanelComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/versioning/components/versionsPanel/VersionsPanelComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/versioning/components/versionsPanel/VersionsPanelComponent.d.ts","writeByteOrderMark":false,"text":"import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';\r\nimport { FetchPageStrategy, IPerspectiveService, LogService, IPageVersion, PageVersioningService } from 'smarteditcommons';\r\nexport declare class VersionsPanelComponent implements OnInit {\r\n    private pageVersioningService;\r\n    private perspectiveService;\r\n    private logService;\r\n    private cdr;\r\n    pageUuid: string;\r\n    switchMode: EventEmitter<boolean>;\r\n    searchTerm: string;\r\n    versionsFound: number;\r\n    versionItems: IPageVersion[];\r\n    showManageButton: boolean;\r\n    showManageLink: boolean;\r\n    private totalPageVersions;\r\n    private isLoading;\r\n    private VERSIONING_MODE_KEY;\r\n    constructor(pageVersioningService: PageVersioningService, perspectiveService: IPerspectiveService, logService: LogService, cdr: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    onVersionItemsLoaded(versionItems: IPageVersion[]): void;\r\n    onSearchTermChanged(newSearchTerm: string): void;\r\n    switchToVersioningMode(): void;\r\n    fetchPageOfVersions: FetchPageStrategy<IPageVersion>;\r\n    pageHasVersions(): boolean;\r\n    pageHasVersionsOrIsLoading(): boolean;\r\n    private canShowManageButton;\r\n    private canShowManageLink;\r\n    private loadVersions;\r\n}\r\n"}}
