{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FILE_VALIDATION_CONFIG, FileValidatorFactory, SeDowngradeComponent, stringUtils, GenericEditorMediaType } from 'smarteditcommons';\r\nimport { MediaBackendValidationHandler, MediaUploaderService, MediaUtilService, MediaFolderService } from '../../services';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"MediaUploadFormComponent\", {\r\n    selector: 'se-media-upload-form',\r\n    template: `<div class=\"se-media-upload-form\"><div class=\"se-media-upload-form__header\"><div class=\"se-media-upload-form__header-content\"><div class=\"se-media-upload-form__header-title\" translate=\"se.upload.image.to.folder\"></div><se-select id=\"se-media-upload-form__header-folder\" class=\"se-media-upload-form__header-folder\" [ngClass]=\"{ 'is-invalid': hasError() }\" [multiSelect]=\"false\" [controls]=\"false\" [(model)]=\"folderSelected\" (modelChange)=\"folderSelectedChanged($event)\" [fetchStrategy]=\"folderFetchStrategy\" [placeholder]=\"folderSelected\"></se-select><div class=\"se-media-upload-form__header-actions\"><button type=\"button\" class=\"fd-button--light se-media-upload-btn__cancel fd-button--compact\" translate=\"se.upload.image.cancel\" (click)=\"cancel()\"></button> <button type=\"button\" class=\"fd-button se-media-upload-btn__submit fd-button--compact\" translate=\"se.upload.image.submit\" (click)=\"uploadMedia()\"></button></div></div><div class=\"se-media-upload-form__header-error\"><span class=\"upload-field-error fd-form__message fd-form__message--error\" *ngFor=\"let error of folderErrors\">{{ error | translate }}</span></div></div><div class=\"se-media-upload-form__replace-file\"><div class=\"se-media-upload-form__file-name\">{{ image.name }}</div><se-media-file-selector [labelI18nKey]=\"'se.upload.image.replace'\" [acceptedFileTypes]=\"acceptedFileTypes\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector></div><form class=\"se-media-upload-form__file-info\"><se-media-upload-field [fieldName]=\"'code'\" [fieldValue]=\"imageParams?.code\" [fieldErrors]=\"getErrorsForFieldByCode('code')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.code'\" (fieldValueChange)=\"onChangeFieldValue($event, 'code')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'description'\" [fieldValue]=\"imageParams?.description\" [fieldErrors]=\"getErrorsForFieldByCode('description')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.description'\" (fieldValueChange)=\"onChangeFieldValue($event, 'description')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'alt-text'\" [fieldValue]=\"imageParams?.altText\" [fieldErrors]=\"getErrorsForFieldByCode('altText')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.alt.text'\" (fieldValueChange)=\"onChangeFieldValue($event, 'altText')\"></se-media-upload-field></form><se-spinner [isSpinning]=\"isUploading\"></se-spinner></div>`,\r\n    styles: [`.se-media-upload-form{box-shadow:0 6px 12px rgba(0,0,0,.175);border-radius:4px}.se-media-upload-form__header{border-bottom:1px solid #d9d9d9;display:flex;flex-direction:column}.se-media-upload-form__header-content{display:flex;flex-direction:row;align-items:center;justify-content:space-between;height:53px;padding:20px}.se-media-upload-form__header-title{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-media-upload-form__header-folder{width:200px;margin-left:8px;margin-right:auto}.se-media-upload-form__header-error{padding-left:20px}.se-media-upload-form__replace-file{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:16px 20px 0}.se-media-upload-form__file-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:80%}.se-media-upload-form__file-info{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:16px;padding:20px}`],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n});\r\nlet /* @ngInject */ MediaUploadFormComponent = class /* @ngInject */ MediaUploadFormComponent {\r\n    constructor(cdr, fileValidatorFactory, mediaBackendValidationHandler, mediaUploaderService, mediaFolderService, mediaUtilService) {\r\n        this.cdr = cdr;\r\n        this.fileValidatorFactory = fileValidatorFactory;\r\n        this.mediaBackendValidationHandler = mediaBackendValidationHandler;\r\n        this.mediaUploaderService = mediaUploaderService;\r\n        this.mediaFolderService = mediaFolderService;\r\n        this.mediaUtilService = mediaUtilService;\r\n        this.onCancel = new EventEmitter();\r\n        this.onSelect = new EventEmitter();\r\n        this.onUploadSuccess = new EventEmitter();\r\n        this.fieldErrors = [];\r\n        this.imageParams = null;\r\n        this.fileValidator = this.fileValidatorFactory.build([\r\n            {\r\n                subject: 'code',\r\n                message: 'se.uploaded.image.code.is.required',\r\n                validate: (code) => !!code\r\n            }\r\n        ]);\r\n    }\r\n    ngOnInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.acceptedFileTypes = this.mediaUtilService.getAcceptedFileTypes(this.allowMediaType);\r\n            this.folderFetchStrategy = this.mediaFolderService.mediaFoldersFetchStrategy;\r\n            this.folderSelected = yield this.mediaFolderService.getDefaultFolder();\r\n            this.cdr.markForCheck();\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        const imageChange = changes.image;\r\n        if (imageChange) {\r\n            const { name: imageName } = this.image;\r\n            this.imageParams = {\r\n                code: imageName,\r\n                description: imageName,\r\n                altText: imageName\r\n            };\r\n        }\r\n    }\r\n    getErrorsForFieldByCode(code) {\r\n        return this.fieldErrors\r\n            .filter((error) => error.subject === code)\r\n            .map((error) => error.message);\r\n    }\r\n    uploadMedia() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.fieldErrors = [];\r\n            if (!this.fileValidator.validate(this.imageParams, this.maxUploadFileSize, this.fieldErrors)) {\r\n                return;\r\n            }\r\n            const validate = this.acceptedFileTypes.filter((type) => this.image && this.image.type && this.image.type.includes(type));\r\n            if (!validate || (validate && validate.length < 1)) {\r\n                this.fieldErrors.push({\r\n                    subject: 'code',\r\n                    message: FILE_VALIDATION_CONFIG.I18N_KEYS.FILE_TYPE_INVALID\r\n                });\r\n                return;\r\n            }\r\n            this.isUploading = true;\r\n            try {\r\n                const uploadedMedia = yield this.mediaUploaderService.uploadMedia({\r\n                    file: this.image,\r\n                    code: stringUtils.escapeHtml(this.imageParams.code),\r\n                    description: stringUtils.escapeHtml(this.imageParams.description),\r\n                    altText: stringUtils.escapeHtml(this.imageParams.altText),\r\n                    folder: this.folderSelected ? this.folderSelected : ''\r\n                });\r\n                this.onMediaUploadSuccess(uploadedMedia);\r\n            }\r\n            catch (error) {\r\n                this.onMediaUploadFail(error);\r\n            }\r\n            finally {\r\n                this.isUploading = false;\r\n            }\r\n            if (!this.cdr.destroyed) {\r\n                this.cdr.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    cancel() {\r\n        this.reset();\r\n        this.onCancel.emit();\r\n    }\r\n    onChangeFieldValue(value, paramName) {\r\n        this.imageParams[paramName] = value;\r\n    }\r\n    onFileSelect(fileList) {\r\n        this.onSelect.emit(fileList);\r\n    }\r\n    hasError() {\r\n        var _a;\r\n        return ((_a = this.folderErrors) === null || _a === void 0 ? void 0 : _a.length) > 0;\r\n    }\r\n    folderSelectedChanged(folder) {\r\n        this.folderErrors = [];\r\n    }\r\n    onMediaUploadSuccess({ uuid }) {\r\n        this.reset();\r\n        this.onUploadSuccess.emit(uuid);\r\n    }\r\n    onMediaUploadFail(response) {\r\n        this.mediaBackendValidationHandler.handleResponse(response, this.fieldErrors);\r\n        this.folderErrors = this.fieldErrors\r\n            .filter((error) => error.subject === 'folder')\r\n            .map((error) => error.message);\r\n    }\r\n    reset() {\r\n        this.imageParams = null;\r\n        this.fieldErrors = [];\r\n        this.isUploading = false;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", File)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"image\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"allowMediaType\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"maxUploadFileSize\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"onCancel\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"onSelect\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], /* @ngInject */ MediaUploadFormComponent.prototype, \"onUploadSuccess\", void 0);\r\n/* @ngInject */ MediaUploadFormComponent = __decorate([\r\n    SeDowngradeComponent(),\r\n    Component({\r\n        selector: 'se-media-upload-form',\r\n        template: `<div class=\"se-media-upload-form\"><div class=\"se-media-upload-form__header\"><div class=\"se-media-upload-form__header-content\"><div class=\"se-media-upload-form__header-title\" translate=\"se.upload.image.to.folder\"></div><se-select id=\"se-media-upload-form__header-folder\" class=\"se-media-upload-form__header-folder\" [ngClass]=\"{ 'is-invalid': hasError() }\" [multiSelect]=\"false\" [controls]=\"false\" [(model)]=\"folderSelected\" (modelChange)=\"folderSelectedChanged($event)\" [fetchStrategy]=\"folderFetchStrategy\" [placeholder]=\"folderSelected\"></se-select><div class=\"se-media-upload-form__header-actions\"><button type=\"button\" class=\"fd-button--light se-media-upload-btn__cancel fd-button--compact\" translate=\"se.upload.image.cancel\" (click)=\"cancel()\"></button> <button type=\"button\" class=\"fd-button se-media-upload-btn__submit fd-button--compact\" translate=\"se.upload.image.submit\" (click)=\"uploadMedia()\"></button></div></div><div class=\"se-media-upload-form__header-error\"><span class=\"upload-field-error fd-form__message fd-form__message--error\" *ngFor=\"let error of folderErrors\">{{ error | translate }}</span></div></div><div class=\"se-media-upload-form__replace-file\"><div class=\"se-media-upload-form__file-name\">{{ image.name }}</div><se-media-file-selector [labelI18nKey]=\"'se.upload.image.replace'\" [acceptedFileTypes]=\"acceptedFileTypes\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector></div><form class=\"se-media-upload-form__file-info\"><se-media-upload-field [fieldName]=\"'code'\" [fieldValue]=\"imageParams?.code\" [fieldErrors]=\"getErrorsForFieldByCode('code')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.code'\" (fieldValueChange)=\"onChangeFieldValue($event, 'code')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'description'\" [fieldValue]=\"imageParams?.description\" [fieldErrors]=\"getErrorsForFieldByCode('description')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.description'\" (fieldValueChange)=\"onChangeFieldValue($event, 'description')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'alt-text'\" [fieldValue]=\"imageParams?.altText\" [fieldErrors]=\"getErrorsForFieldByCode('altText')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.alt.text'\" (fieldValueChange)=\"onChangeFieldValue($event, 'altText')\"></se-media-upload-field></form><se-spinner [isSpinning]=\"isUploading\"></se-spinner></div>`,\r\n        styles: [`.se-media-upload-form{box-shadow:0 6px 12px rgba(0,0,0,.175);border-radius:4px}.se-media-upload-form__header{border-bottom:1px solid #d9d9d9;display:flex;flex-direction:column}.se-media-upload-form__header-content{display:flex;flex-direction:row;align-items:center;justify-content:space-between;height:53px;padding:20px}.se-media-upload-form__header-title{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-media-upload-form__header-folder{width:200px;margin-left:8px;margin-right:auto}.se-media-upload-form__header-error{padding-left:20px}.se-media-upload-form__replace-file{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:16px 20px 0}.se-media-upload-form__file-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:80%}.se-media-upload-form__file-info{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:16px;padding:20px}`],\r\n        changeDetection: ChangeDetectionStrategy.OnPush\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\r\n        FileValidatorFactory,\r\n        MediaBackendValidationHandler,\r\n        MediaUploaderService,\r\n        MediaFolderService,\r\n        MediaUtilService])\r\n], /* @ngInject */ MediaUploadFormComponent);\r\nexport { /* @ngInject */ MediaUploadFormComponent };\r\n//# sourceMappingURL=MediaUploadFormComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/components/genericEditor/media/services/index.ts"],"map":"{\"version\":3,\"file\":\"MediaUploadFormComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/components/genericEditor/media/components/mediaUploadForm/MediaUploadFormComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/media/components/mediaUploadForm/MediaUploadFormComponent.d.ts","writeByteOrderMark":false,"text":"import { ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ErrorContext, FileValidatorFactory, GenericEditorMediaType } from 'smarteditcommons';\r\nimport { MediaBackendValidationHandler, MediaUploaderService, MediaUtilService, MediaFolderService, MediaFolderFetchStrategy } from '../../services';\r\ninterface ImageEditableParams {\r\n    code: string;\r\n    description: string;\r\n    altText: string;\r\n}\r\nexport declare class MediaUploadFormComponent implements OnChanges {\r\n    private cdr;\r\n    private fileValidatorFactory;\r\n    private mediaBackendValidationHandler;\r\n    private mediaUploaderService;\r\n    private mediaFolderService;\r\n    private mediaUtilService;\r\n    image: File;\r\n    allowMediaType: GenericEditorMediaType;\r\n    maxUploadFileSize: number;\r\n    onCancel: EventEmitter<void>;\r\n    onSelect: EventEmitter<FileList>;\r\n    onUploadSuccess: EventEmitter<string>;\r\n    acceptedFileTypes: string[];\r\n    isUploading: boolean;\r\n    fieldErrors: ErrorContext[];\r\n    imageParams: ImageEditableParams | null;\r\n    folderSelected: string;\r\n    folderFetchStrategy: MediaFolderFetchStrategy;\r\n    folderErrors: string[];\r\n    private fileValidator;\r\n    constructor(cdr: ChangeDetectorRef, fileValidatorFactory: FileValidatorFactory, mediaBackendValidationHandler: MediaBackendValidationHandler, mediaUploaderService: MediaUploaderService, mediaFolderService: MediaFolderService, mediaUtilService: MediaUtilService);\r\n    ngOnInit(): Promise<void>;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    getErrorsForFieldByCode(code: keyof ImageEditableParams): string[];\r\n    uploadMedia(): Promise<void>;\r\n    cancel(): void;\r\n    onChangeFieldValue(value: string, paramName: keyof ImageEditableParams): void;\r\n    onFileSelect(fileList: FileList): void;\r\n    hasError(): boolean;\r\n    folderSelectedChanged(folder: string): void;\r\n    private onMediaUploadSuccess;\r\n    private onMediaUploadFail;\r\n    private reset;\r\n}\r\nexport {};\r\n"}}
