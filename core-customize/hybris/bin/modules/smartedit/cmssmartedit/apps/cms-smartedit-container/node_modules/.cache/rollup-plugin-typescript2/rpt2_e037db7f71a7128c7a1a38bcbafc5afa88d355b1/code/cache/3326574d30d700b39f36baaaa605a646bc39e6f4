{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nlet /* @ngInject */ NavigationEditorTreeDragOptions = class /* @ngInject */ NavigationEditorTreeDragOptions {\r\n    /**\r\n     * Sets the dragAndDrop callback handler\r\n     *\r\n     * @param dragAndDropFunc Function to be called when `onDropCallback` is called\r\n     */\r\n    setup(dragAndDropFunc) {\r\n        this.dragAndDropHandler = dragAndDropFunc;\r\n    }\r\n    /**\r\n     * Exposes methods of this service to a literal object.\r\n     *\r\n     * This literal object is used by `TreeComponent#setNodeActions` (smarteditcommons)\r\n     * It sets new context and \"inject\" param for all methods using `.bind`\r\n     *\r\n     * It is done this way, so TreeComponent can easily iterate over the methods, if we would passed instance of this class it wouldn't be easy to iterate over these methods\r\n     */\r\n    getDragOptions() {\r\n        return {\r\n            onDropCallback: (event) => this.onDropCallback(event),\r\n            allowDropCallback: this.allowDropCallback,\r\n            beforeDropCallback: this.beforeDropCallback\r\n        };\r\n    }\r\n    onDropCallback(event) {\r\n        this.dragAndDropHandler(event);\r\n    }\r\n    allowDropCallback(event) {\r\n        return event.sourceNode.parent.uid === event.destinationNodes[0].parent.uid;\r\n    }\r\n    beforeDropCallback(event) {\r\n        if (event.sourceNode.parent.uid !== event.destinationNodes[0].parent.uid) {\r\n            return Promise.resolve({\r\n                confirmDropI18nKey: 'se.cms.navigationmanagement.navnode.confirmation'\r\n            });\r\n        }\r\n        return Promise.resolve(true);\r\n    }\r\n};\r\n/* @ngInject */ NavigationEditorTreeDragOptions = __decorate([\r\n    Injectable()\r\n], /* @ngInject */ NavigationEditorTreeDragOptions);\r\nexport { /* @ngInject */ NavigationEditorTreeDragOptions };\r\n//# sourceMappingURL=NavigationEditorTreeDragOptionsService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"NavigationEditorTreeDragOptionsService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/navigation/navigationEditor/NavigationEditorTreeDragOptionsService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAW3C,sDAAA;IAGI;;;;OAIG;IACI,KAAK,CAAC,eAAoC;QAC7C,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC;IAC9C,CAAC;IAED;;;;;;;OAOG;IACI,cAAc;QACjB,OAAO;YACH,cAAc,EAAE,CAAC,KAA+C,EAAQ,EAAE,CACtE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAC9B,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;SAC9C,CAAC;IACN,CAAC;IAEO,cAAc,CAAC,KAA+C;QAClE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,iBAAiB,CAAC,KAA+C;QACrE,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,KAAK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;IAChF,CAAC;IAEO,kBAAkB,CACtB,KAA+C;QAE/C,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,KAAK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;YACtE,OAAO,OAAO,CAAC,OAAO,CAAC;gBACnB,kBAAkB,EAAE,kDAAkD;aACzE,CAAC,CAAC;SACN;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACJ,CAAA;AA/CD;IADC,UAAU,EAAE;mDAgDZ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/navigation/navigationEditor/NavigationEditorTreeDragOptionsService.d.ts","writeByteOrderMark":false,"text":"import { NavigationNodeItem, TreeDragAndDropEvent, TreeDragAndDropOptions } from 'smarteditcommons';\r\ndeclare type dragAndDropFunction = (event: TreeDragAndDropEvent<NavigationNodeItem>) => void;\r\nexport declare class NavigationEditorTreeDragOptions {\r\n    private dragAndDropHandler;\r\n    /**\r\n     * Sets the dragAndDrop callback handler\r\n     *\r\n     * @param dragAndDropFunc Function to be called when `onDropCallback` is called\r\n     */\r\n    setup(dragAndDropFunc: dragAndDropFunction): void;\r\n    /**\r\n     * Exposes methods of this service to a literal object.\r\n     *\r\n     * This literal object is used by `TreeComponent#setNodeActions` (smarteditcommons)\r\n     * It sets new context and \"inject\" param for all methods using `.bind`\r\n     *\r\n     * It is done this way, so TreeComponent can easily iterate over the methods, if we would passed instance of this class it wouldn't be easy to iterate over these methods\r\n     */\r\n    getDragOptions(): TreeDragAndDropOptions<NavigationNodeItem>;\r\n    private onDropCallback;\r\n    private allowDropCallback;\r\n    private beforeDropCallback;\r\n}\r\nexport {};\r\n"}}
