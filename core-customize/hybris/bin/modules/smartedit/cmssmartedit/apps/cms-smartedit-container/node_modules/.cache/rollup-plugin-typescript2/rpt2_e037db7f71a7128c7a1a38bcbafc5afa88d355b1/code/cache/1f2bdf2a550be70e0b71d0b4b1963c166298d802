{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Component, HostListener } from '@angular/core';\r\nimport { CMSITEMS_UPDATE_EVENT, TYPES_RESOURCE_URI } from 'cmscommons';\r\nimport { from as fromPromise } from 'rxjs';\r\nimport { stringUtils, CrossFrameEventService, CONTEXT_SITE_ID, ModalButtonAction, ModalButtonStyle, ModalManagerService, GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, IConfirmationModalService, SeDowngradeComponent, SystemEventService } from 'smarteditcommons';\r\nimport { CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID } from '../../constants';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"GenericEditorModalComponent\", {\r\n    selector: 'se-generic-editor-modal',\r\n    template: `\n        <se-message\n            class=\"se-ge-modal--messages\"\n            *ngIf=\"showDisclaimer\"\n            type=\"info\"\n            messageId=\"VisibilityTab.DisplayComponentOffDisclaimer\"\n        >\n            <ng-container se-message-description>\n                {{ 'se.cms.editortabset.visibilitytab.disclaimer' | translate }}\n            </ng-container>\n        </se-message>\n\n        <ng-container *ngIf=\"data && data.messages\">\n            <se-message\n                class=\"se-ge-modal--messages\"\n                *ngFor=\"let msg of data.messages; let i = index\"\n                [type]=\"msg.type\"\n                messageId=\"generic-editor-model-message-{{ i }}\"\n            >\n                <ng-container se-message-description> {{ msg.message }} </ng-container>\n            </se-message>\n        </ng-container>\n\n        <se-generic-editor\n            *ngIf=\"isSetupCompleted\"\n            [id]=\"genericEditorId\"\n            [smarteditComponentId]=\"data.componentUuid\"\n            [smarteditComponentType]=\"data.componentType\"\n            [structure]=\"structure\"\n            [structureApi]=\"structureApi\"\n            [content]=\"data.content\"\n            [contentApi]=\"contentApi\"\n            [(submit)]=\"controls.submit\"\n            [(reset)]=\"controls.reset\"\n            [(isDirty)]=\"controls.isDirty\"\n            [editorStackId]=\"editorStackId\"\n            (getApi)=\"getApi($event)\"\n        >\n        </se-generic-editor>\n    `\r\n});\r\nlet /* @ngInject */ GenericEditorModalComponent = class /* @ngInject */ GenericEditorModalComponent {\r\n    constructor(modalManager, confirmationModalService, crossFrameEventService, systemEventService) {\r\n        this.modalManager = modalManager;\r\n        this.confirmationModalService = confirmationModalService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.systemEventService = systemEventService;\r\n        this.data = {};\r\n        this.controls = {};\r\n        this.genericEditorId = stringUtils.generateIdentifier();\r\n        this.showDisclaimer = false;\r\n        this.STRUCTURE_API_BASE_URL = `${TYPES_RESOURCE_URI}?code=:smarteditComponentType&mode=:structureApiMode`;\r\n        this.isSetupCompleted = false;\r\n        this.isReset = false;\r\n        this.isEscapeInProgress = false;\r\n    }\r\n    onEscapeDown() {\r\n        if (this.isEscapeInProgress) {\r\n            return;\r\n        }\r\n        this.onEscapeClicked();\r\n    }\r\n    getApi(genericEditorAPI) {\r\n        this.controls.genericEditorAPI = genericEditorAPI;\r\n        if (this.data.targetedQualifier) {\r\n            genericEditorAPI.switchToTabContainingQualifier(this.data.targetedQualifier);\r\n        }\r\n        if (this.data.initialDirty) {\r\n            genericEditorAPI.considerFormDirty();\r\n        }\r\n    }\r\n    onSave() {\r\n        return this.controls.submit().then((item) => {\r\n            this.crossFrameEventService.publish(CMSITEMS_UPDATE_EVENT);\r\n            if (this.saveCallback) {\r\n                this.saveCallback(item);\r\n            }\r\n            this.removeEventListeners();\r\n            return item;\r\n        });\r\n    }\r\n    onCancel() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.genericEditorIsDirty() && !this.isReset) {\r\n                this.confirmationModalService.confirm({\r\n                    description: 'se.editor.cancel.confirm'\r\n                }).then(() => {\r\n                    this.controls.reset().then(() => {\r\n                        this.markAsReset();\r\n                        this.removeEventListeners();\r\n                        resolve();\r\n                    }, () => {\r\n                        reject();\r\n                    });\r\n                    this.crossFrameEventService.publish('GENERIC_EDITOR_CANCEL', {\r\n                        confirmed: true\r\n                    });\r\n                }, () => {\r\n                    reject();\r\n                    this.crossFrameEventService.publish('GENERIC_EDITOR_CANCEL', {\r\n                        confirmed: false\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                this.removeEventListeners();\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    setup() {\r\n        this.structure = this.data.structure;\r\n        if (!this.structure) {\r\n            this.structureApi = this.getStructureApiByMode('DEFAULT');\r\n            if (this.isGenericEditorInReadOnlyMode()) {\r\n                this.structureApi = this.applyReadOnlyModeToStructureApiUrl(this.structureApi);\r\n            }\r\n        }\r\n        else if (this.isGenericEditorInReadOnlyMode()) {\r\n            this.structure = this.makeStructureReadOnly(this.structure);\r\n        }\r\n        this.changeStructureEventListener = this.systemEventService.subscribe(CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID, (event, data) => this.onChangeStructureEvent(event, data));\r\n        this.unrelatedValidationErrorsEvent = this.systemEventService.subscribe(GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, (event, data) => this.onUnrelatedErrors(event, data));\r\n        this.contentApi =\r\n            this.data.contentApi || `/cmswebservices/v1/sites/${CONTEXT_SITE_ID}/cmsitems`;\r\n        this.modalManager.setDismissCallback(() => this.onCancel());\r\n        this.modalManager.addButtons([\r\n            {\r\n                id: 'save',\r\n                label: this.data.saveLabel || 'se.cms.component.confirmation.modal.save',\r\n                style: ModalButtonStyle.Primary,\r\n                action: ModalButtonAction.Close,\r\n                callback: () => fromPromise(this.onSave()),\r\n                disabledFn: () => (this.controls.genericEditorAPI &&\r\n                    this.controls.genericEditorAPI.isSubmitDisabled()) ||\r\n                    this.isGenericEditorInReadOnlyMode()\r\n            },\r\n            {\r\n                id: 'cancel',\r\n                label: this.data.cancelLabel || 'se.cms.component.confirmation.modal.cancel',\r\n                style: ModalButtonStyle.Default,\r\n                action: ModalButtonAction.Dismiss,\r\n                callback: () => fromPromise(this.onCancel())\r\n            }\r\n        ]);\r\n        this.isSetupCompleted = true;\r\n    }\r\n    /**\r\n     * Method makes each attribute of the structure non editable.\r\n     */\r\n    makeStructureReadOnly(structure) {\r\n        structure.attributes = structure.attributes || [];\r\n        structure.attributes.forEach(function (element) {\r\n            element.editable = false;\r\n        });\r\n        return structure;\r\n    }\r\n    /**\r\n     * Method verifies whether the generic editor is in read only mode or not.\r\n     * Returns TRUE if the generic editor is in read only mode, FALSE otherwise.\r\n     */\r\n    isGenericEditorInReadOnlyMode() {\r\n        return !!this.data.readOnlyMode;\r\n    }\r\n    /**\r\n     * Method returns generic editor content object.\r\n     */\r\n    getGenericEditorContent() {\r\n        return this.controls.genericEditorAPI && this.controls.genericEditorAPI.getContent();\r\n    }\r\n    /**\r\n     * Method verifies whether the generic editor is in dirty state or not.\r\n     * Returns TRUE if the generic editor is in dirty state, FALSE otherwise.\r\n     */\r\n    genericEditorIsDirty() {\r\n        return this.controls.isDirty && this.controls.isDirty();\r\n    }\r\n    onChangeStructureEvent(eventId, payload) {\r\n        // Structure is reloaded only for the Generic Editor that owns the component where this event came from.\r\n        // This is done to avoid contaminating editors in a nested set-up.\r\n        if (this.genericEditorId === payload.editorId) {\r\n            if (payload.structureApiMode) {\r\n                this.structure = null;\r\n                this.structureApi = this.getStructureApiByMode(payload.structureApiMode);\r\n                if (this.isGenericEditorInReadOnlyMode()) {\r\n                    this.structureApi = this.applyReadOnlyModeToStructureApiUrl(this.structureApi);\r\n                }\r\n            }\r\n            else if (payload.structure) {\r\n                this.structureApi = null;\r\n                this.structure = payload.structure;\r\n                if (this.isGenericEditorInReadOnlyMode()) {\r\n                    this.structure = this.makeStructureReadOnly(this.structure);\r\n                }\r\n            }\r\n            this.data.content = payload.content;\r\n        }\r\n    }\r\n    onUnrelatedErrors(eventId, eventData) {\r\n        if (eventData.sourceGenericEditorId === this.data.componentUuid && this.errorCallback) {\r\n            this.errorCallback(eventData.messages, this);\r\n        }\r\n    }\r\n    /**\r\n     * Converts the structure api url to read only mode. All fields return in read only mode will not be editable.\r\n     */\r\n    applyReadOnlyModeToStructureApiUrl(structureApiUrl) {\r\n        return `${structureApiUrl}&readOnly=true`;\r\n    }\r\n    getStructureApiByMode(structureApiMode) {\r\n        return this.STRUCTURE_API_BASE_URL.replace(/:structureApiMode/gi, structureApiMode);\r\n    }\r\n    removeEventListeners() {\r\n        this.unrelatedValidationErrorsEvent();\r\n        this.changeStructureEventListener();\r\n    }\r\n    ngOnInit() {\r\n        this.modalManager.getModalData().subscribe((config) => {\r\n            this.data = config.data;\r\n            this.saveCallback = config.saveCallback;\r\n            this.errorCallback = config.errorCallback;\r\n            this.editorStackId = config.data.editorStackId;\r\n            if (!this.isSetupCompleted) {\r\n                this.setup();\r\n            }\r\n        });\r\n    }\r\n    markAsReset() {\r\n        this.isReset = true;\r\n    }\r\n    onEscapeClicked() {\r\n        this.isEscapeInProgress = true;\r\n        this.onCancel()\r\n            .then(() => this.modalManager.dismiss())\r\n            .finally(() => {\r\n            this.isEscapeInProgress = false;\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    HostListener('document:keyup.escape'),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", void 0)\r\n], /* @ngInject */ GenericEditorModalComponent.prototype, \"onEscapeDown\", null);\r\n/* @ngInject */ GenericEditorModalComponent = __decorate([\r\n    SeDowngradeComponent(),\r\n    Component({\r\n        selector: 'se-generic-editor-modal',\r\n        template: `\n        <se-message\n            class=\"se-ge-modal--messages\"\n            *ngIf=\"showDisclaimer\"\n            type=\"info\"\n            messageId=\"VisibilityTab.DisplayComponentOffDisclaimer\"\n        >\n            <ng-container se-message-description>\n                {{ 'se.cms.editortabset.visibilitytab.disclaimer' | translate }}\n            </ng-container>\n        </se-message>\n\n        <ng-container *ngIf=\"data && data.messages\">\n            <se-message\n                class=\"se-ge-modal--messages\"\n                *ngFor=\"let msg of data.messages; let i = index\"\n                [type]=\"msg.type\"\n                messageId=\"generic-editor-model-message-{{ i }}\"\n            >\n                <ng-container se-message-description> {{ msg.message }} </ng-container>\n            </se-message>\n        </ng-container>\n\n        <se-generic-editor\n            *ngIf=\"isSetupCompleted\"\n            [id]=\"genericEditorId\"\n            [smarteditComponentId]=\"data.componentUuid\"\n            [smarteditComponentType]=\"data.componentType\"\n            [structure]=\"structure\"\n            [structureApi]=\"structureApi\"\n            [content]=\"data.content\"\n            [contentApi]=\"contentApi\"\n            [(submit)]=\"controls.submit\"\n            [(reset)]=\"controls.reset\"\n            [(isDirty)]=\"controls.isDirty\"\n            [editorStackId]=\"editorStackId\"\n            (getApi)=\"getApi($event)\"\n        >\n        </se-generic-editor>\n    `\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ModalManagerService,\r\n        IConfirmationModalService,\r\n        CrossFrameEventService,\r\n        SystemEventService])\r\n], /* @ngInject */ GenericEditorModalComponent);\r\nexport { /* @ngInject */ GenericEditorModalComponent };\r\n//# sourceMappingURL=GenericEditorModalComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/constants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/genericEditorModalTypes.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorModalComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/components/GenericEditorModalComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/components/GenericEditorModalComponent.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService, ModalManagerService, GenericEditorAPI, GenericEditorOnSubmitResponse, GenericEditorStructure, IConfirmationModalService, Payload, SystemEventService, IGenericEditorModalServiceComponent } from 'smarteditcommons';\r\nexport interface GenericEditorModalComponentControls {\r\n    isDirty: () => boolean;\r\n    reset: () => Promise<void>;\r\n    submit: () => Promise<GenericEditorOnSubmitResponse>;\r\n    genericEditorAPI: GenericEditorAPI;\r\n}\r\nexport interface GenericEditorUnrelatedErrorMessage {\r\n    message: string;\r\n    subject: string;\r\n}\r\nexport interface GenericEditorUnrelatedErrorEvent {\r\n    sourceGenericEditorId: string;\r\n    messages: GenericEditorUnrelatedErrorMessage[];\r\n}\r\nexport interface StructureChangeEvent {\r\n    content: Payload;\r\n    structureApiMode: string;\r\n    structure: GenericEditorStructure;\r\n    editorId: string;\r\n}\r\nexport declare class GenericEditorModalComponent {\r\n    private readonly modalManager;\r\n    private readonly confirmationModalService;\r\n    private readonly crossFrameEventService;\r\n    private readonly systemEventService;\r\n    data: IGenericEditorModalServiceComponent;\r\n    controls: GenericEditorModalComponentControls;\r\n    editorStackId: string;\r\n    genericEditorId: string;\r\n    structure: GenericEditorStructure;\r\n    structureApi: string;\r\n    contentApi: string;\r\n    showDisclaimer: boolean;\r\n    private readonly STRUCTURE_API_BASE_URL;\r\n    private saveCallback;\r\n    private errorCallback;\r\n    private changeStructureEventListener;\r\n    private unrelatedValidationErrorsEvent;\r\n    private isSetupCompleted;\r\n    private isReset;\r\n    private isEscapeInProgress;\r\n    constructor(modalManager: ModalManagerService, confirmationModalService: IConfirmationModalService, crossFrameEventService: CrossFrameEventService, systemEventService: SystemEventService);\r\n    onEscapeDown(): void;\r\n    getApi(genericEditorAPI: GenericEditorAPI): void;\r\n    onSave(): Promise<GenericEditorOnSubmitResponse>;\r\n    onCancel(): Promise<void>;\r\n    setup(): void;\r\n    /**\r\n     * Method makes each attribute of the structure non editable.\r\n     */\r\n    makeStructureReadOnly(structure: GenericEditorStructure): GenericEditorStructure;\r\n    /**\r\n     * Method verifies whether the generic editor is in read only mode or not.\r\n     * Returns TRUE if the generic editor is in read only mode, FALSE otherwise.\r\n     */\r\n    isGenericEditorInReadOnlyMode(): boolean;\r\n    /**\r\n     * Method returns generic editor content object.\r\n     */\r\n    getGenericEditorContent(): Payload;\r\n    /**\r\n     * Method verifies whether the generic editor is in dirty state or not.\r\n     * Returns TRUE if the generic editor is in dirty state, FALSE otherwise.\r\n     */\r\n    genericEditorIsDirty(): boolean;\r\n    onChangeStructureEvent(eventId: string, payload: StructureChangeEvent): void;\r\n    onUnrelatedErrors(eventId: string, eventData: GenericEditorUnrelatedErrorEvent): void;\r\n    /**\r\n     * Converts the structure api url to read only mode. All fields return in read only mode will not be editable.\r\n     */\r\n    applyReadOnlyModeToStructureApiUrl(structureApiUrl: string): string;\r\n    getStructureApiByMode(structureApiMode: string): string;\r\n    removeEventListeners(): void;\r\n    ngOnInit(): void;\r\n    private markAsReset;\r\n    private onEscapeClicked;\r\n}\r\n"}}
