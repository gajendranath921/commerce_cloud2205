{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { values } from 'lodash';\r\nimport { ICatalogService, ISharedDataService, SeDowngradeService, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { ProductService } from 'smarteditcontainer';\r\nimport { ProductCategoryService } from '../../../../services/ProductCategoryService';\r\n/**\r\n * Supplies Fetch Strategies for Product and Category Selectors.\r\n * These strategies are used to fetch items in a paged way or to fetch an individual item.\r\n * Ultimately, the strategies are utilized by Select Componnet.\r\n */\r\nlet /* @ngInject */ CatalogInformationService = class /* @ngInject */ CatalogInformationService {\r\n    constructor(catalogService, sharedDataService, productCategoryService, productService) {\r\n        this.catalogService = catalogService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.productCategoryService = productCategoryService;\r\n        this.productService = productService;\r\n        this.init();\r\n    }\r\n    /**\r\n     * Strategy necessary to display products in a paged way.\r\n     * It contains a method to retrieve pages of products and another method to retrieve individual products.\r\n     * Such strategy is necessary to work with products in SelectComponent.\r\n     */\r\n    get productsFetchStrategy() {\r\n        return this._productsFetchStrategy;\r\n    }\r\n    /**\r\n     * Strategy necessary to display categories in a paged way.\r\n     * It contains a method to retrieve pages of categories and another method to retrieve individual categories.\r\n     * Such strategy is necessary to work with categories in a SelectComponent.\r\n     */\r\n    get categoriesFetchStrategy() {\r\n        return this._categoriesFetchStrategy;\r\n    }\r\n    makeGetProductCatalogsInformation() {\r\n        return () => this.getProductCatalogsInformation();\r\n    }\r\n    /**\r\n     *\r\n     * Retrieves the information of the product catalogs available in the current site.\r\n     *\r\n     * @returns A promise that resolves to an array containing the information of all the product catalogs available in the current site.\r\n     */\r\n    getProductCatalogsInformation() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const siteUid = yield this.getSiteUid();\r\n            if (this.cachedSiteUid === siteUid && this.parsedCatalogs) {\r\n                // Return the cached catalogs only if the site hasn't changed\r\n                // otherwise it's necessary to reload them.\r\n                return this.parsedCatalogs;\r\n            }\r\n            else {\r\n                this.cachedSiteUid = siteUid;\r\n                const catalogs = yield this.catalogService.getProductCatalogsForSite(siteUid);\r\n                const productCatalogById = this.catalogsToProductCatalogById(catalogs);\r\n                this.parsedCatalogs = values(productCatalogById);\r\n                return this.parsedCatalogs;\r\n            }\r\n        });\r\n    }\r\n    init() {\r\n        this._productsFetchStrategy = {\r\n            fetchPage: (catalogInfo, mask, pageSize, currentPage) => __awaiter(this, void 0, void 0, function* () { return this.productsFetchPage(catalogInfo, mask, pageSize, currentPage); }),\r\n            fetchEntity: (productUID) => __awaiter(this, void 0, void 0, function* () { return this.productsFetchEntity(productUID); })\r\n        };\r\n        this._categoriesFetchStrategy = {\r\n            fetchPage: (catalogInfo, mask, pageSize, currentPage) => __awaiter(this, void 0, void 0, function* () { return this.categoriesFetchPage(catalogInfo, mask, pageSize, currentPage); }),\r\n            fetchEntity: (categoryUID) => __awaiter(this, void 0, void 0, function* () { return this.categoriesFetchEntity(categoryUID); })\r\n        };\r\n    }\r\n    productsFetchPage(catalogInfo, mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const siteUid = yield this.getSiteUid();\r\n            catalogInfo.siteUID = siteUid;\r\n            const { products, pagination } = yield this.productService.findProducts(catalogInfo, {\r\n                mask,\r\n                pageSize,\r\n                currentPage\r\n            });\r\n            const items = products.map((product) => (Object.assign(Object.assign({}, product), { id: product.uid })));\r\n            return {\r\n                pagination,\r\n                results: items\r\n            };\r\n        });\r\n    }\r\n    productsFetchEntity(productUid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const siteUid = yield this.getSiteUid();\r\n            const product = yield this.productService.getProductById(siteUid, productUid);\r\n            return Object.assign(Object.assign({}, product), { id: product.uid });\r\n        });\r\n    }\r\n    categoriesFetchPage(catalogInfo, mask, pageSize, currentPage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const siteUid = yield this.getSiteUid();\r\n            catalogInfo.siteUID = siteUid;\r\n            const { productCategories, pagination } = yield this.productCategoryService.getCategories({\r\n                catalogId: catalogInfo.catalogId,\r\n                catalogVersion: catalogInfo.catalogVersion,\r\n                siteUID: catalogInfo.siteUID,\r\n                mask,\r\n                pageSize,\r\n                currentPage\r\n            });\r\n            const items = productCategories.map((category) => (Object.assign(Object.assign({}, category), { id: category.uid })));\r\n            return {\r\n                pagination,\r\n                results: items\r\n            };\r\n        });\r\n    }\r\n    categoriesFetchEntity(categoryUID) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const siteUid = yield this.getSiteUid();\r\n            const category = yield this.productCategoryService.getCategoryById(siteUid, categoryUID);\r\n            category.id = category.uid;\r\n            return category;\r\n        });\r\n    }\r\n    getSiteUid() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.sharedDataService\r\n                .get(EXPERIENCE_STORAGE_KEY)\r\n                .then(({ siteDescriptor: { uid } }) => uid);\r\n        });\r\n    }\r\n    catalogsToProductCatalogById(catalogs) {\r\n        const productCatalogById = {};\r\n        catalogs.forEach((catalog) => {\r\n            productCatalogById[catalog.catalogId] = {\r\n                id: catalog.catalogId,\r\n                name: catalog.name,\r\n                versions: catalog.versions.map(({ version }) => ({\r\n                    id: version,\r\n                    label: version\r\n                }))\r\n            };\r\n        });\r\n        return productCatalogById;\r\n    }\r\n};\r\n/* @ngInject */ CatalogInformationService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [ICatalogService,\r\n        ISharedDataService,\r\n        ProductCategoryService,\r\n        ProductService])\r\n], /* @ngInject */ CatalogInformationService);\r\nexport { /* @ngInject */ CatalogInformationService };\r\n//# sourceMappingURL=CatalogInformationService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/ProductCategoryService.ts"],"map":"{\"version\":3,\"file\":\"CatalogInformationService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/catalog/services/CatalogInformationService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/catalog/services/CatalogInformationService.d.ts","writeByteOrderMark":false,"text":"import { ICatalogService, IdWithLabel, ISharedDataService, Page, TypedMap, ProductSelectItem, SelectItem } from 'smarteditcommons';\r\nimport { ProductService, IProductSearch } from 'smarteditcontainer';\r\nimport { ProductCategorySelectItem, ProductCategoryService } from '../../../../services/ProductCategoryService';\r\nexport interface ProductCatalog {\r\n    id: string;\r\n    name: TypedMap<string>;\r\n    versions: IdWithLabel[];\r\n}\r\nexport declare type ProductsFetchStrategy = CatalogFetchStrategy<ProductSelectItem>;\r\nexport declare type CategoriesFetchStrategy = CatalogFetchStrategy<ProductCategorySelectItem>;\r\nexport interface CatalogFetchStrategy<T extends SelectItem = SelectItem> {\r\n    fetchPage: (catalogInfo: IProductSearch, mask: string, pageSize: number, currentPage: number) => Promise<Page<T>>;\r\n    fetchEntity: (uid: string) => Promise<T>;\r\n}\r\n/**\r\n * Supplies Fetch Strategies for Product and Category Selectors.\r\n * These strategies are used to fetch items in a paged way or to fetch an individual item.\r\n * Ultimately, the strategies are utilized by Select Componnet.\r\n */\r\nexport declare class CatalogInformationService {\r\n    private catalogService;\r\n    private sharedDataService;\r\n    private productCategoryService;\r\n    private productService;\r\n    private _productsFetchStrategy;\r\n    private _categoriesFetchStrategy;\r\n    private cachedSiteUid;\r\n    private parsedCatalogs;\r\n    constructor(catalogService: ICatalogService, sharedDataService: ISharedDataService, productCategoryService: ProductCategoryService, productService: ProductService);\r\n    /**\r\n     * Strategy necessary to display products in a paged way.\r\n     * It contains a method to retrieve pages of products and another method to retrieve individual products.\r\n     * Such strategy is necessary to work with products in SelectComponent.\r\n     */\r\n    get productsFetchStrategy(): ProductsFetchStrategy;\r\n    /**\r\n     * Strategy necessary to display categories in a paged way.\r\n     * It contains a method to retrieve pages of categories and another method to retrieve individual categories.\r\n     * Such strategy is necessary to work with categories in a SelectComponent.\r\n     */\r\n    get categoriesFetchStrategy(): CategoriesFetchStrategy;\r\n    makeGetProductCatalogsInformation(): () => Promise<ProductCatalog[]>;\r\n    /**\r\n     *\r\n     * Retrieves the information of the product catalogs available in the current site.\r\n     *\r\n     * @returns A promise that resolves to an array containing the information of all the product catalogs available in the current site.\r\n     */\r\n    getProductCatalogsInformation(): Promise<ProductCatalog[]>;\r\n    private init;\r\n    private productsFetchPage;\r\n    private productsFetchEntity;\r\n    private categoriesFetchPage;\r\n    private categoriesFetchEntity;\r\n    private getSiteUid;\r\n    private catalogsToProductCatalogById;\r\n}\r\n"}}
