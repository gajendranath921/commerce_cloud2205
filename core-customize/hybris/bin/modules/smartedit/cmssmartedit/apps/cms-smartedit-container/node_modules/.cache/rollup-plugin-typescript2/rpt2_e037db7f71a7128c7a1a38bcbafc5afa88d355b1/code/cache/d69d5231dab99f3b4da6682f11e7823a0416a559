{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { WORKFLOW_CREATED_EVENT, WORKFLOW_FINISHED_EVENT, DEFAULT_SYNCHRONIZATION_POLLING as SYNCHRONIZATION_POLLING } from 'cmscommons';\r\nimport { take } from 'rxjs/operators';\r\nimport { GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, IAlertService, IConfirmationModalService, IPageInfoService, SeDowngradeService, SystemEventService, L10nPipe, WorkflowService, WorkflowOperations, WorkflowStatus } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from '../../../services/GenericEditorModalService';\r\n/**\r\n * Used to manage workflows.\r\n */\r\nlet /* @ngInject */ WorkflowFacade = class /* @ngInject */ WorkflowFacade {\r\n    constructor(alertService, workflowService, confirmationModalService, genericEditorModalService, pageInfoService, systemEventService, l10nPipe) {\r\n        this.alertService = alertService;\r\n        this.workflowService = workflowService;\r\n        this.confirmationModalService = confirmationModalService;\r\n        this.genericEditorModalService = genericEditorModalService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.systemEventService = systemEventService;\r\n        this.l10nPipe = l10nPipe;\r\n        this.VERSION_LABEL_QUALIFIER = 'versionLabel';\r\n        this.CREATE_VERSION_QUALIFIER = 'createVersion';\r\n        this.SYNC_POLLING_SPEED_PREFIX = 'workflow-';\r\n        this.startWorkflowStructureAttributes = [\r\n            {\r\n                cmsStructureType: 'EditableDropdown',\r\n                qualifier: 'templateCode',\r\n                i18nKey: 'se.cms.workflow.editor.template',\r\n                localized: false,\r\n                required: true,\r\n                idAttribute: 'code',\r\n                labelAttributes: ['name']\r\n            },\r\n            {\r\n                cmsStructureType: 'LongString',\r\n                qualifier: 'description',\r\n                i18nKey: 'se.cms.workflow.editor.description',\r\n                required: false\r\n            },\r\n            {\r\n                cmsStructureType: 'WorkflowCreateVersionField',\r\n                qualifier: this.CREATE_VERSION_QUALIFIER,\r\n                required: false\r\n            }\r\n        ];\r\n        this.editWorkflowStructureAttributes = [\r\n            {\r\n                cmsStructureType: 'LongString',\r\n                qualifier: 'description',\r\n                i18nKey: 'se.cms.workflow.editor.description',\r\n                required: false\r\n            }\r\n        ];\r\n        this.makeDecisionStructureAttributes = [\r\n            {\r\n                cmsStructureType: 'LongString',\r\n                qualifier: 'comment',\r\n                i18nKey: 'se.cms.workflow.editor.comment',\r\n                required: false\r\n            },\r\n            {\r\n                cmsStructureType: 'WorkflowCreateVersionField',\r\n                qualifier: this.CREATE_VERSION_QUALIFIER,\r\n                required: false\r\n            }\r\n        ];\r\n    }\r\n    /**\r\n     * Opens the generic editor form that is used to start a workflow.\r\n     *\r\n     * @returns A promise that resolves to a workflow instance.\r\n     */\r\n    startWorkflow() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentData = yield this.getWorkflowDataForEditor();\r\n            const unregisterErrorListener = this.systemEventService.subscribe(GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, (eventId, eventData) => this.handleUnrelatedValidationErrors(eventId, eventData));\r\n            try {\r\n                return yield this.genericEditorModalService.open(componentData, (result) => {\r\n                    this.alertService.showSuccess('se.cms.workflow.create.alert.success');\r\n                    this.systemEventService.publish(WORKFLOW_CREATED_EVENT);\r\n                    this.updateWorkflowTasksCount();\r\n                    return result;\r\n                });\r\n            }\r\n            finally {\r\n                unregisterErrorListener();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    cancelWorflow(workflow) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.confirmationModalService.confirm({\r\n                title: 'se.cms.workflow.cancel.confirmation.title',\r\n                description: 'se.cms.workflow.cancel.confirmation.description'\r\n            });\r\n            try {\r\n                yield this.workflowService.cancelWorflow(workflow);\r\n                this.alertService.showSuccess('se.cms.workflow.cancel.alert.success');\r\n            }\r\n            finally {\r\n                this.systemEventService.publish(WORKFLOW_FINISHED_EVENT);\r\n                this.updateWorkflowTasksCount();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Opens modal to edit workflow.\r\n     *\r\n     * Returns edited workflow.\r\n     */\r\n    editWorkflow(workflow) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentData = yield this.getWorkflowDataForEditor(workflow);\r\n            return this.genericEditorModalService.open(componentData, (result) => result);\r\n        });\r\n    }\r\n    updateWorkflowTasksCount(count) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const tasksCount = yield (typeof count === 'undefined'\r\n                ? this.getTotalNumberOfTasks()\r\n                : count);\r\n            this.workflowService.updateWorkflowTasksCount(tasksCount);\r\n        });\r\n    }\r\n    /**\r\n     * Returns all actions for a given workflow code.\r\n     */\r\n    getAllActionsForWorkflow(workflowCode) {\r\n        return this.workflowService.getAllActionsForWorkflowCode(workflowCode);\r\n    }\r\n    /**\r\n     * Returns all active actions for a given workflow code and for the current user.\r\n     */\r\n    getActiveActionsForWorkflow(workflowCode) {\r\n        return this.workflowService.getActiveActionsForWorkflowCode(workflowCode);\r\n    }\r\n    /**\r\n     * Returns a paged list of comments for a given workflow and workflow action.\r\n     *\r\n     * Since the result is paginated and used by the InfiniteScrollingComponent, the list of comments is populated in the results property.\r\n     */\r\n    getCommentsForWorkflowAction(workflowCode, workflowActionCode, payload) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const page = yield this.workflowService.getCommentsForWorkflowAction(workflowCode, workflowActionCode, payload);\r\n            page.results = page.comments;\r\n            delete page.comments;\r\n            return page;\r\n        });\r\n    }\r\n    /**\r\n     * Returns a paged list of active workflow inbox tasks for a given user.\r\n     */\r\n    getWorkflowInboxTasks(payload) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const page = yield this.workflowService.getWorkflowInboxTasks(payload);\r\n            page.results = page.tasks;\r\n            delete page.tasks;\r\n            return page;\r\n        });\r\n    }\r\n    getTotalNumberOfTasks() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const page = yield this.getWorkflowInboxTasks({ pageSize: 1, currentPage: 0 });\r\n            return page.pagination.totalCount;\r\n        });\r\n    }\r\n    /**\r\n     * Makes a decision for a given workflow action and workflow decision.\r\n     */\r\n    makeDecision(workflowCode, workflowAction, decision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const componentData = {\r\n                title: yield this.l10nPipe.transform(decision.name).pipe(take(1)).toPromise(),\r\n                structure: {\r\n                    attributes: this.makeDecisionStructureAttributes\r\n                },\r\n                contentApi: this.workflowService.getResourceWorkflowOperationsURI(),\r\n                saveLabel: 'se.cms.workflow.editor.button.submit',\r\n                content: {\r\n                    operation: WorkflowOperations.MAKE_DECISION,\r\n                    workflowCode,\r\n                    actionCode: workflowAction.code,\r\n                    decisionCode: decision.code\r\n                },\r\n                initialDirty: true\r\n            };\r\n            return this.genericEditorModalService.open(componentData, (result) => __awaiter(this, void 0, void 0, function* () {\r\n                yield this.confirmDecision(result.status, workflowAction, decision);\r\n                return result;\r\n            }), null);\r\n        });\r\n    }\r\n    confirmDecision(status, workflowAction, decision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentPageUuid = yield this.pageInfoService.getPageUUID();\r\n            yield this.systemEventService.publish(SYNCHRONIZATION_POLLING.SPEED_UP, this.SYNC_POLLING_SPEED_PREFIX + currentPageUuid);\r\n            if (status.toLowerCase() === WorkflowStatus.FINISHED) {\r\n                this.alertService.showSuccess('se.cms.workflow.completed.alert.success');\r\n                this.systemEventService.publishAsync(WORKFLOW_FINISHED_EVENT);\r\n            }\r\n            else {\r\n                this.alertService.showSuccess({\r\n                    message: 'se.cms.workflow.make.decision.success',\r\n                    messagePlaceholders: {\r\n                        workflowDecisionName: yield this.l10nPipe\r\n                            .transform(decision.name)\r\n                            .pipe(take(1))\r\n                            .toPromise(),\r\n                        workflowActionName: yield this.l10nPipe\r\n                            .transform(workflowAction.name)\r\n                            .pipe(take(1))\r\n                            .toPromise()\r\n                    }\r\n                });\r\n            }\r\n            // resets back to slow polling\r\n            this.systemEventService.publish(SYNCHRONIZATION_POLLING.SLOW_DOWN, this.SYNC_POLLING_SPEED_PREFIX + currentPageUuid);\r\n            const tasksCount = yield this.getTotalNumberOfTasks();\r\n            this.updateWorkflowTasksCount(tasksCount);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the data for GenericEditorModalComponent.\r\n     *\r\n     * @param workflow the data object to populate generic editor.\r\n     * If workflow is null the generic editor displays fields to start a workflow,\r\n     * Otherwise, the generic editor displays fields to edit a workflow.\r\n     */\r\n    getWorkflowDataForEditor(workflow = null) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const isStartingWorkflow = workflow === null;\r\n            const componentData = {\r\n                title: null,\r\n                contentApi: this.workflowService.getResourceWorkflowURI()\r\n            };\r\n            return isStartingWorkflow\r\n                ? this.getComponentDataForStartingWorkflow(componentData)\r\n                : this.getComponentDataForNonStartingWorkflow(componentData, workflow.workflowCode);\r\n        });\r\n    }\r\n    getComponentDataForStartingWorkflow(componentData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const templateCodeField = this.startWorkflowStructureAttributes.find((structureAttribute) => structureAttribute.qualifier === 'templateCode');\r\n            const workflowTemplates = yield this.workflowService.getWorkflowTemplates({});\r\n            templateCodeField.options = workflowTemplates;\r\n            componentData.title = 'se.cms.workflow.editor.start.workflow.title';\r\n            componentData.saveLabel = 'se.cms.workflow.editor.button.start';\r\n            componentData.structure = {\r\n                attributes: this.startWorkflowStructureAttributes\r\n            };\r\n            const pageUuid = yield this.pageInfoService.getPageUUID();\r\n            componentData.content = {\r\n                attachments: [pageUuid]\r\n            };\r\n            return componentData;\r\n        });\r\n    }\r\n    getComponentDataForNonStartingWorkflow(componentData, workflowCode) {\r\n        componentData.title = 'se.cms.workflow.editor.edit.workflow.title';\r\n        componentData.saveLabel = 'se.cms.workflow.editor.button.save';\r\n        componentData.structure = {\r\n            attributes: this.editWorkflowStructureAttributes\r\n        };\r\n        componentData.componentUuid = workflowCode;\r\n        componentData.componentType = 'workflow';\r\n        return componentData;\r\n    }\r\n    /**\r\n     * Handles errors that the generic editor didn't handle directly (for example, due to unknown qualifiers) in two\r\n     * ways:\r\n     * 1. Even though there are different attributes for createVersion and versionLabel, in the front-end they are handled\r\n     *    in the same widget, under the createVersion qualifier. However, when validating, the backend sends the error\r\n     *    directly to versionLabel. Thus, any time there's an error directed to versionLabel it needs to be assigned to\r\n     *    createVersion and republished for it to become visible.\r\n     * 2. Any other error will be displayed in an alert.\r\n     */\r\n    handleUnrelatedValidationErrors(key, eventData) {\r\n        if (!eventData.sourceGenericEditorId) {\r\n            return;\r\n        }\r\n        let alertMessage = '';\r\n        const errorsToRepublish = [];\r\n        eventData.messages.forEach((error) => {\r\n            if (error.subject === this.VERSION_LABEL_QUALIFIER) {\r\n                error.subject = this.CREATE_VERSION_QUALIFIER;\r\n                errorsToRepublish.push(error);\r\n            }\r\n            else {\r\n                alertMessage += error.message + ' ';\r\n            }\r\n        });\r\n        if (alertMessage) {\r\n            this.alertService.showDanger(alertMessage);\r\n        }\r\n        if (errorsToRepublish.length > 0) {\r\n            this.systemEventService.publishAsync(GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {\r\n                messages: errorsToRepublish\r\n            });\r\n        }\r\n    }\r\n};\r\n/* @ngInject */ WorkflowFacade = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IAlertService,\r\n        WorkflowService,\r\n        IConfirmationModalService,\r\n        GenericEditorModalService,\r\n        IPageInfoService,\r\n        SystemEventService,\r\n        L10nPipe])\r\n], /* @ngInject */ WorkflowFacade);\r\nexport { /* @ngInject */ WorkflowFacade };\r\n//# sourceMappingURL=WorkflowFacade.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/components/GenericEditorModalComponent.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/src/services/GenericEditorModalService.ts"],"map":"{\"version\":3,\"file\":\"WorkflowFacade.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/workflow/services/WorkflowFacade.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/workflow/services/WorkflowFacade.d.ts","writeByteOrderMark":false,"text":"import { IAlertService, IConfirmationModalService, IPageInfoService, Page, Pageable, SystemEventService, L10nPipe, WorkflowService, WorkflowTaskPage, Workflow, WorkflowAction, WorkflowActionComment, WorkflowDecision } from 'smarteditcommons';\r\nimport { GenericEditorModalService } from '../../../services/GenericEditorModalService';\r\n/**\r\n * Used to manage workflows.\r\n */\r\nexport declare class WorkflowFacade {\r\n    private alertService;\r\n    private workflowService;\r\n    private confirmationModalService;\r\n    private genericEditorModalService;\r\n    private pageInfoService;\r\n    private systemEventService;\r\n    private l10nPipe;\r\n    private VERSION_LABEL_QUALIFIER;\r\n    private CREATE_VERSION_QUALIFIER;\r\n    private SYNC_POLLING_SPEED_PREFIX;\r\n    private startWorkflowStructureAttributes;\r\n    private editWorkflowStructureAttributes;\r\n    private makeDecisionStructureAttributes;\r\n    constructor(alertService: IAlertService, workflowService: WorkflowService, confirmationModalService: IConfirmationModalService, genericEditorModalService: GenericEditorModalService, pageInfoService: IPageInfoService, systemEventService: SystemEventService, l10nPipe: L10nPipe);\r\n    /**\r\n     * Opens the generic editor form that is used to start a workflow.\r\n     *\r\n     * @returns A promise that resolves to a workflow instance.\r\n     */\r\n    startWorkflow(): Promise<Workflow>;\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    cancelWorflow(workflow: Workflow): Promise<void>;\r\n    /**\r\n     * Opens modal to edit workflow.\r\n     *\r\n     * Returns edited workflow.\r\n     */\r\n    editWorkflow(workflow: Workflow): Promise<Workflow>;\r\n    updateWorkflowTasksCount(count?: number): Promise<void>;\r\n    /**\r\n     * Returns all actions for a given workflow code.\r\n     */\r\n    getAllActionsForWorkflow(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Returns all active actions for a given workflow code and for the current user.\r\n     */\r\n    getActiveActionsForWorkflow(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Returns a paged list of comments for a given workflow and workflow action.\r\n     *\r\n     * Since the result is paginated and used by the InfiniteScrollingComponent, the list of comments is populated in the results property.\r\n     */\r\n    getCommentsForWorkflowAction(workflowCode: string, workflowActionCode: string, payload: Pageable): Promise<Page<WorkflowActionComment>>;\r\n    /**\r\n     * Returns a paged list of active workflow inbox tasks for a given user.\r\n     */\r\n    getWorkflowInboxTasks(payload: Pageable): Promise<WorkflowTaskPage>;\r\n    getTotalNumberOfTasks(): Promise<number>;\r\n    /**\r\n     * Makes a decision for a given workflow action and workflow decision.\r\n     */\r\n    makeDecision(workflowCode: string, workflowAction: WorkflowAction, decision: WorkflowDecision): Promise<Workflow>;\r\n    private confirmDecision;\r\n    /**\r\n     * Returns the data for GenericEditorModalComponent.\r\n     *\r\n     * @param workflow the data object to populate generic editor.\r\n     * If workflow is null the generic editor displays fields to start a workflow,\r\n     * Otherwise, the generic editor displays fields to edit a workflow.\r\n     */\r\n    private getWorkflowDataForEditor;\r\n    private getComponentDataForStartingWorkflow;\r\n    private getComponentDataForNonStartingWorkflow;\r\n    /**\r\n     * Handles errors that the generic editor didn't handle directly (for example, due to unknown qualifiers) in two\r\n     * ways:\r\n     * 1. Even though there are different attributes for createVersion and versionLabel, in the front-end they are handled\r\n     *    in the same widget, under the createVersion qualifier. However, when validating, the backend sends the error\r\n     *    directly to versionLabel. Thus, any time there's an error directed to versionLabel it needs to be assigned to\r\n     *    createVersion and republished for it to become visible.\r\n     * 2. Any other error will be displayed in an alert.\r\n     */\r\n    private handleUnrelatedValidationErrors;\r\n}\r\n"}}
