{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ISlotVisibilityService } from 'cmscommons';\r\nimport { LogService, SeDowngradeService, CmsitemsRestService, stringUtils, CrossFrameEventService, IPageTreeNodeService, EVENT_PAGE_TREE_SLOT_SELECTED, EVENT_PAGE_TREE_COMPONENT_SELECTED, EVENT_PAGE_TREE_SLOT_NEED_UPDATE } from 'smarteditcommons';\r\nexport const INTERVAL_RETRIES = 20;\r\nexport const INTERVAL_MILLISEC = 300;\r\n/**\r\n * Used to build extra information for page tree nodes such as get slot node's hidden components,\r\n *  get component node's information from backend by uuid\r\n * */\r\nlet /* @ngInject */ NodeInfoService = class /* @ngInject */ NodeInfoService {\r\n    constructor(crossFrameEventService, cmsitemsRestService, logService, slotVisibilityService, pageTreeNodeService) {\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.logService = logService;\r\n        this.slotVisibilityService = slotVisibilityService;\r\n        this.pageTreeNodeService = pageTreeNodeService;\r\n        this.treeNodes = [];\r\n        this.crossFrameEventService.subscribe(EVENT_PAGE_TREE_SLOT_NEED_UPDATE, (_eventId, eventData) => this.updatePartTreeNodesInfoBySlotUuid(eventData));\r\n    }\r\n    buildNodesInfo() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const nodes = yield this.pageTreeNodeService.getSlotNodes();\r\n            this.treeNodes = yield Promise.all(nodes.map((node) => __awaiter(this, void 0, void 0, function* () { return this.addMoreInfoToOneNode(node); })));\r\n            return this.treeNodes;\r\n        });\r\n    }\r\n    updatePartTreeNodesInfo(updatedNodes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.treeNodes = yield Promise.all(this.treeNodes.map((node) => __awaiter(this, void 0, void 0, function* () {\r\n                if (Object.keys(updatedNodes).includes(node.elementUuid)) {\r\n                    node.childrenNode = updatedNodes[node.elementUuid];\r\n                    return this.addMoreInfoToOneNode(node);\r\n                }\r\n                else {\r\n                    return node;\r\n                }\r\n            })));\r\n            return this.treeNodes;\r\n        });\r\n    }\r\n    updatePartTreeNodesInfoBySlotUuid(slotUuid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.treeNodes = yield Promise.all(this.treeNodes.map((node) => __awaiter(this, void 0, void 0, function* () {\r\n                if (node.componentUuid === slotUuid) {\r\n                    return this.addMoreInfoToOneNode(node);\r\n                }\r\n                else {\r\n                    return node;\r\n                }\r\n            })));\r\n            return this.treeNodes;\r\n        });\r\n    }\r\n    publishComponentSelected(component, activeSlot, slotElementUuid) {\r\n        // Should active the slot of this component\r\n        if (activeSlot) {\r\n            this.crossFrameEventService.publish(EVENT_PAGE_TREE_SLOT_SELECTED, {\r\n                elementUuid: slotElementUuid,\r\n                active: true\r\n            });\r\n        }\r\n        // Active the component itself\r\n        this.crossFrameEventService.publish(EVENT_PAGE_TREE_COMPONENT_SELECTED, {\r\n            elementUuid: component.elementUuid,\r\n            active: component.isExpanded\r\n        });\r\n    }\r\n    publishSlotSelected(slot) {\r\n        // Active the slot itself\r\n        this.crossFrameEventService.publish(EVENT_PAGE_TREE_SLOT_SELECTED, {\r\n            elementUuid: slot.elementUuid,\r\n            active: slot.isExpanded\r\n        });\r\n        // To make other active component become inactive\r\n        this.crossFrameEventService.publish(EVENT_PAGE_TREE_COMPONENT_SELECTED, {\r\n            elementUuid: slot.elementUuid,\r\n            active: slot.isExpanded\r\n        });\r\n    }\r\n    addMoreInfoToOneNode(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const hiddenComponents = yield this.slotVisibilityService.getHiddenComponents(node.componentId);\r\n            const childUuids = node.childrenNode.map((child) => child.componentUuid);\r\n            const displayComponents = yield this.getComponentsDataByUUIDs(childUuids);\r\n            let componentNodes = displayComponents.map((component) => this.buildDisplayComponentNode(component, node));\r\n            componentNodes = componentNodes.concat(hiddenComponents.map((component) => this.buildHiddenComponentNode(component)));\r\n            return Object.assign(Object.assign({}, node), { componentNodes });\r\n        });\r\n    }\r\n    getComponentsDataByUUIDs(uuids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield this.cmsitemsRestService.getByIds(uuids, 'DEFAULT');\r\n                return Promise.resolve((data.response ? data.response : [data]));\r\n            }\r\n            catch (error) {\r\n                this.logService.error('SlotInfoService:: getSlotsDataByUUIDs error:', error.message);\r\n            }\r\n        });\r\n    }\r\n    buildHiddenComponentNode(component) {\r\n        const elementUuid = stringUtils.generateIdentifier();\r\n        return Object.assign({ isHidden: true, isExpanded: false, componentNodes: [], elementUuid }, component);\r\n    }\r\n    buildDisplayComponentNode(component, slot) {\r\n        const node = slot.childrenNode.find((child) => child.componentUuid === component.uuid);\r\n        const { componentId, componentUuid, componentTypeFromPage, containerId, containerType, catalogVersionUuid, elementUuid } = node;\r\n        return Object.assign({ isHidden: false, isExpanded: false, componentId,\r\n            componentUuid,\r\n            componentTypeFromPage,\r\n            containerId,\r\n            containerType,\r\n            catalogVersionUuid,\r\n            elementUuid, componentNodes: [] }, component);\r\n    }\r\n};\r\n/* @ngInject */ NodeInfoService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [CrossFrameEventService,\r\n        CmsitemsRestService,\r\n        LogService,\r\n        ISlotVisibilityService,\r\n        IPageTreeNodeService])\r\n], /* @ngInject */ NodeInfoService);\r\nexport { /* @ngInject */ NodeInfoService };\r\n//# sourceMappingURL=NodeInfoService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"NodeInfoService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/pageTree/NodeInfoService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAiB,sBAAsB,EAAE,MAAM,YAAY,CAAC;AACnE,OAAO,EACH,UAAU,EACV,kBAAkB,EAElB,mBAAmB,EACnB,WAAW,EACX,sBAAsB,EACtB,oBAAoB,EAEpB,6BAA6B,EAC7B,kCAAkC,EAClC,gCAAgC,EACnC,MAAM,kBAAkB,CAAC;AAE1B,MAAM,CAAC,MAAM,gBAAgB,GAAG,EAAE,CAAC;AACnC,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAkBrC;;;KAGK;AAGL,sCAAA;IAEI,YACqB,sBAA8C,EAC9C,mBAAwC,EACxC,UAAsB,EACtB,qBAA6C,EAC7C,mBAAyC;QAJzC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAwB;QAC7C,wBAAmB,GAAnB,mBAAmB,CAAsB;QAE1D,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,sBAAsB,CAAC,SAAS,CACjC,gCAAgC,EAChC,CAAC,QAAgB,EAAE,SAAkB,EAAE,EAAE,CACrC,IAAI,CAAC,iCAAiC,CAAC,SAAS,CAAC,CACxD,CAAC;IACN,CAAC;IAEY,cAAc;;YACvB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;YAC5D,IAAI,CAAC,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,KAAK,CAAC,GAAG,CAAC,CAAO,IAAI,EAAE,EAAE,gDAAC,OAAA,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA,GAAA,CAAC,CAC7D,CAAC;YAEF,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;KAAA;IAEY,uBAAuB,CAAC,YAAqB;;YACtD,IAAI,CAAC,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAO,IAAI,EAAE,EAAE;gBAC9B,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBACtD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,CAAmB,CAAC;oBACrE,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;iBAC1C;qBAAM;oBACH,OAAO,IAAI,CAAC;iBACf;YACL,CAAC,CAAA,CAAC,CACL,CAAC;YACF,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;KAAA;IAEY,iCAAiC,CAAC,QAAgB;;YAC3D,IAAI,CAAC,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAO,IAAI,EAAE,EAAE;gBAC9B,IAAI,IAAI,CAAC,aAAa,KAAK,QAAQ,EAAE;oBACjC,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;iBAC1C;qBAAM;oBACH,OAAO,IAAI,CAAC;iBACf;YACL,CAAC,CAAA,CAAC,CACL,CAAC;YACF,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;KAAA;IAEM,wBAAwB,CAC3B,SAAwB,EACxB,UAAmB,EACnB,eAAuB;QAEvB,2CAA2C;QAC3C,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,6BAA6B,EAAE;gBAC/D,WAAW,EAAE,eAAe;gBAC5B,MAAM,EAAE,IAAI;aACf,CAAC,CAAC;SACN;QAED,8BAA8B;QAC9B,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,kCAAkC,EAAE;YACpE,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,MAAM,EAAE,SAAS,CAAC,UAAU;SAC/B,CAAC,CAAC;IACP,CAAC;IAEM,mBAAmB,CAAC,IAAc;QACrC,yBAAyB;QACzB,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,6BAA6B,EAAE;YAC/D,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,UAAU;SAC1B,CAAC,CAAC;QAEH,iDAAiD;QACjD,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,kCAAkC,EAAE;YACpE,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,UAAU;SAC1B,CAAC,CAAC;IACP,CAAC;IAEa,oBAAoB,CAAC,IAAkB;;YACjD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CACzE,IAAI,CAAC,WAAW,CACnB,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACzE,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAC1E,IAAI,cAAc,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CACrD,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,IAAI,CAAC,CAClD,CAAC;YACF,cAAc,GAAG,cAAc,CAAC,MAAM,CAClC,gBAAgB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,CAChF,CAAC;YACF,uCAAY,IAAI,KAAE,cAAc,IAAG;QACvC,CAAC;KAAA;IAEa,wBAAwB,CAAC,KAAe;;YAClD,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAgB,KAAK,EAAE,SAAS,CAAC,CAAC;gBACtF,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAoB,CAAC,CAAC;aACvF;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;IAEO,wBAAwB,CAAC,SAAwB;QACrD,MAAM,WAAW,GAAG,WAAW,CAAC,kBAAkB,EAAE,CAAC;QACrD,uBACI,QAAQ,EAAE,IAAI,EACd,UAAU,EAAE,KAAK,EACjB,cAAc,EAAE,EAAE,EAClB,WAAW,IACR,SAAS,EACd;IACN,CAAC;IAEO,yBAAyB,CAAC,SAAwB,EAAE,IAAkB;QAC1E,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC;QACvF,MAAM,EACF,WAAW,EACX,aAAa,EACb,qBAAqB,EACrB,WAAW,EACX,aAAa,EACb,kBAAkB,EAClB,WAAW,EACd,GAAG,IAAI,CAAC;QACT,uBACI,QAAQ,EAAE,KAAK,EACf,UAAU,EAAE,KAAK,EACjB,WAAW;YACX,aAAa;YACb,qBAAqB;YACrB,WAAW;YACX,aAAa;YACb,kBAAkB;YAClB,WAAW,EACX,cAAc,EAAE,EAAE,IACf,SAAS,EACd;IACN,CAAC;CACJ,CAAA;AAnJD;IADC,kBAAkB,EAAE;qCAI4B,sBAAsB;QACzB,mBAAmB;QAC5B,UAAU;QACC,sBAAsB;QACxB,oBAAoB;mCA4IjE\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/pageTree/NodeInfoService.d.ts","writeByteOrderMark":false,"text":"import { ICMSComponent, ISlotVisibilityService } from 'cmscommons';\r\nimport { LogService, PageTreeNode, CmsitemsRestService, CrossFrameEventService, IPageTreeNodeService, Payload } from 'smarteditcommons';\r\nexport declare const INTERVAL_RETRIES = 20;\r\nexport declare const INTERVAL_MILLISEC = 300;\r\nexport interface SlotNode extends PageTreeNode {\r\n    componentNodes: ComponentNode[];\r\n}\r\nexport interface ComponentNode extends ICMSComponent {\r\n    isHidden: boolean;\r\n    isExpanded: boolean;\r\n    componentNodes?: ComponentNode[];\r\n    componentId?: string;\r\n    componentUuid?: string;\r\n    componentTypeFromPage?: string;\r\n    containerId?: string;\r\n    containerType?: string;\r\n    catalogVersionUuid?: string;\r\n    elementUuid?: string;\r\n}\r\n/**\r\n * Used to build extra information for page tree nodes such as get slot node's hidden components,\r\n *  get component node's information from backend by uuid\r\n * */\r\nexport declare class NodeInfoService {\r\n    private readonly crossFrameEventService;\r\n    private readonly cmsitemsRestService;\r\n    private readonly logService;\r\n    private readonly slotVisibilityService;\r\n    private readonly pageTreeNodeService;\r\n    protected treeNodes: SlotNode[];\r\n    constructor(crossFrameEventService: CrossFrameEventService, cmsitemsRestService: CmsitemsRestService, logService: LogService, slotVisibilityService: ISlotVisibilityService, pageTreeNodeService: IPageTreeNodeService);\r\n    buildNodesInfo(): Promise<SlotNode[]>;\r\n    updatePartTreeNodesInfo(updatedNodes: Payload): Promise<SlotNode[]>;\r\n    updatePartTreeNodesInfoBySlotUuid(slotUuid: string): Promise<SlotNode[]>;\r\n    publishComponentSelected(component: ComponentNode, activeSlot: boolean, slotElementUuid: string): void;\r\n    publishSlotSelected(slot: SlotNode): void;\r\n    private addMoreInfoToOneNode;\r\n    private getComponentsDataByUUIDs;\r\n    private buildHiddenComponentNode;\r\n    private buildDisplayComponentNode;\r\n}\r\n"}}
