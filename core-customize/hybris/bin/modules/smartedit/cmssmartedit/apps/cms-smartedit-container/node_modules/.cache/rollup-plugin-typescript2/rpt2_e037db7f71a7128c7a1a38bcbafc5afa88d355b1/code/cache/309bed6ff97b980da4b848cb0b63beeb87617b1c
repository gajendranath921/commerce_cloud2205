{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport * as lodash from 'lodash';\r\nimport { RestServiceFactory, SeDowngradeService, MEDIA_RESOURCE_URI } from 'smarteditcommons';\r\n/**\r\n * This service provides functionality to upload images and to fetch images by code for a specific catalog-catalog version combination.\r\n */\r\nlet /* @ngInject */ MediaUploaderService = class /* @ngInject */ MediaUploaderService {\r\n    constructor(restServiceFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.mediaRestService = this.restServiceFactory.get(MEDIA_RESOURCE_URI);\r\n    }\r\n    /**\r\n     * Uploads the media to the catalog.\r\n     *\r\n     * @returns Promise that resolves with the media object if request is successful.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    uploadMedia(media) {\r\n        var _a;\r\n        const formData = new FormData();\r\n        lodash.forEach(media, (value, key) => {\r\n            formData.append(key, value);\r\n        });\r\n        return this.mediaRestService.save(formData, {\r\n            headers: { enctype: 'multipart/form-data', fileSize: '' + ((_a = media === null || media === void 0 ? void 0 : media.file) === null || _a === void 0 ? void 0 : _a.size) }\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ MediaUploaderService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [RestServiceFactory])\r\n], /* @ngInject */ MediaUploaderService);\r\nexport { /* @ngInject */ MediaUploaderService };\r\n//# sourceMappingURL=MediaUploaderService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"MediaUploaderService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/components/genericEditor/media/services/MediaUploaderService.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAEH,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAiB1B;;GAEG;AAEH,2CAAA;IAGI,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,KAAoB;;QAC5B,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,GAAW,EAAE,EAAE;YACzC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAe,EAAE;YAC/C,OAAO,EAAE,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,EAAE,UAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,0CAAE,IAAI,CAAA,EAAE;SAChF,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AAvBD;IADC,kBAAkB,EAAE;qCAIuB,kBAAkB;wCAoB7D\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/cmssmartedit/apps/cms-smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/media/services/MediaUploaderService.d.ts","writeByteOrderMark":false,"text":"import { ICMSMedia } from 'cmscommons';\r\nimport { RestServiceFactory } from 'smarteditcommons';\r\nexport interface MediaToUpload {\r\n    /**\r\n     * The {@link https://developer.mozilla.org/en/docs/Web/API/File File} object to be* uploaded.\r\n     */\r\n    file: File;\r\n    /** A unique code identifier for the media. */\r\n    code: string;\r\n    /** A description of the media. */\r\n    description: string;\r\n    /** An alternate text to be shown for the media. */\r\n    altText: string;\r\n    /** the specific folder that media will be upload to. */\r\n    folder: string;\r\n}\r\n/**\r\n * This service provides functionality to upload images and to fetch images by code for a specific catalog-catalog version combination.\r\n */\r\nexport declare class MediaUploaderService {\r\n    private restServiceFactory;\r\n    private readonly mediaRestService;\r\n    constructor(restServiceFactory: RestServiceFactory);\r\n    /**\r\n     * Uploads the media to the catalog.\r\n     *\r\n     * @returns Promise that resolves with the media object if request is successful.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    uploadMedia(media: MediaToUpload): Promise<ICMSMedia>;\r\n}\r\n"}}
