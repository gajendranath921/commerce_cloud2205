{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { SeDowngradeService } from '../../di';\r\nimport { PAGE_CONTEXT_SITE_ID } from '../../utils/smarteditconstants';\r\nimport { IRestServiceFactory } from '../interfaces';\r\n/**\r\n * Used to manage versions in a page.\r\n */\r\nlet /* @ngInject */ PageVersioningService = class /* @ngInject */ PageVersioningService {\r\n    constructor(restServiceFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.pageVersionsServiceResourceURI = `/cmswebservices/v1/sites/${PAGE_CONTEXT_SITE_ID}/cmsitems/:pageUuid/versions`;\r\n        this.pageVersionsRollbackServiceResourceURI = `/cmswebservices/v1/sites/${PAGE_CONTEXT_SITE_ID}/cmsitems/:pageUuid/versions/:versionId/rollbacks`;\r\n        this.pageVersionRESTService = this.restServiceFactory.get(this.pageVersionsServiceResourceURI);\r\n        this.pageVersionsRollbackRESTService = this.restServiceFactory.get(this.pageVersionsRollbackServiceResourceURI);\r\n    }\r\n    /**\r\n     * Retrieves the list of versions found for the page identified by the provided id. This method is paged.\r\n     *\r\n     * @param payload The payload containing search query params, including the pageable information.\r\n     * @returns A promise that resolves to a paged list of versions.\r\n     */\r\n    findPageVersions(payload) {\r\n        return this.pageVersionRESTService.page(payload);\r\n    }\r\n    /**\r\n     * Retrieves the page version information for the provided versionId.\r\n     */\r\n    getPageVersionForId(pageUuid, versionId) {\r\n        return this.pageVersionRESTService.get({\r\n            pageUuid,\r\n            identifier: versionId\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves the resource URI to manage page versions.\r\n     */\r\n    getResourceURI() {\r\n        return this.pageVersionsServiceResourceURI;\r\n    }\r\n    deletePageVersion(pageUuid, versionId) {\r\n        return this.pageVersionRESTService.remove({\r\n            pageUuid,\r\n            identifier: versionId\r\n        });\r\n    }\r\n    /**\r\n     * Rollbacks the page to the provided version. This process will automatically create a version of the current page.\r\n     */\r\n    rollbackPageVersion(pageUuid, versionId) {\r\n        return this.pageVersionsRollbackRESTService.save({ pageUuid, versionId });\r\n    }\r\n};\r\n/* @ngInject */ PageVersioningService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory])\r\n], /* @ngInject */ PageVersioningService);\r\nexport { /* @ngInject */ PageVersioningService };\r\n//# sourceMappingURL=PageVersioningService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"PageVersioningService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/versioning/PageVersioningService.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AACtE,OAAO,EAAE,mBAAmB,EAA0C,MAAM,eAAe,CAAC;AAE5F;;GAEG;AAEH,4CAAA;IAMI,YAA6B,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAHnD,mCAA8B,GAAG,4BAA4B,oBAAoB,8BAA8B,CAAC;QAChH,2CAAsC,GAAG,4BAA4B,oBAAoB,mDAAmD,CAAC;QAG1J,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CACrD,IAAI,CAAC,8BAA8B,CACtC,CAAC;QACF,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAC9D,IAAI,CAAC,sCAAsC,CAC9C,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACI,gBAAgB,CAAC,OAAiC;QACrD,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,mBAAmB,CAAC,QAAgB,EAAE,SAAiB;QAC1D,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC;YACnC,QAAQ;YACR,UAAU,EAAE,SAAS;SACxB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,cAAc;QACjB,OAAO,IAAI,CAAC,8BAA8B,CAAC;IAC/C,CAAC;IAEM,iBAAiB,CAAC,QAAgB,EAAE,SAAiB;QACxD,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC;YACtC,QAAQ;YACR,UAAU,EAAE,SAAS;SACxB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,mBAAmB,CAAC,QAAgB,EAAE,SAAiB;QAC1D,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;IAC9E,CAAC;CACJ,CAAA;AAvDD;IADC,kBAAkB,EAAE;qCAOgC,mBAAmB;yCAiDvE\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/versioning/PageVersioningService.d.ts","writeByteOrderMark":false,"text":"import { Page } from '@smart/utils';\r\nimport { IRestServiceFactory, IPageVersion, PageVersionSearchPayload } from '../interfaces';\r\n/**\r\n * Used to manage versions in a page.\r\n */\r\nexport declare class PageVersioningService {\r\n    private readonly restServiceFactory;\r\n    private readonly pageVersionRESTService;\r\n    private readonly pageVersionsRollbackRESTService;\r\n    private readonly pageVersionsServiceResourceURI;\r\n    private readonly pageVersionsRollbackServiceResourceURI;\r\n    constructor(restServiceFactory: IRestServiceFactory);\r\n    /**\r\n     * Retrieves the list of versions found for the page identified by the provided id. This method is paged.\r\n     *\r\n     * @param payload The payload containing search query params, including the pageable information.\r\n     * @returns A promise that resolves to a paged list of versions.\r\n     */\r\n    findPageVersions(payload: PageVersionSearchPayload): Promise<Page<IPageVersion>>;\r\n    /**\r\n     * Retrieves the page version information for the provided versionId.\r\n     */\r\n    getPageVersionForId(pageUuid: string, versionId: string): Promise<IPageVersion>;\r\n    /**\r\n     * Retrieves the resource URI to manage page versions.\r\n     */\r\n    getResourceURI(): string;\r\n    deletePageVersion(pageUuid: string, versionId: string): Promise<void>;\r\n    /**\r\n     * Rollbacks the page to the provided version. This process will automatically create a version of the current page.\r\n     */\r\n    rollbackPageVersion(pageUuid: string, versionId: string): Promise<void>;\r\n}\r\n"}}
