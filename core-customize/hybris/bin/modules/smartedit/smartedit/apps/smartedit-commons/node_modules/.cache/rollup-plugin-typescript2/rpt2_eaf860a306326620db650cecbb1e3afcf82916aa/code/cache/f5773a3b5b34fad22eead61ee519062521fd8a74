{"code":"import { objectUtils } from '../../utils';\r\nexport const createApi = (editor) => \r\n/**\r\n * The generic editor's api object exposing public functionality\r\n */\r\n({\r\n    /**\r\n     * Overrides the i18n key used bfor the submit button.\r\n     */\r\n    setSubmitButtonText: (_submitButtonText) => {\r\n        editor.submitButtonText = _submitButtonText;\r\n    },\r\n    /**\r\n     * Overrides the i18n key used bfor the submit button.\r\n     */\r\n    setCancelButtonText: (_cancelButtonText) => {\r\n        editor.cancelButtonText = _cancelButtonText;\r\n    },\r\n    /**\r\n     * If set to true, will always show the submit button.\r\n     */\r\n    setAlwaysShowSubmit: (_alwaysShowSubmit) => {\r\n        editor.alwaysShowSubmit = _alwaysShowSubmit;\r\n    },\r\n    /**\r\n     * If set to true, will always show the reset button.\r\n     */\r\n    setAlwaysShowReset: (_alwaysShowReset) => {\r\n        editor.alwaysShowReset = _alwaysShowReset;\r\n    },\r\n    /**\r\n     * To be executed after reset.\r\n     */\r\n    setOnReset: (_onReset) => {\r\n        editor.onReset = _onReset;\r\n    },\r\n    /**\r\n     * Function that passes a preparePayload function to the editor in order to transform the payload prior to submitting (see `GenericEditorFactoryService#preparePayload`)\r\n     * @param preparePayload The function that takes the original payload as argument\r\n     */\r\n    setPreparePayload: (_preparePayload) => {\r\n        editor.preparePayload = _preparePayload;\r\n    },\r\n    /**\r\n     * Function that passes an updateCallback function to the editor in order to perform an action upon successful submit. It is invoked with two arguments: the pristine object and the response from the server.\r\n     * @param updateCallback the callback invoked upon successful submit.\r\n     */\r\n    setUpdateCallback: (_updateCallback) => {\r\n        editor.updateCallback = _updateCallback;\r\n    },\r\n    /**\r\n     * Function that updates the content of the generic editor without having to reinitialize\r\n     *\r\n     * @param component The component to replace the current model for the generic editor\r\n     */\r\n    updateContent: (component) => {\r\n        editor.form && editor.form.patchComponent(component);\r\n    },\r\n    /**\r\n     * Copies of the current model\r\n     * @returns a copy\r\n     */\r\n    getContent: () => editor.form ? objectUtils.copy(editor.form.component) : undefined,\r\n    /**\r\n     * **Deprecated since 1905 - use {@link addContentChangeEvent} instead.**\r\n     *\r\n     * Function triggered everytime the current model changes\r\n     *\r\n     * @deprecated\r\n     */\r\n    onContentChange() {\r\n        return;\r\n    },\r\n    /**\r\n     * Method adds a new function to the list of functions triggered everytime the current model changes\r\n     *\r\n     * @param {Function} The function triggered everytime the current model changes\r\n     *\r\n     * @returns The function to unregister the event;\r\n     */\r\n    addContentChangeEvent: (event) => {\r\n        editor.onChangeEvents.push(event);\r\n        return () => {\r\n            const index = editor.onChangeEvents.findIndex((e) => e === event);\r\n            if (index > -1) {\r\n                editor.onChangeEvents.splice(index, 1);\r\n            }\r\n        };\r\n    },\r\n    /**\r\n     * Triggers all functions that were added with addContentChangeEvent api method. It provides current content as parameter to every function call.\r\n     */\r\n    triggerContentChangeEvents: () => {\r\n        editor.onChangeEvents.forEach((event) => {\r\n            event(objectUtils.copy(editor.form.component));\r\n        });\r\n    },\r\n    /**\r\n     * Function that clears all validation messages in the editor\r\n     */\r\n    clearMessages: () => {\r\n        editor.form.removeValidationMessages();\r\n    },\r\n    /**\r\n     * Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     * @param qualifier the qualifier contained in the tab we want to switch to.\r\n     */\r\n    switchToTabContainingQualifier: (qualifier) => {\r\n        editor.targetedQualifier = qualifier;\r\n    },\r\n    /** Currently used by clone components to open editor in dirty mode. */\r\n    considerFormDirty: () => {\r\n        editor.initialDirty = true;\r\n    },\r\n    setInProgress: (isInProgress) => {\r\n        editor.inProgress = isInProgress;\r\n    },\r\n    /**\r\n     * Returns true to inform that the submit button delegated to the invoker should be disabled.\r\n     * @returns true if submit is disabled\r\n     */\r\n    isSubmitDisabled: () => editor.isSubmitDisabled(),\r\n    /**\r\n     * Function that returns a promise resolving to language descriptors. If defined, will be resolved\r\n     * when the generic editor is initialized to override what languages are used for localized elements\r\n     * within the editor.\r\n     * @returns a promise resolving to language descriptors. Each descriptor provides the following\r\n     * language properties: isocode, nativeName, name, active, and required.\r\n     */\r\n    getLanguages: () => null,\r\n    /**\r\n     * If set to true, will always enable the submit button.\r\n     */\r\n    setAlwaysEnableSubmit: (alwaysEnableSubmit) => {\r\n        editor.alwaysEnableSubmit = alwaysEnableSubmit;\r\n    }\r\n});\r\n//# sourceMappingURL=GenericEditorAPI.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorAPI.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/genericEditor/GenericEditorAPI.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/GenericEditorAPI.d.ts","writeByteOrderMark":false,"text":"import { GenericEditorAPI } from './types';\r\nexport declare const createApi: (editor: any) => GenericEditorAPI;\r\n"}}
