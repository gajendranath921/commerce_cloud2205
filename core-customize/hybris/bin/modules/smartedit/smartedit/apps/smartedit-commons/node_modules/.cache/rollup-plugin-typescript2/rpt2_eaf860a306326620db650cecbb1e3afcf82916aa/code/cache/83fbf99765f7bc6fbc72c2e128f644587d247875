{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SeDowngradeService } from '../di';\r\nimport { EXPERIENCE_STORAGE_KEY } from '../utils/smarteditconstants';\r\nimport { ComponentHandlerService } from './ComponentHandlerService';\r\nimport { ICatalogService, IPageInfoService, ISharedDataService, IEditorModalService } from './interfaces';\r\nimport { PageContentSlotsService } from './PageContentSlotsService';\r\nimport { cmsitemsUri } from './workflow';\r\n/**\r\n * Provides methods to interact with the backend for shared slot information.\r\n */\r\nlet /* @ngInject */ SlotSharedService = class /* @ngInject */ SlotSharedService {\r\n    constructor(pageContentSlotsService, pageInfoService, translateService, editorModalService, componentHandlerService, catalogService, sharedDataService) {\r\n        this.pageContentSlotsService = pageContentSlotsService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.translateService = translateService;\r\n        this.editorModalService = editorModalService;\r\n        this.componentHandlerService = componentHandlerService;\r\n        this.catalogService = catalogService;\r\n        this.sharedDataService = sharedDataService;\r\n    }\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     */\r\n    isSlotShared(slotId) {\r\n        return this.pageContentSlotsService.isSlotShared(slotId);\r\n    }\r\n    /**\r\n     * Checks whether the given slot is global icon slot or not\r\n     * Returns true if either of the below conditions are true.\r\n     * If the current catalog is multicountry related and if the slot is external slot.\r\n     * If the current catalog is multicountry related and the slot is not external slot but the current page is from parent catalog.\r\n     */\r\n    isGlobalSlot(slotId, slotType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const isExternalSlot = this.componentHandlerService.isExternalComponent(slotId, slotType);\r\n            const [isCurrentCatalogMultiCountry, experience] = yield Promise.all([\r\n                this.catalogService.isCurrentCatalogMultiCountry(),\r\n                this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)\r\n            ]);\r\n            // isMultiCountry -> Has the current site with current catalog have any parent catalog ?\r\n            const isMultiCountry = isCurrentCatalogMultiCountry || false;\r\n            // isCurrentPageFromParent -> Is the current page from the parent catalog ?\r\n            const isCurrentPageFromParent = this.isCurrentPageFromParentCatalog(experience);\r\n            return isMultiCountry && (isExternalSlot || (isCurrentPageFromParent && !isExternalSlot));\r\n        });\r\n    }\r\n    /**\r\n     * Sets the status of the disableSharedSlot feature\r\n     */\r\n    setSharedSlotEnablementStatus(status) {\r\n        this.disableShareSlotStatus = status;\r\n    }\r\n    /**\r\n     * Checks the status of the disableSharedSlot feature\r\n     *\r\n     */\r\n    areSharedSlotsDisabled() {\r\n        return this.disableShareSlotStatus;\r\n    }\r\n    /**\r\n     * Replaces the global slot (multicountry related) based on the options selected in the \"Replace Slot\" generic editor.\r\n     *\r\n     * @returns A promise that resolves when replace slot operation is completed.\r\n     */\r\n    replaceGlobalSlot(componentAttributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.validateComponentAttributes(componentAttributes);\r\n            const cmsItem = yield this.constructCmsItemParameter(componentAttributes);\r\n            const componentData = {\r\n                title: 'se.cms.slot.shared.replace.editor.title',\r\n                structure: {\r\n                    attributes: [\r\n                        {\r\n                            cmsStructureType: 'SlotSharedSlotTypeField',\r\n                            qualifier: 'isSlotCustom',\r\n                            required: true\r\n                        },\r\n                        {\r\n                            cmsStructureType: 'SlotSharedCloneActionField',\r\n                            qualifier: 'cloneAction',\r\n                            required: true\r\n                        }\r\n                    ]\r\n                },\r\n                contentApi: cmsitemsUri,\r\n                saveLabel: 'se.cms.slot.shared.replace.editor.save',\r\n                content: cmsItem,\r\n                initialDirty: true\r\n            };\r\n            return this.editorModalService.openGenericEditor(componentData);\r\n        });\r\n    }\r\n    /**\r\n     * Replaces the shared slot (non-multicountry related) based on the options selected in the \"Replace Slot\" generic editor\r\n     *\r\n     * @returns A promise that resolves when replace slot operation is completed.\r\n     */\r\n    replaceSharedSlot(componentAttributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.validateComponentAttributes(componentAttributes);\r\n            const cmsItem = yield this.constructCmsItemParameter(componentAttributes);\r\n            cmsItem.isSlotCustom = true;\r\n            const componentData = {\r\n                title: 'se.cms.slot.shared.replace.editor.title',\r\n                structure: {\r\n                    attributes: [\r\n                        {\r\n                            cmsStructureType: 'SlotSharedCloneActionField',\r\n                            qualifier: 'cloneAction',\r\n                            required: true\r\n                        }\r\n                    ]\r\n                },\r\n                contentApi: cmsitemsUri,\r\n                saveLabel: 'se.cms.slot.shared.replace.editor.save',\r\n                content: cmsItem,\r\n                initialDirty: true\r\n            };\r\n            return this.editorModalService.openGenericEditor(componentData);\r\n        });\r\n    }\r\n    constructCmsItemParameter(componentAttributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const cloneText = this.translateService.instant('se.cms.slot.shared.clone');\r\n            const pageUid = yield this.pageInfoService.getPageUID();\r\n            const targetCatalogVersionUuid = yield this.pageInfoService.getCatalogVersionUUIDFromPage();\r\n            const componentName = `${pageUid}-${componentAttributes.smarteditComponentId}-${cloneText}`;\r\n            const cmsItem = {\r\n                name: componentName,\r\n                smarteditComponentId: componentAttributes.smarteditComponentId,\r\n                contentSlotUuid: componentAttributes.smarteditComponentUuid,\r\n                itemtype: componentAttributes.smarteditComponentType,\r\n                catalogVersion: targetCatalogVersionUuid,\r\n                pageUuid: pageUid,\r\n                onlyOneRestrictionMustApply: false\r\n            };\r\n            return cmsItem;\r\n        });\r\n    }\r\n    validateComponentAttributes(componentAttributes) {\r\n        if (!componentAttributes) {\r\n            throw new Error('Parameter: componentAttributes needs to be supplied!');\r\n        }\r\n        const validationAttributes = [\r\n            'smarteditComponentId',\r\n            'smarteditComponentUuid',\r\n            'smarteditComponentType'\r\n        ];\r\n        const invalidAttr = validationAttributes.find((attr) => !componentAttributes[attr]);\r\n        if (!!invalidAttr) {\r\n            throw new Error(`Parameter: componentAttributes.${invalidAttr} needs to be supplied!`);\r\n        }\r\n    }\r\n    isCurrentPageFromParentCatalog(experience) {\r\n        var _a, _b;\r\n        const pageContextCatalogVersionUuid = ((_a = experience === null || experience === void 0 ? void 0 : experience.pageContext) === null || _a === void 0 ? void 0 : _a.catalogVersionUuid) || '';\r\n        const catalogDescriptorCatalogVersionUuid = ((_b = experience === null || experience === void 0 ? void 0 : experience.catalogDescriptor) === null || _b === void 0 ? void 0 : _b.catalogVersionUuid) || '';\r\n        const isCurrentPageFromParent = catalogDescriptorCatalogVersionUuid !== pageContextCatalogVersionUuid;\r\n        return isCurrentPageFromParent;\r\n    }\r\n};\r\n/* @ngInject */ SlotSharedService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [PageContentSlotsService,\r\n        IPageInfoService,\r\n        TranslateService,\r\n        IEditorModalService,\r\n        ComponentHandlerService,\r\n        ICatalogService,\r\n        ISharedDataService])\r\n], /* @ngInject */ SlotSharedService);\r\nexport { /* @ngInject */ SlotSharedService };\r\n//# sourceMappingURL=SlotSharedService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/ComponentHandlerService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/PageContentSlotsService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/index.ts"],"map":"{\"version\":3,\"file\":\"SlotSharedService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SlotSharedService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SlotSharedService.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { ComponentAttributes } from '../di';\r\nimport { ComponentHandlerService } from './ComponentHandlerService';\r\nimport { ICatalogService, IPageInfoService, ISharedDataService, IEditorModalService } from './interfaces';\r\nimport { PageContentSlotsService } from './PageContentSlotsService';\r\n/**\r\n * Provides methods to interact with the backend for shared slot information.\r\n */\r\nexport declare class SlotSharedService {\r\n    private readonly pageContentSlotsService;\r\n    private readonly pageInfoService;\r\n    private readonly translateService;\r\n    private readonly editorModalService;\r\n    private readonly componentHandlerService;\r\n    private readonly catalogService;\r\n    private readonly sharedDataService;\r\n    private disableShareSlotStatus;\r\n    constructor(pageContentSlotsService: PageContentSlotsService, pageInfoService: IPageInfoService, translateService: TranslateService, editorModalService: IEditorModalService, componentHandlerService: ComponentHandlerService, catalogService: ICatalogService, sharedDataService: ISharedDataService);\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     */\r\n    isSlotShared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * Checks whether the given slot is global icon slot or not\r\n     * Returns true if either of the below conditions are true.\r\n     * If the current catalog is multicountry related and if the slot is external slot.\r\n     * If the current catalog is multicountry related and the slot is not external slot but the current page is from parent catalog.\r\n     */\r\n    isGlobalSlot(slotId: string, slotType: string): Promise<boolean>;\r\n    /**\r\n     * Sets the status of the disableSharedSlot feature\r\n     */\r\n    setSharedSlotEnablementStatus(status: boolean): void;\r\n    /**\r\n     * Checks the status of the disableSharedSlot feature\r\n     *\r\n     */\r\n    areSharedSlotsDisabled(): boolean;\r\n    /**\r\n     * Replaces the global slot (multicountry related) based on the options selected in the \"Replace Slot\" generic editor.\r\n     *\r\n     * @returns A promise that resolves when replace slot operation is completed.\r\n     */\r\n    replaceGlobalSlot(componentAttributes: ComponentAttributes): Promise<any>;\r\n    /**\r\n     * Replaces the shared slot (non-multicountry related) based on the options selected in the \"Replace Slot\" generic editor\r\n     *\r\n     * @returns A promise that resolves when replace slot operation is completed.\r\n     */\r\n    replaceSharedSlot(componentAttributes: ComponentAttributes): Promise<any>;\r\n    private constructCmsItemParameter;\r\n    private validateComponentAttributes;\r\n    private isCurrentPageFromParentCatalog;\r\n}\r\n"}}
