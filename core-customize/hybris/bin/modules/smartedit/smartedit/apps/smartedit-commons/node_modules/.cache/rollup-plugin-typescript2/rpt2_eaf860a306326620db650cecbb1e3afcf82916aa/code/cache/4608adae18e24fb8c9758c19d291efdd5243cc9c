{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject, Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { rarelyChangingContent, BrowserService, Cached, EVENT_SERVICE, IStorageService, LanguageService as SmartutilsLanguageService, LogService, LANGUAGE_SERVICE_CONSTANTS, PromiseUtils, RestServiceFactory } from '@smart/utils';\r\nimport { SeDowngradeService } from '../../di';\r\nlet /* @ngInject */ LanguageService = class /* @ngInject */ LanguageService extends SmartutilsLanguageService {\r\n    constructor(logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants) {\r\n        super(logService, translateService, promiseUtils, eventService, browserService, storageService, injector, languageServiceConstants);\r\n        this.logService = logService;\r\n        this.translateService = translateService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.eventService = eventService;\r\n        this.browserService = browserService;\r\n        this.storageService = storageService;\r\n        this.injector = injector;\r\n        this.languageServiceConstants = languageServiceConstants;\r\n    }\r\n    /**\r\n     * Fetches a list of language descriptors for the specified storefront site UID.\r\n     * The object containing the list of sites is fetched using REST calls to the cmswebservices languages API.\r\n     */\r\n    getLanguagesForSite(siteUID) {\r\n        return this.languageRestService\r\n            .get({\r\n            siteUID\r\n        })\r\n            .then((languagesList) => languagesList.languages, (error) => {\r\n            this.logService.error('LanguageService.getLanguagesForSite() - Error loading languages');\r\n            return Promise.reject(error);\r\n        });\r\n    }\r\n    get languageRestService() {\r\n        return this.injector\r\n            .get(RestServiceFactory)\r\n            .get(this.languageServiceConstants.LANGUAGE_RESOURCE_URI);\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ LanguageService.prototype, \"getLanguagesForSite\", null);\r\n/* @ngInject */ LanguageService = __decorate([\r\n    SeDowngradeService(),\r\n    __param(3, Inject(EVENT_SERVICE)),\r\n    __param(7, Inject(LANGUAGE_SERVICE_CONSTANTS)),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        TranslateService,\r\n        PromiseUtils, Object, BrowserService,\r\n        IStorageService,\r\n        Injector, Object])\r\n], /* @ngInject */ LanguageService);\r\nexport { /* @ngInject */ LanguageService };\r\n//# sourceMappingURL=LanguageService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"LanguageService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/language/LanguageService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EACH,qBAAqB,EACrB,cAAc,EACd,MAAM,EACN,aAAa,EAKb,eAAe,EACf,eAAe,IAAI,yBAAyB,EAC5C,UAAU,EACV,0BAA0B,EAC1B,YAAY,EACZ,kBAAkB,EACrB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAG9C,sCAAA,qCAA6B,SAAQ,yBAAyB;IAC1D,YACc,UAAsB,EACtB,gBAAkC,EAClC,YAA0B,EACH,YAA2B,EAClD,cAA8B,EAC9B,cAA+B,EAC/B,QAAkB,EAElB,wBAAmD;QAE7D,KAAK,CACD,UAAU,EACV,gBAAgB,EAChB,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,cAAc,EACd,QAAQ,EACR,wBAAwB,CAC3B,CAAC;QAnBQ,eAAU,GAAV,UAAU,CAAY;QACtB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAc;QACH,iBAAY,GAAZ,YAAY,CAAe;QAClD,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAiB;QAC/B,aAAQ,GAAR,QAAQ,CAAU;QAElB,6BAAwB,GAAxB,wBAAwB,CAA2B;IAYjE,CAAC;IACD;;;OAGG;IAEH,mBAAmB,CAAC,OAAe;QAC/B,OAAO,IAAI,CAAC,mBAAmB;aAC1B,GAAG,CAAC;YACD,OAAO;SACV,CAAC;aACD,IAAI,CACD,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,EAC1C,CAAC,KAAU,EAAE,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,KAAK,CACjB,iEAAiE,CACpE,CAAC;YACF,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CACJ,CAAC;IACV,CAAC;IAED,IAAc,mBAAmB;QAC7B,OAAO,IAAI,CAAC,QAAQ;aACf,GAAG,CAAqB,kBAAkB,CAAC;aAC3C,GAAG,CAA6B,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;IAC9F,CAAC;CACJ,CAAA;AArBG;IADC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC;;;;0EAe5C;AA1CL;IADC,kBAAkB,EAAE;IAMZ,WAAA,MAAM,CAAC,aAAa,CAAC,CAAA;IAIrB,WAAA,MAAM,CAAC,0BAA0B,CAAC,CAAA;qCAPb,UAAU;QACJ,gBAAgB;QACpB,YAAY,UAEV,cAAc;QACd,eAAe;QACrB,QAAQ;mCAyCnC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/language/LanguageService.d.ts","writeByteOrderMark":false,"text":"import { Injector } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BrowserService, IEventService, ILanguage, ILanguageServiceConstants, IRestService, IStorageService, LanguageService as SmartutilsLanguageService, LogService, PromiseUtils } from '@smart/utils';\r\nexport declare class LanguageService extends SmartutilsLanguageService {\r\n    protected logService: LogService;\r\n    protected translateService: TranslateService;\r\n    protected promiseUtils: PromiseUtils;\r\n    protected eventService: IEventService;\r\n    protected browserService: BrowserService;\r\n    protected storageService: IStorageService;\r\n    protected injector: Injector;\r\n    protected languageServiceConstants: ILanguageServiceConstants;\r\n    constructor(logService: LogService, translateService: TranslateService, promiseUtils: PromiseUtils, eventService: IEventService, browserService: BrowserService, storageService: IStorageService, injector: Injector, languageServiceConstants: ILanguageServiceConstants);\r\n    /**\r\n     * Fetches a list of language descriptors for the specified storefront site UID.\r\n     * The object containing the list of sites is fetched using REST calls to the cmswebservices languages API.\r\n     */\r\n    getLanguagesForSite(siteUID: string): Promise<ILanguage[]>;\r\n    protected get languageRestService(): IRestService<{\r\n        languages: ILanguage[];\r\n    }>;\r\n}\r\n"}}
