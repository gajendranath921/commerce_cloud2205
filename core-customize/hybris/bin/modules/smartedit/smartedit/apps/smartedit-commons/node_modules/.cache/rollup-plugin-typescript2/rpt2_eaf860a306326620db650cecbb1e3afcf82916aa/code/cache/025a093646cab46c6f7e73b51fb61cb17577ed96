{"code":"export {};\r\n//# sourceMappingURL=IToolbarItem.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IFeature.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IPrioritized.ts"],"map":"{\"version\":3,\"file\":\"IToolbarItem.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IToolbarItem.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/interfaces/IToolbarItem.d.ts","writeByteOrderMark":false,"text":"import { Type } from '@angular/core';\r\nimport { IFeature } from './IFeature';\r\nimport { IPrioritized } from './IPrioritized';\r\n/**\r\n * Interface for ToolbarItemInternal\r\n */\r\nexport interface IToolbarItem extends IFeature, IPrioritized {\r\n    /**\r\n     * List of classes used to display icons from fonts\r\n     */\r\n    iconClassName?: string;\r\n    /**\r\n     * A list of image URLs for the icon images to be displayed in the toolbar for the items. The images are only available for ACTION and HYBRID_ACTION toolbar items.\r\n     */\r\n    icons?: string[];\r\n    /**\r\n     * Component responsible for rendering the template\r\n     */\r\n    component?: Type<any>;\r\n    /**\r\n     * Component that represents the context associated to the toolbar item.\r\n     */\r\n    contextComponent?: Type<any>;\r\n    /**\r\n     * Keeps the dropdown content in the DOM on close.\r\n     */\r\n    keepAliveOnClose?: boolean;\r\n    /**\r\n     * Determines the sections(left, middle or right) of the item in the toolbar.\r\n     */\r\n    section?: string;\r\n    /**\r\n     * Determines the position(left, middle or right) of the dropdown menu.\r\n     */\r\n    dropdownPosition?: string;\r\n    /**\r\n     * The key that uniquely identifies the toolbar that the feature is added to.\r\n     */\r\n    toolbarId: string;\r\n    /**\r\n     * The type of toolbar item. The possible value are: TEMPLATE, ACTION, and HYBRID_ACTION.\r\n     */\r\n    type: string;\r\n    /**\r\n     * The callback that is triggered when the toolbar action item is clicked.\r\n     */\r\n    callback?: () => void;\r\n}\r\n"}}
