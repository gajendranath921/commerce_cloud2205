{"code":"/**\r\n * Represents a manager of multiple {@link IStorage}(s).\r\n *\r\n * Typically there is 1 StorageManager in the system, and it is responsible accessing, creating and deleting storages,\r\n * usually by delegating to {@link IStorageController}(s).\r\n *\r\n */\r\nexport class IStorageManager {\r\n    registerStorageController(controller) {\r\n        'proxyFunction';\r\n    }\r\n    /**\r\n     * Check if a storage has been created.\r\n     */\r\n    hasStorage(storageId) {\r\n        'proxyFunction';\r\n        return null;\r\n    }\r\n    /**\r\n     * Get an existing or new storage\r\n     */\r\n    getStorage(storageConfiguration) {\r\n        'proxyFunction';\r\n        return null;\r\n    }\r\n    /**\r\n     * Permanently delete a storage and all its data\r\n     *\r\n     * @param force If force is false and a storage is found with no storage controller to handle its\r\n     * type then it will not be deleted. This can be useful in some cases when you haven't registered a controller yet.\r\n     */\r\n    deleteStorage(storageId, force) {\r\n        'proxyFunction';\r\n        return Promise.resolve(true);\r\n    }\r\n    /**\r\n     * Delete all storages that have exceeded their idle timeout time.\r\n     * See {@link IStorageOptions} for more details\r\n     * @param force If force is false and a storage is found with no storage controller to handle its\r\n     * type then it will not be deleted. This can be useful in some cases when you haven't registered a controller yet.\r\n     */\r\n    deleteExpiredStorages(force) {\r\n        'proxyFunction';\r\n        return Promise.resolve(true);\r\n    }\r\n}\r\n//# sourceMappingURL=IStorageManager.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/storage/IStorage.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/storage/IStorageController.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/storage/IStorageOptions.ts"],"map":"{\"version\":3,\"file\":\"IStorageManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/storage/IStorageManager.ts\"],\"names\":[],\"mappings\":\"AAQA;;;;;;GAMG;AACH,MAAM,OAAgB,eAAe;IACjC,yBAAyB,CAAC,UAA8B;QACpD,eAAe,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,SAAiB;QACxB,eAAe,CAAC;QAEhB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,oBAAqC;QAC5C,eAAe,CAAC;QAEhB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,aAAa,CAAC,SAAiB,EAAE,KAAe;QAC5C,eAAe,CAAC;QAEhB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,qBAAqB,CAAC,KAAe;QACjC,eAAe,CAAC;QAEhB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACJ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/storage/IStorageManager.d.ts","writeByteOrderMark":false,"text":"import { Cloneable } from '@smart/utils';\r\nimport { IStorage } from './IStorage';\r\nimport { IStorageController } from './IStorageController';\r\nimport { IStorageOptions } from './IStorageOptions';\r\n/**\r\n * Represents a manager of multiple {@link IStorage}(s).\r\n *\r\n * Typically there is 1 StorageManager in the system, and it is responsible accessing, creating and deleting storages,\r\n * usually by delegating to {@link IStorageController}(s).\r\n *\r\n */\r\nexport declare abstract class IStorageManager {\r\n    registerStorageController(controller: IStorageController): void;\r\n    /**\r\n     * Check if a storage has been created.\r\n     */\r\n    hasStorage(storageId: string): boolean;\r\n    /**\r\n     * Get an existing or new storage\r\n     */\r\n    getStorage(storageConfiguration: IStorageOptions): Promise<IStorage<Cloneable, Cloneable>>;\r\n    /**\r\n     * Permanently delete a storage and all its data\r\n     *\r\n     * @param force If force is false and a storage is found with no storage controller to handle its\r\n     * type then it will not be deleted. This can be useful in some cases when you haven't registered a controller yet.\r\n     */\r\n    deleteStorage(storageId: string, force?: boolean): Promise<boolean>;\r\n    /**\r\n     * Delete all storages that have exceeded their idle timeout time.\r\n     * See {@link IStorageOptions} for more details\r\n     * @param force If force is false and a storage is found with no storage controller to handle its\r\n     * type then it will not be deleted. This can be useful in some cases when you haven't registered a controller yet.\r\n     */\r\n    deleteExpiredStorages(force?: boolean): Promise<boolean>;\r\n}\r\n"}}
