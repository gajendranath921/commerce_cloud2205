{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { FunctionsUtils, LogService, PromiseUtils, StringUtils } from '@smart/utils';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\nimport { GatewayFactory } from './GatewayFactory';\r\n/**\r\n * To seamlessly integrate the gateway factory between two services on different frames, you can use a gateway\r\n * proxy. The gateway proxy service simplifies using the gateway module by providing an API that registers an\r\n * instance of a service that requires a gateway for communication.\r\n *\r\n * This registration process automatically attaches listeners to each of the service's functions (turned into promises), allowing stub\r\n * instances to forward calls to these functions using an instance of a gateway from {@link GatewayFactory}.\r\n * Any function that has an empty body declared on the service is used as a proxy function.\r\n * It delegates a publish call to the gateway under the same function name, and wraps the result of the call in a Promise.\r\n */\r\nlet /* @ngInject */ GatewayProxy = class /* @ngInject */ GatewayProxy {\r\n    constructor(logService, promiseUtils, stringUtils, functionsUtils, gatewayFactory) {\r\n        this.logService = logService;\r\n        this.promiseUtils = promiseUtils;\r\n        this.stringUtils = stringUtils;\r\n        this.functionsUtils = functionsUtils;\r\n        this.gatewayFactory = gatewayFactory;\r\n        this.nonProxiableMethods = [\r\n            'getMethodForVoid',\r\n            'getMethodForSingleInstance',\r\n            'getMethodForArray'\r\n        ];\r\n    }\r\n    /**\r\n     * Mutates the given service into a proxied service.\r\n     * You must provide a unique string gatewayId, in one of 2 ways.\r\n     *\r\n     *\r\n     * 1) Having a gatewayId property on the service provided\r\n     *\r\n     *\r\n     * OR\r\n     *\r\n     *\r\n     * 2) providing a gatewayId as 3rd param of this function\r\n     *\r\n     * @param service Service to mutate into a proxied service.\r\n     * @param methodsSubset An explicit set of methods on which the gatewayProxy will trigger. Otherwise, by default all functions\r\n     * will be proxied. This is particularly useful to avoid inner methods being unnecessarily turned into promises.\r\n     * @param gatewayId The gateway ID to use internaly for the proxy. If not provided, the service <strong>must</strong> have a gatewayId property.\r\n     */\r\n    initForService(service, methodsSubset, gatewayId) {\r\n        const gwId = gatewayId || service.gatewayId;\r\n        if (!gwId) {\r\n            this.logService.error(`initForService() - service expected to have an associated gatewayId - methodsSubset: ${methodsSubset && methodsSubset.length ? methodsSubset.join(',') : []}`);\r\n            return null;\r\n        }\r\n        const gateway = this.gatewayFactory.createGateway(gwId);\r\n        let loopedOver = methodsSubset;\r\n        if (!loopedOver) {\r\n            loopedOver = this.functionsUtils\r\n                .getInstanceMethods(service)\r\n                .filter((key) => !this._isNonProxiableMethod(key));\r\n        }\r\n        loopedOver.forEach((fnName) => {\r\n            if (typeof service[fnName] === 'function') {\r\n                if (this.functionsUtils.isEmpty(service[fnName])) {\r\n                    this._turnToProxy(fnName, service, gateway);\r\n                }\r\n                else {\r\n                    service[fnName] = this.promiseUtils.toPromise(service[fnName], service);\r\n                    gateway.subscribe(fnName, this._onGatewayEvent.bind(null, fnName, service));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /** @ignore */\r\n    _isNonProxiableMethod(key) {\r\n        return (this.nonProxiableMethods.indexOf(key) > -1 ||\r\n            key.startsWith('$') ||\r\n            key === 'lodash' ||\r\n            key === 'jQuery');\r\n    }\r\n    /** @ignore */\r\n    _onGatewayEvent(fnName, service, eventId, data) {\r\n        return service[fnName].apply(service, data.arguments);\r\n    }\r\n    /** @ignore */\r\n    _turnToProxy(fnName, service, gateway) {\r\n        delete service[fnName];\r\n        service[fnName] = ((...args) => gateway\r\n            .publish(fnName, {\r\n            arguments: args\r\n        })\r\n            .then((resolvedData) => {\r\n            if (!this.stringUtils.isBlank(resolvedData)) {\r\n                delete resolvedData.$resolved;\r\n                delete resolvedData.$promise;\r\n            }\r\n            return resolvedData;\r\n        }, (error) => {\r\n            if (error) {\r\n                this.logService.debug(`gatewayProxy - publish failed for gateway ${gateway.gatewayId} method ${fnName} and arguments ${args}`);\r\n            }\r\n            return Promise.reject(error);\r\n        }));\r\n    }\r\n};\r\n/* @ngInject */ GatewayProxy = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        PromiseUtils,\r\n        StringUtils,\r\n        FunctionsUtils,\r\n        GatewayFactory])\r\n], /* @ngInject */ GatewayProxy);\r\nexport { /* @ngInject */ GatewayProxy };\r\n//# sourceMappingURL=GatewayProxy.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/gateway/GatewayFactory.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/gateway/IProxiedService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/gateway/MessageGateway.ts"],"map":"{\"version\":3,\"file\":\"GatewayProxy.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/gateway/GatewayProxy.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/gateway/GatewayProxy.d.ts","writeByteOrderMark":false,"text":"import { FunctionsUtils, LogService, PromiseUtils, StringUtils } from '@smart/utils';\r\nimport { GatewayFactory } from './GatewayFactory';\r\nimport { IProxiedService } from './IProxiedService';\r\n/**\r\n * To seamlessly integrate the gateway factory between two services on different frames, you can use a gateway\r\n * proxy. The gateway proxy service simplifies using the gateway module by providing an API that registers an\r\n * instance of a service that requires a gateway for communication.\r\n *\r\n * This registration process automatically attaches listeners to each of the service's functions (turned into promises), allowing stub\r\n * instances to forward calls to these functions using an instance of a gateway from {@link GatewayFactory}.\r\n * Any function that has an empty body declared on the service is used as a proxy function.\r\n * It delegates a publish call to the gateway under the same function name, and wraps the result of the call in a Promise.\r\n */\r\nexport declare class GatewayProxy {\r\n    private readonly logService;\r\n    private readonly promiseUtils;\r\n    private readonly stringUtils;\r\n    private readonly functionsUtils;\r\n    private readonly gatewayFactory;\r\n    private readonly nonProxiableMethods;\r\n    constructor(logService: LogService, promiseUtils: PromiseUtils, stringUtils: StringUtils, functionsUtils: FunctionsUtils, gatewayFactory: GatewayFactory);\r\n    /**\r\n     * Mutates the given service into a proxied service.\r\n     * You must provide a unique string gatewayId, in one of 2 ways.\r\n     *\r\n     *\r\n     * 1) Having a gatewayId property on the service provided\r\n     *\r\n     *\r\n     * OR\r\n     *\r\n     *\r\n     * 2) providing a gatewayId as 3rd param of this function\r\n     *\r\n     * @param service Service to mutate into a proxied service.\r\n     * @param methodsSubset An explicit set of methods on which the gatewayProxy will trigger. Otherwise, by default all functions\r\n     * will be proxied. This is particularly useful to avoid inner methods being unnecessarily turned into promises.\r\n     * @param gatewayId The gateway ID to use internaly for the proxy. If not provided, the service <strong>must</strong> have a gatewayId property.\r\n     */\r\n    initForService<T extends IProxiedService>(service: T, methodsSubset?: string[], gatewayId?: string): void;\r\n    /** @ignore */\r\n    private _isNonProxiableMethod;\r\n    /** @ignore */\r\n    private _onGatewayEvent;\r\n    /** @ignore */\r\n    private _turnToProxy;\r\n}\r\n"}}
