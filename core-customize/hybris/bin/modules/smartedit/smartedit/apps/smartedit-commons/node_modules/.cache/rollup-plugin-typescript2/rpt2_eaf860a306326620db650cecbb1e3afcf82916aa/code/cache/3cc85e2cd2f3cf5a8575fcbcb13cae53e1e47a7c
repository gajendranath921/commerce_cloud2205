{"code":"var /* @ngInject */ GatewayFactory_1;\r\nimport { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { CloneableUtils, FunctionsUtils, LogService, PromiseUtils } from '@smart/utils';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\nimport { WindowUtils } from 'smarteditcommons/utils';\r\nimport { SystemEventService } from '../SystemEventService';\r\nimport { MessageGateway } from './MessageGateway';\r\n/**\r\n * The Gateway Factory controls the creation of and access to {@link MessageGateway} instances.\r\n *\r\n * To construct and access a gateway, you must use the GatewayFactory's createGateway method and provide the channel\r\n * ID as an argument. If you try to create the same gateway twice, the second call will return a null.\r\n */\r\nlet /* @ngInject */ GatewayFactory = /* @ngInject */ GatewayFactory_1 = class /* @ngInject */ GatewayFactory {\r\n    constructor(logService, systemEventService, cloneableUtils, windowUtils, promiseUtils, functionsUtils) {\r\n        this.logService = logService;\r\n        this.systemEventService = systemEventService;\r\n        this.cloneableUtils = cloneableUtils;\r\n        this.windowUtils = windowUtils;\r\n        this.promiseUtils = promiseUtils;\r\n        this.functionsUtils = functionsUtils;\r\n        this.messageGatewayMap = {};\r\n    }\r\n    /**\r\n     * Initializes a postMessage event handler that dispatches the handling of an event to the specified gateway.\r\n     * If the corresponding gateway does not exist, an error is logged.\r\n     */\r\n    initListener() {\r\n        const processedPrimaryKeys = [];\r\n        // Listen to message from child window\r\n        this.windowUtils.getWindow().addEventListener('message', (e) => {\r\n            // if it's qualtrics url, it should be allowed without error\r\n            if (e.origin === 'https://sapinsights.eu.qualtrics.com') {\r\n                return;\r\n            }\r\n            if (this._isAllowed(e.origin)) {\r\n                // add control on e.origin\r\n                const event = e.data;\r\n                if (processedPrimaryKeys.indexOf(event.pk) > -1) {\r\n                    return;\r\n                }\r\n                processedPrimaryKeys.push(event.pk);\r\n                this.logService.debug('message event handler called', event.eventId);\r\n                const gatewayId = event.gatewayId;\r\n                const gateway = this.messageGatewayMap[gatewayId];\r\n                if (!gateway) {\r\n                    this.logService.debug('Incoming message on gateway ' +\r\n                        gatewayId +\r\n                        ', but no destination exists.');\r\n                    return;\r\n                }\r\n                gateway.processEvent(event);\r\n            }\r\n            else {\r\n                this.logService.error('disallowed storefront is trying to communicate with smarteditcontainer');\r\n            }\r\n        }, false);\r\n    }\r\n    /**\r\n     * Creates a gateway for the specified gateway identifier and caches it in order to handle postMessage events\r\n     * later in the application lifecycle. This method will fail on subsequent calls in order to prevent two\r\n     * clients from using the same gateway.\r\n     *\r\n     * @returns The newly created Message Gateway or null.\r\n     */\r\n    createGateway(gatewayId) {\r\n        if (this.messageGatewayMap[gatewayId] && !this.functionsUtils.isUnitTestMode()) {\r\n            this.logService.error('Message Gateway for ' + gatewayId + ' already reserved');\r\n            return null;\r\n        }\r\n        this.messageGatewayMap[gatewayId] = new MessageGateway(this.logService, this.systemEventService, this.cloneableUtils, this.windowUtils, this.promiseUtils, /* @ngInject */ GatewayFactory_1.TIMEOUT_TO_RETRY_PUBLISHING, gatewayId);\r\n        return this.messageGatewayMap[gatewayId];\r\n    }\r\n    /**\r\n     * Allowed if receiving end is frame or [container + (origin same as loaded iframe)]\r\n     */\r\n    _isAllowed(origin) {\r\n        return (\r\n        // communication from container to iframe already secured by webApplicationInjector\r\n        this.windowUtils.isIframe() ||\r\n            // communication from iframe to container strictly limiting to domain loaded in iframe\r\n            this.windowUtils.getTrustedIframeDomain() === origin);\r\n    }\r\n};\r\n/*\r\n * Period between two retries of a MessageGateway to publish an event\r\n * this value must be greater than the time needed by the browser to process a postMessage back and forth across two frames.\r\n * Internet Explorer is now known to need more than 100ms.\r\n */\r\n/* @ngInject */ GatewayFactory.TIMEOUT_TO_RETRY_PUBLISHING = 500;\r\n/* @ngInject */ GatewayFactory = /* @ngInject */ GatewayFactory_1 = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        SystemEventService,\r\n        CloneableUtils,\r\n        WindowUtils,\r\n        PromiseUtils,\r\n        FunctionsUtils])\r\n], /* @ngInject */ GatewayFactory);\r\nexport { /* @ngInject */ GatewayFactory };\r\n//# sourceMappingURL=GatewayFactory.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/SystemEventService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/gateway/MessageGateway.ts"],"map":"{\"version\":3,\"file\":\"GatewayFactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/gateway/GatewayFactory.ts\"],\"names\":[],\"mappings\":\";;AAAA;;GAEG;AACH,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,UAAU,EAAE,YAAY,EAAY,MAAM,cAAc,CAAC;AAClG,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3D,OAAO,EAA2B,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAE3E;;;;;GAKG;AAEH,wEAAA;IAUI,YACqB,UAAsB,EACtB,kBAAsC,EACtC,cAA8B,EAC9B,WAAwB,EACxB,YAA0B,EAC1B,cAA8B;QAL9B,eAAU,GAAV,UAAU,CAAY;QACtB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAR3C,sBAAiB,GAA6B,EAAE,CAAC;IAStD,CAAC;IAEJ;;;OAGG;IACH,YAAY;QACR,MAAM,oBAAoB,GAAa,EAAE,CAAC;QAE1C,sCAAsC;QACtC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,gBAAgB,CACzC,SAAS,EACT,CAAC,CAAe,EAAE,EAAE;YAChB,4DAA4D;YAC5D,IAAI,CAAC,CAAC,MAAM,KAAK,sCAAsC,EAAE;gBACrD,OAAO;aACV;YAED,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAC3B,0BAA0B;gBAC1B,MAAM,KAAK,GAA4B,CAAC,CAAC,IAAI,CAAC;gBAE9C,IAAI,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC7C,OAAO;iBACV;gBACD,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBAErE,MAAM,SAAS,GAAW,KAAK,CAAC,SAAS,CAAC;gBAC1C,MAAM,OAAO,GAAmB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAClE,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,CAAC,UAAU,CAAC,KAAK,CACjB,8BAA8B;wBAC1B,SAAS;wBACT,8BAA8B,CACrC,CAAC;oBACF,OAAO;iBACV;gBAED,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC/B;iBAAM;gBACH,IAAI,CAAC,UAAU,CAAC,KAAK,CACjB,wEAAwE,CAC3E,CAAC;aACL;QACL,CAAC,EACD,KAAK,CACR,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,SAAiB;QAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,EAAE;YAC5E,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,sBAAsB,GAAG,SAAS,GAAG,mBAAmB,CAAC,CAAC;YAChF,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,IAAI,cAAc,CAClD,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,gCAAc,CAAC,2BAA2B,EAC1C,SAAS,CACZ,CAAC;QAEF,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,MAAc;QAC7B,OAAO;QACH,mFAAmF;QACnF,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YAC3B,sFAAsF;YACtF,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,KAAK,MAAM,CACvD,CAAC;IACN,CAAC;CACJ,CAAA;AAvGG;;;;GAIG;AACI,0DAA2B,GAAG,GAAG,CAAC;AAN7C;IADC,kBAAkB,EAAE;qCAYgB,UAAU;QACF,kBAAkB;QACtB,cAAc;QACjB,WAAW;QACV,YAAY;QACV,cAAc;kCAwFtD\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/gateway/GatewayFactory.d.ts","writeByteOrderMark":false,"text":"import { CloneableUtils, FunctionsUtils, LogService, PromiseUtils } from '@smart/utils';\r\nimport { WindowUtils } from 'smarteditcommons/utils';\r\nimport { SystemEventService } from '../SystemEventService';\r\nimport { MessageGateway } from './MessageGateway';\r\n/**\r\n * The Gateway Factory controls the creation of and access to {@link MessageGateway} instances.\r\n *\r\n * To construct and access a gateway, you must use the GatewayFactory's createGateway method and provide the channel\r\n * ID as an argument. If you try to create the same gateway twice, the second call will return a null.\r\n */\r\nexport declare class GatewayFactory {\r\n    private readonly logService;\r\n    private readonly systemEventService;\r\n    private readonly cloneableUtils;\r\n    private readonly windowUtils;\r\n    private readonly promiseUtils;\r\n    private readonly functionsUtils;\r\n    static TIMEOUT_TO_RETRY_PUBLISHING: number;\r\n    private messageGatewayMap;\r\n    constructor(logService: LogService, systemEventService: SystemEventService, cloneableUtils: CloneableUtils, windowUtils: WindowUtils, promiseUtils: PromiseUtils, functionsUtils: FunctionsUtils);\r\n    /**\r\n     * Initializes a postMessage event handler that dispatches the handling of an event to the specified gateway.\r\n     * If the corresponding gateway does not exist, an error is logged.\r\n     */\r\n    initListener(): void;\r\n    /**\r\n     * Creates a gateway for the specified gateway identifier and caches it in order to handle postMessage events\r\n     * later in the application lifecycle. This method will fail on subsequent calls in order to prevent two\r\n     * clients from using the same gateway.\r\n     *\r\n     * @returns The newly created Message Gateway or null.\r\n     */\r\n    createGateway(gatewayId: string): MessageGateway;\r\n    /**\r\n     * Allowed if receiving end is frame or [container + (origin same as loaded iframe)]\r\n     */\r\n    private _isAllowed;\r\n}\r\n"}}
