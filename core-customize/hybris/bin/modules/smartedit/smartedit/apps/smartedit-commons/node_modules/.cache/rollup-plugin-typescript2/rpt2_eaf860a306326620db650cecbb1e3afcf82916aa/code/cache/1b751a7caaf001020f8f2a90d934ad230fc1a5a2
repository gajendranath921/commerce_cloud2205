{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { IModalService } from '@smart/utils';\r\nimport { SeDowngradeService } from '../../../di/SeDowngradeService';\r\nimport { ModalWizardTemplateComponent } from '../components/ModalWizardTemplateComponent';\r\nimport '../components/modalWizardNavBar.scss';\r\n/**\r\n * Used to create wizards that are embedded into the {@link ModalService}.\r\n */\r\nlet /* @ngInject */ ModalWizard = class /* @ngInject */ ModalWizard {\r\n    constructor(modalService) {\r\n        this.modalService = modalService;\r\n    }\r\n    /**\r\n     * Open provides a simple way to create modal wizards, with much of the boilerplate taken care of for you\r\n     * such as look, feel and wizard navigation.\r\n     *\r\n     * @returns Promise that will either be resolved (wizard finished) or\r\n     * rejected (wizard cancelled).\r\n     */\r\n    open(config) {\r\n        this.validateConfig(config);\r\n        return new Promise((resolve, reject) => {\r\n            const ref = this.modalService.open({\r\n                component: ModalWizardTemplateComponent,\r\n                templateConfig: { isDismissButtonVisible: true },\r\n                data: config,\r\n                config: {\r\n                    focusTrapped: false,\r\n                    backdropClickCloseable: false\r\n                }\r\n            });\r\n            ref.afterClosed.subscribe(resolve, reject);\r\n        });\r\n    }\r\n    validateConfig(config) {\r\n        if (!config.controller && !config.component) {\r\n            throw new Error('WizardService - initialization exception. No controller nor component provided');\r\n        }\r\n        if (config.controller && config.component) {\r\n            throw new Error('WizardService - initialization exception. Provide either controller or component');\r\n        }\r\n    }\r\n};\r\n/* @ngInject */ ModalWizard = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IModalService])\r\n], /* @ngInject */ ModalWizard);\r\nexport { /* @ngInject */ ModalWizard };\r\n//# sourceMappingURL=ModalWizard.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/SeDowngradeService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/wizard/components/ModalWizardTemplateComponent.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/wizard/services/types.ts"],"map":"{\"version\":3,\"file\":\"ModalWizard.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/wizard/services/ModalWizard.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AACpE,OAAO,EAAE,4BAA4B,EAAE,MAAM,4CAA4C,CAAC;AAE1F,OAAO,sCAAsC,CAAC;AAG9C;;GAEG;AAEH,kCAAA;IACI,YAA6B,YAA2B;QAA3B,iBAAY,GAAZ,YAAY,CAAe;IAAG,CAAC;IAE5D;;;;;;OAMG;IACH,IAAI,CAAC,MAAoB;QACrB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAe;gBAC7C,SAAS,EAAE,4BAA4B;gBACvC,cAAc,EAAE,EAAE,sBAAsB,EAAE,IAAI,EAAE;gBAChD,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE;oBACJ,YAAY,EAAE,KAAK;oBACnB,sBAAsB,EAAE,KAAK;iBAChC;aACJ,CAAC,CAAC;YAEH,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,MAAoB;QACvC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACzC,MAAM,IAAI,KAAK,CACX,gFAAgF,CACnF,CAAC;SACL;QAED,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,SAAS,EAAE;YACvC,MAAM,IAAI,KAAK,CACX,kFAAkF,CACrF,CAAC;SACL;IACL,CAAC;CACJ,CAAA;AAzCD;IADC,kBAAkB,EAAE;qCAE0B,aAAa;+BAwC3D\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/wizard/services/ModalWizard.d.ts","writeByteOrderMark":false,"text":"import { IModalService } from '@smart/utils';\r\nimport '../components/modalWizardNavBar.scss';\r\nimport { WizardAction } from './types';\r\n/**\r\n * Used to create wizards that are embedded into the {@link ModalService}.\r\n */\r\nexport declare class ModalWizard {\r\n    private readonly modalService;\r\n    constructor(modalService: IModalService);\r\n    /**\r\n     * Open provides a simple way to create modal wizards, with much of the boilerplate taken care of for you\r\n     * such as look, feel and wizard navigation.\r\n     *\r\n     * @returns Promise that will either be resolved (wizard finished) or\r\n     * rejected (wizard cancelled).\r\n     */\r\n    open(config: WizardAction): Promise<any>;\r\n    private validateConfig;\r\n}\r\n"}}
