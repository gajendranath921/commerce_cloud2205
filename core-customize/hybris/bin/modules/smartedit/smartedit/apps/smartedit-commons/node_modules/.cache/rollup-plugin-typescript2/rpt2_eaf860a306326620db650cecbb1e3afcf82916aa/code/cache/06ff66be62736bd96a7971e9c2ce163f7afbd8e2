{"code":"export {};\r\n//# sourceMappingURL=types.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/wizard/services/WizardService.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/wizard/services/types.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/wizard/services/types.d.ts","writeByteOrderMark":false,"text":"import { Type } from '@angular/core';\r\nimport { TypedMap } from '@smart/utils';\r\nimport { WizardService } from './WizardService';\r\nexport interface IWizardActionStrategy {\r\n    applyStrategy(wizardService: WizardService, conf: WizardConfig): void;\r\n}\r\nexport interface WizardAction {\r\n    id?: string;\r\n    i18n?: string;\r\n    /**\r\n     * Component to be used as a wizard controller.\r\n     */\r\n    component?: Type<any>;\r\n    /**\r\n     * **Deprecated since 2005, use [component]{@link WizardAction#component}.**\r\n     *\r\n     * An angular controller which will be the underlying controller\r\n     * for all of the wizard. This controller MUST implement the function <strong>getWizardConfig()</strong> which\r\n     * returns a {@link WizardConfig}.<br />\r\n     * If you need to do any manual wizard manipulation, 'wizardManager' can be injected into your controller.\r\n     * See {@link WizardService}.\r\n     */\r\n    controller?: string | (new (...args: any[]) => any);\r\n    /**\r\n     * **Deprecated since 2005, use [component]{@link WizardAction.component}.**\r\n     *\r\n     * An alternate controller name that can be used in your wizard step\r\n     */\r\n    controllerAs?: string;\r\n    isMainAction?: boolean;\r\n    destinationIndex?: number;\r\n    stepIndex?: number;\r\n    wizardService?: WizardService;\r\n    /**\r\n     * A map of properties to initialize the {@link WizardService} with. They are accessible under wizardManager.properties.\r\n     * templates. By default the controller name is wizardController.\r\n     */\r\n    properties?: TypedMap<any>;\r\n    isCurrentStep?(): boolean;\r\n    enableIfCondition?(): boolean;\r\n    executeIfCondition?(): boolean | Promise<any>;\r\n    execute?(wizardService: WizardService): void;\r\n}\r\n/**\r\n * A plain JSON object, representing the configuration options for a single step in a wizard.\r\n */\r\nexport interface WizardStep {\r\n    /**\r\n     * An optional unique ID for this step in the wizard. If no ID is provided, one is automatically generated.<br />\r\n     * You may choose to provide an ID, making it easier to reference this step explicitly via the wizard service, or\r\n     * be able to identify for which step a callback is being triggered.\r\n     */\r\n    id: string;\r\n    /** Step component */\r\n    component: Type<any>;\r\n    /**\r\n     * An i18n key representing a meaning (short) name for this step.\r\n     * This name will be displayed in the wizard navigation menu.\r\n     */\r\n    name: string;\r\n    /**\r\n     * An i18n key, representing the title that will be displayed at the top of the wizard for this step.\r\n     */\r\n    title: string;\r\n    actions?: WizardAction[];\r\n}\r\n/**\r\n * A plain JSON object, representing the configuration options for a modal wizard\r\n */\r\nexport interface WizardConfig {\r\n    /**\r\n     * An ordered array of Wizard Steps.\r\n     */\r\n    steps: WizardStep[];\r\n    actionStrategy?: IWizardActionStrategy;\r\n    /**\r\n     * An optional callback function that has no parameters. This callback is triggered after the done\r\n     * action is fired, and the wizard is about to be closed. If this function is defined and returns a value, this\r\n     * value will be returned in the resolved promise returned by the [open]{@link ModalWizard#open}.\r\n     * This is an easy way to pass a result from the wizard to the caller.\r\n     */\r\n    resultFn?: () => void;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID. This callback\r\n     * is used to enable/disable the next action and the done action.\r\n     * The callback should return a boolean to enabled the action. Null, or if this callback is not defined defaults to\r\n     * true (enabled)\r\n     */\r\n    isFormValid?: (stepId: string) => boolean;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID.\r\n     * This callback is triggered after the next action is fired. You have the opportunity to halt the Next action by\r\n     * returning promise and rejecting it, otherwise the wizard will continue and load the next step.\r\n     */\r\n    onNext?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional callback function that receives a single parameter, the current step ID.\r\n     * This callback is triggered after the cancel action is fired. You have the opportunity to halt the cancel action\r\n     * (thereby stopping the wizard from being closed), by returning a promise and rejecting it, otherwise the wizard will\r\n     * continue the cancel action.\r\n     */\r\n    onCancel?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional callback function that has no parameters. This callback is triggered after the done\r\n     * action is fired. You have the opportunity to halt the done action (thereby stopping the wizard from being closed),\r\n     * by returning a promise and rejecting it, otherwise the wizard will continue and close the wizard.\r\n     */\r\n    onDone?: (stepId: string) => boolean | Promise<any>;\r\n    /**\r\n     * An optional i18n key to override the default label for the Done button\r\n     */\r\n    doneLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Next button\r\n     */\r\n    nextLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Back button\r\n     */\r\n    backLabel?: string;\r\n    /**\r\n     * An optional i18n key to override the default label for the Cancel button\r\n     */\r\n    cancelLabel?: string;\r\n    templateOverride?: string;\r\n    cancelAction?: WizardAction;\r\n}\r\n"}}
