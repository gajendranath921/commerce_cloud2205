{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { LogService, PromiseUtils } from '@smart/utils';\r\nimport { SeDowngradeService } from 'smarteditcommons/di';\r\n/**\r\n * Used to transmit events synchronously or asynchronously. It is supported by the SmartEdit [gatewayFactory]{@link GatewayFactory} to propagate events between SmartEditContainer and SmartEdit.\r\n * It also contains options to publish events, as well as subscribe the event handlers.\r\n */\r\nlet /* @ngInject */ SystemEventService = class /* @ngInject */ SystemEventService {\r\n    constructor(logService, promiseUtils) {\r\n        this.logService = logService;\r\n        this.promiseUtils = promiseUtils;\r\n        this._eventHandlers = {};\r\n    }\r\n    /**\r\n     * Send the event with data synchronously.\r\n     *\r\n     * @returns A promise with resolved data of last subscriber or with the rejected error reason\r\n     */\r\n    publish(eventId, data) {\r\n        if (!eventId) {\r\n            this.logService.error('Failed to send event. No event ID provided for data: ' + data);\r\n        }\r\n        else {\r\n            if (this._eventHandlers[eventId] && this._eventHandlers[eventId].length > 0) {\r\n                return this._invokeEventHandlers(eventId, data);\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Send the event with data asynchronously.\r\n     */\r\n    publishAsync(eventId, data) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                this.publish(eventId, data).then((resolvedData) => resolve(resolvedData), (reason) => reject(reason));\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Method to subscribe the event handler given the eventId and handler\r\n     *\r\n     * @param handler The event handler, a callback function which can either return a promise or directly a value.\r\n     *\r\n     * @returns Function to unsubscribe the event handler\r\n     */\r\n    subscribe(eventId, handler) {\r\n        let unsubscribeFn;\r\n        if (!eventId || !handler) {\r\n            this.logService.error('Failed to subscribe event handler for event: ' + eventId);\r\n        }\r\n        else {\r\n            // create handlers array for this event if not already created\r\n            if (this._eventHandlers[eventId] === undefined) {\r\n                this._eventHandlers[eventId] = [];\r\n            }\r\n            this._eventHandlers[eventId].push(handler);\r\n            unsubscribeFn = () => {\r\n                this._unsubscribe(eventId, handler);\r\n            };\r\n        }\r\n        return unsubscribeFn;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _unsubscribe(eventId, handler) {\r\n        const handlersArray = this._eventHandlers[eventId];\r\n        const index = handlersArray ? this._eventHandlers[eventId].indexOf(handler) : -1;\r\n        if (index >= 0) {\r\n            this._eventHandlers[eventId].splice(index, 1);\r\n        }\r\n        else {\r\n            this.logService.warn('Attempting to remove event handler for ' + eventId + ' but handler not found.');\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _invokeEventHandlers(eventId, data) {\r\n        return Promise.all(this._eventHandlers[eventId].map((eventHandler) => {\r\n            const promiseClosure = this.promiseUtils.toPromise(eventHandler);\r\n            return promiseClosure(eventId, data);\r\n        })).then((results) => Promise.resolve(results.pop()), (reason) => Promise.reject(reason));\r\n    }\r\n};\r\n/* @ngInject */ SystemEventService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        PromiseUtils])\r\n], /* @ngInject */ SystemEventService);\r\nexport { /* @ngInject */ SystemEventService };\r\n//# sourceMappingURL=SystemEventService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts"],"map":"{\"version\":3,\"file\":\"SystemEventService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SystemEventService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SystemEventService.d.ts","writeByteOrderMark":false,"text":"import { IEventService, LogService, PromiseUtils } from '@smart/utils';\r\nexport declare type EventHandler = (eventId: string, eventData?: any) => Promise<any> | any;\r\n/**\r\n * Used to transmit events synchronously or asynchronously. It is supported by the SmartEdit [gatewayFactory]{@link GatewayFactory} to propagate events between SmartEditContainer and SmartEdit.\r\n * It also contains options to publish events, as well as subscribe the event handlers.\r\n */\r\nexport declare class SystemEventService implements IEventService {\r\n    private readonly logService;\r\n    private readonly promiseUtils;\r\n    private _eventHandlers;\r\n    constructor(logService: LogService, promiseUtils: PromiseUtils);\r\n    /**\r\n     * Send the event with data synchronously.\r\n     *\r\n     * @returns A promise with resolved data of last subscriber or with the rejected error reason\r\n     */\r\n    publish(eventId: string, data?: any): Promise<any>;\r\n    /**\r\n     * Send the event with data asynchronously.\r\n     */\r\n    publishAsync(eventId: string, data?: any): Promise<any>;\r\n    /**\r\n     * Method to subscribe the event handler given the eventId and handler\r\n     *\r\n     * @param handler The event handler, a callback function which can either return a promise or directly a value.\r\n     *\r\n     * @returns Function to unsubscribe the event handler\r\n     */\r\n    subscribe(eventId: string, handler: EventHandler): () => void;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _unsubscribe;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _invokeEventHandlers;\r\n}\r\n"}}
