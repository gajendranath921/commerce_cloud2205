{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { ChangeDetectorRef, Directive, Inject, Input, SimpleChange, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { IPermissionService, LogService, SystemEventService } from '../../services';\r\nimport { HasOperationPermissionBaseDirective } from './HasOperationPermissionBaseDirective';\r\n/**\r\n * An Authorization structural directive that conditionally will remove elements from the DOM if the user does not have authorization defined\r\n * by the input parameter permission keys.\r\n *\r\n * This directive makes use of the {@link IPermissionService} service to validate\r\n * if the current user has access to the given permission set.\r\n *\r\n * It takes a comma-separated list of permission names or an array of permission name objects structured as follows:\r\n *\r\n * ### Example\r\n *\r\n * 1. String\r\n * 'se-edit-page'\r\n *\r\n * 2. Object\r\n *\r\n *          {\r\n *              names: [\"permission1\", \"permission2\"],\r\n *              context: {\r\n *                  data: \"with the context property, extra data can be included to check a permission when the Rule.verify function is called\"\r\n *              }\r\n *          }\r\n */\r\nlet HasOperationPermissionDirective = class HasOperationPermissionDirective extends HasOperationPermissionBaseDirective {\r\n    constructor(templateRef, viewContainerRef, systemEventService, permissionService, logService, cdr) {\r\n        super(systemEventService, permissionService, logService);\r\n        this.templateRef = templateRef;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.cdr = cdr;\r\n        this.hasView = false;\r\n        this.isPermissionGrantedHandler = this.getIsPermissionGrantedHandler();\r\n    }\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges({\r\n            hasOperationPermission: new SimpleChange(changes.seHasOperationPermission.previousValue, changes.seHasOperationPermission.currentValue, changes.seHasOperationPermission.firstChange)\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n    getIsPermissionGrantedHandler() {\r\n        return (isPermissionGranted) => {\r\n            this.updateView(isPermissionGranted);\r\n        };\r\n    }\r\n    updateView(isPermissionGranted) {\r\n        if (isPermissionGranted && !this.hasView) {\r\n            this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            this.hasView = true;\r\n        }\r\n        else if (!isPermissionGranted && this.hasView) {\r\n            this.viewContainerRef.clear();\r\n        }\r\n        this.cdr.markForCheck();\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], HasOperationPermissionDirective.prototype, \"seHasOperationPermission\", void 0);\r\nHasOperationPermissionDirective = __decorate([\r\n    Directive({ selector: '[seHasOperationPermission]' }),\r\n    __param(3, Inject(IPermissionService)),\r\n    __metadata(\"design:paramtypes\", [TemplateRef,\r\n        ViewContainerRef,\r\n        SystemEventService,\r\n        IPermissionService,\r\n        LogService,\r\n        ChangeDetectorRef])\r\n], HasOperationPermissionDirective);\r\nexport { HasOperationPermissionDirective };\r\n//# sourceMappingURL=HasOperationPermissionDirective.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/directives/hasOperationPermission/HasOperationPermissionBaseDirective.ts"],"map":"{\"version\":3,\"file\":\"HasOperationPermissionDirective.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/directives/hasOperationPermission/HasOperationPermissionDirective.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EACH,iBAAiB,EACjB,SAAS,EACT,MAAM,EACN,KAAK,EAIL,YAAY,EAEZ,WAAW,EACX,gBAAgB,EACnB,MAAM,eAAe,CAAC;AAEvB,OAAO,EACH,kBAAkB,EAClB,UAAU,EAEV,kBAAkB,EACrB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EACH,mCAAmC,EAEtC,MAAM,uCAAuC,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAEH,IAAa,+BAA+B,GAA5C,MAAa,+BACT,SAAQ,mCAAmC;IAO3C,YACY,WAA6B,EAC7B,gBAAkC,EAC1C,kBAAsC,EACV,iBAAqC,EACjE,UAAsB,EACd,GAAsB;QAE9B,KAAK,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;QAPjD,gBAAW,GAAX,WAAW,CAAkB;QAC7B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAIlC,QAAG,GAAH,GAAG,CAAmB;QAR1B,YAAO,GAAG,KAAK,CAAC;QAWpB,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,6BAA6B,EAAE,CAAC;IAC3E,CAAC;IAED,QAAQ;QACJ,KAAK,CAAC,QAAQ,EAAE,CAAC;IACrB,CAAC;IAED,WAAW,CAAC,OAAsB;QAC9B,KAAK,CAAC,WAAW,CAAC;YACd,sBAAsB,EAAE,IAAI,YAAY,CACpC,OAAO,CAAC,wBAAwB,CAAC,aAAa,EAC9C,OAAO,CAAC,wBAAwB,CAAC,YAAY,EAC7C,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAC/C;SACJ,CAAC,CAAC;IACP,CAAC;IAED,WAAW;QACP,KAAK,CAAC,WAAW,EAAE,CAAC;IACxB,CAAC;IAEO,6BAA6B;QACjC,OAAO,CAAC,mBAA4B,EAAQ,EAAE;YAC1C,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC,CAAC;IACN,CAAC;IAEO,UAAU,CAAC,mBAA4B;QAC3C,IAAI,mBAAmB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACtC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;aAAM,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7C,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;SACjC;QACD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;CACJ,CAAA;AAjDY;IAAR,KAAK,EAAE;;iFAAiE;AAJhE,+BAA+B;IAD3C,SAAS,CAAC,EAAE,QAAQ,EAAE,4BAA4B,EAAE,CAAC;IAa7C,WAAA,MAAM,CAAC,kBAAkB,CAAC,CAAA;qCAHN,WAAW;QACN,gBAAgB;QACtB,kBAAkB;QACS,kBAAkB;QACrD,UAAU;QACT,iBAAiB;GAdzB,+BAA+B,CAqD3C;SArDY,+BAA+B\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/directives/hasOperationPermission/HasOperationPermissionDirective.d.ts","writeByteOrderMark":false,"text":"import { ChangeDetectorRef, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { IPermissionService, LogService, MultiNamePermissionContext, SystemEventService } from '../../services';\r\nimport { HasOperationPermissionBaseDirective } from './HasOperationPermissionBaseDirective';\r\n/**\r\n * An Authorization structural directive that conditionally will remove elements from the DOM if the user does not have authorization defined\r\n * by the input parameter permission keys.\r\n *\r\n * This directive makes use of the {@link IPermissionService} service to validate\r\n * if the current user has access to the given permission set.\r\n *\r\n * It takes a comma-separated list of permission names or an array of permission name objects structured as follows:\r\n *\r\n * ### Example\r\n *\r\n * 1. String\r\n * 'se-edit-page'\r\n *\r\n * 2. Object\r\n *\r\n *          {\r\n *              names: [\"permission1\", \"permission2\"],\r\n *              context: {\r\n *                  data: \"with the context property, extra data can be included to check a permission when the Rule.verify function is called\"\r\n *              }\r\n *          }\r\n */\r\nexport declare class HasOperationPermissionDirective extends HasOperationPermissionBaseDirective implements OnInit, OnDestroy, OnChanges {\r\n    private templateRef;\r\n    private viewContainerRef;\r\n    private cdr;\r\n    /** A comma-separated list of permission names or an array of permission name objects. */\r\n    seHasOperationPermission: string | MultiNamePermissionContext[];\r\n    private hasView;\r\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef, systemEventService: SystemEventService, permissionService: IPermissionService, logService: LogService, cdr: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private getIsPermissionGrantedHandler;\r\n    private updateView;\r\n}\r\n"}}
