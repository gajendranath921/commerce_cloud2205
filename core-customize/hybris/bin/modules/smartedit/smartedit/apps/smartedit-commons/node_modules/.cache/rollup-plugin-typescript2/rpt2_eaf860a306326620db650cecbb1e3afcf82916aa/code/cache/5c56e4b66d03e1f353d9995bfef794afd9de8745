{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { SeDowngradeService } from '../di';\r\nimport { ICatalogService, IExperienceService, IStorageService } from './interfaces';\r\n/**\r\n * Provides functionality for Component Menu displayed from toolbar on Storefront.\r\n * For example it allows to determine Content Catalog Version based on which component within the menu are fetched.\r\n */\r\nlet /* @ngInject */ ComponentMenuService = class /* @ngInject */ ComponentMenuService {\r\n    constructor(catalogService, experienceService, storageService) {\r\n        this.catalogService = catalogService;\r\n        this.experienceService = experienceService;\r\n        this.storageService = storageService;\r\n        this.SELECTED_CATALOG_VERSION_COOKIE_NAME = 'se_catalogmenu_catalogversion_cookie';\r\n    }\r\n    hasMultipleContentCatalogs() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageContext = yield this.getPageContext();\r\n            const contentCatalogs = yield this.getContentCatalogs();\r\n            const contentCatalog = contentCatalogs.find((catalog) => catalog.catalogId === pageContext.catalogId);\r\n            return !!contentCatalog.parents && contentCatalog.parents.length > 0;\r\n        });\r\n    }\r\n    /**\r\n     * This method is used to retrieve the content catalogs of the site in the page context.\r\n     */\r\n    getContentCatalogs() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageContext = yield this.getPageContext();\r\n            return pageContext ? this.catalogService.getContentCatalogsForSite(pageContext.siteId) : [];\r\n        });\r\n    }\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    getValidContentCatalogVersions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageContext = yield this.getPageContext();\r\n            const contentCatalogs = yield this.getContentCatalogs();\r\n            // Return 'active' catalog versions for content catalogs, except for the\r\n            // catalog in the current experience.\r\n            let catalogVersions = [];\r\n            const contentCatalog = contentCatalogs.find((catalog) => catalog.catalogId === pageContext.catalogId);\r\n            catalogVersions.push(this.getActiveOrCurrentVersionForCatalog(pageContext, contentCatalog));\r\n            // You can add components from the online version of a parent content catalog to the staged version of a child content catalog\r\n            const parentCatalogVersions = contentCatalog.parents.map((catalog) => this.getActiveOrCurrentVersionForCatalog(pageContext, catalog));\r\n            catalogVersions = [...parentCatalogVersions, ...catalogVersions];\r\n            return catalogVersions;\r\n        });\r\n    }\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Cookie Management Methods\r\n    // --------------------------------------------------------------------------------------------------\r\n    getInitialCatalogVersion(catalogVersions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const rawValue = yield this.storageService.getValueFromLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, false);\r\n            const selectedCatalogVersionId = typeof rawValue === 'string' ? rawValue : null;\r\n            const selectedCatalogVersion = catalogVersions.find((catalogVersion) => catalogVersion.id === selectedCatalogVersionId);\r\n            return selectedCatalogVersion\r\n                ? selectedCatalogVersion\r\n                : catalogVersions[catalogVersions.length - 1];\r\n        });\r\n    }\r\n    persistCatalogVersion(catalogVersionId) {\r\n        return this.storageService.setValueInLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, catalogVersionId, false);\r\n    }\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    getActiveOrCurrentVersionForCatalog(pageContext, catalog) {\r\n        const catalogVersion = catalog.versions.find((version) => {\r\n            if (pageContext.catalogId === catalog.catalogId) {\r\n                return pageContext.catalogVersion === version.version;\r\n            }\r\n            return version.active;\r\n        });\r\n        return {\r\n            isCurrentCatalog: pageContext.catalogVersion === catalogVersion.version,\r\n            catalogName: catalog.name ? catalog.name : catalog.catalogName,\r\n            catalogId: catalog.catalogId,\r\n            catalogVersionId: catalogVersion.version,\r\n            id: catalogVersion.uuid\r\n        };\r\n    }\r\n    getPageContext() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const experience = yield this.experienceService.getCurrentExperience();\r\n            return experience.pageContext;\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ ComponentMenuService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [ICatalogService,\r\n        IExperienceService,\r\n        IStorageService])\r\n], /* @ngInject */ ComponentMenuService);\r\nexport { /* @ngInject */ ComponentMenuService };\r\n//# sourceMappingURL=ComponentMenuService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"ComponentMenuService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ComponentMenuService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ComponentMenuService.d.ts","writeByteOrderMark":false,"text":"import { IBaseCatalog } from '../dtos';\r\nimport { ICatalogService, IExperienceService, IStorageService, CatalogVersion } from './interfaces';\r\n/**\r\n * Provides functionality for Component Menu displayed from toolbar on Storefront.\r\n * For example it allows to determine Content Catalog Version based on which component within the menu are fetched.\r\n */\r\nexport declare class ComponentMenuService {\r\n    private readonly catalogService;\r\n    private readonly experienceService;\r\n    private readonly storageService;\r\n    private readonly SELECTED_CATALOG_VERSION_COOKIE_NAME;\r\n    constructor(catalogService: ICatalogService, experienceService: IExperienceService, storageService: IStorageService);\r\n    hasMultipleContentCatalogs(): Promise<boolean>;\r\n    /**\r\n     * This method is used to retrieve the content catalogs of the site in the page context.\r\n     */\r\n    getContentCatalogs(): Promise<IBaseCatalog[]>;\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    getValidContentCatalogVersions(): Promise<CatalogVersion[]>;\r\n    getInitialCatalogVersion(catalogVersions: CatalogVersion[]): Promise<CatalogVersion>;\r\n    persistCatalogVersion(catalogVersionId: string): Promise<void>;\r\n    /**\r\n     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.\r\n     */\r\n    private getActiveOrCurrentVersionForCatalog;\r\n    private getPageContext;\r\n}\r\n"}}
