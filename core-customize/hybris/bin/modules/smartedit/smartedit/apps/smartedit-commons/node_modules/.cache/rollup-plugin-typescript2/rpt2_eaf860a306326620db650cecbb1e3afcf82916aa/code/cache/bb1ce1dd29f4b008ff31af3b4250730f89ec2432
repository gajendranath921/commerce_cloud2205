{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { SeDowngradeService } from '../../di';\r\nimport { TruncatedText } from '../../dtos/TruncatedText';\r\n/**\r\n * Service containing truncate string functions.\r\n * @internal\r\n */\r\nlet /* @ngInject */ TextTruncateService = class /* @ngInject */ TextTruncateService {\r\n    /**\r\n     * Truncates text to the nearest word depending on character length.\r\n     * Truncates below character length.\r\n     *\r\n     * @param limit index in text to truncate to\r\n     */\r\n    truncateToNearestWord(limit, text, ellipsis = '') {\r\n        if (lodash.isNil(text) || limit > text.length) {\r\n            return new TruncatedText(text, text, false);\r\n        }\r\n        const regexp = /(\\s)/g;\r\n        const truncatedGroups = text.match(regexp);\r\n        let truncateIndex = 0;\r\n        if (!truncatedGroups) {\r\n            truncateIndex = limit;\r\n        }\r\n        else {\r\n            for (let i = 0; i < truncatedGroups.length; i++) {\r\n                const nextPosition = this.getPositionOfCharacters(text, truncatedGroups[i], i + 1);\r\n                if (nextPosition > limit) {\r\n                    break;\r\n                }\r\n                truncateIndex = nextPosition;\r\n            }\r\n        }\r\n        const truncated = text.substr(0, truncateIndex);\r\n        return new TruncatedText(text, truncated, true, ellipsis);\r\n    }\r\n    getPositionOfCharacters(searchString, characters, index) {\r\n        return searchString.split(characters, index).join(characters).length;\r\n    }\r\n};\r\n/* @ngInject */ TextTruncateService = __decorate([\r\n    SeDowngradeService()\r\n], /* @ngInject */ TextTruncateService);\r\nexport { /* @ngInject */ TextTruncateService };\r\n//# sourceMappingURL=textTruncateService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/TruncatedText.ts"],"map":"{\"version\":3,\"file\":\"textTruncateService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/text/textTruncateService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAEzD;;;GAGG;AAEH,0CAAA;IACI;;;;;OAKG;IACI,qBAAqB,CAAC,KAAa,EAAE,IAAY,EAAE,QAAQ,GAAG,EAAE;QACnE,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YAC3C,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SAC/C;QACD,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,eAAe,GAAqB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE7D,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,eAAe,EAAE;YAClB,aAAa,GAAG,KAAK,CAAC;SACzB;aAAM;YACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7C,MAAM,YAAY,GAAW,IAAI,CAAC,uBAAuB,CACrD,IAAI,EACJ,eAAe,CAAC,CAAC,CAAC,EAClB,CAAC,GAAG,CAAC,CACR,CAAC;gBACF,IAAI,YAAY,GAAG,KAAK,EAAE;oBACtB,MAAM;iBACT;gBACD,aAAa,GAAG,YAAY,CAAC;aAChC;SACJ;QACD,MAAM,SAAS,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QACxD,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAEO,uBAAuB,CAC3B,YAAoB,EACpB,UAAkB,EAClB,KAAa;QAEb,OAAO,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;IACzE,CAAC;CACJ,CAAA;AAzCD;IADC,kBAAkB,EAAE;uCA0CpB\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/text/textTruncateService.d.ts","writeByteOrderMark":false,"text":"import { TruncatedText } from '../../dtos/TruncatedText';\r\n/**\r\n * Service containing truncate string functions.\r\n * @internal\r\n */\r\nexport declare class TextTruncateService {\r\n    /**\r\n     * Truncates text to the nearest word depending on character length.\r\n     * Truncates below character length.\r\n     *\r\n     * @param limit index in text to truncate to\r\n     */\r\n    truncateToNearestWord(limit: number, text: string, ellipsis?: string): TruncatedText;\r\n    private getPositionOfCharacters;\r\n}\r\n"}}
