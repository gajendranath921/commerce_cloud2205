{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { functionsUtils } from '@smart/utils';\r\nimport * as lodash from 'lodash';\r\n/**\r\n * The Message Gateway is a private channel that is used to publish and subscribe to events across iFrame\r\n * boundaries. The gateway uses the W3C-compliant postMessage as its underlying technology. The benefits of\r\n * the postMessage are that:\r\n *\r\n *      <ul>\r\n *          <li>It works in cross-origin scenarios.</li>\r\n *          <li>The receiving end can reject messages based on their origins.</li>\r\n *      </ul>\r\n *\r\n * The creation of instances is controlled by the {@link GatewayFactory}.\r\n * Only one instance can exist for each gateway ID.\r\n *\r\n */\r\nexport class MessageGateway {\r\n    /**\r\n     * @param gatewayId The channel identifier\r\n     */\r\n    constructor(logService, systemEventService, cloneableUtils, windowUtils, promiseUtils, TIMEOUT_TO_RETRY_PUBLISHING, gatewayId) {\r\n        this.logService = logService;\r\n        this.systemEventService = systemEventService;\r\n        this.cloneableUtils = cloneableUtils;\r\n        this.windowUtils = windowUtils;\r\n        this.promiseUtils = promiseUtils;\r\n        this.TIMEOUT_TO_RETRY_PUBLISHING = TIMEOUT_TO_RETRY_PUBLISHING;\r\n        this.gatewayId = gatewayId;\r\n        this.PROMISE_ACKNOWLEDGEMENT_EVENT_ID = 'promiseAcknowledgement';\r\n        this.PROMISE_RETURN_EVENT_ID = 'promiseReturn';\r\n        this.SUCCESS = 'success';\r\n        this.FAILURE = 'failure';\r\n        this.MAX_RETRIES = 5;\r\n        this.promisesToResolve = {};\r\n    }\r\n    /**\r\n     * Publishes a message across the gateway using the postMessage.\r\n     *\r\n     * The gateway's publish method implements promises, which are an AngularJS implementation. To resolve a\r\n     * publish promise, all listener promises on the side of the channel must resolve. If a failure occurs in the\r\n     * chain, the chain is interrupted and the publish promise is rejected.\r\n     *\r\n     * @param data Message payload\r\n     * @param retries The current number of attempts to publish a message. By default it is 0.\r\n     * @param pk An optional parameter. It is a primary key for the event, which is generated after\r\n     * the first attempt to send a message.\r\n     */\r\n    publish(eventId, _data, retries = 0, pk) {\r\n        if (!eventId) {\r\n            return Promise.reject(`MessageGateway: Failed to send event. No event ID provided for _data: ${_data}`);\r\n        }\r\n        const data = this.cloneableUtils.makeCloneable(_data);\r\n        if (!lodash.isEqual(data, _data)) {\r\n            this.logService.debug(`MessageGateway.publish - Non cloneable payload has been sanitized for gateway ${this.gatewayId}, event ${eventId}:`, data);\r\n        }\r\n        const deferred = this.promisesToResolve[pk] ||\r\n            this.promiseUtils.defer();\r\n        try {\r\n            const target = this.windowUtils.getGatewayTargetFrame();\r\n            if (!target) {\r\n                deferred.reject('It is standalone. There is no iframe');\r\n                return deferred.promise;\r\n            }\r\n            pk = pk || this._generateIdentifier();\r\n            try {\r\n                target.postMessage({\r\n                    pk,\r\n                    gatewayId: this.gatewayId,\r\n                    eventId,\r\n                    data\r\n                }, '*');\r\n            }\r\n            catch (e) {\r\n                this.logService.error(e);\r\n                this.logService.error(`MessageGateway.publish - postMessage has failed for gateway ${this.gatewayId} event ${eventId} and data `, data);\r\n            }\r\n            this.promisesToResolve[pk] = deferred;\r\n            // in case promise does not return because, say, a non ready frame\r\n            this._setTimeout(() => {\r\n                if (!deferred.acknowledged &&\r\n                    eventId !== this.PROMISE_RETURN_EVENT_ID &&\r\n                    eventId !== this.PROMISE_ACKNOWLEDGEMENT_EVENT_ID) {\r\n                    // still pending\r\n                    if (retries < this.MAX_RETRIES) {\r\n                        this.logService.debug(`${document.location.href} is retrying to publish event ${eventId}`);\r\n                        this.publish(eventId, data, ++retries, pk).catch((reason) => {\r\n                            //\r\n                        });\r\n                    }\r\n                    else {\r\n                        const error = `MessageGateway.publish - Not able to publish event ${eventId} after max retries for gateway ${this.gatewayId} and data`;\r\n                        deferred.reject({ error, data }, true);\r\n                    }\r\n                }\r\n            }, this.TIMEOUT_TO_RETRY_PUBLISHING);\r\n        }\r\n        catch (e) {\r\n            deferred.reject();\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Registers a given callback function to the given event ID.\r\n     *\r\n     * @param callback Callback function to be invoked\r\n     * @returns The function to call in order to unsubscribe the event listening\r\n     */\r\n    subscribe(eventId, callback) {\r\n        let unsubscribeFn;\r\n        if (!eventId) {\r\n            this.logService.error('MessageGateway: Failed to subscribe event handler for event: ' + eventId);\r\n        }\r\n        else {\r\n            const systemEventId = this._getSystemEventId(eventId);\r\n            unsubscribeFn = this.systemEventService.subscribe(systemEventId, callback);\r\n        }\r\n        return unsubscribeFn;\r\n    }\r\n    processEvent(event) {\r\n        const eventData = event.data;\r\n        if (event.eventId !== this.PROMISE_RETURN_EVENT_ID &&\r\n            event.eventId !== this.PROMISE_ACKNOWLEDGEMENT_EVENT_ID) {\r\n            this.logService.debug(document.location.href, 'sending acknowledgement for', event);\r\n            this.publish(this.PROMISE_ACKNOWLEDGEMENT_EVENT_ID, {\r\n                pk: event.pk\r\n            });\r\n            const systemEventId = this._getSystemEventId(event.eventId);\r\n            return this.systemEventService.publishAsync(systemEventId, event.data).then((resolvedDataOfLastSubscriber) => {\r\n                this.logService.debug(document.location.href, 'sending promise resolve', event);\r\n                return this.publish(this.PROMISE_RETURN_EVENT_ID, {\r\n                    pk: event.pk,\r\n                    type: this.SUCCESS,\r\n                    resolvedDataOfLastSubscriber\r\n                });\r\n            }, () => {\r\n                this.logService.debug(document.location.href, 'sending promise reject', event);\r\n                return this.publish(this.PROMISE_RETURN_EVENT_ID, {\r\n                    pk: event.pk,\r\n                    type: this.FAILURE\r\n                });\r\n            });\r\n        }\r\n        else if (event.eventId === this.PROMISE_RETURN_EVENT_ID) {\r\n            if (this.promisesToResolve[eventData.pk]) {\r\n                if (eventData.type === this.SUCCESS) {\r\n                    this.logService.debug(document.location.href, 'received promise resolve', event);\r\n                    this.promisesToResolve[eventData.pk].resolve(eventData.resolvedDataOfLastSubscriber);\r\n                }\r\n                else if (eventData.type === this.FAILURE) {\r\n                    this.logService.debug(document.location.href, 'received promise reject', event);\r\n                    this.promisesToResolve[eventData.pk].reject();\r\n                }\r\n                delete this.promisesToResolve[eventData.pk];\r\n            }\r\n        }\r\n        else if (event.eventId === this.PROMISE_ACKNOWLEDGEMENT_EVENT_ID) {\r\n            if (this.promisesToResolve[eventData.pk]) {\r\n                this.logService.debug(document.location.href, 'received acknowledgement', event);\r\n                this.promisesToResolve[eventData.pk].acknowledged = true;\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _setTimeout(callback, timeout) {\r\n        if (functionsUtils.isUnitTestMode()) {\r\n            setTimeout(callback, timeout);\r\n        }\r\n        else {\r\n            this.windowUtils.runTimeoutOutsideAngular(callback, timeout);\r\n        }\r\n    }\r\n    _generateIdentifier() {\r\n        return new Date().getTime() + Math.random().toString();\r\n    }\r\n    _getSystemEventId(eventId) {\r\n        return this.gatewayId + ':' + eventId;\r\n    }\r\n}\r\n//# sourceMappingURL=MessageGateway.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/SystemEventService.ts"],"map":"{\"version\":3,\"file\":\"MessageGateway.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/gateway/MessageGateway.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/gateway/MessageGateway.d.ts","writeByteOrderMark":false,"text":"import { Cloneable, CloneableEventHandler, CloneableUtils, LogService, Payload, PromiseUtils } from '@smart/utils';\r\nimport { WindowUtils } from 'smarteditcommons/utils';\r\nimport { SystemEventService } from '../SystemEventService';\r\nexport interface IGatewayPostMessageData extends Payload {\r\n    pk: string;\r\n    gatewayId: string;\r\n    eventId: string;\r\n    data: Cloneable;\r\n}\r\n/**\r\n * The Message Gateway is a private channel that is used to publish and subscribe to events across iFrame\r\n * boundaries. The gateway uses the W3C-compliant postMessage as its underlying technology. The benefits of\r\n * the postMessage are that:\r\n *\r\n *      <ul>\r\n *          <li>It works in cross-origin scenarios.</li>\r\n *          <li>The receiving end can reject messages based on their origins.</li>\r\n *      </ul>\r\n *\r\n * The creation of instances is controlled by the {@link GatewayFactory}.\r\n * Only one instance can exist for each gateway ID.\r\n *\r\n */\r\nexport declare class MessageGateway {\r\n    private readonly logService;\r\n    private readonly systemEventService;\r\n    private readonly cloneableUtils;\r\n    private readonly windowUtils;\r\n    private readonly promiseUtils;\r\n    private readonly TIMEOUT_TO_RETRY_PUBLISHING;\r\n    readonly gatewayId: string;\r\n    private readonly PROMISE_ACKNOWLEDGEMENT_EVENT_ID;\r\n    private readonly PROMISE_RETURN_EVENT_ID;\r\n    private readonly SUCCESS;\r\n    private readonly FAILURE;\r\n    private readonly MAX_RETRIES;\r\n    private promisesToResolve;\r\n    /**\r\n     * @param gatewayId The channel identifier\r\n     */\r\n    constructor(logService: LogService, systemEventService: SystemEventService, cloneableUtils: CloneableUtils, windowUtils: WindowUtils, promiseUtils: PromiseUtils, TIMEOUT_TO_RETRY_PUBLISHING: number, gatewayId: string);\r\n    /**\r\n     * Publishes a message across the gateway using the postMessage.\r\n     *\r\n     * The gateway's publish method implements promises, which are an AngularJS implementation. To resolve a\r\n     * publish promise, all listener promises on the side of the channel must resolve. If a failure occurs in the\r\n     * chain, the chain is interrupted and the publish promise is rejected.\r\n     *\r\n     * @param data Message payload\r\n     * @param retries The current number of attempts to publish a message. By default it is 0.\r\n     * @param pk An optional parameter. It is a primary key for the event, which is generated after\r\n     * the first attempt to send a message.\r\n     */\r\n    publish<Tin extends Cloneable, Tout extends Cloneable>(eventId: string, _data: Tin, retries?: number, pk?: string): Promise<void | Tout>;\r\n    /**\r\n     * Registers a given callback function to the given event ID.\r\n     *\r\n     * @param callback Callback function to be invoked\r\n     * @returns The function to call in order to unsubscribe the event listening\r\n     */\r\n    subscribe<T extends Cloneable>(eventId: string, callback: CloneableEventHandler<T>): () => void;\r\n    processEvent(event: IGatewayPostMessageData): Promise<any>;\r\n    private _setTimeout;\r\n    private _generateIdentifier;\r\n    private _getSystemEventId;\r\n}\r\n"}}
