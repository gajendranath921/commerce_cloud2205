{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { RestServiceFactory } from '@smart/utils';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { apiUtils } from '../../utils';\r\nimport { TreeNestedDataSource } from './TreeNestedDataSource';\r\nimport { TreeNodeItemFactory } from './TreeNodeItemFactory';\r\n/**\r\n * A service to manage tree nodes through a REST API.\r\n */\r\nlet /* @ngInject */ TreeService = class /* @ngInject */ TreeService {\r\n    constructor(restServiceFactory, treeNodeItemFactory) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.treeNodeItemFactory = treeNodeItemFactory;\r\n        this.dataSource = new TreeNestedDataSource();\r\n        this.$onTreeUpdated = new BehaviorSubject(false);\r\n    }\r\n    onTreeUpdated() {\r\n        return this.$onTreeUpdated.pipe(filter((value) => !!value));\r\n    }\r\n    /**\r\n     * Initializes the REST service and sets root node.\r\n     *\r\n     * @param nodeUri URI passed to {@link TreeComponent}.\r\n     * @param rootNodeUid root uid passed to {@link TreeComponent}.\r\n     */\r\n    init(nodeUri, rootNodeUid) {\r\n        if (nodeUri) {\r\n            this.nodesRestService = this.restServiceFactory.get(nodeUri);\r\n        }\r\n        this.setRoot(rootNodeUid);\r\n    }\r\n    /**\r\n     * Updates the position of the node within the tree.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     * @param position New position of node.\r\n     */\r\n    rearrange(node, parent, position) {\r\n        const siblings = parent.nodes.filter((_node) => _node.uid !== node.uid);\r\n        const rearranged = [\r\n            ...siblings.slice(0, position),\r\n            node,\r\n            ...siblings.slice(position, siblings.length)\r\n        ];\r\n        node.parent.removeNode(node);\r\n        parent.removeAllNodes().addNodes(rearranged);\r\n        this.update();\r\n    }\r\n    /**\r\n     * Fetches the node children and updates the tree.\r\n     */\r\n    fetchChildren(_parent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const parent = _parent || this.root;\r\n            if (parent.initiated) {\r\n                this.update();\r\n                return Promise.resolve(parent.nodes);\r\n            }\r\n            else {\r\n                const response = yield this.nodesRestService.get({ parentUid: parent.uid });\r\n                const children = (apiUtils.getDataFromResponse(response) || []).map((dto) => this.treeNodeItemFactory.get(dto));\r\n                parent.removeAllNodes().addNodes(children).setInitiated(true);\r\n                this.update();\r\n                return children;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Toggles the passed node and fetches children\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    toggle(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            node.toggle();\r\n            return this.fetchChildren(node);\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new child to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newChild(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const nodeData = node || this.root;\r\n            const response = yield this.saveNode(nodeData);\r\n            if (!nodeData.isExpanded) {\r\n                this.toggle(nodeData);\r\n            }\r\n            else {\r\n                const elm = nodeData.nodes.find((_node) => _node.uid === response.uid);\r\n                if (!elm) {\r\n                    nodeData.addNode(this.treeNodeItemFactory.get(response));\r\n                    this.update();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Adds new sibling to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newSibling(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.saveNode(node.parent);\r\n            node.parent.addNode(this.treeNodeItemFactory.get(response));\r\n            this.update();\r\n        });\r\n    }\r\n    /**\r\n     * Removes passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    removeNode(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.nodesRestService.remove({ identifier: node.uid });\r\n            node.parent.removeNode(node);\r\n            this.update();\r\n        });\r\n    }\r\n    /**\r\n     * Updates the data source from where the nodes are retrieved\r\n     */\r\n    update() {\r\n        this.dataSource.set(null);\r\n        this.dataSource.set(this.root.nodes);\r\n        this.$onTreeUpdated.next(true);\r\n    }\r\n    /**\r\n     * Expands all nodes from the root node\r\n     */\r\n    expandAll() {\r\n        this.root.expandAll();\r\n        this.update();\r\n    }\r\n    /**\r\n     * Collapses all nodes from the root node\r\n     */\r\n    collapseAll() {\r\n        this.root.collapseAll();\r\n        this.update();\r\n    }\r\n    getNodePositionById(nodeUid) {\r\n        return this.getNodeById(nodeUid).position;\r\n    }\r\n    getNodeById(nodeUid, nodeArray) {\r\n        if (nodeUid === this.root.uid) {\r\n            return this.root;\r\n        }\r\n        const nodes = nodeArray || this.root.nodes;\r\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n        for (const node of nodes) {\r\n            if (node.uid === nodeUid) {\r\n                return node;\r\n            }\r\n            if (node.hasChildren) {\r\n                node.nodes = node.nodes || [];\r\n                return this.getNodeById(nodeUid, node.nodes);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    saveNode(_parent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.nodesRestService.save({\r\n                parentUid: _parent.uid,\r\n                name: (_parent.name ? _parent.name : _parent.uid) + _parent.nodes.length\r\n            });\r\n            return response;\r\n        });\r\n    }\r\n    setRoot(uid) {\r\n        this.root = this.treeNodeItemFactory.get({ uid, name: 'root', level: 0 });\r\n    }\r\n};\r\n/* @ngInject */ TreeService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [RestServiceFactory,\r\n        TreeNodeItemFactory])\r\n], /* @ngInject */ TreeService);\r\nexport { /* @ngInject */ TreeService };\r\n//# sourceMappingURL=TreeService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/TreeNestedDataSource.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/TreeNodeItemFactory.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/treeModule/types.ts"],"map":"{\"version\":3,\"file\":\"TreeService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/treeModule/TreeService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/treeModule/TreeService.d.ts","writeByteOrderMark":false,"text":"import { IRestService, RestServiceFactory } from '@smart/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { TreeNestedDataSource } from './TreeNestedDataSource';\r\nimport { TreeNodeItemFactory } from './TreeNodeItemFactory';\r\nimport { ITreeNodeItem, TreeNodeItemDTO } from './types';\r\n/**\r\n * A service to manage tree nodes through a REST API.\r\n */\r\nexport declare class TreeService<T, D extends TreeNodeItemDTO> {\r\n    private restServiceFactory;\r\n    private treeNodeItemFactory;\r\n    nodesRestService: IRestService<D | D[]>;\r\n    dataSource: TreeNestedDataSource<ITreeNodeItem<T>>;\r\n    root: ITreeNodeItem<T>;\r\n    private $onTreeUpdated;\r\n    constructor(restServiceFactory: RestServiceFactory, treeNodeItemFactory: TreeNodeItemFactory);\r\n    onTreeUpdated(): Observable<boolean>;\r\n    /**\r\n     * Initializes the REST service and sets root node.\r\n     *\r\n     * @param nodeUri URI passed to {@link TreeComponent}.\r\n     * @param rootNodeUid root uid passed to {@link TreeComponent}.\r\n     */\r\n    init(nodeUri: string, rootNodeUid: string): void;\r\n    /**\r\n     * Updates the position of the node within the tree.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     * @param position New position of node.\r\n     */\r\n    rearrange(node: ITreeNodeItem<T>, parent: ITreeNodeItem<T>, position: number): void;\r\n    /**\r\n     * Fetches the node children and updates the tree.\r\n     */\r\n    fetchChildren(_parent?: ITreeNodeItem<T>): Promise<ITreeNodeItem<T>[]>;\r\n    /**\r\n     * Toggles the passed node and fetches children\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    toggle(node: ITreeNodeItem<T>): Promise<ITreeNodeItem<T>[]>;\r\n    /**\r\n     * Adds a new child to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newChild(node?: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Adds new sibling to passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    newSibling(node: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Removes passed node.\r\n     *\r\n     * @param node Node to be rearranged.\r\n     */\r\n    removeNode(node: ITreeNodeItem<T>): Promise<void>;\r\n    /**\r\n     * Updates the data source from where the nodes are retrieved\r\n     */\r\n    update(): void;\r\n    /**\r\n     * Expands all nodes from the root node\r\n     */\r\n    expandAll(): void;\r\n    /**\r\n     * Collapses all nodes from the root node\r\n     */\r\n    collapseAll(): void;\r\n    getNodePositionById(nodeUid: string): number;\r\n    getNodeById(nodeUid: string, nodeArray?: ITreeNodeItem<T>[]): ITreeNodeItem<T>;\r\n    private saveNode;\r\n    private setRoot;\r\n}\r\n"}}
