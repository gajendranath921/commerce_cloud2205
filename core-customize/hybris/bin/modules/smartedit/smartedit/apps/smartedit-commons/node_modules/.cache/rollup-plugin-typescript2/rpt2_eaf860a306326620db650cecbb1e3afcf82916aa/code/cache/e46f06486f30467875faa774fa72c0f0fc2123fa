{"code":"export {};\r\n//# sourceMappingURL=IFetchDataHandler.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts"],"map":"{\"version\":3,\"file\":\"IFetchDataHandler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/genericEditor/services/IFetchDataHandler.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/services/IFetchDataHandler.d.ts","writeByteOrderMark":false,"text":"import { GenericEditorField } from '../types';\r\n/**\r\n * Interface describing the contract of a fetchDataHandler fetched through dependency injection by the\r\n * {@link GenericEditorFactoryService} to populate dropdowns\r\n */\r\nexport interface IFetchDataHandler {\r\n    /**\r\n     * will returns a promise resolving to an entity, of type defined by field, matching the given identifier\r\n     *\r\n     * @returns an entity\r\n     */\r\n    getById(field: GenericEditorField, identifier: string): Promise<string>;\r\n    /**\r\n     * Will returns a promise resolving to list of entities, of type defined by field, eligible for a given search mask\r\n     *\r\n     * @returns a list of eligible entities\r\n     */\r\n    findByMask(field: GenericEditorField, mask: string): Promise<string[]>;\r\n}\r\n"}}
