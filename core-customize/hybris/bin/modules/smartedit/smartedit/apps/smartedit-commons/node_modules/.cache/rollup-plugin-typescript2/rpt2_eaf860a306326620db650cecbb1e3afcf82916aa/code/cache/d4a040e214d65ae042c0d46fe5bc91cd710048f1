{"code":"import { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { SeDowngradeService } from '../../../di';\r\nexport const parseValidationMessage = (message) => {\r\n    const expression = new RegExp('[a-zA-Z]+: ([|{)([a-zA-Z0-9]+)(]|}).?', 'g');\r\n    const matches = message.match(expression) || [];\r\n    return matches.reduce((messages, match) => {\r\n        messages.message = messages.message.replace(match, '').trim();\r\n        const key = match.split(':')[0].trim().toLowerCase();\r\n        const value = match.split(':')[1].match(/[a-zA-Z0-9]+/g)[0];\r\n        messages[key] = value;\r\n        return messages;\r\n    }, {\r\n        message\r\n    });\r\n};\r\n/**\r\n * This service provides the functionality to parse validation messages (errors, warnings) received from the backend.\r\n * This service is used to parse validation messages (errors, warnings) for parameters such as language and format,\r\n * which are sent as part of the message itself.\r\n */\r\nlet /* @ngInject */ SeValidationMessageParser = class /* @ngInject */ SeValidationMessageParser {\r\n    /**\r\n     * Parses extra details, such as language and format, from a validation message (error, warning). These details are also\r\n     * stripped out of the final message. This function expects the message to be in the following format:\r\n     *\r\n     * <pre>\r\n     * const message = \"Some validation message occurred. Language: [en]. Format: [widescreen]. SomeKey: [SomeVal].\"\r\n     * </pre>\r\n     *\r\n     * The resulting message object is as follows:\r\n     * <pre>\r\n     * {\r\n     *     message: \"Some validation message occurred.\"\r\n     *     language: \"en\",\r\n     *     format: \"widescreen\",\r\n     *     somekey: \"someval\"\r\n     * }\r\n     * </pre>\r\n     */\r\n    parse(message) {\r\n        return parseValidationMessage(message);\r\n    }\r\n};\r\n/* @ngInject */ SeValidationMessageParser = __decorate([\r\n    SeDowngradeService(),\r\n    Injectable()\r\n], /* @ngInject */ SeValidationMessageParser);\r\nexport { /* @ngInject */ SeValidationMessageParser };\r\n//# sourceMappingURL=SeValidationMessageParser.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts"],"map":"{\"version\":3,\"file\":\"SeValidationMessageParser.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/genericEditor/services/SeValidationMessageParser.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAGjD,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,OAAe,EAA6B,EAAE;IACjF,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;IAC5E,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAChD,OAAO,OAAO,CAAC,MAAM,CACjB,CAAC,QAAmC,EAAE,KAAK,EAAE,EAAE;QAC3C,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAC9D,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5D,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACtB,OAAO,QAAQ,CAAC;IACpB,CAAC,EACD;QACI,OAAO;KACV,CACJ,CAAC;AACN,CAAC,CAAC;AAEF;;;;GAIG;AAGH,gDAAA;IACI;;;;;;;;;;;;;;;;;OAiBG;IACH,KAAK,CAAC,OAAe;QACjB,OAAO,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;CACJ,CAAA;AAtBD;IAFC,kBAAkB,EAAE;IACpB,UAAU,EAAE;6CAuBZ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/services/SeValidationMessageParser.d.ts","writeByteOrderMark":false,"text":"import { GenericEditorFieldMessage } from '../types';\r\nexport declare const parseValidationMessage: (message: string) => GenericEditorFieldMessage;\r\n/**\r\n * This service provides the functionality to parse validation messages (errors, warnings) received from the backend.\r\n * This service is used to parse validation messages (errors, warnings) for parameters such as language and format,\r\n * which are sent as part of the message itself.\r\n */\r\nexport declare class SeValidationMessageParser {\r\n    /**\r\n     * Parses extra details, such as language and format, from a validation message (error, warning). These details are also\r\n     * stripped out of the final message. This function expects the message to be in the following format:\r\n     *\r\n     * <pre>\r\n     * const message = \"Some validation message occurred. Language: [en]. Format: [widescreen]. SomeKey: [SomeVal].\"\r\n     * </pre>\r\n     *\r\n     * The resulting message object is as follows:\r\n     * <pre>\r\n     * {\r\n     *     message: \"Some validation message occurred.\"\r\n     *     language: \"en\",\r\n     *     format: \"widescreen\",\r\n     *     somekey: \"someval\"\r\n     * }\r\n     * </pre>\r\n     */\r\n    parse(message: string): GenericEditorFieldMessage;\r\n}\r\n"}}
