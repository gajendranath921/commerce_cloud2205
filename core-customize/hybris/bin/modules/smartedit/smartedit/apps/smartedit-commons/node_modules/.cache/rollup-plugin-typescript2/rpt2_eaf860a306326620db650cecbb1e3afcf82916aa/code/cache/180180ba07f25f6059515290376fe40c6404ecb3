{"code":"export {};\r\n//# sourceMappingURL=IContextualMenuButton.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IContextualMenuConfiguration.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IFeature.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IPrioritized.ts"],"map":"{\"version\":3,\"file\":\"IContextualMenuButton.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IContextualMenuButton.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/interfaces/IContextualMenuButton.d.ts","writeByteOrderMark":false,"text":"import { Type } from '@angular/core';\r\nimport { TypedMap } from '@smart/utils';\r\nimport { IContextualMenuConfiguration } from './IContextualMenuConfiguration';\r\nimport { IFeature } from './IFeature';\r\nimport { IPrioritized } from './IPrioritized';\r\n/**\r\n * A full representation of a component contextual menu,\r\n * specifying the layout of [buttons]{@link IContextualMenuButton}\r\n * to be displayed for a speicific smartedit component.\r\n */\r\nexport interface ContextualMenu {\r\n    leftMenuItems: IContextualMenuButton[];\r\n    moreMenuItems: IContextualMenuButton[];\r\n}\r\n/**\r\n * Payload passed to {@link /smartedit/injectables/ContextualMenuService.html#addItems addItems}, to describe a contextual menu button.\r\n */\r\nexport interface IContextualMenuButton extends IFeature, IPrioritized {\r\n    /**\r\n     * The action to be performed when clicking the menu item.\r\n     * Action is an object that must contain exactly one of callback | callbacks | template | templateUrl<br />\r\n     */\r\n    action: {\r\n        /**\r\n         * Component to be displayed when the menu is clicked.\r\n         */\r\n        component?: Type<any>;\r\n        /**\r\n         * Map of DOM events occuring on the contextual menu button and callbacks to be invoked when they occur\r\n         */\r\n        callbacks?: TypedMap<(configuration?: IContextualMenuConfiguration, $event?: Event) => void>;\r\n        /**\r\n         * A function executed on clicking of the menu item. It is invoked with the component specific configuration.\r\n         * @param configuration the smartedit component specific configuration\r\n         * @param $event the yjQuery event triggering the callback\r\n         */\r\n        callback?(configuration?: IContextualMenuConfiguration, $event?: Event): void;\r\n    };\r\n    /**\r\n     * The message key of the contextual menu item to be translated.\r\n     */\r\n    i18nKey?: string;\r\n    /**\r\n     * Contains the CSS classes used to style the contextual menu item\r\n     */\r\n    displayClass?: string;\r\n    /**\r\n     * Contains the CSS classes used to style the non-idle icon of the contextual menu item to be displayed.\r\n     */\r\n    displayIconClass?: string;\r\n    /**\r\n     * Contains the location of the smaller version of the icon to be displayed when the menu item is part of the More... menu options.\r\n     */\r\n    displaySmallIconClass?: string;\r\n    /**\r\n     * Contains the location of the idle icon of the contextual menu item to be displayed.\r\n     */\r\n    iconIdle?: string;\r\n    /**\r\n     * Contains the location of the non-idle icon of the contextual menu item to be displayed.\r\n     */\r\n    iconNonIdle?: string;\r\n    /**\r\n     * Adds optional css classes to the menu button.\r\n     */\r\n    customCss?: string;\r\n    /**\r\n     * Array of regular expressions matching component types eligible for this button\r\n     */\r\n    regexpKeys?: string[];\r\n    /**\r\n     * Entry that holds the condition function required to activate the menu item.\r\n     */\r\n    condition?(configuration: IContextualMenuConfiguration): boolean | Promise<boolean>;\r\n}\r\n"}}
