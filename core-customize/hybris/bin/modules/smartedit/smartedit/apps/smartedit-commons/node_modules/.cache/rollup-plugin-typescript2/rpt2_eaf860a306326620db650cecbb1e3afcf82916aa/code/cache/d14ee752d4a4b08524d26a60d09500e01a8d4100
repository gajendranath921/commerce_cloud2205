{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { UpgradeModule } from '@angular/upgrade/static';\r\n/**\r\n * A service responsible for delivering AngularJS dependencies lazily.\r\n * This is needed because if Angular service uses AngularJS dependencies, and the service is bootstrapped before the initialization of\r\n * AngularJS the injector error will occur.\r\n *\r\n * With AngularJSLazyDependenciesService we request the dependencies only when they are needed.\r\n */\r\nlet /* @ngInject */ AngularJSLazyDependenciesService = class /* @ngInject */ AngularJSLazyDependenciesService {\r\n    constructor(upgrade) {\r\n        this.upgrade = upgrade;\r\n    }\r\n    $injector() {\r\n        return this.upgrade.$injector;\r\n    }\r\n    /**\r\n     * Returns $templateCache when the module is hybridized.\r\n     * $injector might be undefined for an extension that has only Angular modules.\r\n     */\r\n    $templateCache() {\r\n        var _a;\r\n        return (_a = this.$injector()) === null || _a === void 0 ? void 0 : _a.get('$templateCache');\r\n    }\r\n    $rootScope() {\r\n        return this.$injector().get('$rootScope');\r\n    }\r\n    $location() {\r\n        return this.$injector().get('$location');\r\n    }\r\n};\r\n/* @ngInject */ AngularJSLazyDependenciesService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [UpgradeModule])\r\n], /* @ngInject */ AngularJSLazyDependenciesService);\r\nexport { /* @ngInject */ AngularJSLazyDependenciesService };\r\n//# sourceMappingURL=AngularJSLazyDependenciesService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+upgrade@8.2.14_d2ff5303d1bb22207cb4aaa9bb380a83/node_modules/@angular/upgrade/static.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"AngularJSLazyDependenciesService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/AngularJSLazyDependenciesService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD;;;;;;GAMG;AAEH,uDAAA;IACI,YAAoB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAAG,CAAC;IAEvC,SAAS;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,cAAc;;QACjB,aAAO,IAAI,CAAC,SAAS,EAAE,0CAAE,GAAG,CAAC,gBAAgB,EAAE;IACnD,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;CACJ,CAAA;AAtBD;IADC,UAAU,EAAE;qCAEoB,aAAa;oDAqB7C\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/AngularJSLazyDependenciesService.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { UpgradeModule } from '@angular/upgrade/static';\r\nimport { ITemplateCacheService } from './interfaces';\r\n/**\r\n * A service responsible for delivering AngularJS dependencies lazily.\r\n * This is needed because if Angular service uses AngularJS dependencies, and the service is bootstrapped before the initialization of\r\n * AngularJS the injector error will occur.\r\n *\r\n * With AngularJSLazyDependenciesService we request the dependencies only when they are needed.\r\n */\r\nexport declare class AngularJSLazyDependenciesService {\r\n    private upgrade;\r\n    constructor(upgrade: UpgradeModule);\r\n    $injector(): angular.auto.IInjectorService;\r\n    /**\r\n     * Returns $templateCache when the module is hybridized.\r\n     * $injector might be undefined for an extension that has only Angular modules.\r\n     */\r\n    $templateCache(): ITemplateCacheService | undefined;\r\n    $rootScope(): angular.IRootScopeService;\r\n    $location(): angular.ILocationService;\r\n}\r\n"}}
