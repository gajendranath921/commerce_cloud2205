{"code":"var FilterByFieldPipe_1;\r\nimport { __decorate } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Pipe } from '@angular/core';\r\nimport { noop } from 'lodash';\r\n/**\r\n * A pipe for an array of objects, that will search all the first level fields of an object,\r\n * or optionally allows you to specify which fields to include in the search.\r\n *\r\n * Only fields that correspond to string\r\n * values will be considered in the filtering. The filter implements the AND strategy, thus the filter will return search results\r\n * regardless of the search string order. IE search string \"Add Mobile\" will return strings such \"Mobile Address\" and \"Address Mobile\".\r\n */\r\nlet FilterByFieldPipe = FilterByFieldPipe_1 = class FilterByFieldPipe {\r\n    /** @ignore */\r\n    static transform(items, query, keys, callbackFn) {\r\n        const callback = callbackFn || noop;\r\n        const filterResult = [];\r\n        if (!query) {\r\n            callback(items);\r\n            return items;\r\n        }\r\n        const queryList = query.toLowerCase().split(' ');\r\n        (items || []).forEach((item) => {\r\n            keys = keys || Object.keys(item);\r\n            const terms = keys\r\n                .map((key) => item[key])\r\n                .filter((value) => \r\n            // eslint-disable-next-line @typescript-eslint/ban-types\r\n            typeof value === 'string' || value instanceof String)\r\n                .map((value) => value.toLowerCase());\r\n            const matchList = queryList\r\n                .map((queryItem) => !!terms.find((term) => term.indexOf(queryItem) >= 0))\r\n                .filter((exists) => !exists);\r\n            if (matchList.length === 0) {\r\n                filterResult.push(item);\r\n            }\r\n        });\r\n        callback(filterResult);\r\n        return filterResult;\r\n    }\r\n    /**\r\n     * @param query The search string in which the values will be filtered by. If no search string is given\r\n     * the original array of objects is be returned.\r\n     * @param keys An array of object fields which determines which key values that the filter will parse through.\r\n     * If no array is specified the filter will check each field value in the array of objects.\r\n     * @param callbackFn A function that will be executed after each iteration of the filter.\r\n     */\r\n    transform(items, query, keys, callbackFn) {\r\n        return FilterByFieldPipe_1.transform(items, query, keys, callbackFn);\r\n    }\r\n};\r\nFilterByFieldPipe = FilterByFieldPipe_1 = __decorate([\r\n    Pipe({ name: 'seFilterByField' })\r\n], FilterByFieldPipe);\r\nexport { FilterByFieldPipe };\r\n//# sourceMappingURL=FilterByFieldPipe.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts"],"map":"{\"version\":3,\"file\":\"FilterByFieldPipe.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/pipes/filterByField/FilterByFieldPipe.ts\"],\"names\":[],\"mappings\":\";;AAAA;;GAEG;AACH,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;;;;;;GAOG;AAEH,IAAa,iBAAiB,yBAA9B,MAAa,iBAAiB;IAC1B,cAAc;IACP,MAAM,CAAC,SAAS,CACnB,KAAU,EACV,KAAa,EACb,IAAe,EACf,UAAoC;QAEpC,MAAM,QAAQ,GAAG,UAAU,IAAI,IAAI,CAAC;QACpC,MAAM,YAAY,GAAQ,EAAE,CAAC;QAE7B,IAAI,CAAC,KAAK,EAAE;YACR,QAAQ,CAAC,KAAK,CAAC,CAAC;YAEhB,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,SAAS,GAAa,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3D,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAO,EAAE,EAAE;YAC9B,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,KAAK,GAAG,IAAI;iBACb,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAE,IAAY,CAAC,GAAG,CAAC,CAAC;iBACxC,MAAM,CACH,CAAC,KAAa,EAAE,EAAE;YACd,wDAAwD;YACxD,OAAO,KAAK,KAAK,QAAQ,IAAK,KAAgB,YAAY,MAAM,CACvE;iBACA,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YAEjD,MAAM,SAAS,GAAG,SAAS;iBACtB,GAAG,CACA,CAAC,SAAiB,EAAE,EAAE,CAClB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CACnE;iBACA,MAAM,CAAC,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,CAAC,CAAC;QAEvB,OAAO,YAAY,CAAC;IACxB,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CACL,KAAU,EACV,KAAa,EACb,IAAe,EACf,UAAoC;QAEpC,OAAO,mBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;CACJ,CAAA;AA/DY,iBAAiB;IAD7B,IAAI,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC;GACrB,iBAAiB,CA+D7B;SA/DY,iBAAiB\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/pipes/filterByField/FilterByFieldPipe.d.ts","writeByteOrderMark":false,"text":"import { PipeTransform } from '@angular/core';\r\n/**\r\n * A pipe for an array of objects, that will search all the first level fields of an object,\r\n * or optionally allows you to specify which fields to include in the search.\r\n *\r\n * Only fields that correspond to string\r\n * values will be considered in the filtering. The filter implements the AND strategy, thus the filter will return search results\r\n * regardless of the search string order. IE search string \"Add Mobile\" will return strings such \"Mobile Address\" and \"Address Mobile\".\r\n */\r\nexport declare class FilterByFieldPipe implements PipeTransform {\r\n    /** @ignore */\r\n    static transform<T>(items: T[], query: string, keys?: string[], callbackFn?: (filtered: T[]) => void): T[];\r\n    /**\r\n     * @param query The search string in which the values will be filtered by. If no search string is given\r\n     * the original array of objects is be returned.\r\n     * @param keys An array of object fields which determines which key values that the filter will parse through.\r\n     * If no array is specified the filter will check each field value in the array of objects.\r\n     * @param callbackFn A function that will be executed after each iteration of the filter.\r\n     */\r\n    transform<T>(items: T[], query: string, keys?: string[], callbackFn?: (filtered: T[]) => void): T[];\r\n}\r\n"}}
