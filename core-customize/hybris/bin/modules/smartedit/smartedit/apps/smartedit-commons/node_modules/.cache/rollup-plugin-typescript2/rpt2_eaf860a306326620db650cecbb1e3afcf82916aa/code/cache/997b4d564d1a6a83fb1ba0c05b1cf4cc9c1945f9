{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nexport class StorageNamespaceConverter {\r\n    static ERR_INVALID_NAMESPACED_ID(id) {\r\n        return new Error(`StorageNamespaceConverter - Invalid namespaced id [${id}]`);\r\n    }\r\n    static getNamespacedStorageId(namespace, storageId) {\r\n        return `${namespace}${this.separator}${storageId}`;\r\n    }\r\n    static getStorageIdFromNamespacedId(namespacedId) {\r\n        const matches = namespacedId.match(new RegExp(this.namespaceDecoderRegexStr));\r\n        if (matches && matches[2].length > 0) {\r\n            return matches[2];\r\n        }\r\n        throw StorageNamespaceConverter.ERR_INVALID_NAMESPACED_ID(namespacedId);\r\n    }\r\n    static getNamespaceFromNamespacedId(namespacedId) {\r\n        const matches = namespacedId.match(new RegExp(this.namespaceDecoderRegexStr));\r\n        if (matches && matches[1].length > 0) {\r\n            return matches[1];\r\n        }\r\n        throw StorageNamespaceConverter.ERR_INVALID_NAMESPACED_ID(namespacedId);\r\n    }\r\n}\r\n/**\r\n * Given:\r\n *  namespace = nmsp\r\n *  storageId = stoid\r\n *\r\n * Produces:\r\n *  newStorageId = nmsp<ns:id>stoid\r\n *\r\n * Fastest implementation I could think of that (most likely) will not clash with weird storageIds\r\n *\r\n * This algorithm is a bit overly simple, and assumes that neither storageId nor namespace contains \"<ns:id>\"\r\n * I think this is a fairly safe assumption, but if we have time in the future, we should escape any existing\r\n * matches of the string.\r\n */\r\nStorageNamespaceConverter.separator = '<ns:id>';\r\nStorageNamespaceConverter.namespaceDecoderRegexStr = '(.*)' + StorageNamespaceConverter.separator + '(.*)';\r\n//# sourceMappingURL=StorageNamespaceConverter.js.map","references":[],"map":"{\"version\":3,\"file\":\"StorageNamespaceConverter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/storage/manager/StorageNamespaceConverter.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;;GAGG;AACH,MAAM,OAAgB,yBAAyB;IAqB3C,MAAM,CAAC,yBAAyB,CAAC,EAAU;QACvC,OAAO,IAAI,KAAK,CAAC,sDAAsD,EAAE,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,SAAiB,EAAE,SAAiB;QAC9D,OAAO,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,4BAA4B,CAAC,YAAoB;QACpD,MAAM,OAAO,GAAqB,YAAY,CAAC,KAAK,CAChD,IAAI,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAC5C,CAAC;QACF,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACrB;QACD,MAAM,yBAAyB,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,CAAC,4BAA4B,CAAC,YAAoB;QACpD,MAAM,OAAO,GAAqB,YAAY,CAAC,KAAK,CAChD,IAAI,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAC5C,CAAC;QACF,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACrB;QACD,MAAM,yBAAyB,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;IAC5E,CAAC;;AA9CD;;;;;;;;;;;;;GAaG;AAEqB,mCAAS,GAAG,SAAS,CAAC;AAEtB,kDAAwB,GAC5C,MAAM,GAAG,yBAAyB,CAAC,SAAS,GAAG,MAAM,CAAC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/storage/manager/StorageNamespaceConverter.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @internal\r\n * @ignore\r\n */\r\nexport declare abstract class StorageNamespaceConverter {\r\n    /**\r\n     * Given:\r\n     *  namespace = nmsp\r\n     *  storageId = stoid\r\n     *\r\n     * Produces:\r\n     *  newStorageId = nmsp<ns:id>stoid\r\n     *\r\n     * Fastest implementation I could think of that (most likely) will not clash with weird storageIds\r\n     *\r\n     * This algorithm is a bit overly simple, and assumes that neither storageId nor namespace contains \"<ns:id>\"\r\n     * I think this is a fairly safe assumption, but if we have time in the future, we should escape any existing\r\n     * matches of the string.\r\n     */\r\n    private static readonly separator;\r\n    private static readonly namespaceDecoderRegexStr;\r\n    static ERR_INVALID_NAMESPACED_ID(id: string): Error;\r\n    static getNamespacedStorageId(namespace: string, storageId: string): string;\r\n    static getStorageIdFromNamespacedId(namespacedId: string): string;\r\n    static getNamespaceFromNamespacedId(namespacedId: string): string;\r\n}\r\n"}}
