{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/* eslint-disable id-blacklist */\r\n/*\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\n/**\r\n * Provides a list of useful methods used for object manipulation\r\n */\r\nclass ObjectUtils {\r\n    constructor() {\r\n        /**\r\n         * Will check if the object is empty and will return true if each and every property of the object is empty.\r\n         *\r\n         * @param value the value to evaluate\r\n         */\r\n        this.isObjectEmptyDeep = (value) => {\r\n            if (lodash.isObject(value)) {\r\n                for (const key in value) {\r\n                    if (value.hasOwnProperty(key)) {\r\n                        if (!lodash.isEmpty(value[key])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return lodash.isString(value) ? lodash.isEmpty(value) : lodash.isNil(value);\r\n        };\r\n        /**\r\n         * Resets a given object's properties' values\r\n         *\r\n         * @param targetObject, the object to reset\r\n         * @param modelObject, an object that contains the structure that targetObject should have after a reset\r\n         * @returns The object that has been reset\r\n         */\r\n        this.resetObject = (targetObject, modelObject) => {\r\n            if (!targetObject) {\r\n                targetObject = this.copy(modelObject);\r\n            }\r\n            else {\r\n                for (const i in targetObject) {\r\n                    if (targetObject.hasOwnProperty(i)) {\r\n                        delete targetObject[i];\r\n                    }\r\n                }\r\n                lodash.extend(targetObject, this.copy(modelObject));\r\n            }\r\n            return targetObject;\r\n        };\r\n        /**\r\n         * Iterates over object and allows to modify a value using callback function.\r\n         * @param callback Callback function to apply to each object value.\r\n         * @returns The object with modified values.\r\n         */\r\n        this.deepIterateOverObjectWith = (obj, callback) => lodash.reduce(obj, (result, value, key) => {\r\n            if (lodash.isPlainObject(value)) {\r\n                result[key] = this.deepIterateOverObjectWith(value, callback);\r\n            }\r\n            else {\r\n                result[key] = callback(value);\r\n            }\r\n            return result;\r\n        }, {});\r\n        /**\r\n         * Returns an object that contains list of fields and for each field it has a boolean value\r\n         * which is true when the property was modified, added or removed, false otherwise.\r\n         * @returns The diff object.\r\n         */\r\n        this.deepObjectPropertyDiff = (firstObject, secondObject) => {\r\n            const CHANGED_PROPERTY = 'CHANGED_PROPERTY';\r\n            const NON_CHANGED_PROPERTY = 'NON_CHANGED_PROPERTY';\r\n            const mergedObj = lodash.mergeWith(lodash.cloneDeep(firstObject), secondObject, function (prValue, cpValue) {\r\n                if (!lodash.isPlainObject(prValue)) {\r\n                    return !lodash.isEqual(prValue, cpValue) ? CHANGED_PROPERTY : NON_CHANGED_PROPERTY;\r\n                }\r\n                // Note: Previous versions of lodash could work with null, but the latest version of lodash requires\r\n                // undefined to be returned.\r\n                return undefined;\r\n            });\r\n            // If the field is not CHANGED_PROPERTY/NON_CHANGED_PROPERTY then it was removed or added.\r\n            const sanitizedObj = this.deepIterateOverObjectWith(mergedObj, (value) => {\r\n                if (value !== CHANGED_PROPERTY && value !== NON_CHANGED_PROPERTY) {\r\n                    return CHANGED_PROPERTY;\r\n                }\r\n                else {\r\n                    return value;\r\n                }\r\n            });\r\n            // If it's CHANGED_PROPERTY return true otherwise false.\r\n            return this.deepIterateOverObjectWith(sanitizedObj, (value) => value === CHANGED_PROPERTY ? true : false);\r\n        };\r\n        this.readObjectStructure = (json, recursiveCount = 0) => {\r\n            if (recursiveCount > 25) {\r\n                return this.getClassName(json);\r\n            }\r\n            if (json === undefined || json === null || json.then) {\r\n                return json;\r\n            }\r\n            switch (typeof json) {\r\n                case 'function':\r\n                    return 'FUNCTION';\r\n                case 'string':\r\n                    return 'STRING';\r\n                case 'number':\r\n                    return 'NUMBER';\r\n                case 'boolean':\r\n                    return 'BOOLEAN';\r\n                default:\r\n                    return this._getOtherObjectType(json, recursiveCount);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Creates a deep copy of the given input object.\r\n     * If an object being stringified has a property named toJSON whose value is a function, then the toJSON() method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON() method when called will be serialized.\r\n     *\r\n     * @param candidate the javaScript value that needs to be deep copied.\r\n     *\r\n     * @returns A deep copy of the input\r\n     */\r\n    copy(candidate) {\r\n        return JSON.parse(JSON.stringify(candidate));\r\n    }\r\n    /**\r\n     * Merges the contents of two objects together into the first object.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @returns A new object as a result of merge\r\n     */\r\n    merge(target, source) {\r\n        return Object.assign(target, source);\r\n    }\r\n    /**\r\n     * Converts the given object to array.\r\n     * The output array elements are an object that has a key and value,\r\n     * where key is the original key and value is the original object.\r\n     */\r\n    convertToArray(object) {\r\n        const configuration = [];\r\n        for (const key in object) {\r\n            if (!key.startsWith('$') && !key.startsWith('toJSON')) {\r\n                configuration.push({\r\n                    key,\r\n                    value: object[key]\r\n                });\r\n            }\r\n        }\r\n        return configuration;\r\n    }\r\n    /**\r\n     * Returns the first Array argument supplemented with new entries from the second Array argument.\r\n     *\r\n     * **Note:** This method mutates `array1`.\r\n     */\r\n    uniqueArray(array1, array2) {\r\n        const set = new Set(array1);\r\n        array2.forEach((instance) => {\r\n            if (!set.has(instance)) {\r\n                array1.push(instance);\r\n            }\r\n        });\r\n        return array1;\r\n    }\r\n    /**\r\n     * Checks if `value` is a function.\r\n     */\r\n    isFunction(value) {\r\n        return typeof value === 'function';\r\n    }\r\n    /**\r\n     * Checks if the value is the ECMAScript language type of Object\r\n     */\r\n    isObject(value) {\r\n        const objectTypes = {\r\n            boolean: false,\r\n            function: true,\r\n            object: true,\r\n            number: false,\r\n            string: false,\r\n            undefined: false\r\n        };\r\n        return !!(value && objectTypes[typeof value]);\r\n    }\r\n    isTypedMap(value) {\r\n        return value && this.isObject(value) && value.constructor === Object;\r\n    }\r\n    /**\r\n     * Sorts an array of strings or objects in specified order.\r\n     * String of numbers are treated the same way as numbers.\r\n     * For an array of objects, `prop` argument is required.\r\n     *\r\n     * @param array Array to sort\r\n     * @param prop Property on which comparision is based. Required for an array of objects.\r\n     * @param reverse Specify ascending or descending order\r\n     *\r\n     * @returns The new sorted array\r\n     */\r\n    sortBy(array, prop, reverse = false) {\r\n        const targetArray = [...array];\r\n        const descending = reverse ? -1 : 1;\r\n        targetArray.sort((a, b) => {\r\n            const aVal = this.isTypedMap(a) ? a[prop] : a;\r\n            const bVal = this.isTypedMap(b) ? b[prop] : b;\r\n            const result = String(aVal).localeCompare(String(bVal), undefined, {\r\n                numeric: true,\r\n                sensitivity: 'base'\r\n            });\r\n            return result * descending;\r\n        });\r\n        return targetArray;\r\n    }\r\n    /**\r\n     * Provides a convenience to either default a new child or \"extend\" an existing child with the prototype of the parent\r\n     *\r\n     * @param ParentClass which has a prototype you wish to extend.\r\n     * @param ChildClass will have its prototype set.\r\n     *\r\n     * @returns ChildClass which has been extended\r\n     */\r\n    extend(ParentClass, ChildClass) {\r\n        if (!ChildClass) {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            ChildClass = function () {\r\n                return;\r\n            };\r\n        }\r\n        ChildClass.prototype = Object.create(ParentClass.prototype);\r\n        return ChildClass;\r\n    }\r\n    /** @internal */\r\n    getClassName(instance) {\r\n        return instance &&\r\n            instance.constructor &&\r\n            instance.constructor.name &&\r\n            instance.constructor.name !== 'Object'\r\n            ? instance.constructor.name\r\n            : null;\r\n    }\r\n    _getOtherObjectType(json, recursiveCount) {\r\n        if (lodash.isElement(json)) {\r\n            return 'ELEMENT';\r\n        }\r\n        if (json.hasOwnProperty && json.hasOwnProperty('length')) {\r\n            // jquery or Array\r\n            if (json.forEach) {\r\n                const arr = [];\r\n                json.forEach((arrayElement) => {\r\n                    recursiveCount++;\r\n                    arr.push(this.readObjectStructure(arrayElement, recursiveCount));\r\n                });\r\n                return arr;\r\n            }\r\n            else {\r\n                return 'JQUERY';\r\n            }\r\n        }\r\n        if (json.constructor && json.constructor.name && json.constructor.name !== 'Object') {\r\n            return json.constructor.name;\r\n        }\r\n        // JSON\r\n        const clone = {};\r\n        Object.keys(json).forEach((directKey) => {\r\n            if (!directKey.startsWith('$')) {\r\n                recursiveCount++;\r\n                clone[directKey] = this.readObjectStructure(json[directKey], recursiveCount);\r\n            }\r\n        });\r\n        return clone;\r\n    }\r\n}\r\nconst objectUtils = new ObjectUtils();\r\nexport { objectUtils, ObjectUtils };\r\n//# sourceMappingURL=ObjectUtils.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"ObjectUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/ObjectUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/ObjectUtils.d.ts","writeByteOrderMark":false,"text":"import { SeFactory } from '../di';\r\nimport { TypedMap } from '../dtos';\r\n/**\r\n * Provides a list of useful methods used for object manipulation\r\n */\r\ndeclare class ObjectUtils {\r\n    /**\r\n     * Creates a deep copy of the given input object.\r\n     * If an object being stringified has a property named toJSON whose value is a function, then the toJSON() method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON() method when called will be serialized.\r\n     *\r\n     * @param candidate the javaScript value that needs to be deep copied.\r\n     *\r\n     * @returns A deep copy of the input\r\n     */\r\n    copy<T>(candidate: T): T;\r\n    /**\r\n     * Will check if the object is empty and will return true if each and every property of the object is empty.\r\n     *\r\n     * @param value the value to evaluate\r\n     */\r\n    isObjectEmptyDeep: (value: any) => boolean;\r\n    /**\r\n     * Resets a given object's properties' values\r\n     *\r\n     * @param targetObject, the object to reset\r\n     * @param modelObject, an object that contains the structure that targetObject should have after a reset\r\n     * @returns The object that has been reset\r\n     */\r\n    resetObject: (targetObject: any, modelObject: any) => any;\r\n    /**\r\n     * Merges the contents of two objects together into the first object.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @returns A new object as a result of merge\r\n     */\r\n    merge<TTarget, TSource>(target: TTarget, source: TSource): TTarget & TSource;\r\n    /**\r\n     * Iterates over object and allows to modify a value using callback function.\r\n     * @param callback Callback function to apply to each object value.\r\n     * @returns The object with modified values.\r\n     */\r\n    deepIterateOverObjectWith: (obj: any, callback: any) => any;\r\n    /**\r\n     * Returns an object that contains list of fields and for each field it has a boolean value\r\n     * which is true when the property was modified, added or removed, false otherwise.\r\n     * @returns The diff object.\r\n     */\r\n    deepObjectPropertyDiff: (firstObject: any, secondObject: any) => any;\r\n    /**\r\n     * Converts the given object to array.\r\n     * The output array elements are an object that has a key and value,\r\n     * where key is the original key and value is the original object.\r\n     */\r\n    convertToArray(object: any): any[];\r\n    /**\r\n     * Returns the first Array argument supplemented with new entries from the second Array argument.\r\n     *\r\n     * **Note:** This method mutates `array1`.\r\n     */\r\n    uniqueArray(array1: any[], array2: any[]): any[];\r\n    /**\r\n     * Checks if `value` is a function.\r\n     */\r\n    isFunction(value: any): boolean;\r\n    /**\r\n     * Checks if the value is the ECMAScript language type of Object\r\n     */\r\n    isObject(value: any): boolean;\r\n    isTypedMap<T = string>(value: any): value is TypedMap<T>;\r\n    readObjectStructure: (json: any, recursiveCount?: number) => any;\r\n    /**\r\n     * Sorts an array of strings or objects in specified order.\r\n     * String of numbers are treated the same way as numbers.\r\n     * For an array of objects, `prop` argument is required.\r\n     *\r\n     * @param array Array to sort\r\n     * @param prop Property on which comparision is based. Required for an array of objects.\r\n     * @param reverse Specify ascending or descending order\r\n     *\r\n     * @returns The new sorted array\r\n     */\r\n    sortBy<T>(array: T[], prop?: string, reverse?: boolean): T[];\r\n    /**\r\n     * Provides a convenience to either default a new child or \"extend\" an existing child with the prototype of the parent\r\n     *\r\n     * @param ParentClass which has a prototype you wish to extend.\r\n     * @param ChildClass will have its prototype set.\r\n     *\r\n     * @returns ChildClass which has been extended\r\n     */\r\n    extend(ParentClass: SeFactory, ChildClass?: SeFactory): any;\r\n    /** @internal */\r\n    private getClassName;\r\n    private _getOtherObjectType;\r\n}\r\ndeclare const objectUtils: ObjectUtils;\r\nexport { objectUtils, ObjectUtils };\r\n"}}
