{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\nimport { cloneDeep } from 'lodash';\r\nimport { SeDowngradeService } from '../../di';\r\nimport { EVENTS } from '../../utils/smarteditconstants';\r\nimport { CrossFrameEventService } from '../crossFrame/CrossFrameEventService';\r\nimport { IRestServiceFactory } from '../interfaces';\r\nimport { TimerService } from '../timer';\r\nconst INBOX_POLLING_PARAMS = {\r\n    INBOX_POLLING_TIMEOUT: 20000,\r\n    INBOX_POLLING_PAGESIZE: 10,\r\n    INBOX_POLLING_CURRENTPAGE: 0\r\n};\r\n/**\r\n * Used to retrieve inbox tasks.\r\n */\r\nlet /* @ngInject */ WorkflowTasksPollingService = class /* @ngInject */ WorkflowTasksPollingService {\r\n    constructor(timerService, restServiceFactory, crossFrameEventService) {\r\n        this.timerService = timerService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.resourceInboxURI = '/cmssmarteditwebservices/v1/inbox/workflowtasks';\r\n        this.subscribers = [];\r\n        this.syncPollingTimer = null;\r\n        this.savedHashedTasks = [];\r\n        this.inboxRESTService = this.restServiceFactory.get(this.resourceInboxURI);\r\n        this.crossFrameEventService.subscribe(EVENTS.AUTHORIZATION_SUCCESS, () => this.initPolling());\r\n        this.crossFrameEventService.subscribe(EVENTS.LOGOUT, () => this.stopPolling());\r\n        this.crossFrameEventService.subscribe(EVENTS.REAUTH_STARTED, () => this.stopPolling());\r\n        this.initPolling();\r\n    }\r\n    /**\r\n     * Stops a polling timer.\r\n     */\r\n    stopPolling() {\r\n        if (this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.stop();\r\n        }\r\n    }\r\n    /**\r\n     * Starts a polling timer.\r\n     */\r\n    startPolling() {\r\n        if (!this.syncPollingTimer.isActive()) {\r\n            this.syncPollingTimer.restart(INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);\r\n        }\r\n    }\r\n    /**\r\n     * Adds a new subscriber to the polling service. The subscriber is called with a list of new tasks and a pagination information.\r\n     *\r\n     * @param subscriber The subscriber.\r\n     * @param callOnInit Default is true, when set to false, will not call the subscriber on initialization of the polling.\r\n     *\r\n     * @returns The method that can be used to unsubscribe.\r\n     */\r\n    addSubscriber(subscriber, callOnInit) {\r\n        this.subscribers.push({\r\n            subscriber,\r\n            callOnInit\r\n        });\r\n        return () => this.unsubscribe(subscriber);\r\n    }\r\n    /**\r\n     * Initializes a polling process.\r\n     */\r\n    initPolling() {\r\n        this.syncPollingTimer = this.timerService.createTimer(() => this.fetchInboxTasks(false), INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);\r\n        this.fetchInboxTasks(true);\r\n        this.startPolling();\r\n    }\r\n    /**\r\n     * Unsubscribes a subscriber.\r\n     * @param subscriber The subscriber that will be unsubscribed.\r\n     */\r\n    unsubscribe(subscriber) {\r\n        const index = this.subscribers.findIndex((subs) => subs.subscriber === subscriber);\r\n        if (index > -1) {\r\n            this.subscribers.splice(index, 1);\r\n        }\r\n    }\r\n    /**\r\n     * Returns tasks that have not been yet delivered to subscribers.\r\n     * @param tasks The list of retrieved tasks from the backend.\r\n     * @return The list of new tasks.\r\n     */\r\n    getNewTasks(tasks) {\r\n        return tasks.filter((task) => !this.savedHashedTasks.includes(this.encodeTask(task)));\r\n    }\r\n    /**\r\n     * New tasks are added at the end of the array. If the array is bigger than INBOX_POLLING_PAGESIZE\r\n     * it shrinks from the beginning to the INBOX_POLLING_PAGESIZE size.\r\n     * @param newTasks The list of new tasks that will be stored in cache. Each task is encoded as base-64 string.\r\n     */\r\n    saveNewHashedTasks(newTasks) {\r\n        newTasks.forEach((task) => this.savedHashedTasks.push(this.encodeTask(task)));\r\n        const sizeDiff = this.savedHashedTasks.length - INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE;\r\n        if (sizeDiff > 0) {\r\n            for (let i = 0; i < sizeDiff; i++) {\r\n                this.savedHashedTasks.shift();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Encodes a task.\r\n     * @param task the task that will be encoded to a base-64 string.\r\n     * @return The encoded string\r\n     */\r\n    encodeTask(task) {\r\n        const taskClone = cloneDeep(task);\r\n        if (taskClone.action) {\r\n            delete taskClone.action.startedAgoInMillis;\r\n        }\r\n        return btoa(JSON.stringify(taskClone));\r\n    }\r\n    /**\r\n     * Retrieves the list if tasks from the backend in paginated view.\r\n     * It calls each subscriber with a list of new tasks and pagination information.\r\n     */\r\n    fetchInboxTasks(isInit) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.fetchTaskList();\r\n            if (!response) {\r\n                this.stopPolling();\r\n                return;\r\n            }\r\n            const newTasks = this.getNewTasks(response.tasks);\r\n            this.saveNewHashedTasks(newTasks);\r\n            this.subscribers.forEach((subscriber) => {\r\n                if (!isInit || (isInit && !!subscriber.callOnInit)) {\r\n                    subscriber.subscriber(newTasks, response.pagination);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    fetchTaskList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                return yield this.inboxRESTService.get({\r\n                    pageSize: INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE,\r\n                    currentPage: INBOX_POLLING_PARAMS.INBOX_POLLING_CURRENTPAGE\r\n                });\r\n            }\r\n            catch (error) {\r\n                return Promise.reject();\r\n            }\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ WorkflowTasksPollingService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [TimerService,\r\n        IRestServiceFactory,\r\n        CrossFrameEventService])\r\n], /* @ngInject */ WorkflowTasksPollingService);\r\nexport { /* @ngInject */ WorkflowTasksPollingService };\r\n//# sourceMappingURL=WorkflowTasksPollingService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/crossFrame/CrossFrameEventService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/timer/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"WorkflowTasksPollingService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/workflow/WorkflowTasksPollingService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/workflow/WorkflowTasksPollingService.d.ts","writeByteOrderMark":false,"text":"import { Pagination } from '@smart/utils';\r\nimport { CrossFrameEventService } from '../crossFrame/CrossFrameEventService';\r\nimport { IRestServiceFactory } from '../interfaces';\r\nimport { TimerService } from '../timer';\r\nimport { WorkflowTask } from './dtos';\r\ndeclare type WorkflowTaskSubscriber = (tasks: WorkflowTask[], pagination: Pagination) => any;\r\n/**\r\n * Used to retrieve inbox tasks.\r\n */\r\nexport declare class WorkflowTasksPollingService {\r\n    private readonly timerService;\r\n    private readonly restServiceFactory;\r\n    private readonly crossFrameEventService;\r\n    private readonly resourceInboxURI;\r\n    private readonly subscribers;\r\n    private syncPollingTimer;\r\n    private readonly savedHashedTasks;\r\n    private readonly inboxRESTService;\r\n    constructor(timerService: TimerService, restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService);\r\n    /**\r\n     * Stops a polling timer.\r\n     */\r\n    stopPolling(): void;\r\n    /**\r\n     * Starts a polling timer.\r\n     */\r\n    startPolling(): void;\r\n    /**\r\n     * Adds a new subscriber to the polling service. The subscriber is called with a list of new tasks and a pagination information.\r\n     *\r\n     * @param subscriber The subscriber.\r\n     * @param callOnInit Default is true, when set to false, will not call the subscriber on initialization of the polling.\r\n     *\r\n     * @returns The method that can be used to unsubscribe.\r\n     */\r\n    addSubscriber(subscriber: WorkflowTaskSubscriber, callOnInit: boolean): () => void;\r\n    /**\r\n     * Initializes a polling process.\r\n     */\r\n    private initPolling;\r\n    /**\r\n     * Unsubscribes a subscriber.\r\n     * @param subscriber The subscriber that will be unsubscribed.\r\n     */\r\n    private unsubscribe;\r\n    /**\r\n     * Returns tasks that have not been yet delivered to subscribers.\r\n     * @param tasks The list of retrieved tasks from the backend.\r\n     * @return The list of new tasks.\r\n     */\r\n    private getNewTasks;\r\n    /**\r\n     * New tasks are added at the end of the array. If the array is bigger than INBOX_POLLING_PAGESIZE\r\n     * it shrinks from the beginning to the INBOX_POLLING_PAGESIZE size.\r\n     * @param newTasks The list of new tasks that will be stored in cache. Each task is encoded as base-64 string.\r\n     */\r\n    private saveNewHashedTasks;\r\n    /**\r\n     * Encodes a task.\r\n     * @param task the task that will be encoded to a base-64 string.\r\n     * @return The encoded string\r\n     */\r\n    private encodeTask;\r\n    /**\r\n     * Retrieves the list if tasks from the backend in paginated view.\r\n     * It calls each subscriber with a list of new tasks and pagination information.\r\n     */\r\n    private fetchInboxTasks;\r\n    private fetchTaskList;\r\n}\r\nexport {};\r\n"}}
