{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { EVENTS } from '@smart/utils';\r\nimport { uniq, first } from 'lodash';\r\nimport { SeDowngradeService } from '../di';\r\nimport { PAGES_CONTENT_SLOT_RESOURCE_URI } from '../utils/smarteditconstants';\r\nimport { CrossFrameEventService } from './crossFrame/CrossFrameEventService';\r\nimport { IPageInfoService, IRestServiceFactory } from './interfaces';\r\n/**\r\n * PageContentSlotsServiceModule provides methods to load and act on the contentSlots for the page loaded in the storefront.\r\n */\r\nlet /* @ngInject */ PageContentSlotsService = class /* @ngInject */ PageContentSlotsService {\r\n    constructor(restServiceFactory, crossFrameEventService, pageInfoService) {\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.pageInfoService = pageInfoService;\r\n        this.resource = restServiceFactory.get(PAGES_CONTENT_SLOT_RESOURCE_URI);\r\n        this.crossFrameEventService.subscribe(EVENTS.PAGE_CHANGE, () => this.reloadPageContentSlots());\r\n    }\r\n    /**\r\n     * This function fetches all the slots of the loaded page.\r\n     *\r\n     * @returns promise that resolves to a collection of content slots information for the loaded page.\r\n     */\r\n    getPageContentSlots() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.pageContentSlots) {\r\n                yield this.reloadPageContentSlots();\r\n            }\r\n            return this.pageContentSlots;\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves the slot status of the proved slotId. It can be one of TEMPLATE, PAGE and OVERRIDE.\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to the status of the slot.\r\n     */\r\n    getSlotStatus(slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.getPageContentSlots();\r\n            const matchedSlotData = first(this.pageContentSlots.filter((pageContentSlot) => pageContentSlot.slotId === slotId));\r\n            return matchedSlotData ? matchedSlotData.slotStatus : null;\r\n        });\r\n    }\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.getPageContentSlots();\r\n            const matchedSlotData = first(this.pageContentSlots.filter((pageContentSlot) => pageContentSlot.slotId === slotId));\r\n            return matchedSlotData && matchedSlotData.slotShared;\r\n        });\r\n    }\r\n    /**\r\n     * Fetches content slot list from API\r\n     */\r\n    reloadPageContentSlots() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pageId = yield this.pageInfoService.getPageUID();\r\n            const pageContent = yield this.resource.get({ pageId });\r\n            this.pageContentSlots = uniq(pageContent.pageContentSlotList || []);\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ PageContentSlotsService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        CrossFrameEventService,\r\n        IPageInfoService])\r\n], /* @ngInject */ PageContentSlotsService);\r\nexport { /* @ngInject */ PageContentSlotsService };\r\n//# sourceMappingURL=PageContentSlotsService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/crossFrame/CrossFrameEventService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts"],"map":"{\"version\":3,\"file\":\"PageContentSlotsService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PageContentSlotsService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAgB,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EAAE,kBAAkB,EAAE,MAAM,OAAO,CAAC;AAC3C,OAAO,EAAE,+BAA+B,EAAE,MAAM,6BAA6B,CAAC;AAC9E,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAcrE;;GAEG;AAEH,8CAAA;IAII,YACI,kBAAuC,EACtB,sBAA8C,EAC9C,eAAiC;QADjC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,oBAAe,GAAf,eAAe,CAAkB;QAElD,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAExE,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,EAAE,CAC3D,IAAI,CAAC,sBAAsB,EAAE,CAChC,CAAC;IACN,CAAC;IAED;;;;OAIG;IACU,mBAAmB;;YAC5B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBACxB,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;aACvC;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;KAAA;IAED;;;;;;OAMG;IACU,aAAa,CAAC,MAAc;;YACrC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAEjC,MAAM,eAAe,GAAG,KAAK,CACzB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,CAAC,MAAM,KAAK,MAAM,CAAC,CACvF,CAAC;YACF,OAAO,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/D,CAAC;KAAA;IAED;;;;;;;OAOG;IACU,YAAY,CAAC,MAAc;;YACpC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAEjC,MAAM,eAAe,GAAG,KAAK,CACzB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,CAAC,MAAM,KAAK,MAAM,CAAC,CACvF,CAAC;YACF,OAAO,eAAe,IAAI,eAAe,CAAC,UAAU,CAAC;QACzD,CAAC;KAAA;IAED;;OAEG;IACW,sBAAsB;;YAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;YACvD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;QACxE,CAAC;KAAA;CACJ,CAAA;AArED;IADC,kBAAkB,EAAE;qCAMO,mBAAmB;QACE,sBAAsB;QAC7B,gBAAgB;2CA8DzD\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/PageContentSlotsService.d.ts","writeByteOrderMark":false,"text":"import { CrossFrameEventService } from './crossFrame/CrossFrameEventService';\r\nimport { IPageInfoService, IRestServiceFactory } from './interfaces';\r\nexport interface IPageContentSlot {\r\n    pageId: string;\r\n    position: string;\r\n    slotId: string;\r\n    slotShared?: boolean;\r\n    slotStatus?: string;\r\n}\r\nexport interface IPageContentSlotsResponse {\r\n    pageContentSlotList: IPageContentSlot[];\r\n}\r\n/**\r\n * PageContentSlotsServiceModule provides methods to load and act on the contentSlots for the page loaded in the storefront.\r\n */\r\nexport declare class PageContentSlotsService {\r\n    private readonly crossFrameEventService;\r\n    private readonly pageInfoService;\r\n    private readonly resource;\r\n    private pageContentSlots;\r\n    constructor(restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService, pageInfoService: IPageInfoService);\r\n    /**\r\n     * This function fetches all the slots of the loaded page.\r\n     *\r\n     * @returns promise that resolves to a collection of content slots information for the loaded page.\r\n     */\r\n    getPageContentSlots(): Promise<IPageContentSlot[]>;\r\n    /**\r\n     * Retrieves the slot status of the proved slotId. It can be one of TEMPLATE, PAGE and OVERRIDE.\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to the status of the slot.\r\n     */\r\n    getSlotStatus(slotId: string): Promise<string | null>;\r\n    /**\r\n     * Checks if the slot is shared and returns true in case slot is shared and returns false if it is not.\r\n     * Based on this service method the slot shared button is shown or hidden for a particular slotId\r\n     *\r\n     * @param slotId of the slot\r\n     *\r\n     * @returns promise that resolves to true if the slot is shared; Otherwise false.\r\n     */\r\n    isSlotShared(slotId: string): Promise<boolean>;\r\n    /**\r\n     * Fetches content slot list from API\r\n     */\r\n    private reloadPageContentSlots;\r\n}\r\n"}}
