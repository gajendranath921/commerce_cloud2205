{"code":"/**\r\n * Interface for previewService.\r\n *\r\n * This service is for managing the storefront preview ticket and is proxied across the gateway.\r\n */\r\nexport class IPreviewService {\r\n    constructor(urlUtils) {\r\n        this.urlUtils = urlUtils;\r\n    }\r\n    /**\r\n     * This method will create a new previewTicket for the given experience, using the preview API\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param previewData Data representing storefront preview\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    createPreview(previewData) {\r\n        'proxyFunction';\r\n        return null;\r\n    }\r\n    /**\r\n     * This method will update a previewTicket for the given the preview data, using the preview API\r\n     *\r\n     * @param previewData Data representing storefront preview containing the preview ticketId\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    updatePreview(previewData) {\r\n        'proxyFunction';\r\n        return null;\r\n    }\r\n    /**\r\n     * This method will preduce a resourcePath from a given preview url\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     */\r\n    getResourcePathFromPreviewUrl(previewUrl) {\r\n        'proxyFunction';\r\n        return null;\r\n    }\r\n    /**\r\n     * This method will create a new preview ticket, and return the given url with an updated previewTicketId query param\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param storefrontUrl Existing storefront url\r\n     * @param previewData JSON representing storefront previewData (catalog, catalog vesion, etc...)\r\n     *\r\n     * @returns A new string with storefrontUrl having the new ticket ID inside\r\n     */\r\n    updateUrlWithNewPreviewTicketId(storefrontUrl, previewData) {\r\n        return this.createPreview(previewData).then((preview) => this.urlUtils.updateUrlParameter(storefrontUrl, 'cmsTicketId', preview.ticketId));\r\n    }\r\n}\r\n//# sourceMappingURL=IPreviewService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/IPreview.ts"],"map":"{\"version\":3,\"file\":\"IPreviewService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interfaces/IPreviewService.ts\"],\"names\":[],\"mappings\":\"AAMA;;;;GAIG;AACH,MAAM,OAAgB,eAAe;IACjC,YAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAG,CAAC;IAE5C;;;;;;;;;OASG;IACH,aAAa,CAAC,WAAyB;QACnC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,WAAyB;QACnC,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,6BAA6B,CAAC,UAAkB;QAC5C,eAAe,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;;OAUG;IACH,+BAA+B,CAC3B,aAAqB,EACrB,WAAyB;QAEzB,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,OAAqB,EAAE,EAAE,CAClE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,QAAQ,CAAC,CACnF,CAAC;IACN,CAAC;CACJ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/interfaces/IPreviewService.d.ts","writeByteOrderMark":false,"text":"import { UrlUtils } from '@smart/utils';\r\nimport { IPreviewData } from './IPreview';\r\n/**\r\n * Interface for previewService.\r\n *\r\n * This service is for managing the storefront preview ticket and is proxied across the gateway.\r\n */\r\nexport declare abstract class IPreviewService {\r\n    protected urlUtils: UrlUtils;\r\n    constructor(urlUtils: UrlUtils);\r\n    /**\r\n     * This method will create a new previewTicket for the given experience, using the preview API\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param previewData Data representing storefront preview\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    createPreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    /**\r\n     * This method will update a previewTicket for the given the preview data, using the preview API\r\n     *\r\n     * @param previewData Data representing storefront preview containing the preview ticketId\r\n     *\r\n     * @returns An object with the ticketId\r\n     */\r\n    updatePreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    /**\r\n     * This method will preduce a resourcePath from a given preview url\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     */\r\n    getResourcePathFromPreviewUrl(previewUrl: string): Promise<string>;\r\n    /**\r\n     * This method will create a new preview ticket, and return the given url with an updated previewTicketId query param\r\n     *\r\n     *\r\n     * This method does *NOT* update the current experience.\r\n     *\r\n     * @param storefrontUrl Existing storefront url\r\n     * @param previewData JSON representing storefront previewData (catalog, catalog vesion, etc...)\r\n     *\r\n     * @returns A new string with storefrontUrl having the new ticket ID inside\r\n     */\r\n    updateUrlWithNewPreviewTicketId(storefrontUrl: string, previewData: IPreviewData): Promise<string>;\r\n}\r\n"}}
