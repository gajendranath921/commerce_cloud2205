{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport { StringUtils } from '@smart/utils';\r\nimport { from } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ISharedDataService } from 'smarteditcommons/services/interfaces';\r\nimport { CMSWEBSERVICES_PATH, CONTEXT_CATALOG, CONTEXT_CATALOG_VERSION, CONTEXT_SITE_ID, HttpUtils, PAGE_CONTEXT_CATALOG, PAGE_CONTEXT_CATALOG_VERSION, PAGE_CONTEXT_SITE_ID, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons/utils';\r\n/**\r\n * A HTTP request interceptor which intercepts all 'cmswebservices/catalogs' requests and adds the current catalog and version\r\n * from any URI which define the variables 'CURRENT_CONTEXT_CATALOG' and 'CURRENT_CONTEXT_CATALOG_VERSION' in the URL.\r\n */\r\nlet /* @ngInject */ ExperienceInterceptor = class /* @ngInject */ ExperienceInterceptor {\r\n    constructor(sharedDataService, stringUtils, httpUtils) {\r\n        this.sharedDataService = sharedDataService;\r\n        this.stringUtils = stringUtils;\r\n        this.httpUtils = httpUtils;\r\n    }\r\n    /**\r\n     * Interceptor method which gets called with a http config object, intercepts any 'cmswebservices/catalogs' requests and adds\r\n     * the current catalog and version\r\n     * from any URI which define the variables 'CURRENT_CONTEXT_CATALOG' and 'CURRENT_CONTEXT_CATALOG_VERSION' in the URL.\r\n     * If the request URI contains any of 'PAGE_CONTEXT_SITE_ID', 'PAGE_CONTEXT_CATALOG' or 'PAGE_CONTEXT_CATALOG_VERSION',\r\n     * then it is replaced by the siteId/catalogId/catalogVersion of the current page in context.\r\n     *\r\n     * The catalog name and catalog versions of the current experience and the page loaded are stored in the shared data service object called 'experience' during preview initialization\r\n     * and here we retrieve those details and set it to headers.\r\n     */\r\n    intercept(request, next) {\r\n        if (!CMSWEBSERVICES_PATH.test(request.url)) {\r\n            return next.handle(request);\r\n        }\r\n        return from(this.sharedDataService.get(EXPERIENCE_STORAGE_KEY)).pipe(switchMap((data) => {\r\n            if (!data) {\r\n                return next.handle(request);\r\n            }\r\n            const keys = {};\r\n            keys.CONTEXT_SITE_ID_WITH_COLON = data.siteDescriptor.uid;\r\n            keys.CONTEXT_CATALOG_VERSION_WITH_COLON = data.catalogDescriptor.catalogVersion;\r\n            keys.CONTEXT_CATALOG_WITH_COLON = data.catalogDescriptor.catalogId;\r\n            keys[CONTEXT_SITE_ID] = data.siteDescriptor.uid;\r\n            keys[CONTEXT_CATALOG_VERSION] = data.catalogDescriptor.catalogVersion;\r\n            keys[CONTEXT_CATALOG] = data.catalogDescriptor.catalogId;\r\n            keys[PAGE_CONTEXT_SITE_ID] = data.pageContext\r\n                ? data.pageContext.siteId\r\n                : data.siteDescriptor.uid;\r\n            keys[PAGE_CONTEXT_CATALOG_VERSION] = data.pageContext\r\n                ? data.pageContext.catalogVersion\r\n                : data.catalogDescriptor.catalogVersion;\r\n            keys[PAGE_CONTEXT_CATALOG] = data.pageContext\r\n                ? data.pageContext.catalogId\r\n                : data.catalogDescriptor.catalogId;\r\n            const newRequest = request.clone({\r\n                url: this.stringUtils.replaceAll(request.url, keys),\r\n                params: request.params && typeof request.params === 'object'\r\n                    ? this.httpUtils.transformHttpParams(request.params, keys)\r\n                    : request.params\r\n            });\r\n            return next.handle(newRequest);\r\n        }));\r\n    }\r\n};\r\n/* @ngInject */ ExperienceInterceptor = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [ISharedDataService,\r\n        StringUtils,\r\n        HttpUtils])\r\n], /* @ngInject */ ExperienceInterceptor);\r\nexport { /* @ngInject */ ExperienceInterceptor };\r\n//# sourceMappingURL=ExperienceInterceptor.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts"],"map":"{\"version\":3,\"file\":\"ExperienceInterceptor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/interceptors/ExperienceInterceptor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/interceptors/ExperienceInterceptor.d.ts","writeByteOrderMark":false,"text":"import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { StringUtils } from '@smart/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ISharedDataService } from 'smarteditcommons/services/interfaces';\r\nimport { HttpUtils } from 'smarteditcommons/utils';\r\n/**\r\n * A HTTP request interceptor which intercepts all 'cmswebservices/catalogs' requests and adds the current catalog and version\r\n * from any URI which define the variables 'CURRENT_CONTEXT_CATALOG' and 'CURRENT_CONTEXT_CATALOG_VERSION' in the URL.\r\n */\r\nexport declare class ExperienceInterceptor implements HttpInterceptor {\r\n    private readonly sharedDataService;\r\n    private readonly stringUtils;\r\n    private readonly httpUtils;\r\n    constructor(sharedDataService: ISharedDataService, stringUtils: StringUtils, httpUtils: HttpUtils);\r\n    /**\r\n     * Interceptor method which gets called with a http config object, intercepts any 'cmswebservices/catalogs' requests and adds\r\n     * the current catalog and version\r\n     * from any URI which define the variables 'CURRENT_CONTEXT_CATALOG' and 'CURRENT_CONTEXT_CATALOG_VERSION' in the URL.\r\n     * If the request URI contains any of 'PAGE_CONTEXT_SITE_ID', 'PAGE_CONTEXT_CATALOG' or 'PAGE_CONTEXT_CATALOG_VERSION',\r\n     * then it is replaced by the siteId/catalogId/catalogVersion of the current page in context.\r\n     *\r\n     * The catalog name and catalog versions of the current experience and the page loaded are stored in the shared data service object called 'experience' during preview initialization\r\n     * and here we retrieve those details and set it to headers.\r\n     */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n}\r\n"}}
