{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { FormField, FormGrouping } from '@smart/utils';\r\nimport * as lo from 'lodash';\r\nimport { combineLatest } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { stringUtils, VALIDATION_MESSAGE_TYPES } from '../../../utils';\r\nimport { parseValidationMessage } from '../services/SeValidationMessageParser';\r\nimport { proxifyDataObject } from './InternalProperty';\r\nconst VALIDATION_MESSAGE_TYPES_SET = new Set(lo.values(VALIDATION_MESSAGE_TYPES));\r\nconst CMS_STRUCTURE_TYPE = {\r\n    SHORT_STRING: 'ShortString',\r\n    LONG_STRING: 'LongString'\r\n};\r\n/**\r\n * @internal\r\n * Holds the entire state of the generic editor.\r\n * Provides method to query and mutate the generic editor state.\r\n * The GenericEditorState is created by the GenericEditorStateBuilderService.\r\n */\r\nexport class GenericEditorState {\r\n    constructor(id, group, component, proxiedComponent, pristine, tabs, fields, languages, parameters) {\r\n        this.id = id;\r\n        this.group = group;\r\n        this.component = component;\r\n        this.proxiedComponent = proxiedComponent;\r\n        this.pristine = pristine;\r\n        this.tabs = tabs;\r\n        this.fields = fields;\r\n        this.languages = languages;\r\n        this.parameters = parameters;\r\n        /**\r\n         * Removes all validation (local, outside or server) errors from fieds and tabs.\r\n         */\r\n        this.removeValidationMessages = () => {\r\n            this.fields.forEach((field) => {\r\n                field.messages = undefined;\r\n                field.hasErrors = false;\r\n                field.hasWarnings = false;\r\n            });\r\n        };\r\n        this._qualifierFieldMap = this.fields.reduce((acc, field) => {\r\n            acc.set(field.qualifier, field);\r\n            return acc;\r\n        }, new Map());\r\n        this._formFields = this._buildFormFieldsArray(this.group);\r\n    }\r\n    /**\r\n     * Removes validation errors generated in frontend, not the ones sent by outside or server.\r\n     * Removes errors only from fields, not tabs.\r\n     */\r\n    removeFrontEndValidationMessages() {\r\n        this.fields.forEach((field) => {\r\n            if (!Array.isArray(field.messages)) {\r\n                return;\r\n            }\r\n            const messages = (field.messages || []).filter((message) => message.fromSubmit === undefined ? true : message.fromSubmit);\r\n            field.messages = messages.length ? messages : undefined;\r\n            field.hasErrors = this._containsValidationMessageType(field.messages, VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR);\r\n            field.hasWarnings = this._containsValidationMessageType(field.messages, VALIDATION_MESSAGE_TYPES.WARNING);\r\n        });\r\n    }\r\n    /**\r\n     * Checks if this validation message belongs to the current generic editor by seeing if the generic editor\r\n     * has the qualifier.\r\n     *\r\n     * TODO: It assumes that the qualifier is unique in every genericeditor.\r\n     *\r\n     * @param {GenericEditorFieldMessage} validationMessage\r\n     * @return {boolean}\r\n     */\r\n    validationMessageBelongsToCurrentInstance(validationMessage) {\r\n        return this._qualifierFieldMap.has(validationMessage.subject);\r\n    }\r\n    /**\r\n     * @param {GenericEditorFieldMessage[]} messages\r\n     * @return {GenericEditorFieldMessage[]}\r\n     */\r\n    collectUnrelatedValidationMessages(messages) {\r\n        return messages.filter((message) => this._isValidationMessageType(message.type) &&\r\n            !this.validationMessageBelongsToCurrentInstance(message));\r\n    }\r\n    /**\r\n     * Collects validation errors on all the form fields.\r\n     * Returns the list of errors or empty list.\r\n     * Each error contains the following properties:\r\n     * type - VALIDATION_MESSAGE_TYPES\r\n     * subject - the field qualifier.\r\n     * message - error message.\r\n     * fromSubmit - contains true if the error is related to submit operation, false otherwise.\r\n     * isNonPristine - contains true if the field was modified (at least once) by the user, false otherwise.\r\n     * language - optional language iso code.\r\n     */\r\n    watchErrors(formElement) {\r\n        const formChangeStream = this._formFields.map((form) => form.statusChanges.pipe(startWith(null)));\r\n        combineLatest([...formChangeStream, this.group.statusChanges.pipe(startWith(null))])\r\n            .pipe(distinctUntilChanged((prev, curr) => lo.isEqual(prev, curr)), map(() => this.collectFrontEndValidationErrors(false, formElement)))\r\n            .subscribe((messages) => {\r\n            this.removeFrontEndValidationMessages();\r\n            this.displayValidationMessages(messages, false);\r\n        });\r\n    }\r\n    collectFrontEndValidationErrors(comesFromSubmit, formElement) {\r\n        comesFromSubmit = comesFromSubmit || false;\r\n        return this._formFields.reduce((acc, form) => {\r\n            const field = form.getInput('field');\r\n            if ((() => {\r\n                const fieldNativeElement = Array.from(formElement || []).find((elem) => elem.getAttribute('name') === field.qualifier);\r\n                return !!fieldNativeElement && !fieldNativeElement.checkValidity();\r\n            })()) {\r\n                acc.push({\r\n                    type: VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR,\r\n                    subject: field.qualifier,\r\n                    message: 'se.editor.htmlo.validation.error',\r\n                    fromSubmit: comesFromSubmit,\r\n                    isNonPristine: this.isDirty(field.qualifier)\r\n                });\r\n            }\r\n            // Could get more specific errors.\r\n            if ((form.getError('required') && form.touched) ||\r\n                (form.getError('isBlank') && form.touched)) {\r\n                if (field.localized) {\r\n                    const id = form.getInput('id');\r\n                    acc.push({\r\n                        type: VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR,\r\n                        subject: field.qualifier,\r\n                        message: 'se.componentform.required.field',\r\n                        language: id,\r\n                        fromSubmit: comesFromSubmit,\r\n                        isNonPristine: this.isDirty(field.qualifier, id // Isocode\r\n                        )\r\n                    });\r\n                }\r\n                else {\r\n                    acc.push({\r\n                        type: VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR,\r\n                        subject: field.qualifier,\r\n                        message: 'se.componentform.required.field',\r\n                        fromSubmit: comesFromSubmit,\r\n                        isNonPristine: this.isDirty(field.qualifier)\r\n                    });\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n    /**\r\n     * Displays validation errors for fields and changes error states for all tabs.\r\n     * TODO: move validation to fields.\r\n     */\r\n    displayValidationMessages(validationMessages, keepAllErrors) {\r\n        validationMessages\r\n            .filter((message) => this._isValidationMessageType(message.type) &&\r\n            (keepAllErrors || message.isNonPristine))\r\n            .forEach((validation) => {\r\n            validation.type = validation.type || VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR;\r\n            const field = this._qualifierFieldMap.get(validation.subject);\r\n            if (!field) {\r\n                return;\r\n            }\r\n            if (!field.messages) {\r\n                field.messages = [];\r\n            }\r\n            const message = lo.merge(validation, this._getParseValidationMessage(validation.message));\r\n            message.marker = field.localized ? message.language : field.qualifier;\r\n            message.type = validation.type;\r\n            message.uniqId = stringUtils.encode(message);\r\n            const existing = field.messages.find((msg) => msg.uniqId === message.uniqId);\r\n            if (!existing) {\r\n                field.messages.push(message);\r\n                if (message.type === VALIDATION_MESSAGE_TYPES.VALIDATION_ERROR) {\r\n                    field.hasErrors = true;\r\n                }\r\n                else if (message.type === VALIDATION_MESSAGE_TYPES.WARNING) {\r\n                    field.hasWarnings = true;\r\n                }\r\n            }\r\n            else {\r\n                // Update existing message.\r\n                lo.merge(existing, message);\r\n            }\r\n        });\r\n        /**\r\n         * Need to trigger onStatusChanges for each tab because these messages are added after\r\n         * validation is triggered inside of AbstractFormControls. Messages will dictate for now\r\n         * if a field is invalid.\r\n         */\r\n        lo.values(this.group.controls).forEach((tab) => {\r\n            tab.updateValueAndValidity({ emitEvent: true });\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n    isDirty(qualifier, language) {\r\n        this._bcPristine = this._buildComparable(this.fields, this.pristine);\r\n        const bcComponent = this._buildComparable(this.fields, this.component);\r\n        const subPristine = qualifier\r\n            ? language\r\n                ? this._bcPristine[qualifier][language]\r\n                : this._bcPristine[qualifier]\r\n            : this._bcPristine;\r\n        const subComponent = qualifier\r\n            ? language\r\n                ? bcComponent[qualifier][language]\r\n                : bcComponent[qualifier]\r\n            : bcComponent;\r\n        return !lo.isEqual(subPristine, subComponent);\r\n    }\r\n    fieldsAreUserChecked() {\r\n        return this.fields.every((field) => {\r\n            let requiresUserCheck = false;\r\n            for (const qualifier in field.requiresUserCheck) {\r\n                if (field.requiresUserCheck.hasOwnProperty(qualifier)) {\r\n                    requiresUserCheck = requiresUserCheck || field.requiresUserCheck[qualifier];\r\n                }\r\n            }\r\n            return !requiresUserCheck || field.isUserChecked;\r\n        });\r\n    }\r\n    /**\r\n     * Updates the component with the patching component.\r\n     */\r\n    patchComponent(value) {\r\n        // Proxify the localized objects.\r\n        this._qualifierFieldMap.forEach(({ localized, qualifier }) => {\r\n            if (localized && value[qualifier]) {\r\n                value[qualifier] = proxifyDataObject(value[qualifier]);\r\n            }\r\n        });\r\n        Object.assign(this.proxiedComponent, value);\r\n    }\r\n    /**\r\n     * Get sanitized payload to be sent to the backend.\r\n     *\r\n     * **Deprecated since 2105. It will be removed in next release.**\r\n     *\r\n     * @deprecated\r\n     */\r\n    sanitizedPayload(payload = this.component) {\r\n        this.fields\r\n            .filter((field) => field.cmsStructureType === CMS_STRUCTURE_TYPE.LONG_STRING ||\r\n            field.cmsStructureType === CMS_STRUCTURE_TYPE.SHORT_STRING ||\r\n            typeof field.customSanitize === 'function')\r\n            .forEach(({ qualifier, localized, customSanitize }) => {\r\n            if (payload[qualifier] !== undefined && qualifier in payload) {\r\n                if (customSanitize) {\r\n                    payload[qualifier] = customSanitize(payload[qualifier], stringUtils.sanitize);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        return payload;\r\n    }\r\n    /*\r\n     * Switches to tab with qualifier.\r\n     * Causes the genericEditor to switch to the tab containing a qualifier of the given name.\r\n     */\r\n    switchToTabContainingQualifier(targetedQualifier) {\r\n        if (!targetedQualifier) {\r\n            return;\r\n        }\r\n        this.tabs.forEach((tab) => {\r\n            tab.active = !!this.group.get([tab.id, targetedQualifier]);\r\n        });\r\n    }\r\n    _getParseValidationMessage(message) {\r\n        return parseValidationMessage(message);\r\n    }\r\n    /**\r\n     * @internal\r\n     * Sees if it contains validation message type.\r\n     */\r\n    _containsValidationMessageType(validationMessages, messageType) {\r\n        if (!Array.isArray(validationMessages)) {\r\n            return false;\r\n        }\r\n        return validationMessages.some((message) => message.type === messageType &&\r\n            this.validationMessageBelongsToCurrentInstance(message));\r\n    }\r\n    /**\r\n     * @internal\r\n     * Checks if validation message type is of type ValidationError or Warning.\r\n     */\r\n    _isValidationMessageType(messageType) {\r\n        return VALIDATION_MESSAGE_TYPES_SET.has(messageType);\r\n    }\r\n    /**\r\n     * @internal\r\n     * Builds a comparable data object.\r\n     */\r\n    _buildComparable(fields, source) {\r\n        if (!source) {\r\n            return source;\r\n        }\r\n        const comparable = {};\r\n        fields.forEach((field) => {\r\n            let fieldValue = source[field.qualifier];\r\n            if (field.localized) {\r\n                fieldValue = fieldValue;\r\n                const sub = {};\r\n                lo.forEach(fieldValue, (langValue, lang) => {\r\n                    if (!lo.isUndefined(langValue)) {\r\n                        sub[lang] = this._buildFieldComparable(langValue, field);\r\n                    }\r\n                });\r\n                comparable[field.qualifier] = sub;\r\n            }\r\n            else {\r\n                fieldValue = source[field.qualifier];\r\n                comparable[field.qualifier] = this._buildFieldComparable(fieldValue, field);\r\n            }\r\n        });\r\n        // sometimes, such as in navigationNodeEntryEditor, we update properties not part of the fields and still want the editor to turn dirty\r\n        lo.forEach(source, (value, key) => {\r\n            const notDisplayed = !fields.some((field) => field.qualifier === key);\r\n            if (notDisplayed) {\r\n                comparable[key] = value;\r\n            }\r\n        });\r\n        return lo.omitBy(comparable, lo.isUndefined);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _buildFieldComparable(fieldValue, field) {\r\n        switch (field.cmsStructureType) {\r\n            case 'RichText':\r\n                return fieldValue !== undefined ? stringUtils.sanitizeHTML(fieldValue) : null;\r\n            case 'Boolean':\r\n                return fieldValue !== undefined ? fieldValue : false;\r\n            default:\r\n                return fieldValue;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     * Get all leaf nodes of the form.\r\n     */\r\n    _buildFormFieldsArray(form, array = []) {\r\n        if (form instanceof FormField) {\r\n            array.push(form);\r\n            return array;\r\n        }\r\n        if (form instanceof FormGrouping) {\r\n            Object.keys(form.controls).forEach((key) => {\r\n                const field = form.controls[key];\r\n                this._buildFormFieldsArray(field, array);\r\n            });\r\n            return array;\r\n        }\r\n        return array;\r\n    }\r\n}\r\n//# sourceMappingURL=GenericEditorState.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/components/dynamicField/GenericEditorDynamicFieldComponent.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/services/SeValidationMessageParser.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/types.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/components/genericEditor/models/InternalProperty.ts"],"map":"{\"version\":3,\"file\":\"GenericEditorState.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/components/genericEditor/models/GenericEditorState.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/genericEditor/models/GenericEditorState.d.ts","writeByteOrderMark":false,"text":"import { FormGrouping } from '@smart/utils';\r\nimport { Payload } from '../../../dtos';\r\nimport { ILanguage, IUriContext } from '../../../services';\r\nimport { GenericEditorField, GenericEditorFieldMessage, GenericEditorTab } from '../types';\r\n/**\r\n * @internal\r\n * Holds the entire state of the generic editor.\r\n * Provides method to query and mutate the generic editor state.\r\n * The GenericEditorState is created by the GenericEditorStateBuilderService.\r\n */\r\nexport declare class GenericEditorState {\r\n    readonly id: string;\r\n    readonly group: FormGrouping;\r\n    component: any;\r\n    private proxiedComponent;\r\n    pristine: any;\r\n    readonly tabs: GenericEditorTab[];\r\n    readonly fields: GenericEditorField[];\r\n    readonly languages: ILanguage[];\r\n    readonly parameters: IUriContext;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _bcPristine;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _formFields;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _qualifierFieldMap;\r\n    constructor(id: string, group: FormGrouping, component: any, proxiedComponent: any, pristine: any, tabs: GenericEditorTab[], fields: GenericEditorField[], languages: ILanguage[], parameters: IUriContext);\r\n    /**\r\n     * Removes all validation (local, outside or server) errors from fieds and tabs.\r\n     */\r\n    removeValidationMessages: () => void;\r\n    /**\r\n     * Removes validation errors generated in frontend, not the ones sent by outside or server.\r\n     * Removes errors only from fields, not tabs.\r\n     */\r\n    removeFrontEndValidationMessages(): void;\r\n    /**\r\n     * Checks if this validation message belongs to the current generic editor by seeing if the generic editor\r\n     * has the qualifier.\r\n     *\r\n     * TODO: It assumes that the qualifier is unique in every genericeditor.\r\n     *\r\n     * @param {GenericEditorFieldMessage} validationMessage\r\n     * @return {boolean}\r\n     */\r\n    validationMessageBelongsToCurrentInstance(validationMessage: GenericEditorFieldMessage): boolean;\r\n    /**\r\n     * @param {GenericEditorFieldMessage[]} messages\r\n     * @return {GenericEditorFieldMessage[]}\r\n     */\r\n    collectUnrelatedValidationMessages(messages: GenericEditorFieldMessage[]): GenericEditorFieldMessage[];\r\n    /**\r\n     * Collects validation errors on all the form fields.\r\n     * Returns the list of errors or empty list.\r\n     * Each error contains the following properties:\r\n     * type - VALIDATION_MESSAGE_TYPES\r\n     * subject - the field qualifier.\r\n     * message - error message.\r\n     * fromSubmit - contains true if the error is related to submit operation, false otherwise.\r\n     * isNonPristine - contains true if the field was modified (at least once) by the user, false otherwise.\r\n     * language - optional language iso code.\r\n     */\r\n    watchErrors(formElement: HTMLFormElement): void;\r\n    collectFrontEndValidationErrors(comesFromSubmit: boolean, formElement: HTMLFormElement): GenericEditorFieldMessage[];\r\n    /**\r\n     * Displays validation errors for fields and changes error states for all tabs.\r\n     * TODO: move validation to fields.\r\n     */\r\n    displayValidationMessages(validationMessages: GenericEditorFieldMessage[], keepAllErrors: boolean): Promise<void>;\r\n    isDirty(qualifier?: string, language?: string): boolean;\r\n    fieldsAreUserChecked(): boolean;\r\n    /**\r\n     * Updates the component with the patching component.\r\n     */\r\n    patchComponent(value: Payload): void;\r\n    /**\r\n     * Get sanitized payload to be sent to the backend.\r\n     *\r\n     * **Deprecated since 2105. It will be removed in next release.**\r\n     *\r\n     * @deprecated\r\n     */\r\n    sanitizedPayload(payload?: Payload): Payload;\r\n    switchToTabContainingQualifier(targetedQualifier?: string): void;\r\n    private _getParseValidationMessage;\r\n    /**\r\n     * @internal\r\n     * Sees if it contains validation message type.\r\n     */\r\n    private _containsValidationMessageType;\r\n    /**\r\n     * @internal\r\n     * Checks if validation message type is of type ValidationError or Warning.\r\n     */\r\n    private _isValidationMessageType;\r\n    /**\r\n     * @internal\r\n     * Builds a comparable data object.\r\n     */\r\n    private _buildComparable;\r\n    /**\r\n     * @internal\r\n     */\r\n    private _buildFieldComparable;\r\n    /**\r\n     * @internal\r\n     * Get all leaf nodes of the form.\r\n     */\r\n    private _buildFormFieldsArray;\r\n}\r\n"}}
