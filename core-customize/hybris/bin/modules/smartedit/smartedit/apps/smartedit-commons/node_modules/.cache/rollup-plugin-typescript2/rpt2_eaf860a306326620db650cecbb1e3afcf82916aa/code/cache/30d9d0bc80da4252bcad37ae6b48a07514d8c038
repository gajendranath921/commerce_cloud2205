{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Cached, IStorageService } from '@smart/utils';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SeDowngradeService } from '../../di';\r\nimport { windowUtils } from '../../utils';\r\nimport { EVENT_PERSPECTIVE_REFRESHED, EVENT_PERSPECTIVE_CHANGED, PAGE_CONTEXT_CATALOG, PAGE_CONTEXT_CATALOG_VERSION, CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, OPEN_PAGE_WORKFLOW_MENU } from '../../utils/smarteditconstants';\r\nimport { rarelyChangingContent } from '../cache';\r\nimport { pageChangeEvictionTag, perspectiveChangedEvictionTag } from '../cache/tags';\r\nimport { CrossFrameEventService } from '../crossFrame/CrossFrameEventService';\r\nimport { ICatalogService, IExperienceService, IRestServiceFactory, ISharedDataService, IPageService, ISyncPollingService } from '../interfaces';\r\nimport { CMSModesService } from '../modes/CMSModesService';\r\nimport { IPerspectiveService } from '../perspectives/IPerspectiveService';\r\nimport { SystemEventService } from '../SystemEventService';\r\nimport { CmsitemsRestService } from './CmsitemsRestService';\r\nimport { WorkflowActionStatus, WorkflowOperations, WorkflowStatus } from './dtos';\r\nimport { workflowCompletedEvictionTag, workflowCreatedEvictionTag, workflowTasksMenuOpenedEvictionTag } from './workflowEvictionTags';\r\nimport { WorkflowTasksPollingService } from './WorkflowTasksPollingService';\r\nexport var OpenPageWorkflowMenu;\r\n(function (OpenPageWorkflowMenu) {\r\n    OpenPageWorkflowMenu[\"Default\"] = \"Default\";\r\n    OpenPageWorkflowMenu[\"SwitchPerspective\"] = \"SwitchPerspective\";\r\n})(OpenPageWorkflowMenu || (OpenPageWorkflowMenu = {}));\r\n/**\r\n * This service is used to manage workflows.\r\n */\r\nlet /* @ngInject */ WorkflowService = class /* @ngInject */ WorkflowService {\r\n    constructor(restServiceFactory, crossFrameEventService, systemEventService, sharedDataService, perspectiveService, catalogService, experienceService, workflowTasksPollingService, pageService, syncPollingService, cmsitemsRestService, translateService, storageService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.systemEventService = systemEventService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.perspectiveService = perspectiveService;\r\n        this.catalogService = catalogService;\r\n        this.experienceService = experienceService;\r\n        this.workflowTasksPollingService = workflowTasksPollingService;\r\n        this.pageService = pageService;\r\n        this.syncPollingService = syncPollingService;\r\n        this.cmsitemsRestService = cmsitemsRestService;\r\n        this.translateService = translateService;\r\n        this.storageService = storageService;\r\n        this.workflowTasksCountSubject = new BehaviorSubject(0);\r\n        this.resourceWorkflowURI = `/cmswebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workflows`;\r\n        this.resourceWorkflowActionsURI = `/cmswebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workflows/:workflowCode/actions`;\r\n        this.resourceWorkflowTemplateURI = `/cmswebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workflowtemplates`;\r\n        this.resourceWorkflowOperationsURI = `/cmswebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workflows/:workflowCode/operations`;\r\n        this.resourceWorkflowActionCommentsURI = `/cmswebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workflows/:workflowCode/actions/:actionCode/comments`;\r\n        this.resourceWorkflowEditableItemsURI = `/cmssmarteditwebservices/v1/catalogs/${PAGE_CONTEXT_CATALOG}/versions/${PAGE_CONTEXT_CATALOG_VERSION}/workfloweditableitems`;\r\n        this.resourceWorkflowInboxTasksURI = `/cmssmarteditwebservices/v1/inbox/workflowtasks`;\r\n        this.workflowRESTService = this.restServiceFactory.get(this.resourceWorkflowURI);\r\n        this.workflowTemplateRESTService = this.restServiceFactory.get(this.resourceWorkflowTemplateURI);\r\n        this.workflowActionsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionsURI);\r\n        this.workflowInboxTasksRESTService = this.restServiceFactory.get(this.resourceWorkflowInboxTasksURI);\r\n        this.workflowEditableItemsRESTService = this.restServiceFactory.get(this.resourceWorkflowEditableItemsURI);\r\n        this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_REFRESHED, () => this.openPageWorkflowMenu());\r\n        this.crossFrameEventService.subscribe(EVENT_PERSPECTIVE_CHANGED, () => this.openPageWorkflowMenu());\r\n        this.workflowTasksPollingService.addSubscriber((tasks, pagination) => {\r\n            const totalNumberOfTasks = pagination.totalCount || 0;\r\n            this.updateWorkflowTasksCount(totalNumberOfTasks);\r\n        }, true);\r\n    }\r\n    /**\r\n     * Fetch workflow search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params\r\n     * @param queryParams.pageSize number of items in the page\r\n     * @param queryParams.currentPage current page number\r\n     * @param queryParams.attachments comma separated list of attachment id\r\n     * @param queryParams.status comma separated list of workflow status\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflows(queryParams) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflowList = yield this.workflowRESTService.get(queryParams);\r\n            return workflowList.workflows;\r\n        });\r\n    }\r\n    /**\r\n     * Fetch workflow templates search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params.\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow template search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplates(queryParams) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflowTemplateList = yield this.workflowTemplateRESTService.get(queryParams);\r\n            return workflowTemplateList.templates;\r\n        });\r\n    }\r\n    /**\r\n     * Fetch all actions for a given workflow code.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getAllActionsForWorkflowCode(workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflow = yield this.workflowActionsRESTService.get({\r\n                workflowCode\r\n            });\r\n            return workflow.actions;\r\n        });\r\n    }\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    cancelWorflow(workflow) {\r\n        this.workflowOperationsRESTService = this.restServiceFactory.get(this.resourceWorkflowOperationsURI.replace(':workflowCode', workflow.workflowCode));\r\n        return this.workflowOperationsRESTService.save({\r\n            operation: WorkflowOperations.CANCEL\r\n        });\r\n    }\r\n    /**\r\n     * Returns a workflow template using its code.\r\n     *\r\n     * @returns A promise that resolves with the workflow template result, if the request is successful. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplateByCode(code) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflowTemplates = yield this.getWorkflowTemplates({});\r\n            const workflow = workflowTemplates.find((wf) => wf.code === code);\r\n            return workflow;\r\n        });\r\n    }\r\n    /**\r\n     * This method determines whether the current catalog version (the one in the current experience) has workflows\r\n     * enabled. A catalog version has workflows enabled if it has at least one workflow template assigned to it.\r\n     *\r\n     * @returns A promise that resolves to a boolean. It will be true, if the workflow is\r\n     * enabled for the current catalog version. False, otherwise.\r\n     */\r\n    areWorkflowsEnabledOnCurrentCatalogVersion() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflowTemplates = yield this.getWorkflowTemplates({});\r\n            return workflowTemplates && workflowTemplates.length > 0;\r\n        });\r\n    }\r\n    /**\r\n     * Fetch an active workflow for a page uuid.\r\n     *\r\n     * @returns A promise that resolves with the workflow object\r\n     * or null, if the request is sucessful and there is no active workflow for provided page uuid.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveWorkflowForPageUuid(pageUuid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const workflows = yield this.getWorkflows({\r\n                pageSize: 1,\r\n                currentPage: 0,\r\n                attachment: pageUuid,\r\n                statuses: WorkflowStatus.RUNNING + ',' + WorkflowStatus.PAUSED\r\n            });\r\n            return workflows[0] === undefined ? null : workflows[0];\r\n        });\r\n    }\r\n    /**\r\n     * Verifies whether the page is in a workflow or not.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with boolean value.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    isPageInWorkflow(page) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return !!(yield this.getActiveWorkflowForPageUuid(page.uuid));\r\n        });\r\n    }\r\n    /**\r\n     * Verifies whether the use is a participant of a current active action.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a boolean. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    isUserParticipanInActiveAction(workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const activeActions = yield this.getActiveActionsForWorkflowCode(workflowCode);\r\n            return activeActions.length > 0;\r\n        });\r\n    }\r\n    /**\r\n     * Fetch all active actions for a given workflow code and for the current user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of active actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveActionsForWorkflowCode(workflowCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const actions = yield this.getAllActionsForWorkflowCode(workflowCode);\r\n            return actions.filter((action) => action.isCurrentUserParticipant &&\r\n                (WorkflowActionStatus.IN_PROGRESS === action.status.toLowerCase() ||\r\n                    WorkflowActionStatus.PAUSED === action.status.toLowerCase()));\r\n        });\r\n    }\r\n    /**\r\n     * Fetch a page of comments for a given workflow action and some pageable data.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available comments for a given workflow and workflow action. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getCommentsForWorkflowAction(workflowCode, workflowActionCode, payload) {\r\n        this.workflowActionCommentsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionCommentsURI\r\n            .replace(':workflowCode', workflowCode)\r\n            .replace(':actionCode', workflowActionCode));\r\n        return this.workflowActionCommentsRESTService.page(payload);\r\n    }\r\n    /**\r\n     * Fetches a page of workflow inbox tasks active for a given user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a page of workflow inbox tasks for a given user. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowInboxTasks(payload) {\r\n        return this.workflowInboxTasksRESTService.page(payload);\r\n    }\r\n    /** The total number of active workflow tasks. */\r\n    getTotalNumberOfActiveWorkflowTasks() {\r\n        return this.workflowTasksCountSubject.asObservable();\r\n    }\r\n    updateWorkflowTasksCount(count) {\r\n        this.workflowTasksCountSubject.next(count);\r\n    }\r\n    /**\r\n     * Returns information about whether each item is editable or not. It also returns a workflow code where item is editable.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a list of objects where each object\r\n     * contains information about whether each item is editable or not. If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowEditableItems(itemUids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const data = yield this.workflowEditableItemsRESTService.get({\r\n                itemUids\r\n            });\r\n            return data.editableItems;\r\n        });\r\n    }\r\n    /**\r\n     * Returns a resource uri for workflows.\r\n     */\r\n    getResourceWorkflowURI() {\r\n        return this.resourceWorkflowURI;\r\n    }\r\n    /**\r\n     * Returns a resource uri for workflow operations.\r\n     */\r\n    getResourceWorkflowOperationsURI() {\r\n        return this.resourceWorkflowOperationsURI;\r\n    }\r\n    /**\r\n     * Opens the page workflow menu. If the current perspective is not basic or advanced, it will switch to advanced perspective and then opens the menu.\r\n     */\r\n    openPageWorkflowMenu() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const data = yield this.sharedDataService.get(OPEN_PAGE_WORKFLOW_MENU);\r\n            if (data === OpenPageWorkflowMenu.Default) {\r\n                const activePerspective = yield this.perspectiveService.getActivePerspectiveKey();\r\n                if (activePerspective === CMSModesService.BASIC_PERSPECTIVE_KEY ||\r\n                    activePerspective === CMSModesService.ADVANCED_PERSPECTIVE_KEY) {\r\n                    this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);\r\n                    this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);\r\n                }\r\n                else {\r\n                    yield this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.SwitchPerspective);\r\n                    this.perspectiveService.switchTo(CMSModesService.ADVANCED_PERSPECTIVE_KEY);\r\n                }\r\n            }\r\n            else if (data === OpenPageWorkflowMenu.SwitchPerspective) {\r\n                this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);\r\n                this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Loads the experience by building experience params from the given Workflow Task and then opens the page workflow menu.\r\n     * If the current experience is same as the experience params from the given workflow task, it just opens the page workflow menu.\r\n     * Otherwise, it loads the experience and then opens the page workflow menu.\r\n     */\r\n    loadExperienceAndOpenPageWorkflowMenu(task) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (task) {\r\n                const defaultSite = yield this.catalogService.getDefaultSiteForContentCatalog(task.attachments[0].catalogId);\r\n                const experienceParams = {\r\n                    siteId: defaultSite.uid,\r\n                    catalogId: task.attachments[0].catalogId,\r\n                    catalogVersion: task.attachments[0].catalogVersion,\r\n                    pageId: task.attachments[0].pageUid\r\n                };\r\n                /**\r\n                 * First check if you are in storefront view or not,\r\n                 * - If in storefront view, then check if same as current experience or not.\r\n                 * \t\t- If requested experience is same as current experience then just open the workflow task menu.\r\n                 * \t\t- If requested experience is not same as current experience then load the provided experience.\r\n                 * - If not in storefront view, then load the provided experience.\r\n                 */\r\n                if (!!windowUtils.getGatewayTargetFrame()) {\r\n                    const isEqual = yield this.experienceService.compareWithCurrentExperience(experienceParams);\r\n                    if (isEqual) {\r\n                        yield this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default);\r\n                        this.openPageWorkflowMenu();\r\n                    }\r\n                    else {\r\n                        this._loadExperience(experienceParams);\r\n                    }\r\n                }\r\n                else {\r\n                    this._loadExperience(experienceParams);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    pageHasUnavailableDependencies() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const syncStatus = yield this.getPageSyncStatus();\r\n            return (!!syncStatus.unavailableDependencies && syncStatus.unavailableDependencies.length > 0);\r\n        });\r\n    }\r\n    fetchPageTranslatedApprovalInfo() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const syncStatus = yield this.getPageSyncStatus();\r\n            const itemIds = syncStatus.unavailableDependencies.map(({ itemId }) => itemId);\r\n            const itemNames = yield this.cmsitemsRestService\r\n                .getByIds(itemIds)\r\n                .then(({ response }) => response.map(({ name }) => name).join(', '));\r\n            return this.translateService.instant('se.cms.workflow.approval.info', {\r\n                itemNames\r\n            });\r\n        });\r\n    }\r\n    _loadExperience(experience) {\r\n        this.storageService.setValueInLocalStorage('seselectedsite', experience.siteId, false);\r\n        this.experienceService.loadExperience(experience).then(() => {\r\n            this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default);\r\n        });\r\n    }\r\n    getPageSyncStatus() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { uuid } = yield this.pageService.getCurrentPageInfo();\r\n            const uriContext = yield this.catalogService.retrieveUriContext();\r\n            return this.syncPollingService.getSyncStatus(uuid, uriContext);\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({\r\n        actions: [rarelyChangingContent],\r\n        tags: [\r\n            pageChangeEvictionTag,\r\n            perspectiveChangedEvictionTag,\r\n            workflowTasksMenuOpenedEvictionTag,\r\n            workflowCompletedEvictionTag,\r\n            workflowCreatedEvictionTag\r\n        ]\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ WorkflowService.prototype, \"getWorkflows\", null);\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [pageChangeEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ WorkflowService.prototype, \"getWorkflowTemplates\", null);\r\n__decorate([\r\n    Cached({\r\n        actions: [rarelyChangingContent],\r\n        tags: [\r\n            pageChangeEvictionTag,\r\n            workflowTasksMenuOpenedEvictionTag,\r\n            workflowCompletedEvictionTag,\r\n            workflowCreatedEvictionTag\r\n        ]\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ WorkflowService.prototype, \"getAllActionsForWorkflowCode\", null);\r\n/* @ngInject */ WorkflowService = __decorate([\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        CrossFrameEventService,\r\n        SystemEventService,\r\n        ISharedDataService,\r\n        IPerspectiveService,\r\n        ICatalogService,\r\n        IExperienceService,\r\n        WorkflowTasksPollingService,\r\n        IPageService,\r\n        ISyncPollingService,\r\n        CmsitemsRestService,\r\n        TranslateService,\r\n        IStorageService])\r\n], /* @ngInject */ WorkflowService);\r\nexport { /* @ngInject */ WorkflowService };\r\n//# sourceMappingURL=WorkflowService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@ngx-translate+core@11.0.1_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@ngx-translate/core/ngx-translate-core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/cache/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/cache/tags/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/crossFrame/CrossFrameEventService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/modes/CMSModesService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/perspectives/IPerspectiveService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/SystemEventService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/CmsitemsRestService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/dtos/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/workflowEvictionTags.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/workflow/WorkflowTasksPollingService.ts"],"map":"{\"version\":3,\"file\":\"WorkflowService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/workflow/WorkflowService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/workflow/WorkflowService.d.ts","writeByteOrderMark":false,"text":"import { TranslateService } from '@ngx-translate/core';\r\nimport { IStorageService, Page, Pageable, SearchParams } from '@smart/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { CrossFrameEventService } from '../crossFrame/CrossFrameEventService';\r\nimport { ICMSPage, ICatalogService, IExperienceService, IRestServiceFactory, ISharedDataService, IPageService, ISyncPollingService } from '../interfaces';\r\nimport { IPerspectiveService } from '../perspectives/IPerspectiveService';\r\nimport { SystemEventService } from '../SystemEventService';\r\nimport { CmsitemsRestService } from './CmsitemsRestService';\r\nimport { Workflow, WorkflowAction, WorkflowActionComment, WorkflowEditableItem, WorkflowTask, WorkflowTemplate } from './dtos';\r\nimport { WorkflowTasksPollingService } from './WorkflowTasksPollingService';\r\nexport declare enum OpenPageWorkflowMenu {\r\n    Default = \"Default\",\r\n    SwitchPerspective = \"SwitchPerspective\"\r\n}\r\nexport interface WorkflowActionCommentPage extends Page<WorkflowActionComment> {\r\n    comments: WorkflowActionComment[];\r\n}\r\nexport interface WorkflowTaskPage extends Page<WorkflowTask> {\r\n    tasks: WorkflowTask[];\r\n}\r\n/**\r\n * This service is used to manage workflows.\r\n */\r\nexport declare class WorkflowService {\r\n    private readonly restServiceFactory;\r\n    private readonly crossFrameEventService;\r\n    private readonly systemEventService;\r\n    private readonly sharedDataService;\r\n    private readonly perspectiveService;\r\n    private readonly catalogService;\r\n    private readonly experienceService;\r\n    private readonly workflowTasksPollingService;\r\n    private readonly pageService;\r\n    private readonly syncPollingService;\r\n    private readonly cmsitemsRestService;\r\n    private readonly translateService;\r\n    private readonly storageService;\r\n    private readonly resourceWorkflowURI;\r\n    private readonly resourceWorkflowOperationsURI;\r\n    private readonly resourceWorkflowTemplateURI;\r\n    private readonly resourceWorkflowActionsURI;\r\n    private readonly resourceWorkflowActionCommentsURI;\r\n    private readonly resourceWorkflowEditableItemsURI;\r\n    private readonly resourceWorkflowInboxTasksURI;\r\n    private readonly workflowRESTService;\r\n    private readonly workflowActionsRESTService;\r\n    private workflowOperationsRESTService;\r\n    private readonly workflowTemplateRESTService;\r\n    private workflowActionCommentsRESTService;\r\n    private readonly workflowEditableItemsRESTService;\r\n    private readonly workflowInboxTasksRESTService;\r\n    private readonly workflowTasksCountSubject;\r\n    constructor(restServiceFactory: IRestServiceFactory, crossFrameEventService: CrossFrameEventService, systemEventService: SystemEventService, sharedDataService: ISharedDataService, perspectiveService: IPerspectiveService, catalogService: ICatalogService, experienceService: IExperienceService, workflowTasksPollingService: WorkflowTasksPollingService, pageService: IPageService, syncPollingService: ISyncPollingService, cmsitemsRestService: CmsitemsRestService, translateService: TranslateService, storageService: IStorageService);\r\n    /**\r\n     * Fetch workflow search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params\r\n     * @param queryParams.pageSize number of items in the page\r\n     * @param queryParams.currentPage current page number\r\n     * @param queryParams.attachments comma separated list of attachment id\r\n     * @param queryParams.status comma separated list of workflow status\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflows(queryParams: SearchParams): Promise<Workflow[]>;\r\n    /**\r\n     * Fetch workflow templates search result by making a REST call to the workflow API.\r\n     *\r\n     * @param queryParams The object representing the query params.\r\n     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with the workflow template search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplates(queryParams: SearchParams): Promise<WorkflowTemplate[]>;\r\n    /**\r\n     * Fetch all actions for a given workflow code.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getAllActionsForWorkflowCode(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Cancels the workflow. Shows the confirmation message before sending the request.\r\n     */\r\n    cancelWorflow(workflow: Workflow): Promise<Workflow>;\r\n    /**\r\n     * Returns a workflow template using its code.\r\n     *\r\n     * @returns A promise that resolves with the workflow template result, if the request is successful. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowTemplateByCode(code: string): Promise<WorkflowTemplate>;\r\n    /**\r\n     * This method determines whether the current catalog version (the one in the current experience) has workflows\r\n     * enabled. A catalog version has workflows enabled if it has at least one workflow template assigned to it.\r\n     *\r\n     * @returns A promise that resolves to a boolean. It will be true, if the workflow is\r\n     * enabled for the current catalog version. False, otherwise.\r\n     */\r\n    areWorkflowsEnabledOnCurrentCatalogVersion(): Promise<boolean>;\r\n    /**\r\n     * Fetch an active workflow for a page uuid.\r\n     *\r\n     * @returns A promise that resolves with the workflow object\r\n     * or null, if the request is sucessful and there is no active workflow for provided page uuid.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveWorkflowForPageUuid(pageUuid: string): Promise<Workflow>;\r\n    /**\r\n     * Verifies whether the page is in a workflow or not.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves with boolean value.\r\n     * If the request fails, it resolves with errors from the backend.\r\n     */\r\n    isPageInWorkflow(page: ICMSPage): Promise<boolean>;\r\n    /**\r\n     * Verifies whether the use is a participant of a current active action.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a boolean. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    isUserParticipanInActiveAction(workflowCode: string): Promise<boolean>;\r\n    /**\r\n     * Fetch all active actions for a given workflow code and for the current user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of active actions. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getActiveActionsForWorkflowCode(workflowCode: string): Promise<WorkflowAction[]>;\r\n    /**\r\n     * Fetch a page of comments for a given workflow action and some pageable data.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to list of available comments for a given workflow and workflow action. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getCommentsForWorkflowAction(workflowCode: string, workflowActionCode: string, payload: Pageable): Promise<WorkflowActionCommentPage>;\r\n    /**\r\n     * Fetches a page of workflow inbox tasks active for a given user.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a page of workflow inbox tasks for a given user. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowInboxTasks(payload: Pageable): Promise<WorkflowTaskPage>;\r\n    /** The total number of active workflow tasks. */\r\n    getTotalNumberOfActiveWorkflowTasks(): Observable<number>;\r\n    updateWorkflowTasksCount(count: number): void;\r\n    /**\r\n     * Returns information about whether each item is editable or not. It also returns a workflow code where item is editable.\r\n     *\r\n     * @returns If request is successful, it returns a promise that resolves to a list of objects where each object\r\n     * contains information about whether each item is editable or not. If the request fails, it resolves with errors from the backend.\r\n     */\r\n    getWorkflowEditableItems(itemUids: string[]): Promise<WorkflowEditableItem[]>;\r\n    /**\r\n     * Returns a resource uri for workflows.\r\n     */\r\n    getResourceWorkflowURI(): string;\r\n    /**\r\n     * Returns a resource uri for workflow operations.\r\n     */\r\n    getResourceWorkflowOperationsURI(): string;\r\n    /**\r\n     * Opens the page workflow menu. If the current perspective is not basic or advanced, it will switch to advanced perspective and then opens the menu.\r\n     */\r\n    openPageWorkflowMenu(): Promise<void>;\r\n    /**\r\n     * Loads the experience by building experience params from the given Workflow Task and then opens the page workflow menu.\r\n     * If the current experience is same as the experience params from the given workflow task, it just opens the page workflow menu.\r\n     * Otherwise, it loads the experience and then opens the page workflow menu.\r\n     */\r\n    loadExperienceAndOpenPageWorkflowMenu(task: WorkflowTask): Promise<void>;\r\n    pageHasUnavailableDependencies(): Promise<boolean>;\r\n    fetchPageTranslatedApprovalInfo(): Promise<string>;\r\n    private _loadExperience;\r\n    private getPageSyncStatus;\r\n}\r\n"}}
