{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport { of } from 'rxjs';\r\nimport { ConfirmDialogComponent, ModalButtonAction, ModalButtonStyle, GatewayProxied, IConfirmationModalService, IModalService, SeDowngradeService } from 'smarteditcommons';\r\n/**\r\n * Service used to open a confirmation modal in which an end-user can confirm or cancel an action.\r\n * A confirmation modal consists of a title, content, and an OK and cancel button. This modal may be used in any context in which a\r\n * confirmation is required.\r\n */\r\nlet /* @ngInject */ ConfirmationModalService = class /* @ngInject */ ConfirmationModalService extends IConfirmationModalService {\r\n    constructor(modalService) {\r\n        super();\r\n        this.modalService = modalService;\r\n    }\r\n    /**\r\n     * Uses the [ModalService]{@link IModalService} to open a confirmation modal.\r\n     *\r\n     * The confirmation modal is initialized by a default i18N key as a title or by an override title passed in configuration.\r\n     *\r\n     * @returns A promise that is resolved when the OK button is actioned or is rejected when the Cancel\r\n     * button is actioned.\r\n     */\r\n    confirm(configuration) {\r\n        const ref = this.modalService.open({\r\n            component: ConfirmDialogComponent,\r\n            data: configuration,\r\n            config: {\r\n                focusTrapped: false,\r\n                modalPanelClass: 'se-confirmation-dialog',\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n                container: document.querySelector('[uib-modal-window]') || 'body'\r\n            },\r\n            templateConfig: {\r\n                title: configuration.title || 'se.confirmation.modal.title',\r\n                buttons: this.getButtons(configuration),\r\n                isDismissButtonVisible: true\r\n            }\r\n        });\r\n        // it always rejects with undefined, no matter what value you pass (due to handling rejection in MessageGateway)\r\n        return new Promise((resolve, reject) => ref.afterClosed.subscribe(resolve, reject));\r\n    }\r\n    getButtons(configuration) {\r\n        return [\r\n            {\r\n                id: 'confirmOk',\r\n                label: 'se.confirmation.modal.ok',\r\n                style: ModalButtonStyle.Primary,\r\n                action: ModalButtonAction.Close,\r\n                callback: () => of(true)\r\n            },\r\n            !configuration.showOkButtonOnly && {\r\n                id: 'confirmCancel',\r\n                label: 'se.confirmation.modal.cancel',\r\n                style: ModalButtonStyle.Default,\r\n                action: ModalButtonAction.Dismiss,\r\n                callback: () => of(false)\r\n            }\r\n        ].filter((x) => !!x);\r\n    }\r\n};\r\n/* @ngInject */ ConfirmationModalService = __decorate([\r\n    SeDowngradeService(IConfirmationModalService),\r\n    GatewayProxied('confirm'),\r\n    __metadata(\"design:paramtypes\", [IModalService])\r\n], /* @ngInject */ ConfirmationModalService);\r\nexport { /* @ngInject */ ConfirmationModalService };\r\n//# sourceMappingURL=ConfirmationModalServiceOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ConfirmationModalServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ConfirmationModalServiceOuter.ts\"],\"names\":[],\"mappings\":\";AAIA,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAEH,sBAAsB,EACtB,iBAAiB,EACjB,gBAAgB,EAChB,cAAc,EACd,yBAAyB,EAEzB,aAAa,EACb,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAE1B;;;;GAIG;AAIH,+CAAA,8CAAsC,SAAQ,yBAAyB;IACnE,YAAoB,YAA2B;QAC3C,KAAK,EAAE,CAAC;QADQ,iBAAY,GAAZ,YAAY,CAAe;IAE/C,CAAC;IAED;;;;;;;OAOG;IACI,OAAO,CAAC,aAAsC;QACjD,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAA0B;YACxD,SAAS,EAAE,sBAAmC;YAC9C,IAAI,EAAE,aAAa;YACnB,MAAM,EAAE;gBACJ,YAAY,EAAE,KAAK;gBACnB,eAAe,EAAE,wBAAwB;gBACzC,4EAA4E;gBAC5E,SAAS,EAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAiB,IAAI,MAAM;aACrF;YACD,cAAc,EAAE;gBACZ,KAAK,EAAE,aAAa,CAAC,KAAK,IAAI,6BAA6B;gBAC3D,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;gBACvC,sBAAsB,EAAE,IAAI;aAC/B;SACJ,CAAC,CAAC;QACH,gHAAgH;QAChH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IACxF,CAAC;IAEO,UAAU,CAAC,aAAsC;QACrD,OAAO;YACH;gBACI,EAAE,EAAE,WAAW;gBACf,KAAK,EAAE,0BAA0B;gBACjC,KAAK,EAAE,gBAAgB,CAAC,OAAO;gBAC/B,MAAM,EAAE,iBAAiB,CAAC,KAAK;gBAC/B,QAAQ,EAAE,GAAwB,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;aAChD;YACD,CAAC,aAAa,CAAC,gBAAgB,IAAI;gBAC/B,EAAE,EAAE,eAAe;gBACnB,KAAK,EAAE,8BAA8B;gBACrC,KAAK,EAAE,gBAAgB,CAAC,OAAO;gBAC/B,MAAM,EAAE,iBAAiB,CAAC,OAAO;gBACjC,QAAQ,EAAE,GAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;aACjD;SACJ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;CACJ,CAAA;AAnDD;IAFC,kBAAkB,CAAC,yBAAyB,CAAC;IAC7C,cAAc,CAAC,SAAS,CAAC;qCAEY,aAAa;4CAkDlD\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ConfirmationModalServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { ConfirmationModalConfig, IConfirmationModalService, IModalService } from 'smarteditcommons';\r\n/**\r\n * Service used to open a confirmation modal in which an end-user can confirm or cancel an action.\r\n * A confirmation modal consists of a title, content, and an OK and cancel button. This modal may be used in any context in which a\r\n * confirmation is required.\r\n */\r\nexport declare class ConfirmationModalService extends IConfirmationModalService {\r\n    private modalService;\r\n    constructor(modalService: IModalService);\r\n    /**\r\n     * Uses the [ModalService]{@link IModalService} to open a confirmation modal.\r\n     *\r\n     * The confirmation modal is initialized by a default i18N key as a title or by an override title passed in configuration.\r\n     *\r\n     * @returns A promise that is resolved when the OK button is actioned or is rejected when the Cancel\r\n     * button is actioned.\r\n     */\r\n    confirm(configuration: ConfirmationModalConfig): Promise<any>;\r\n    private getButtons;\r\n}\r\n"}}
