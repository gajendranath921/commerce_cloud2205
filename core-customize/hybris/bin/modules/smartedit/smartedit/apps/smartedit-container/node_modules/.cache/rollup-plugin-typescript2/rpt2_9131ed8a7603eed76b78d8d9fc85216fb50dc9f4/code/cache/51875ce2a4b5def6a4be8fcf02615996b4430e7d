{"code":"import { __decorate, __metadata } from \"tslib\";\r\nimport './ConfigurationModalComponent.scss';\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { from as rxFrom } from 'rxjs';\r\nimport { ModalButtonAction, ModalButtonStyle, ModalManagerService, IConfirmationModalService } from 'smarteditcommons';\r\nimport { ConfigurationService } from '../../services/ConfigurationService';\r\nwindow.__smartedit__.addDecoratorPayload(\"Component\", \"ConfigurationModalComponent\", {\r\n    selector: 'se-configuration-modal',\r\n    template: `<div id=\"editConfigurationsBody\" class=\"se-config\"><form #form=\"ngForm\" novalidate><div class=\"se-config__sub-header\"><span class=\"se-config__sub-title\">{{'se.configurationform.label.keyvalue' | translate}}</span> <button class=\"se-config__add-entry-btn fd-button--compact\" type=\"button\" (click)=\"editor.addEntry()\">{{ \"se.general.configuration.add.button\" | translate }}</button></div><div class=\"se-config__entry\" *ngFor=\"let entry of editor.filterConfiguration(); let $index = index\"><div class=\"se-config__entry-data\"><div class=\"se-config__entry-key\"><input type=\"text\" [ngClass]=\"{\n                            'is-invalid': entry.errors &&  entry.errors.keys && entry.errors.keys.length > 0,\n                            'se-config__entry-key--disabled': !entry.isNew }\" name=\"{{entry.key}}_{{entry.uuid}}_key\" placeholder=\"{{'se.configurationform.header.key.name' | translate}}\" [(ngModel)]=\"entry.key\" [required]=\"true\" [disabled]=\"!entry.isNew\" class=\"se-config__entry-key-input fd-form__control\" [title]=\"entry.key\"/><ng-container *ngIf=\"entry.errors && entry.errors.keys\"><span id=\"{{entry.key}}_error_{{$index}}\" *ngFor=\"let error of entry.errors.keys; let $index = index\" class=\"error-input help-block\">{{error.message|translate}}</span></ng-container></div><div class=\"se-config__entry-value\"><textarea [ngClass]=\"{'is-invalid': entry.errors && entry.errors.values && entry.errors.values.length>0}\" name=\"{{entry.key}}_{{entry.uuid}}_value\" placeholder=\"{{'se.configurationform.header.value.name' | translate}}\" [(ngModel)]=\"entry.value\" [required]=\"true\" class=\"se-config__entry-text-area fd-form__control\" (change)=\"editor.validateUserInput(entry)\"></textarea><div *ngIf=\"entry.requiresUserCheck\"><input id=\"{{entry.key}}_absoluteUrl_check_{{$index}}\" type=\"checkbox\" name=\"{{entry.key}}_{{entry.uuid}}_isCheckedByUser\" [(ngModel)]=\"entry.isCheckedByUser\"/> <span id=\"{{entry.key}}_absoluteUrl_msg_{{$index}}\" [ngClass]=\"{\n                                'warning-check-msg': true,\n                                'not-checked': entry.hasErrors && !entry.isCheckedByUser\n                            }\">{{'se.configurationform.absoluteurl.check' | translate}}</span></div><ng-container *ngIf=\"entry.errors && entry.errors.values && entry.errors.values\"><span id=\"{{entry.key}}_error_{{$index}}\" *ngFor=\"let error of entry.errors.values; let $index = index\" class=\"error-input help-block\">{{error.message|translate}}</span></ng-container></div></div><button type=\"button\" id=\"{{entry.key}}_removeButton_{{$index}}\" class=\"se-config__entry-remove-btn fd-button--light sap-icon--delete\" (click)=\"editor.removeEntry(entry, form);\"></button></div></form></div>`\r\n});\r\nlet ConfigurationModalComponent = class ConfigurationModalComponent {\r\n    constructor(editor, modalManager, confirmationModalService) {\r\n        this.editor = editor;\r\n        this.modalManager = modalManager;\r\n        this.confirmationModalService = confirmationModalService;\r\n    }\r\n    ngOnInit() {\r\n        this.editor.init();\r\n        this.form.statusChanges.subscribe(() => {\r\n            if (this.form.valid && this.form.dirty) {\r\n                this.modalManager.enableButton('save');\r\n            }\r\n            if (this.form.invalid || !this.form.dirty) {\r\n                this.modalManager.disableButton('save');\r\n            }\r\n        });\r\n        this.modalManager.addButtons([\r\n            {\r\n                id: 'save',\r\n                style: ModalButtonStyle.Primary,\r\n                label: 'se.cms.component.confirmation.modal.save',\r\n                callback: () => rxFrom(this.onSave()),\r\n                disabled: true\r\n            },\r\n            {\r\n                id: 'cancel',\r\n                label: 'se.cms.component.confirmation.modal.cancel',\r\n                style: ModalButtonStyle.Default,\r\n                action: ModalButtonAction.Dismiss,\r\n                callback: () => rxFrom(this.onCancel())\r\n            }\r\n        ]);\r\n    }\r\n    trackByFn(_, item) {\r\n        return item.uuid;\r\n    }\r\n    onCancel() {\r\n        const { dirty } = this.form;\r\n        const confirmationData = {\r\n            description: 'se.editor.cancel.confirm'\r\n        };\r\n        if (!dirty) {\r\n            return Promise.resolve();\r\n        }\r\n        return this.confirmationModalService\r\n            .confirm(confirmationData)\r\n            .then(() => this.modalManager.close(null));\r\n    }\r\n    onSave() {\r\n        return this.editor.submit(this.form).then(() => {\r\n            this.modalManager.close(null);\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    ViewChild('form', { static: true }),\r\n    __metadata(\"design:type\", NgForm)\r\n], ConfigurationModalComponent.prototype, \"form\", void 0);\r\nConfigurationModalComponent = __decorate([\r\n    Component({\r\n        selector: 'se-configuration-modal',\r\n        template: `<div id=\"editConfigurationsBody\" class=\"se-config\"><form #form=\"ngForm\" novalidate><div class=\"se-config__sub-header\"><span class=\"se-config__sub-title\">{{'se.configurationform.label.keyvalue' | translate}}</span> <button class=\"se-config__add-entry-btn fd-button--compact\" type=\"button\" (click)=\"editor.addEntry()\">{{ \"se.general.configuration.add.button\" | translate }}</button></div><div class=\"se-config__entry\" *ngFor=\"let entry of editor.filterConfiguration(); let $index = index\"><div class=\"se-config__entry-data\"><div class=\"se-config__entry-key\"><input type=\"text\" [ngClass]=\"{\n                            'is-invalid': entry.errors &&  entry.errors.keys && entry.errors.keys.length > 0,\n                            'se-config__entry-key--disabled': !entry.isNew }\" name=\"{{entry.key}}_{{entry.uuid}}_key\" placeholder=\"{{'se.configurationform.header.key.name' | translate}}\" [(ngModel)]=\"entry.key\" [required]=\"true\" [disabled]=\"!entry.isNew\" class=\"se-config__entry-key-input fd-form__control\" [title]=\"entry.key\"/><ng-container *ngIf=\"entry.errors && entry.errors.keys\"><span id=\"{{entry.key}}_error_{{$index}}\" *ngFor=\"let error of entry.errors.keys; let $index = index\" class=\"error-input help-block\">{{error.message|translate}}</span></ng-container></div><div class=\"se-config__entry-value\"><textarea [ngClass]=\"{'is-invalid': entry.errors && entry.errors.values && entry.errors.values.length>0}\" name=\"{{entry.key}}_{{entry.uuid}}_value\" placeholder=\"{{'se.configurationform.header.value.name' | translate}}\" [(ngModel)]=\"entry.value\" [required]=\"true\" class=\"se-config__entry-text-area fd-form__control\" (change)=\"editor.validateUserInput(entry)\"></textarea><div *ngIf=\"entry.requiresUserCheck\"><input id=\"{{entry.key}}_absoluteUrl_check_{{$index}}\" type=\"checkbox\" name=\"{{entry.key}}_{{entry.uuid}}_isCheckedByUser\" [(ngModel)]=\"entry.isCheckedByUser\"/> <span id=\"{{entry.key}}_absoluteUrl_msg_{{$index}}\" [ngClass]=\"{\n                                'warning-check-msg': true,\n                                'not-checked': entry.hasErrors && !entry.isCheckedByUser\n                            }\">{{'se.configurationform.absoluteurl.check' | translate}}</span></div><ng-container *ngIf=\"entry.errors && entry.errors.values && entry.errors.values\"><span id=\"{{entry.key}}_error_{{$index}}\" *ngFor=\"let error of entry.errors.values; let $index = index\" class=\"error-input help-block\">{{error.message|translate}}</span></ng-container></div></div><button type=\"button\" id=\"{{entry.key}}_removeButton_{{$index}}\" class=\"se-config__entry-remove-btn fd-button--light sap-icon--delete\" (click)=\"editor.removeEntry(entry, form);\"></button></div></form></div>`\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ConfigurationService,\r\n        ModalManagerService,\r\n        IConfirmationModalService])\r\n], ConfigurationModalComponent);\r\nexport { ConfigurationModalComponent };\r\n//# sourceMappingURL=ConfigurationModalComponent.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/Configuration.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/ConfigurationService.ts"],"map":"{\"version\":3,\"file\":\"ConfigurationModalComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/generalConfiguration/ConfigurationModalComponent.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/generalConfiguration/ConfigurationModalComponent.d.ts","writeByteOrderMark":false,"text":"import './ConfigurationModalComponent.scss';\r\nimport { OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ModalManagerService, IConfirmationModalService } from 'smarteditcommons';\r\nimport { ConfigurationItem } from '../../services/bootstrap/Configuration';\r\nimport { ConfigurationService } from '../../services/ConfigurationService';\r\nexport declare class ConfigurationModalComponent implements OnInit {\r\n    editor: ConfigurationService;\r\n    modalManager: ModalManagerService;\r\n    private confirmationModalService;\r\n    form: NgForm;\r\n    constructor(editor: ConfigurationService, modalManager: ModalManagerService, confirmationModalService: IConfirmationModalService);\r\n    ngOnInit(): void;\r\n    trackByFn(_: number, item: ConfigurationItem): string;\r\n    private onCancel;\r\n    private onSave;\r\n}\r\n"}}
