{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { authorizationEvictionTag, rarelyChangingContent, Cached, OperationContextRegistered, RestServiceFactory, SeDowngradeService, SITES_RESOURCE_URI } from 'smarteditcommons';\r\n/**\r\n * The Site Service fetches all sites configured on the hybris platform using REST calls to the cmswebservices sites API.\r\n */\r\nlet /* @ngInject */ SiteService = class /* @ngInject */ SiteService {\r\n    constructor(restServiceFactory) {\r\n        this.SITES_FOR_CATALOGS_URI = '/cmswebservices/v1/sites/catalogs';\r\n        this.cache = null;\r\n        this.siteRestService = restServiceFactory.get(SITES_RESOURCE_URI);\r\n        this.sitesForCatalogsRestService = restServiceFactory.get(this.SITES_FOR_CATALOGS_URI);\r\n    }\r\n    /**\r\n     * Fetches a list of sites for which user has at-least read access to one of the non-active catalog versions.\r\n     *\r\n     * @returns A promise of [ISite]{@link ISite} array.\r\n     */\r\n    getAccessibleSites() {\r\n        return this.siteRestService.get({}).then((sitesDTO) => sitesDTO.sites);\r\n    }\r\n    /**\r\n     * Fetches a list of sites configured for accessible sites. The list of sites fetched using REST calls through\r\n     * the cmswebservices sites API.\r\n     *\r\n     * @returns A promise of [ISite]{@link ISite} array.\r\n     */\r\n    getSites() {\r\n        //  Uses two REST API calls because of multicountry. The first call gives all the sites for which the user has permissions to.\r\n        return this.getAccessibleSites().then((sites) => {\r\n            const catalogIds = sites.reduce((catalogs, site) => [...(catalogs || []), ...site.contentCatalogs], []);\r\n            // The call with catalogIds gives all the corresponding sites in the hierarchy.\r\n            return this.sitesForCatalogsRestService\r\n                .save({\r\n                catalogIds\r\n            })\r\n                .then((allSites) => {\r\n                this.cache = allSites.sites;\r\n                return this.cache;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Fetches a site, configured on the hybris platform, by its uid. The sites fetched using REST calls through\r\n     * cmswebservices sites API.\r\n     *\r\n     * @param uid unique site ID\r\n     * @returns A promise of [ISite]{@link ISite}.\r\n     */\r\n    getSiteById(uid) {\r\n        return this.getSites().then((sites) => sites.find((site) => site.uid === uid));\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ SiteService.prototype, \"getAccessibleSites\", null);\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [authorizationEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ SiteService.prototype, \"getSites\", null);\r\n/* @ngInject */ SiteService = __decorate([\r\n    OperationContextRegistered('SITES_RESOURCE_URI', 'CMS'),\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [RestServiceFactory])\r\n], /* @ngInject */ SiteService);\r\nexport { /* @ngInject */ SiteService };\r\n//# sourceMappingURL=SiteService.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SiteService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SiteService.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EACH,wBAAwB,EACxB,qBAAqB,EACrB,MAAM,EAGN,0BAA0B,EAC1B,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAM1B;;GAEG;AAIH,kCAAA;IAOI,YAAY,kBAAsC;QAFjC,2BAAsB,GAAG,mCAAmC,CAAC;QAG1E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,GAAG,CAAW,kBAAkB,CAAC,CAAC;QAC5E,IAAI,CAAC,2BAA2B,GAAG,kBAAkB,CAAC,GAAG,CACrD,IAAI,CAAC,sBAAsB,CAC9B,CAAC;IACN,CAAC;IAED;;;;OAIG;IAEH,kBAAkB;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrF,CAAC;IAED;;;;;OAKG;IAEH,QAAQ;QACJ,8HAA8H;QAC9H,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5C,MAAM,UAAU,GAAa,KAAK,CAAC,MAAM,CACrC,CAAC,QAAkB,EAAE,IAAW,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,EACnF,EAAE,CACL,CAAC;YAEF,+EAA+E;YAC/E,OAAO,IAAI,CAAC,2BAA2B;iBAClC,IAAI,CAAC;gBACF,UAAU;aACb,CAAC;iBAED,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;gBACzB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAC5B,OAAO,IAAI,CAAC,KAAK,CAAC;YACtB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,GAAW;QACnB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5F,CAAC;CACJ,CAAA;AA1CG;IADC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,CAAC,EAAE,IAAI,EAAE,CAAC,wBAAwB,CAAC,EAAE,CAAC;;;;qEAG9E;AASD;IADC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,CAAC,EAAE,IAAI,EAAE,CAAC,wBAAwB,CAAC,EAAE,CAAC;;;;2DAoB9E;AAnDL;IAFC,0BAA0B,CAAC,oBAAoB,EAAE,KAAK,CAAC;IACvD,kBAAkB,EAAE;qCAQe,kBAAkB;+BAwDrD\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SiteService.d.ts","writeByteOrderMark":false,"text":"import { ISite, RestServiceFactory } from 'smarteditcommons';\r\n/**\r\n * The Site Service fetches all sites configured on the hybris platform using REST calls to the cmswebservices sites API.\r\n */\r\nexport declare class SiteService {\r\n    private cache;\r\n    private siteRestService;\r\n    private sitesForCatalogsRestService;\r\n    private readonly SITES_FOR_CATALOGS_URI;\r\n    constructor(restServiceFactory: RestServiceFactory);\r\n    /**\r\n     * Fetches a list of sites for which user has at-least read access to one of the non-active catalog versions.\r\n     *\r\n     * @returns A promise of [ISite]{@link ISite} array.\r\n     */\r\n    getAccessibleSites(): Promise<ISite[]>;\r\n    /**\r\n     * Fetches a list of sites configured for accessible sites. The list of sites fetched using REST calls through\r\n     * the cmswebservices sites API.\r\n     *\r\n     * @returns A promise of [ISite]{@link ISite} array.\r\n     */\r\n    getSites(): Promise<ISite[]>;\r\n    /**\r\n     * Fetches a site, configured on the hybris platform, by its uid. The sites fetched using REST calls through\r\n     * cmswebservices sites API.\r\n     *\r\n     * @param uid unique site ID\r\n     * @returns A promise of [ISite]{@link ISite}.\r\n     */\r\n    getSiteById(uid: string): Promise<ISite>;\r\n}\r\n"}}
