{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { rarelyChangingContent, userEvictionTag, Cached, CryptographicUtils, GatewayProxied, ISessionService, IStorageService, LogService, PREVIOUS_USERNAME_HASH, RestServiceFactory, SeDowngradeService, WHO_AM_I_RESOURCE_URI } from 'smarteditcommons';\r\n/** @internal */\r\nlet /* @ngInject */ SessionService = class /* @ngInject */ SessionService extends ISessionService {\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor($log, restServiceFactory, storageService, cryptographicUtils) {\r\n        super();\r\n        this.$log = $log;\r\n        this.storageService = storageService;\r\n        this.cryptographicUtils = cryptographicUtils;\r\n        // ------------------------------------------------------------------------\r\n        // Constants\r\n        // ------------------------------------------------------------------------\r\n        this.USER_DATA_URI = '/cmswebservices/v1/users/:userUid';\r\n        this.whoAmIService = restServiceFactory.get(WHO_AM_I_RESOURCE_URI);\r\n        this.userRestService = restServiceFactory.get(this.USER_DATA_URI);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Public API\r\n    // ------------------------------------------------------------------------\r\n    getCurrentUserDisplayName() {\r\n        return this.getCurrentUserData().then((currentUserData) => currentUserData.displayName);\r\n    }\r\n    getCurrentUsername() {\r\n        return this.getCurrentUserData().then((currentUserData) => currentUserData.uid);\r\n    }\r\n    getCurrentUser() {\r\n        return this.getCurrentUserData();\r\n    }\r\n    hasUserChanged() {\r\n        const prevHashPromise = Promise.resolve(this.cachedUserHash\r\n            ? this.cachedUserHash\r\n            : this.storageService.getItem(PREVIOUS_USERNAME_HASH));\r\n        return prevHashPromise.then((prevHash) => this.whoAmIService\r\n            .get({})\r\n            .then((currentUserData) => !!prevHash &&\r\n            prevHash !== this.cryptographicUtils.sha1Hash(currentUserData.uid)));\r\n    }\r\n    setCurrentUsername() {\r\n        return this.whoAmIService.get({}).then((currentUserData) => {\r\n            // NOTE: For most of SmartEdit operation, it is enough to store the previous user hash in the cache.\r\n            // However, if the page is refreshed the cache is cleaned. Therefore, it's necessary to also store it in\r\n            // a cookie through the storageService.\r\n            this.cachedUserHash = this.cryptographicUtils.sha1Hash(currentUserData.uid);\r\n            this.storageService.setItem(PREVIOUS_USERNAME_HASH, this.cachedUserHash);\r\n        });\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Helper Methods\r\n    // ------------------------------------------------------------------------\r\n    getCurrentUserData() {\r\n        return this.whoAmIService\r\n            .get({})\r\n            .then((whoAmIData) => this.userRestService\r\n            .get({\r\n            userUid: whoAmIData.uid\r\n        })\r\n            .then((userData) => ({\r\n            uid: userData.uid,\r\n            displayName: whoAmIData.displayName,\r\n            readableLanguages: userData.readableLanguages,\r\n            writeableLanguages: userData.writeableLanguages\r\n        })))\r\n            .catch((reason) => {\r\n            this.$log.warn(\"[SessionService]: Can't load session information\", reason);\r\n            return null;\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ SessionService.prototype, \"getCurrentUserData\", null);\r\n/* @ngInject */ SessionService = __decorate([\r\n    SeDowngradeService(ISessionService),\r\n    GatewayProxied('getCurrentUsername', 'getCurrentUserDisplayName', 'hasUserChanged', 'setCurrentUsername', 'getCurrentUser'),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        RestServiceFactory,\r\n        IStorageService,\r\n        CryptographicUtils])\r\n], /* @ngInject */ SessionService);\r\nexport { /* @ngInject */ SessionService };\r\n//# sourceMappingURL=SessionServiceOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"SessionServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/SessionServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/SessionServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { CryptographicUtils, ISessionService, IStorageService, LogService, RestServiceFactory, User } from 'smarteditcommons';\r\n/** @internal */\r\nexport declare class SessionService extends ISessionService {\r\n    private $log;\r\n    private storageService;\r\n    private cryptographicUtils;\r\n    private USER_DATA_URI;\r\n    private cachedUserHash;\r\n    private whoAmIService;\r\n    private userRestService;\r\n    constructor($log: LogService, restServiceFactory: RestServiceFactory, storageService: IStorageService, cryptographicUtils: CryptographicUtils);\r\n    getCurrentUserDisplayName(): Promise<string>;\r\n    getCurrentUsername(): Promise<string>;\r\n    getCurrentUser(): Promise<User>;\r\n    hasUserChanged(): Promise<boolean>;\r\n    setCurrentUsername(): Promise<void>;\r\n    private getCurrentUserData;\r\n}\r\n"}}
