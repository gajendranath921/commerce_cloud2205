{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport { DO_NOT_USE_STORAGE_MANAGER_TOKEN, GatewayProxied, IStorageManager, IStorageManagerGateway, SeDowngradeService } from 'smarteditcommons';\r\n/** @internal */\r\nlet /* @ngInject */ StorageManagerGateway = class /* @ngInject */ StorageManagerGateway {\r\n    constructor(storageManager) {\r\n        this.storageManager = storageManager;\r\n    }\r\n    getStorageSanitityCheck(storageConfiguration) {\r\n        return this.storageManager.getStorage(storageConfiguration).then(() => true, () => false);\r\n    }\r\n    deleteExpiredStorages(force) {\r\n        return this.storageManager.deleteExpiredStorages(force);\r\n    }\r\n    deleteStorage(storageId, force) {\r\n        return this.storageManager.deleteStorage(storageId, force);\r\n    }\r\n    hasStorage(storageId) {\r\n        return this.storageManager.hasStorage(storageId);\r\n    }\r\n    getStorage(storageConfiguration) {\r\n        throw new Error(`getStorage() is not supported from the StorageManagerGateway, please use the storage manager directly`);\r\n    }\r\n    registerStorageController(controller) {\r\n        throw new Error(`registerStorageController() is not supported from the StorageManagerGateway, please use the storage manager directly`);\r\n    }\r\n};\r\n/* @ngInject */ StorageManagerGateway = __decorate([\r\n    SeDowngradeService(IStorageManagerGateway),\r\n    GatewayProxied('getStorageSanitityCheck', 'deleteExpiredStorages', 'deleteStorage', 'hasStorage'),\r\n    __param(0, Inject(DO_NOT_USE_STORAGE_MANAGER_TOKEN)),\r\n    __metadata(\"design:paramtypes\", [IStorageManager])\r\n], /* @ngInject */ StorageManagerGateway);\r\nexport { /* @ngInject */ StorageManagerGateway };\r\n//# sourceMappingURL=StorageManagerGatewayOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"StorageManagerGatewayOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/storage/gateway/StorageManagerGatewayOuter.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAEH,gCAAgC,EAChC,cAAc,EAGd,eAAe,EACf,sBAAsB,EAEtB,kBAAkB,EACrB,MAAM,kBAAkB,CAAC;AAE1B,gBAAgB;AAGhB,4CAAA;IACI,YACsD,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IAClF,CAAC;IAEJ,uBAAuB,CAAC,oBAAqC;QACzD,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAC5D,GAAG,EAAE,CAAC,IAAI,EACV,GAAG,EAAE,CAAC,KAAK,CACd,CAAC;IACN,CAAC;IAED,qBAAqB,CAAC,KAAe;QACjC,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,aAAa,CAAC,SAAiB,EAAE,KAAe;QAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU,CAAC,SAAiB;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;IAED,UAAU,CAAC,oBAAqC;QAC5C,MAAM,IAAI,KAAK,CACX,uGAAuG,CAC1G,CAAC;IACN,CAAC;IAED,yBAAyB,CAAC,UAA8B;QACpD,MAAM,IAAI,KAAK,CACX,sHAAsH,CACzH,CAAC;IACN,CAAC;CACJ,CAAA;AAnCD;IAFC,kBAAkB,CAAC,sBAAsB,CAAC;IAC1C,cAAc,CAAC,yBAAyB,EAAE,uBAAuB,EAAE,eAAe,EAAE,YAAY,CAAC;IAGzF,WAAA,MAAM,CAAC,gCAAgC,CAAC,CAAA;qCAAyB,eAAe;yCAiCxF\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/storage/gateway/StorageManagerGatewayOuter.d.ts","writeByteOrderMark":false,"text":"import { Cloneable, IStorage, IStorageController, IStorageManager, IStorageManagerGateway, IStorageOptions } from 'smarteditcommons';\r\n/** @internal */\r\nexport declare class StorageManagerGateway implements IStorageManagerGateway {\r\n    private storageManager;\r\n    constructor(storageManager: IStorageManager);\r\n    getStorageSanitityCheck(storageConfiguration: IStorageOptions): Promise<boolean>;\r\n    deleteExpiredStorages(force?: boolean): Promise<boolean>;\r\n    deleteStorage(storageId: string, force?: boolean): Promise<boolean>;\r\n    hasStorage(storageId: string): boolean;\r\n    getStorage(storageConfiguration: IStorageOptions): Promise<IStorage<Cloneable, Cloneable>>;\r\n    registerStorageController(controller: IStorageController): void;\r\n}\r\n"}}
