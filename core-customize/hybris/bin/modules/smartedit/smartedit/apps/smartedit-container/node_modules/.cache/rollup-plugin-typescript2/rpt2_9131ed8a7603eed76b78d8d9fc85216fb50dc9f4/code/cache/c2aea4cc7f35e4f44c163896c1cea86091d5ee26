{"code":"var /* @ngInject */ StorageManager_1;\r\nimport { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { IStoragePropertiesService, LogService } from 'smarteditcommons';\r\nimport { MetaDataMapStorage } from '../metadata/MetaDataMapStorage';\r\n/** @internal */\r\nlet /* @ngInject */ StorageManager = /* @ngInject */ StorageManager_1 = class /* @ngInject */ StorageManager {\r\n    constructor(logService, storagePropertiesService) {\r\n        this.logService = logService;\r\n        this.storagePropertiesService = storagePropertiesService;\r\n        this.storageControllers = {};\r\n        this.storages = {};\r\n        this.storageMetaDataMap = new MetaDataMapStorage(this.storagePropertiesService.getProperty('LOCAL_STORAGE_KEY_STORAGE_MANAGER_METADATA'));\r\n    }\r\n    static ERR_NO_STORAGE_TYPE_CONTROLLER(storageType) {\r\n        return new Error(`StorageManager Error: Cannot create storage. No Controller available to handle type [${storageType}]`);\r\n    }\r\n    registerStorageController(controller) {\r\n        this.storageControllers[controller.storageType] = controller;\r\n    }\r\n    getStorage(storageConfiguration) {\r\n        this.setDefaultStorageOptions(storageConfiguration);\r\n        const loadExistingStorage = this.hasStorage(storageConfiguration.storageId);\r\n        let pendingValidation = Promise.resolve(true);\r\n        if (loadExistingStorage) {\r\n            const metadata = this.storageMetaDataMap.get(storageConfiguration.storageId);\r\n            pendingValidation = this.verifyMetaData(metadata, storageConfiguration);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            pendingValidation\r\n                .then(() => {\r\n                if (this.storages[storageConfiguration.storageId]) {\r\n                    this.updateStorageMetaData(storageConfiguration);\r\n                    resolve(this.storages[storageConfiguration.storageId]);\r\n                }\r\n                else {\r\n                    this.getStorageController(storageConfiguration.storageType)\r\n                        .getStorage(storageConfiguration)\r\n                        .then((newStorage) => {\r\n                        this.applyDisposeDecorator(storageConfiguration.storageId, newStorage);\r\n                        this.updateStorageMetaData(storageConfiguration);\r\n                        this.storages[storageConfiguration.storageId] = newStorage;\r\n                        resolve(newStorage);\r\n                    });\r\n                }\r\n            })\r\n                .catch((e) => reject(e));\r\n        });\r\n    }\r\n    hasStorage(storageId) {\r\n        // true if we have metadata for it\r\n        return !!this.storageMetaDataMap.get(storageId);\r\n    }\r\n    deleteStorage(storageId, force = false) {\r\n        delete this.storages[storageId];\r\n        if (!this.hasStorage(storageId)) {\r\n            return Promise.resolve(true);\r\n        }\r\n        const metaData = this.storageMetaDataMap.get(storageId);\r\n        if (metaData) {\r\n            let ctrl;\r\n            try {\r\n                ctrl = this.getStorageController(metaData.storageType);\r\n            }\r\n            catch (e) {\r\n                // silently fail on no storage type handler\r\n                if (force) {\r\n                    this.storageMetaDataMap.remove(storageId);\r\n                }\r\n                return Promise.resolve(true);\r\n            }\r\n            return ctrl.deleteStorage(storageId).then(() => {\r\n                this.storageMetaDataMap.remove(storageId);\r\n                return Promise.resolve(true);\r\n            });\r\n        }\r\n        else {\r\n            return Promise.resolve(true);\r\n        }\r\n    }\r\n    deleteExpiredStorages(force = false) {\r\n        const deletePromises = [];\r\n        const storageMetaDatas = this.storageMetaDataMap.getAll();\r\n        storageMetaDatas.forEach((metaData) => {\r\n            if (this.isStorageExpired(metaData)) {\r\n                deletePromises.push(this.deleteStorage(metaData.storageId, force));\r\n            }\r\n        });\r\n        return Promise.all(deletePromises).then(() => true, () => false);\r\n    }\r\n    updateStorageMetaData(storageConfiguration) {\r\n        this.storageMetaDataMap.put(storageConfiguration.storageId, {\r\n            storageId: storageConfiguration.storageId,\r\n            storageType: storageConfiguration.storageType,\r\n            storageVersion: storageConfiguration.storageVersion,\r\n            lastAccess: Date.now()\r\n        });\r\n    }\r\n    isStorageExpired(metaData) {\r\n        const timeSinceLastAccess = Date.now() - metaData.lastAccess;\r\n        let idleExpiryTime = metaData.expiresAfterIdle;\r\n        if (idleExpiryTime === undefined) {\r\n            idleExpiryTime = this.storagePropertiesService.getProperty('STORAGE_IDLE_EXPIRY');\r\n        }\r\n        return timeSinceLastAccess >= idleExpiryTime;\r\n    }\r\n    applyDisposeDecorator(storageId, storage) {\r\n        const originalDispose = storage.dispose;\r\n        storage.dispose = () => this.deleteStorage(storageId).then(() => originalDispose());\r\n    }\r\n    getStorageController(storageType) {\r\n        const controller = this.storageControllers[storageType];\r\n        if (!controller) {\r\n            throw /* @ngInject */ StorageManager_1.ERR_NO_STORAGE_TYPE_CONTROLLER(storageType);\r\n        }\r\n        return controller;\r\n    }\r\n    verifyMetaData(metadata, configuration) {\r\n        if (metadata.storageVersion !== configuration.storageVersion) {\r\n            this.logService.warn(`StorageManager - Removing old storage version for storage ${metadata.storageId}`);\r\n            return this.deleteStorage(metadata.storageId);\r\n        }\r\n        if (metadata.storageType !== configuration.storageType) {\r\n            this.logService.warn(`StorageManager - Detected a change in storage type for existing storage. Removing old storage with id ${configuration.storageId}`);\r\n            return this.deleteStorage(metadata.storageId);\r\n        }\r\n        return Promise.resolve(true);\r\n    }\r\n    setDefaultStorageOptions(options) {\r\n        if (!options.storageVersion || options.storageVersion.length <= 0) {\r\n            options.storageVersion = '0';\r\n        }\r\n    }\r\n};\r\n/* @ngInject */ StorageManager = /* @ngInject */ StorageManager_1 = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        IStoragePropertiesService])\r\n], /* @ngInject */ StorageManager);\r\nexport { /* @ngInject */ StorageManager };\r\n//# sourceMappingURL=StorageManager.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/storage/metadata/IStorageMetaData.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/storage/metadata/MetaDataMapStorage.ts"],"map":"{\"version\":3,\"file\":\"StorageManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/storage/manager/StorageManager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/storage/manager/StorageManager.d.ts","writeByteOrderMark":false,"text":"import { IStorage, IStorageController, IStorageManager, IStorageOptions, IStoragePropertiesService, LogService } from 'smarteditcommons';\r\n/** @internal */\r\nexport declare class StorageManager implements IStorageManager {\r\n    private logService;\r\n    private storagePropertiesService;\r\n    private readonly storageMetaDataMap;\r\n    private readonly storageControllers;\r\n    private readonly storages;\r\n    static ERR_NO_STORAGE_TYPE_CONTROLLER(storageType: string): Error;\r\n    constructor(logService: LogService, storagePropertiesService: IStoragePropertiesService);\r\n    registerStorageController(controller: IStorageController): void;\r\n    getStorage(storageConfiguration: IStorageOptions): Promise<IStorage<any, any>>;\r\n    hasStorage(storageId: string): boolean;\r\n    deleteStorage(storageId: string, force?: boolean): Promise<boolean>;\r\n    deleteExpiredStorages(force?: boolean): Promise<boolean>;\r\n    private updateStorageMetaData;\r\n    private isStorageExpired;\r\n    private applyDisposeDecorator;\r\n    private getStorageController;\r\n    private verifyMetaData;\r\n    private setDefaultStorageOptions;\r\n}\r\n"}}
