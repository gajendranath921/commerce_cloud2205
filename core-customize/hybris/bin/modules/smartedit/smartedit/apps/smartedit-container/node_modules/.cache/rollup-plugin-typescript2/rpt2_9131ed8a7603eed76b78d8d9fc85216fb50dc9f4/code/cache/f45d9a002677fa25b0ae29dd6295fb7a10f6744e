{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport * as lo from 'lodash';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, mergeMap, take } from 'rxjs/operators';\r\nimport { CrossFrameEventService, EVENT_SERVICE, EVENTS, GatewayProxied, ICatalogService, IExperienceService, IPreviewService, ISharedDataService, IStorageManager, IStoragePropertiesService, LanguageService, LogService, NG_ROUTE_PREFIX, SeDowngradeService, SmarteditRoutingService, STORE_FRONT_CONTEXT, EXPERIENCE_STORAGE_KEY } from 'smarteditcommons';\r\nimport { IframeManagerService } from './iframe/IframeManagerService';\r\nimport { SiteService } from './SiteService';\r\n/** @internal */\r\nlet /* @ngInject */ ExperienceService = class /* @ngInject */ ExperienceService extends IExperienceService {\r\n    constructor(seStorageManager, storagePropertiesService, logService, crossFrameEventService, siteService, previewService, catalogService, languageService, sharedDataService, iframeManagerService, routingService) {\r\n        super();\r\n        this.seStorageManager = seStorageManager;\r\n        this.storagePropertiesService = storagePropertiesService;\r\n        this.logService = logService;\r\n        this.crossFrameEventService = crossFrameEventService;\r\n        this.siteService = siteService;\r\n        this.previewService = previewService;\r\n        this.catalogService = catalogService;\r\n        this.languageService = languageService;\r\n        this.sharedDataService = sharedDataService;\r\n        this.iframeManagerService = iframeManagerService;\r\n        this.routingService = routingService;\r\n        this.storageLoaded$ = new BehaviorSubject(false);\r\n        seStorageManager\r\n            .getStorage({\r\n            storageId: EXPERIENCE_STORAGE_KEY,\r\n            storageType: storagePropertiesService.getProperty('STORAGE_TYPE_SESSION_STORAGE')\r\n        })\r\n            .then((_storage) => {\r\n            this.experienceStorage = _storage;\r\n            this.storageLoaded$.next(true);\r\n        });\r\n    }\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    buildAndSetExperience(params) {\r\n        const siteId = params.siteId;\r\n        const catalogId = params.catalogId;\r\n        const catalogVersion = params.catalogVersion;\r\n        const productCatalogVersions = params.productCatalogVersions;\r\n        return Promise.all([\r\n            this.siteService.getSiteById(siteId),\r\n            this.catalogService.getContentCatalogsForSite(siteId),\r\n            this.catalogService.getProductCatalogsForSite(siteId),\r\n            this.languageService.getLanguagesForSite(siteId)\r\n        ]).then(([siteDescriptor, catalogs, productCatalogs, languages]) => {\r\n            const currentCatalog = catalogs.find((catalog) => catalog.catalogId === catalogId);\r\n            const currentCatalogVersion = currentCatalog\r\n                ? currentCatalog.versions.find((result) => result.version === catalogVersion)\r\n                : null;\r\n            if (!currentCatalogVersion) {\r\n                return Promise.reject(`no catalogVersionDescriptor found for ${catalogId} catalogId and ${catalogVersion} catalogVersion`);\r\n            }\r\n            const currentExperienceProductCatalogVersions = [];\r\n            productCatalogs.forEach((productCatalog) => {\r\n                // for each product catalog either choose the version already present in the params or choose the active version.\r\n                const currentProductCatalogVersion = productCatalog.versions.find((version) => productCatalogVersions\r\n                    ? productCatalogVersions.indexOf(version.uuid) > -1\r\n                    : version.active === true);\r\n                currentExperienceProductCatalogVersions.push({\r\n                    catalog: productCatalog.catalogId,\r\n                    catalogName: productCatalog.name,\r\n                    catalogVersion: currentProductCatalogVersion.version,\r\n                    active: currentProductCatalogVersion.active,\r\n                    uuid: currentProductCatalogVersion.uuid\r\n                });\r\n            });\r\n            const languageDescriptor = params.language\r\n                ? languages.find((lang) => lang.isocode === params.language)\r\n                : languages[0];\r\n            const defaultExperience = lo.cloneDeep(params);\r\n            delete defaultExperience.siteId;\r\n            delete defaultExperience.catalogId;\r\n            delete defaultExperience.catalogVersion;\r\n            defaultExperience.siteDescriptor = siteDescriptor;\r\n            defaultExperience.catalogDescriptor = {\r\n                catalogId,\r\n                catalogVersion: currentCatalogVersion.version,\r\n                catalogVersionUuid: currentCatalogVersion.uuid,\r\n                name: currentCatalog.name,\r\n                siteId,\r\n                active: currentCatalogVersion.active\r\n            };\r\n            defaultExperience.languageDescriptor = languageDescriptor;\r\n            defaultExperience.time = defaultExperience.time || null;\r\n            defaultExperience.productCatalogVersions = currentExperienceProductCatalogVersions;\r\n            return this.setCurrentExperience(defaultExperience);\r\n        });\r\n    }\r\n    /**\r\n     * Used to update the page ID stored in the current experience and reloads the page to make the changes visible.\r\n     *\r\n     * @param newPageID the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    updateExperiencePageId(newPageID) {\r\n        return this.getCurrentExperience().then((currentExperience) => {\r\n            if (!currentExperience) {\r\n                // Experience haven't been set. Thus, the experience hasn't been loaded.\r\n                // No need to update the experience then.\r\n                return null;\r\n            }\r\n            currentExperience.pageId = newPageID;\r\n            return this.setCurrentExperience(currentExperience).then(() => this.reloadPage());\r\n        });\r\n    }\r\n    /**\r\n     * Used to update the experience with the parameters provided and reloads the page to make the changes visible.\r\n     *\r\n     * @param params The object containing the paratements for the experience to be loaded.\r\n     * @param params.siteId the ID of the site that must be stored in the current experience.\r\n     * @param params.catalogId the ID of the catalog that must be stored in the current experience.\r\n     * @param params.catalogVersion the version of the catalog that must be stored in the current experience.\r\n     * @param params.pageId the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    loadExperience(params) {\r\n        return this.buildAndSetExperience(params).then(() => this.reloadPage());\r\n    }\r\n    reloadPage() {\r\n        this.routingService.reload(`${NG_ROUTE_PREFIX}${STORE_FRONT_CONTEXT}`);\r\n    }\r\n    updateExperiencePageContext(pageCatalogVersionUuid, pageId) {\r\n        return this.getCurrentExperience()\r\n            .then((currentExperience) => this.catalogService\r\n            .getContentCatalogsForSite(currentExperience.catalogDescriptor.siteId)\r\n            .then((catalogs) => {\r\n            if (!currentExperience) {\r\n                // Experience haven't been set. Thus, the experience hasn't been loaded. No need to update the\r\n                // experience then.\r\n                return null;\r\n            }\r\n            const allCatalogs = catalogs.reduce((acc, catalog) => {\r\n                if (catalog.parents && catalog.parents.length) {\r\n                    catalog.parents.forEach((parent) => {\r\n                        acc.push(parent);\r\n                    });\r\n                }\r\n                return acc;\r\n            }, [...catalogs]);\r\n            const pageCatalogVersion = lo\r\n                .flatten(allCatalogs.map((catalog) => catalog.versions.map((version) => {\r\n                version.catalogName =\r\n                    catalog.name ||\r\n                        catalog.catalogName;\r\n                version.catalogId = catalog.catalogId;\r\n                return version;\r\n            })))\r\n                .find((version) => version.uuid === pageCatalogVersionUuid);\r\n            return this.catalogService.getCurrentSiteID().then((siteID) => {\r\n                currentExperience.pageId = pageId;\r\n                currentExperience.pageContext = {\r\n                    catalogId: pageCatalogVersion.catalogId,\r\n                    catalogName: pageCatalogVersion.catalogName,\r\n                    catalogVersion: pageCatalogVersion.version,\r\n                    catalogVersionUuid: pageCatalogVersion.uuid,\r\n                    siteId: siteID,\r\n                    active: pageCatalogVersion.active\r\n                };\r\n                return this.setCurrentExperience(currentExperience);\r\n            });\r\n        }))\r\n            .then((experience) => {\r\n            this.crossFrameEventService.publish(EVENTS.PAGE_CHANGE, experience);\r\n            return experience;\r\n        });\r\n    }\r\n    getCurrentExperience() {\r\n        // After Angular porting of StorageModule the experienceStorage load promise seems to be resolved after execution of getCurrentExperience.\r\n        // To avoid errors the method is triggered once experienceStorage is present.\r\n        return this.storageLoaded$\r\n            .pipe(filter((value) => value), take(1), mergeMap(() => this.experienceStorage.get(EXPERIENCE_STORAGE_KEY)))\r\n            .toPromise();\r\n    }\r\n    setCurrentExperience(experience) {\r\n        return this.getCurrentExperience().then((previousExperience) => {\r\n            this.previousExperience = previousExperience;\r\n            return this.experienceStorage\r\n                .put(experience, EXPERIENCE_STORAGE_KEY)\r\n                .then(() => this.sharedDataService\r\n                .set(EXPERIENCE_STORAGE_KEY, experience)\r\n                .then(() => experience));\r\n        });\r\n    }\r\n    hasCatalogVersionChanged() {\r\n        return this.getCurrentExperience().then((currentExperience) => this.previousExperience === undefined ||\r\n            currentExperience.catalogDescriptor.catalogId !==\r\n                this.previousExperience.catalogDescriptor.catalogId ||\r\n            currentExperience.catalogDescriptor.catalogVersion !==\r\n                this.previousExperience.catalogDescriptor.catalogVersion);\r\n    }\r\n    initializeExperience() {\r\n        this.iframeManagerService.setCurrentLocation(null);\r\n        return this.getCurrentExperience().then((experience) => {\r\n            if (!experience) {\r\n                this.routingService.go(NG_ROUTE_PREFIX);\r\n                return null;\r\n            }\r\n            return this.updateExperience();\r\n        }, (err) => {\r\n            this.logService.error('ExperienceService.initializeExperience() - failed to retrieve experience');\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n    updateExperience(newExperience) {\r\n        return this.getCurrentExperience().then((experience) => {\r\n            // create a deep copy of the current experience\r\n            experience = lo.cloneDeep(experience);\r\n            // merge the new experience into the copy of the current experience\r\n            lo.merge(experience, newExperience);\r\n            return this.previewService\r\n                .getResourcePathFromPreviewUrl(experience.siteDescriptor.previewUrl)\r\n                .then((resourcePath) => {\r\n                const previewData = this._convertExperienceToPreviewData(experience, resourcePath);\r\n                return this.previewService.createPreview(previewData).then((previewResponse) => {\r\n                    /* forbiddenNameSpaces window._:false */\r\n                    window.__smartedit__.smartEditBootstrapped = {};\r\n                    this.iframeManagerService.loadPreview(previewResponse.resourcePath, previewResponse.ticketId);\r\n                    return this.setCurrentExperience(experience);\r\n                }, (err) => {\r\n                    this.logService.error('iframeManagerService.updateExperience() - failed to update experience');\r\n                    return Promise.reject(err);\r\n                });\r\n            }, (err) => {\r\n                this.logService.error('ExperienceService.updateExperience() - failed to retrieve resource path');\r\n                return Promise.reject(err);\r\n            });\r\n        }, (err) => {\r\n            this.logService.error('ExperienceService.updateExperience() - failed to retrieve current experience');\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n    compareWithCurrentExperience(experience) {\r\n        if (!experience) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.getCurrentExperience().then((currentExperience) => {\r\n            if (!currentExperience) {\r\n                return Promise.resolve(false);\r\n            }\r\n            if (currentExperience.pageId === experience.pageId &&\r\n                currentExperience.siteDescriptor.uid === experience.siteId &&\r\n                currentExperience.catalogDescriptor.catalogId === experience.catalogId &&\r\n                currentExperience.catalogDescriptor.catalogVersion === experience.catalogVersion) {\r\n                return Promise.resolve(true);\r\n            }\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n};\r\n/* @ngInject */ ExperienceService = __decorate([\r\n    SeDowngradeService(IExperienceService),\r\n    GatewayProxied('loadExperience', 'updateExperiencePageContext', 'getCurrentExperience', 'hasCatalogVersionChanged', 'buildRefreshedPreviewUrl', 'compareWithCurrentExperience'),\r\n    __param(3, Inject(EVENT_SERVICE)),\r\n    __metadata(\"design:paramtypes\", [IStorageManager,\r\n        IStoragePropertiesService,\r\n        LogService,\r\n        CrossFrameEventService,\r\n        SiteService,\r\n        IPreviewService,\r\n        ICatalogService,\r\n        LanguageService,\r\n        ISharedDataService,\r\n        IframeManagerService,\r\n        SmarteditRoutingService])\r\n], /* @ngInject */ ExperienceService);\r\nexport { /* @ngInject */ ExperienceService };\r\n//# sourceMappingURL=ExperienceServiceOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/operators/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/iframe/IframeManagerService.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/SiteService.ts"],"map":"{\"version\":3,\"file\":\"ExperienceServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ExperienceServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ExperienceServiceOuter.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"angular\" />\r\nimport { CrossFrameEventService, ICatalogService, IDefaultExperienceParams, IExperience, IExperienceParams, IExperienceService, IPreviewService, ISharedDataService, IStorageManager, IStoragePropertiesService, LanguageService, LogService, Payload, SmarteditRoutingService } from 'smarteditcommons';\r\nimport { IframeManagerService } from './iframe/IframeManagerService';\r\nimport { SiteService } from './SiteService';\r\n/** @internal */\r\nexport declare class ExperienceService extends IExperienceService {\r\n    seStorageManager: IStorageManager;\r\n    storagePropertiesService: IStoragePropertiesService;\r\n    private logService;\r\n    private crossFrameEventService;\r\n    private siteService;\r\n    private previewService;\r\n    private catalogService;\r\n    private languageService;\r\n    private sharedDataService;\r\n    private iframeManagerService;\r\n    private routingService;\r\n    private previousExperience;\r\n    private experienceStorage;\r\n    private storageLoaded$;\r\n    constructor(seStorageManager: IStorageManager, storagePropertiesService: IStoragePropertiesService, logService: LogService, crossFrameEventService: CrossFrameEventService, siteService: SiteService, previewService: IPreviewService, catalogService: ICatalogService, languageService: LanguageService, sharedDataService: ISharedDataService, iframeManagerService: IframeManagerService, routingService: SmarteditRoutingService);\r\n    /**\r\n     * Given an object containing a siteId, catalogId, catalogVersion and catalogVersions (array of product catalog version uuid's), will return a reconstructed experience\r\n     *\r\n     */\r\n    buildAndSetExperience(params: IExperienceParams): Promise<IExperience>;\r\n    /**\r\n     * Used to update the page ID stored in the current experience and reloads the page to make the changes visible.\r\n     *\r\n     * @param newPageID the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    updateExperiencePageId(newPageID: string): Promise<any>;\r\n    /**\r\n     * Used to update the experience with the parameters provided and reloads the page to make the changes visible.\r\n     *\r\n     * @param params The object containing the paratements for the experience to be loaded.\r\n     * @param params.siteId the ID of the site that must be stored in the current experience.\r\n     * @param params.catalogId the ID of the catalog that must be stored in the current experience.\r\n     * @param params.catalogVersion the version of the catalog that must be stored in the current experience.\r\n     * @param params.pageId the ID of the page that must be stored in the current experience.\r\n     *\r\n     */\r\n    loadExperience(params: IDefaultExperienceParams): Promise<angular.ILocationService | void>;\r\n    reloadPage(): void;\r\n    updateExperiencePageContext(pageCatalogVersionUuid: string, pageId: string): Promise<IExperience>;\r\n    getCurrentExperience(): Promise<IExperience>;\r\n    setCurrentExperience(experience: IExperience): Promise<IExperience>;\r\n    hasCatalogVersionChanged(): Promise<boolean>;\r\n    initializeExperience(): Promise<IExperience>;\r\n    updateExperience(newExperience?: Payload): Promise<IExperience>;\r\n    compareWithCurrentExperience(experience: IDefaultExperienceParams): Promise<boolean>;\r\n}\r\n"}}
