{"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport * as lodash from 'lodash';\r\nimport { objectUtils, GatewayProxied, IPreviewService, LogService, PREVIEW_RESOURCE_URI, RestServiceFactory, SeDowngradeService, UrlUtils } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nlet /* @ngInject */ PreviewService = class /* @ngInject */ PreviewService extends IPreviewService {\r\n    constructor(log, loadConfigManagerService, restServiceFactory, urlUtils) {\r\n        super(urlUtils);\r\n        this.log = log;\r\n        this.loadConfigManagerService = loadConfigManagerService;\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.ticketIdIdentifier = 'ticketId';\r\n    }\r\n    createPreview(previewData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /**\r\n             * We don't know about any fields coming from other extensions, but throw error for any of the fields\r\n             * that we do know about, namely the IPreviewData interface fields\r\n             */\r\n            const requiredFields = ['catalogVersions', 'resourcePath'];\r\n            this.validatePreviewDataAttributes(previewData, requiredFields);\r\n            yield this.prepareRestService();\r\n            try {\r\n                const response = yield this.previewRestService.save(previewData);\r\n                /**\r\n                 * The response object being stringified, when using copy method, has a method named toJSON()\r\n                 * because it is originally of type angular.resource.IResource<IPreviewData> and\r\n                 * that IResource.toJSON() method is responsible to remove $promise, $resolved properties from the response object.\r\n                 */\r\n                return objectUtils.copy(response);\r\n            }\r\n            catch (err) {\r\n                this.log.error('PreviewService.createPreview() - Error creating preview');\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    }\r\n    updatePreview(previewData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const requiredFields = ['catalogVersions', 'resourcePath', 'ticketId'];\r\n            this.validatePreviewDataAttributes(previewData, requiredFields);\r\n            yield this.prepareRestService();\r\n            try {\r\n                return yield this.previewByticketRestService.update(previewData);\r\n            }\r\n            catch (err) {\r\n                this.log.error('PreviewService.updatePreview() - Error updating preview');\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    }\r\n    getResourcePathFromPreviewUrl(previewUrl) {\r\n        return this.prepareRestService().then(() => this.urlUtils.getAbsoluteURL(this.domain, previewUrl));\r\n    }\r\n    prepareRestService() {\r\n        if (!this.previewRestService || !this.previewByticketRestService) {\r\n            return this.loadConfigManagerService.loadAsObject().then((configurations) => {\r\n                const RESOURCE_URI = (configurations.previewTicketURI ||\r\n                    PREVIEW_RESOURCE_URI);\r\n                this.previewRestService = this.restServiceFactory.get(RESOURCE_URI);\r\n                this.previewByticketRestService = this.restServiceFactory.get(RESOURCE_URI, this.ticketIdIdentifier);\r\n                this.domain = configurations.domain;\r\n            }, (err) => {\r\n                this.log.error('PreviewService.getRestService() - Error loading configuration');\r\n                return Promise.reject(err);\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    validatePreviewDataAttributes(previewData, requiredFields) {\r\n        if (requiredFields) {\r\n            requiredFields.forEach((elem) => {\r\n                if (lodash.isEmpty(previewData[elem])) {\r\n                    throw new Error(`ValidatePreviewDataAttributes - ${elem} is empty`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\n/* @ngInject */ PreviewService = __decorate([\r\n    GatewayProxied(),\r\n    SeDowngradeService(IPreviewService),\r\n    __metadata(\"design:paramtypes\", [LogService,\r\n        LoadConfigManagerService,\r\n        RestServiceFactory,\r\n        UrlUtils])\r\n], /* @ngInject */ PreviewService);\r\nexport { /* @ngInject */ PreviewService };\r\n//# sourceMappingURL=PreviewServiceOuter.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/src/services/bootstrap/LoadConfigManagerService.ts"],"map":"{\"version\":3,\"file\":\"PreviewServiceOuter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PreviewServiceOuter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-container/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/PreviewServiceOuter.d.ts","writeByteOrderMark":false,"text":"import { IPreviewData, IPreviewService, LogService, RestServiceFactory, UrlUtils } from 'smarteditcommons';\r\nimport { LoadConfigManagerService } from './bootstrap/LoadConfigManagerService';\r\n/** @internal */\r\nexport declare class PreviewService extends IPreviewService {\r\n    private log;\r\n    private loadConfigManagerService;\r\n    private restServiceFactory;\r\n    private previewRestService;\r\n    private previewByticketRestService;\r\n    private domain;\r\n    private ticketIdIdentifier;\r\n    constructor(log: LogService, loadConfigManagerService: LoadConfigManagerService, restServiceFactory: RestServiceFactory, urlUtils: UrlUtils);\r\n    createPreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    updatePreview(previewData: IPreviewData): Promise<IPreviewData>;\r\n    getResourcePathFromPreviewUrl(previewUrl: string): Promise<string>;\r\n    private prepareRestService;\r\n    private validatePreviewDataAttributes;\r\n}\r\n"}}
