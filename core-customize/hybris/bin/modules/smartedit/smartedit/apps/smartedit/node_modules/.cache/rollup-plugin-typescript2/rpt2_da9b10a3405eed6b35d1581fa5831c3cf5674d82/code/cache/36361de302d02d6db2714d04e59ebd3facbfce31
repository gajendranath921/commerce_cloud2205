{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { IResizeListener, SeDowngradeService } from 'smarteditcommons';\r\nlet /* @ngInject */ ResizeListener = class /* @ngInject */ ResizeListener {\r\n    constructor() {\r\n        this.resizeListenersRegistry = new Map();\r\n        this._resizeObserver = new ResizeObserver((entries) => {\r\n            for (const entry of entries) {\r\n                const element = entry.target;\r\n                const registryElement = this.resizeListenersRegistry.get(element);\r\n                registryElement.listener();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * registers a resize listener of a given node\r\n     */\r\n    register(element, listener) {\r\n        if (!this.resizeListenersRegistry.has(element)) {\r\n            this.resizeListenersRegistry.set(element, { listener });\r\n            this._resizeObserver.observe(element);\r\n        }\r\n    }\r\n    /**\r\n     * unregisters listeners on all nodes and cleans up\r\n     */\r\n    dispose() {\r\n        this.resizeListenersRegistry.forEach((entry, element) => {\r\n            this.unregister(element);\r\n        });\r\n    }\r\n    /**\r\n     * unregisters the resize listener of a given node\r\n     */\r\n    unregister(element) {\r\n        if (this.resizeListenersRegistry.has(element)) {\r\n            this._resizeObserver.unobserve(element);\r\n            this.resizeListenersRegistry.delete(element);\r\n        }\r\n    }\r\n    /*\r\n     * for test purposes\r\n     */\r\n    _listenerCount() {\r\n        return this.resizeListenersRegistry.size;\r\n    }\r\n};\r\n/* @ngInject */ ResizeListener = __decorate([\r\n    SeDowngradeService(IResizeListener),\r\n    __metadata(\"design:paramtypes\", [])\r\n], /* @ngInject */ ResizeListener);\r\nexport { /* @ngInject */ ResizeListener };\r\n//# sourceMappingURL=ResizeListener.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/resize-observer-polyfill@1.5.1/node_modules/resize-observer-polyfill/src/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"ResizeListener.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/ResizeListener.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,cAAc,MAAM,0BAA0B,CAAC;AAEtD,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAOvE,qCAAA;IAOI;QALQ,4BAAuB,GAAmD,IAAI,GAAG,EAGtF,CAAC;QAGA,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,EAAE;YAClD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;gBACzB,MAAM,OAAO,GAAG,KAAK,CAAC,MAAqB,CAAC;gBAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAClE,eAAe,CAAC,QAAQ,EAAE,CAAC;aAC9B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,OAAoB,EAAE,QAAoB;QACtD,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACzC;IACL,CAAC;IAED;;OAEG;IACI,OAAO;QACV,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YACpD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,OAAoB;QAClC,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC3C,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAChD;IACL,CAAC;IAED;;OAEG;IACI,cAAc;QACjB,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC;IAC7C,CAAC;CACJ,CAAA;AApDD;IADC,kBAAkB,CAAC,eAAe,CAAC;;kCAqDnC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/ResizeListener.d.ts","writeByteOrderMark":false,"text":"export declare class ResizeListener {\r\n    private _resizeObserver;\r\n    private resizeListenersRegistry;\r\n    constructor();\r\n    /**\r\n     * registers a resize listener of a given node\r\n     */\r\n    register(element: HTMLElement, listener: () => void): void;\r\n    /**\r\n     * unregisters listeners on all nodes and cleans up\r\n     */\r\n    dispose(): void;\r\n    /**\r\n     * unregisters the resize listener of a given node\r\n     */\r\n    unregister(element: HTMLElement): void;\r\n    _listenerCount(): number;\r\n}\r\n"}}
