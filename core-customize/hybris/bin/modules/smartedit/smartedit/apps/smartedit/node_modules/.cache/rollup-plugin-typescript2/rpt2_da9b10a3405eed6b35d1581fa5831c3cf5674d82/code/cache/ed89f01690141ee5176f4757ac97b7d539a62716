{"code":"import { __decorate, __metadata, __param } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nimport { Inject } from '@angular/core';\r\nimport { IPositionRegistry, SeDowngradeService, YJQUERY_TOKEN } from 'smarteditcommons';\r\n/**\r\n * Service aimed at determining the list of registered DOM elements that have been repositioned, regardless of how, since it was last queried\r\n */\r\nlet /* @ngInject */ PositionRegistry = class /* @ngInject */ PositionRegistry {\r\n    constructor(yjQuery) {\r\n        this.yjQuery = yjQuery;\r\n        this.positionRegistry = [];\r\n    }\r\n    /**\r\n     * registers a given node in the repositioning registry\r\n     */\r\n    register(element) {\r\n        this.unregister(element);\r\n        this.positionRegistry.push({\r\n            element,\r\n            position: this.calculatePositionHash(element)\r\n        });\r\n    }\r\n    /**\r\n     * unregisters a given node from the repositioning registry\r\n     */\r\n    unregister(element) {\r\n        const entryToBeRemoved = this.positionRegistry.find((entry) => entry.element === element);\r\n        const index = this.positionRegistry.indexOf(entryToBeRemoved);\r\n        if (index > -1) {\r\n            this.positionRegistry.splice(index, 1);\r\n        }\r\n    }\r\n    /**\r\n     * Method returning the list of nodes having been repositioned since last query\r\n     */\r\n    getRepositionedComponents() {\r\n        return this.positionRegistry\r\n            .filter((entry) => \r\n        // to ignore elements that would keep showing here because of things like display table-inline\r\n        this.yjQuery(entry.element).height() !== 0)\r\n            .filter((entry) => {\r\n            const element = entry.element;\r\n            const newPosition = this.calculatePositionHash(element);\r\n            if (newPosition !== entry.position) {\r\n                entry.position = newPosition;\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        })\r\n            .map((entry) => entry.element);\r\n    }\r\n    /**\r\n     * unregisters all nodes and cleans up\r\n     */\r\n    dispose() {\r\n        this.positionRegistry = [];\r\n    }\r\n    /**\r\n     * for e2e test purposes\r\n     */\r\n    _listenerCount() {\r\n        return this.positionRegistry.length;\r\n    }\r\n    floor(val) {\r\n        return Math.floor(val * 100) / 100;\r\n    }\r\n    calculatePositionHash(element) {\r\n        const rootPosition = this.yjQuery('body')[0].getBoundingClientRect();\r\n        const position = element.getBoundingClientRect();\r\n        return (this.floor(position.top - rootPosition.top) +\r\n            '_' +\r\n            this.floor(position.left - rootPosition.left));\r\n    }\r\n};\r\n/* @ngInject */ PositionRegistry = __decorate([\r\n    SeDowngradeService(IPositionRegistry),\r\n    __param(0, Inject(YJQUERY_TOKEN)),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], /* @ngInject */ PositionRegistry);\r\nexport { /* @ngInject */ PositionRegistry };\r\n//# sourceMappingURL=PositionRegistry.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"PositionRegistry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/services/PositionRegistry.ts\"],\"names\":[],\"mappings\":\";AAAA;;GAEG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAW,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAOjG;;GAEG;AAEH,uCAAA;IAGI,YAA2C,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;QAFnD,qBAAgB,GAA2B,EAAE,CAAC;IAEQ,CAAC;IAE/D;;OAEG;IACI,QAAQ,CAAC,OAAoB;QAChC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;SAChD,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,OAAoB;QAClC,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;QAC1F,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACZ,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC1C;IACL,CAAC;IAED;;OAEG;IACI,yBAAyB;QAC5B,OAAO,IAAI,CAAC,gBAAgB;aACvB,MAAM,CACH,CAAC,KAAK,EAAE,EAAE;QACN,8FAA8F;QAC9F,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CACjD;aACA,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACd,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACxD,IAAI,WAAW,KAAK,KAAK,CAAC,QAAQ,EAAE;gBAChC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;gBAC7B,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,OAAO,KAAK,CAAC;aAChB;QACL,CAAC,CAAC;aACD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,OAAO;QACV,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,cAAc;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;IACxC,CAAC;IAEO,KAAK,CAAC,GAAQ;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACvC,CAAC;IAEO,qBAAqB,CAAC,OAAoB;QAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB,EAAE,CAAC;QACrE,MAAM,QAAQ,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACjD,OAAO,CACH,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC;YAC3C,GAAG;YACH,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAChD,CAAC;IACN,CAAC;CACJ,CAAA;AA7ED;IADC,kBAAkB,CAAC,iBAAiB,CAAC;IAIrB,WAAA,MAAM,CAAC,aAAa,CAAC,CAAA;;oCA0ErC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smartedit/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/PositionRegistry.d.ts","writeByteOrderMark":false,"text":"import { IPositionRegistry, YJQuery } from 'smarteditcommons';\r\n/**\r\n * Service aimed at determining the list of registered DOM elements that have been repositioned, regardless of how, since it was last queried\r\n */\r\nexport declare class PositionRegistry implements IPositionRegistry {\r\n    private yjQuery;\r\n    private positionRegistry;\r\n    constructor(yjQuery: YJQuery);\r\n    /**\r\n     * registers a given node in the repositioning registry\r\n     */\r\n    register(element: HTMLElement): void;\r\n    /**\r\n     * unregisters a given node from the repositioning registry\r\n     */\r\n    unregister(element: HTMLElement): void;\r\n    /**\r\n     * Method returning the list of nodes having been repositioned since last query\r\n     */\r\n    getRepositionedComponents(): HTMLElement[];\r\n    /**\r\n     * unregisters all nodes and cleans up\r\n     */\r\n    dispose(): void;\r\n    /**\r\n     * for e2e test purposes\r\n     */\r\n    _listenerCount(): number;\r\n    private floor;\r\n    private calculatePositionHash;\r\n}\r\n"}}
