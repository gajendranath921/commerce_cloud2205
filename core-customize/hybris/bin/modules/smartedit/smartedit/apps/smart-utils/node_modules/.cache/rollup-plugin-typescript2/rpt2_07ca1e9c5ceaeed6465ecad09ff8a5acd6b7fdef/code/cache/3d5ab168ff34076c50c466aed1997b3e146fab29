{"code":"import { __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { FormListerComponent } from '../components/form-lister/form-lister.component';\r\nimport { FormBuilderModule } from '../form-builder.module';\r\nimport { FormField, FormGrouping, FormList, InputProperties, ValidatorParameters } from '../models';\r\nimport { AsyncValidatorRegistryService } from './async-validator-registry.service';\r\nimport { ComponentRegistryService } from './component-registry.service';\r\nimport { ValidatorRegistryService } from './validator-registry.service';\r\n/**\r\n * Schema compilers service is used for compiling a schema to concrete classes for use\r\n * by the FormRendererDirective.\r\n */\r\nlet SchemaCompilerService = class SchemaCompilerService {\r\n    constructor(types, validators, asyncValidators) {\r\n        this.types = types;\r\n        this.validators = validators;\r\n        this.asyncValidators = asyncValidators;\r\n    }\r\n    /**\r\n     * Compile a schema group.\r\n     *\r\n     * @param value\r\n     * @param schema\r\n     * @returns\r\n     */\r\n    compileGroup(value, schema, options = {}) {\r\n        const abstractForms = Object.keys(schema.schemas).reduce((acc, key) => {\r\n            acc[key] = this._toAbstractForm(value ? value[key] : null, schema.schemas[key], options);\r\n            return acc;\r\n        }, {});\r\n        return new FormGrouping(abstractForms, this._getValidators(schema, options), {\r\n            component: schema.component\r\n                ? this._getComponent(schema.component, options.components)\r\n                : FormListerComponent,\r\n            inputs: new InputProperties(schema.inputs),\r\n            validatorParams: new ValidatorParameters(schema.validators, schema.asyncValidators),\r\n            persist: this._toPersist(schema.persist)\r\n        });\r\n    }\r\n    /**\r\n     * Compiles a list of values with a schema.\r\n     *\r\n     * @param values An array of values.\r\n     * @param listSchema\r\n     */\r\n    compileList(values, schema, options = {}) {\r\n        /**\r\n         * The schema list for each value since each value can have different\r\n         * schemas. Or they can have the same schema for all values in the list.\r\n         */\r\n        const schemaList = Array.isArray(schema.schema) ? schema.schema : [schema.schema];\r\n        if (!schemaList.length) {\r\n            throw Error('SchemaCompilerService - One or more schemas must be provided to compile a form list.');\r\n        }\r\n        const list = (Array.isArray(values) ? values : []).map((value, index) => {\r\n            const childSchema = schemaList[index]\r\n                ? /**\r\n                   * Get the schema one to one for the value, or get the last schema\r\n                   * which may be repeated for all values.\r\n                   */\r\n                    schemaList[index]\r\n                : schemaList[schemaList.length - 1];\r\n            return this._toAbstractForm(value, childSchema, options);\r\n        });\r\n        return new FormList(list, this._getValidators(schema, options), {\r\n            component: this._getComponent(schema.component, options.components),\r\n            inputs: new InputProperties(schema.inputs),\r\n            validatorParams: new ValidatorParameters(schema.validators, schema.asyncValidators),\r\n            persist: this._toPersist(schema.persist)\r\n        });\r\n    }\r\n    /**\r\n     * Compiles a schema field.\r\n     *\r\n     * @param value\r\n     * @param {FormFieldSchema} schema\r\n     * @returns {FormField}\r\n     */\r\n    compileField(value, schema, options = {}) {\r\n        return new FormField({ value, disabled: schema.disabled }, this._getValidators(schema, options), {\r\n            component: this._getComponent(schema.component, options.components),\r\n            inputs: new InputProperties(schema.inputs),\r\n            validatorParams: new ValidatorParameters(schema.validators, schema.asyncValidators),\r\n            persist: this._toPersist(schema.persist)\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     * Returns form validators and ayncValidators\r\n     * @param schema\r\n     * @param options\r\n     */\r\n    _getValidators(schema, options = {}) {\r\n        let validators = [];\r\n        let asyncValidators = [];\r\n        if (schema.validators) {\r\n            validators = this._mapValidator(schema.validators, this.validators, options.validators);\r\n        }\r\n        if (schema.asyncValidators) {\r\n            asyncValidators = this._mapValidator(schema.asyncValidators, this.asyncValidators, options.asyncValidators);\r\n        }\r\n        return {\r\n            validators,\r\n            asyncValidators\r\n        };\r\n    }\r\n    /**\r\n     * @internal\r\n     * @param value\r\n     * @param schema\r\n     */\r\n    _toAbstractForm(value, schema, options) {\r\n        if (schema.type === 'field') {\r\n            return this.compileField(value, schema, options);\r\n        }\r\n        if (schema.type === 'group') {\r\n            return this.compileGroup(value, schema, options);\r\n        }\r\n        return this.compileList(value, schema, options);\r\n    }\r\n    /**\r\n     * @internal\r\n     *\r\n     * Maps schema validators to actual validators in the registry and passes custom params to a validator.\r\n     * If params are undefined then the validator isn't added to the array of validators. Validators\r\n     * that are found the inline registry will take precedence of those in registries.\r\n     */\r\n    _mapValidator(validators, registry, inline = {}) {\r\n        return Object.keys(validators).reduce((acc, name) => {\r\n            const params = validators[name];\r\n            if (params !== undefined) {\r\n                const fn = inline[name] ? inline[name] : registry.get(name);\r\n                if (!fn) {\r\n                    throw new Error(`SchemaCompilerService - Validator not found in ${this.validators.constructor.name} for: ${name}.`);\r\n                }\r\n                acc.push(fn(params));\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n    /**\r\n     * @internal\r\n     * Sets default to true if parameter persist is undefined.\r\n     */\r\n    _toPersist(persist = true) {\r\n        return persist;\r\n    }\r\n    /**\r\n     * @internal\r\n     * Decides if should get the type from the inline map or registry.\r\n     * If no component is found, it would throw an error.\r\n     *\r\n     * @param name The name of the component in the registry.\r\n     * @param components An component type name, used for inline components.\r\n     */\r\n    _getComponent(name, components = {}) {\r\n        const comp = components[name] ? components[name] : this.types.get(name);\r\n        if (!comp) {\r\n            throw new Error(`SchemaCompilerService - Did not find component for: ${name}.`);\r\n        }\r\n        return comp;\r\n    }\r\n};\r\nSchemaCompilerService = __decorate([\r\n    Injectable({\r\n        providedIn: FormBuilderModule\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ComponentRegistryService,\r\n        ValidatorRegistryService,\r\n        AsyncValidatorRegistryService])\r\n], SchemaCompilerService);\r\nexport { SchemaCompilerService };\r\n//# sourceMappingURL=schema-compiler.service.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+forms@8.2.14_e9fbe5720e9434eb9ae0f6720f1ca3f4/node_modules/@angular/forms/forms.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/components/form-lister/form-lister.component.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/form-builder.module.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/services/async-validator-registry.service.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/services/component-registry.service.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/services/registry.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/services/validator-registry.service.ts"],"map":"{\"version\":3,\"file\":\"schema-compiler.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modules/form-builder/services/schema-compiler.service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/modules/form-builder/services/schema-compiler.service.d.ts","writeByteOrderMark":false,"text":"import { FormField, FormFieldSchema, FormGrouping, FormGroupSchema, FormList, FormListSchema } from '../models';\r\nimport { AsyncValidatorMap, AsyncValidatorRegistryService } from './async-validator-registry.service';\r\nimport { ComponentRegistryService, ComponentTypeMap } from './component-registry.service';\r\nimport { ValidatorMap, ValidatorRegistryService } from './validator-registry.service';\r\n/**\r\n * Options to be passed inline into the compiler.\r\n */\r\nexport interface SchemaCompilerOptions {\r\n    /**\r\n     * A map of Angular components to be passed inline. Component found\r\n     * in this map will take precedence of those from the registry.\r\n     */\r\n    components?: ComponentTypeMap;\r\n    /**\r\n     * A map of validator functions to be passed inline.\r\n     * Validators found in this map will take precedence of those\r\n     * taken from the registry.\r\n     */\r\n    validators?: ValidatorMap;\r\n    /**\r\n     * A map of async validators to be passed inline.\r\n     * Validators found in this map will take precedence of those\r\n     * taken from the registry.\r\n     */\r\n    asyncValidators?: AsyncValidatorMap;\r\n}\r\n/**\r\n * Schema compilers service is used for compiling a schema to concrete classes for use\r\n * by the FormRendererDirective.\r\n */\r\nexport declare class SchemaCompilerService {\r\n    private types;\r\n    private validators;\r\n    private asyncValidators;\r\n    constructor(types: ComponentRegistryService, validators: ValidatorRegistryService, asyncValidators: AsyncValidatorRegistryService);\r\n    /**\r\n     * Compile a schema group.\r\n     *\r\n     * @param value\r\n     * @param schema\r\n     * @returns\r\n     */\r\n    compileGroup(value: any | null, schema: FormGroupSchema, options?: SchemaCompilerOptions): FormGrouping;\r\n    /**\r\n     * Compiles a list of values with a schema.\r\n     *\r\n     * @param values An array of values.\r\n     * @param listSchema\r\n     */\r\n    compileList(values: any[], schema: FormListSchema, options?: SchemaCompilerOptions): FormList;\r\n    /**\r\n     * Compiles a schema field.\r\n     *\r\n     * @param value\r\n     * @param {FormFieldSchema} schema\r\n     * @returns {FormField}\r\n     */\r\n    compileField(value: any, schema: FormFieldSchema, options?: SchemaCompilerOptions): FormField;\r\n    /**\r\n     * @internal\r\n     * Returns form validators and ayncValidators\r\n     * @param schema\r\n     * @param options\r\n     */\r\n    private _getValidators;\r\n    /**\r\n     * @internal\r\n     * @param value\r\n     * @param schema\r\n     */\r\n    private _toAbstractForm;\r\n    /**\r\n     * @internal\r\n     *\r\n     * Maps schema validators to actual validators in the registry and passes custom params to a validator.\r\n     * If params are undefined then the validator isn't added to the array of validators. Validators\r\n     * that are found the inline registry will take precedence of those in registries.\r\n     */\r\n    private _mapValidator;\r\n    /**\r\n     * @internal\r\n     * Sets default to true if parameter persist is undefined.\r\n     */\r\n    private _toPersist;\r\n    /**\r\n     * @internal\r\n     * Decides if should get the type from the inline map or registry.\r\n     * If no component is found, it would throw an error.\r\n     *\r\n     * @param name The name of the component in the registry.\r\n     * @param components An component type name, used for inline components.\r\n     */\r\n    private _getComponent;\r\n}\r\n"}}
