{"code":"/** Used to build a validator for a specified list of file validator. */\r\nexport class FileValidatorFactory {\r\n    /**\r\n     * Builds a new validator for a specified list of validator objects.\r\n     * Each validator object must consist of a parameter to validate, a predicate function to run against the value and\r\n     * a message to associate with this predicate function's fail case.\r\n     *\r\n     * For example, the resulting Object Validator has a validate method that takes two parameters:\r\n     * an Object to validate against and an optional Contextual Error List to append errors to.\r\n     *\r\n     * ```\r\n     *      const validators = [{\r\n     *          subject: 'code',\r\n     *          validate: function(code) {\r\n     *              return code !== 'Invalid';\r\n     *          },\r\n     *          message: 'Code must not be \"Invalid\"'\r\n     *      }]\r\n     *\r\n     *      const validator = fileValidatorFactory.build(validators);\r\n     *      const errorsContext = []\r\n     *      const objectUnderValidation = {\r\n     *          code: 'Invalid'\r\n     *      };\r\n     *      const isValid = validator.validate(objectUnderValidation, errorsContext);\r\n     * ```\r\n     *\r\n     * The result of the above code block would be that isValid is false because it failed the predicate function of\r\n     * the single validator in the validator list and the errorsContext would be as follows:\r\n     *\r\n     * ```\r\n     *      [{\r\n     *          subject: 'code',\r\n     *          message: 'Code must not be \"Invalid\"'\r\n     *      }]\r\n     * ```\r\n     *\r\n     * @param validators A list of validator objects as specified above.\r\n     * @returns A validator that consists of a validate function.\r\n     */\r\n    build(validators) {\r\n        return {\r\n            validate: (objectUnderValidation, maxUploadFileSize, errorsContext) => this.validate(validators, objectUnderValidation, maxUploadFileSize, errorsContext)\r\n        };\r\n    }\r\n    validate(validators, objectUnderValidation, objectCompareValidation, errorsContext) {\r\n        errorsContext = errorsContext || [];\r\n        validators.forEach((validator) => {\r\n            const valueToValidate = objectUnderValidation[validator.subject];\r\n            if (!validator.validate(valueToValidate, objectCompareValidation)) {\r\n                errorsContext.push({\r\n                    subject: validator.subject,\r\n                    message: validator.message\r\n                });\r\n            }\r\n        });\r\n        return errorsContext.length === 0;\r\n    }\r\n}\r\n//# sourceMappingURL=file-validator.factory.js.map","references":[],"map":"{\"version\":3,\"file\":\"file-validator.factory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/file-validator-factory/file-validator.factory.ts\"],\"names\":[],\"mappings\":\"AA2BA,wEAAwE;AACxE,MAAM,OAAO,oBAAoB;IAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqCG;IACI,KAAK,CAAC,UAAqC;QAC9C,OAAO;YACH,QAAQ,EAAE,CACN,qBAA0B,EAC1B,iBAA0B,EAC1B,aAA8B,EACvB,EAAE,CACT,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,aAAa,CAAC;SACzF,CAAC;IACN,CAAC;IAEO,QAAQ,CACZ,UAAqC,EACrC,qBAA2B,EAC3B,uBAA+B,EAC/B,aAA8B;QAE9B,aAAa,GAAG,aAAa,IAAI,EAAE,CAAC;QACpC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YAC7B,MAAM,eAAe,GAAG,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACjE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,uBAAuB,CAAC,EAAE;gBAC/D,aAAa,CAAC,IAAI,CAAC;oBACf,OAAO,EAAE,SAAS,CAAC,OAAO;oBAC1B,OAAO,EAAE,SAAS,CAAC,OAAO;iBAC7B,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;QACH,OAAO,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC;IACtC,CAAC;CACJ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/file-validator-factory/file-validator.factory.d.ts","writeByteOrderMark":false,"text":"export interface FileValidatorByProperty {\r\n    /** Property name of validated object which value is passed to the predicate. */\r\n    subject: string;\r\n    /** i18n key of the error message. */\r\n    message: string;\r\n    /** Predicate that determines whether the value is valid. */\r\n    validate: (propValue: any, compareValue: any) => boolean;\r\n}\r\nexport interface FileValidator {\r\n    validate: (fileUnderValidation: any, maxUploadFileSize?: number, errorsContext?: ErrorContext[]) => boolean;\r\n}\r\nexport interface ErrorContext {\r\n    /** A key used to identify error for specific context. */\r\n    subject: string;\r\n    /** i18n key. */\r\n    message: string;\r\n}\r\n/** Used to build a validator for a specified list of file validator. */\r\nexport declare class FileValidatorFactory {\r\n    /**\r\n     * Builds a new validator for a specified list of validator objects.\r\n     * Each validator object must consist of a parameter to validate, a predicate function to run against the value and\r\n     * a message to associate with this predicate function's fail case.\r\n     *\r\n     * For example, the resulting Object Validator has a validate method that takes two parameters:\r\n     * an Object to validate against and an optional Contextual Error List to append errors to.\r\n     *\r\n     * ```\r\n     *      const validators = [{\r\n     *          subject: 'code',\r\n     *          validate: function(code) {\r\n     *              return code !== 'Invalid';\r\n     *          },\r\n     *          message: 'Code must not be \"Invalid\"'\r\n     *      }]\r\n     *\r\n     *      const validator = fileValidatorFactory.build(validators);\r\n     *      const errorsContext = []\r\n     *      const objectUnderValidation = {\r\n     *          code: 'Invalid'\r\n     *      };\r\n     *      const isValid = validator.validate(objectUnderValidation, errorsContext);\r\n     * ```\r\n     *\r\n     * The result of the above code block would be that isValid is false because it failed the predicate function of\r\n     * the single validator in the validator list and the errorsContext would be as follows:\r\n     *\r\n     * ```\r\n     *      [{\r\n     *          subject: 'code',\r\n     *          message: 'Code must not be \"Invalid\"'\r\n     *      }]\r\n     * ```\r\n     *\r\n     * @param validators A list of validator objects as specified above.\r\n     * @returns A validator that consists of a validate function.\r\n     */\r\n    build(validators: FileValidatorByProperty[]): FileValidator;\r\n    private validate;\r\n}\r\n"}}
