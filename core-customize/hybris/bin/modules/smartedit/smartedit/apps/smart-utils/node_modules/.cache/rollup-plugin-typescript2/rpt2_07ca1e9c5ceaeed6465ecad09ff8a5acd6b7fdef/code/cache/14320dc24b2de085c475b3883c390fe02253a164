{"code":"export {};\r\n//# sourceMappingURL=interfaces.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/services/index.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/abstract-form.ts"],"map":"{\"version\":3,\"file\":\"interfaces.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/modules/form-builder/models/interfaces.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/modules/form-builder/models/interfaces.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { AsyncValidatorMap, ComponentTypeMap, ValidatorMap } from '../services';\r\nimport { AbstractForm } from './abstract-form';\r\nexport interface FormBuilderConfig {\r\n    types?: ComponentTypeMap;\r\n    validators?: ValidatorMap;\r\n    asyncValidators?: AsyncValidatorMap;\r\n}\r\nexport interface AbstractFormSchemas {\r\n    [prop: string]: FormSchema;\r\n}\r\nexport interface AbstractFormSchema {\r\n    type: 'field' | 'group' | 'list';\r\n    /**\r\n     * Inputs to be set onto the the dynamic form components.\r\n     */\r\n    inputs?: {\r\n        [key: string]: any;\r\n    };\r\n    /**\r\n     * Used to determine if current form property is persistable when\r\n     * getPersistedValue is called on the form element. If property does not persist\r\n     * than it will not be part of the generated object model.\r\n     */\r\n    persist?: boolean;\r\n}\r\n/**\r\n * Dynamic descriptor for a form list.\r\n */\r\nexport interface FormListSchema extends AbstractFormSchema {\r\n    /**\r\n     * The component.\r\n     */\r\n    component: string;\r\n    /**\r\n     * If only a single schema is provided, itt will be used for all values.\r\n     * If an array of schemas are provided then each value at\r\n     * their index will get the schema provided at the index in this\r\n     * list. If the array is shorter than the array of values then\r\n     * the last schema will be used for the rest of the values.\r\n     */\r\n    schema: FormSchema | FormSchema[];\r\n    /**\r\n     * A map of validators registered in the ValidatorRegistry for\r\n     * validating the field. The index represents the name of the validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    validators?: {\r\n        [index: string]: any;\r\n    };\r\n    /**\r\n     * A map of async validators registered in the AsyncValidatorRegistry for\r\n     * validating the field. The index represents the name of the async validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    asyncValidators?: {\r\n        [index: string]: any;\r\n    };\r\n}\r\n/**\r\n * Dynamic descriptor for a group field.\r\n */\r\nexport interface FormGroupSchema extends AbstractFormSchema {\r\n    /**\r\n     * The component id registered in the ComponentRegistry for\r\n     * rendering the group component. If none is specified\r\n     * the default group component is used to list the forms.\r\n     */\r\n    component?: string;\r\n    /**\r\n     * A map of AbstractFormSchema.\r\n     */\r\n    schemas: AbstractFormSchemas;\r\n    /**\r\n     * A map of validators registered in the ValidatorRegistry for\r\n     * validating the field. The index represents the name of the validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    validators?: {\r\n        [index: string]: any;\r\n    };\r\n    /**\r\n     * A map of async validators registered in the AsyncValidatorRegistry for\r\n     * validating the field. The index represents the name of the async validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    asyncValidators?: {\r\n        [index: string]: any;\r\n    };\r\n}\r\n/**\r\n * Dynamic descriptor for a form field.\r\n */\r\nexport interface FormFieldSchema extends AbstractFormSchema {\r\n    /**\r\n     * The component id registered in the ComponentRegistry for\r\n     * rendering the form field.\r\n     */\r\n    component: string;\r\n    /**\r\n     * Sets disabled in the constructor of the FormControl.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * A map of validators registered in the ValidatorRegistry for\r\n     * validating the field. The index represents the name of the validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    validators?: {\r\n        [index: string]: any;\r\n    };\r\n    /**\r\n     * A map of async validators registered in the AsyncValidatorRegistry for\r\n     * validating the field. The index represents the name of the async validator, and the value\r\n     * represents parameters to be passed to the validator. If the value is\r\n     * set to undefined, the validator wont be added to the FormControl.\r\n     */\r\n    asyncValidators?: {\r\n        [index: string]: any;\r\n    };\r\n}\r\nexport declare type FormSchema = FormGroupSchema | FormFieldSchema | FormListSchema;\r\n/**\r\n * Map of forms on the FormGroup's 'forms' property.\r\n */\r\nexport interface AbstractForms {\r\n    [index: string]: AbstractForm;\r\n}\r\n/**\r\n * Implemented by a component for listening to changes when an input is changed dynamically\r\n * through the AbstractForm setInput method.\r\n * @example\r\n * <pre>\r\n *     @Component({ ... })\r\n *     export class DynamicFormComponent implements DynamicInputChange {\r\n *         onDynamicInputChange() {\r\n *             ...\r\n *         }\r\n *     }\r\n * <pre>\r\n */\r\nexport interface DynamicInputChange {\r\n    onDynamicInputChange(): void;\r\n}\r\n"}}
