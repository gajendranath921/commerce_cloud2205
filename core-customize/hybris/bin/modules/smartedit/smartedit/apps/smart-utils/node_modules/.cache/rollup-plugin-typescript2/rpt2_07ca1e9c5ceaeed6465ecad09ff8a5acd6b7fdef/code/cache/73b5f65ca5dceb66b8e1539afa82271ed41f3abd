{"code":"import { __decorate } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport * as lodash from 'lodash';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:BackendEntry\r\n * @description\r\n * Invocations of {@link @smartutils.services:HttpBackendService} when, whenGET, whenPOST, whenPUT, whenDELETE\r\n * all return an instance of {@link @smartutils.services:BackendEntry BackendEntry}\r\n * It is used to specify the mocked response for the given conditions.\r\n */\r\nexport class BackendEntry {\r\n    constructor(pattern, matchingPayload) {\r\n        this.pattern = pattern;\r\n        this.matchingPayload = matchingPayload;\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:BackendEntry#respond\r\n     * @methodOf @smartutils.services:BackendEntry\r\n     * @description\r\n     * @param {BackendRespond} mock the {@link @smartutils.object:BackendRespond} to return for the given conditions\r\n     */\r\n    respond(mock) {\r\n        this.mock = mock;\r\n        return this;\r\n    }\r\n    passThrough() {\r\n        //\r\n    }\r\n}\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:HttpBackendService\r\n * @description\r\n * Service aimed to provide mocked backend responses for given http request patterns.\r\n * It follows the API of {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend $httpBackend}\r\n * minus a few limitations\r\n */\r\nlet HttpBackendService = class HttpBackendService {\r\n    constructor() {\r\n        this.matchLatestDefinition = false;\r\n        /* Adding PATCH method as it will fail if original request is a patch call\r\n         * See ticket: https://sapjira.wdf.sap.corp/browse/CXEC-6960\r\n         */\r\n        this.backends = {\r\n            GET: [],\r\n            POST: [],\r\n            PUT: [],\r\n            PATCH: [],\r\n            DELETE: []\r\n        };\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenGET\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenGET $httpBackend#whenGET}\r\n     * but with only the url pattern as parameter\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenGET(pattern) {\r\n        return this._whenMethod('GET', pattern);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPOST\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPOST $httpBackend#whenPOST}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPOST(pattern, matchingPayload) {\r\n        return this._whenMethod('POST', pattern, matchingPayload);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPUT\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPUT $httpBackend#whenPUT}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPUT(pattern, matchingPayload) {\r\n        return this._whenMethod('PUT', pattern, matchingPayload);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPATCH\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPATCH $httpBackend#whenPATCH}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPATCH(pattern, matchingPayload) {\r\n        return this._whenMethod('PATCH', pattern, matchingPayload);\r\n    }\r\n    /**\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPUT\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPUT $httpBackend#whenPUT}\r\n     * but with only the url pattern as parameter\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenDELETE(pattern) {\r\n        return this._whenMethod('DELETE', pattern);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#when\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#when $httpBackend#when}\r\n     * @param {string} method GET, POST, PUT, or DELETE\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    when(method, pattern, matchingPayload) {\r\n        return this._whenMethod(method, pattern, matchingPayload);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenAsync\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to legacy $httpBackend#whenAsync, use {@link @smartutils.services:HttpBackendService#when HttpBackendService#when} instead\r\n     * @param {string} method GET, POST, PUT, or DELETE\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenAsync(method, pattern, matchingPayload) {\r\n        return this._whenMethod(method, pattern, matchingPayload);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#matchLatestDefinitionEnabled\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#matchLatestDefinitionEnabled $httpBackend#matchLatestDefinitionEnabled}\r\n     * @param {boolean=false} matchLatestDefinitionEnabled if true, the last matching pattern will be picked. Otherwise the first is picked\r\n     */\r\n    matchLatestDefinitionEnabled(matchLatestDefinitionEnabled) {\r\n        this.matchLatestDefinition = matchLatestDefinitionEnabled;\r\n    }\r\n    // whenAsync\r\n    /// /////////////////////////////////\r\n    findMatchingMock(request) {\r\n        const backendEntry = (this.matchLatestDefinition\r\n            ? this.backends[request.method].slice().reverse()\r\n            : this.backends[request.method]).find((entry) => {\r\n            if (typeof entry.pattern === 'string') {\r\n                return (request.urlWithParams.endsWith(entry.pattern) &&\r\n                    this.matchingPayloadRestriction(entry, request));\r\n            }\r\n            else {\r\n                const test = entry.pattern.test(request.urlWithParams) &&\r\n                    this.matchingPayloadRestriction(entry, request);\r\n                entry.pattern.lastIndex = 0;\r\n                return test;\r\n            }\r\n        });\r\n        return backendEntry ? backendEntry.mock : undefined;\r\n    }\r\n    _whenMethod(method, pattern, matchingPayload) {\r\n        const entry = new BackendEntry(pattern, matchingPayload);\r\n        this.backends[method].push(entry);\r\n        return entry;\r\n    }\r\n    matchingPayloadRestriction(entry, request) {\r\n        return entry.matchingPayload ? lodash.isEqual(entry.matchingPayload, request.body) : true;\r\n    }\r\n};\r\nHttpBackendService = __decorate([\r\n    Injectable()\r\n], HttpBackendService);\r\nexport { HttpBackendService };\r\n//# sourceMappingURL=http-backend.service.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+common@8.2.14_@angular+core@8.2.14+rxjs@6.5.4/node_modules/@angular/common/http.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@angular+core@8.2.14_rxjs@6.5.4+zone.js@0.9.1/node_modules/@angular/core/core.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"http-backend.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/services/interceptors/backend/http-backend.service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/interceptors/backend/http-backend.service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { Cloneable, Payload, TypedMap } from '../../../dtos';\r\nexport declare type RESTMETHOD = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\r\n/**\r\n * @ngdoc object\r\n * @name @smartutils.object:BackendRespond\r\n * @description\r\n * Mocked response of a {@link @smartutils.services:HttpBackendService HttpBackendService} invocation\r\n * It is either a Cloneable payload (returned automatically with 200 status code)\r\n * or a function returning an array of 2 arguments: the status code and the payload\r\n * if a function, it is invoked with:\r\n * @param {string=} method GET, POST, PUT or DELETE\r\n * @param {string=} url the full url with query string\r\n * @param {any=} data the payload or the request, or the POST querystring\r\n * @param {TypedMap<string>=} headers the outpbound request headers map\r\n */\r\nexport declare type BackendRespond = Payload | Payload[] | ((method?: string, url?: string, data?: any, headers?: TypedMap<string>) => [number, Payload | Payload[]] | PromiseLike<[number, Payload | Payload[]]>);\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:BackendEntry\r\n * @description\r\n * Invocations of {@link @smartutils.services:HttpBackendService} when, whenGET, whenPOST, whenPUT, whenDELETE\r\n * all return an instance of {@link @smartutils.services:BackendEntry BackendEntry}\r\n * It is used to specify the mocked response for the given conditions.\r\n */\r\nexport declare class BackendEntry {\r\n    pattern: string | RegExp;\r\n    matchingPayload?: Cloneable;\r\n    mock?: BackendRespond;\r\n    constructor(pattern: string | RegExp, matchingPayload?: Cloneable);\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:BackendEntry#respond\r\n     * @methodOf @smartutils.services:BackendEntry\r\n     * @description\r\n     * @param {BackendRespond} mock the {@link @smartutils.object:BackendRespond} to return for the given conditions\r\n     */\r\n    respond(mock: BackendRespond): BackendEntry;\r\n    passThrough(): void;\r\n}\r\nexport interface BackendEntryMap {\r\n    [index: string]: BackendEntry[];\r\n}\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:HttpBackendService\r\n * @description\r\n * Service aimed to provide mocked backend responses for given http request patterns.\r\n * It follows the API of {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend $httpBackend}\r\n * minus a few limitations\r\n */\r\nexport declare class HttpBackendService {\r\n    private matchLatestDefinition;\r\n    private backends;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenGET\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenGET $httpBackend#whenGET}\r\n     * but with only the url pattern as parameter\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenGET(pattern: string | RegExp): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPOST\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPOST $httpBackend#whenPOST}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPOST(pattern: string | RegExp, matchingPayload?: Cloneable): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPUT\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPUT $httpBackend#whenPUT}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPUT(pattern: string | RegExp, matchingPayload?: Cloneable): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPATCH\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPATCH $httpBackend#whenPATCH}\r\n     * but with only the first 2 arguments\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenPATCH(pattern: string | RegExp, matchingPayload?: Cloneable): BackendEntry;\r\n    /**\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenPUT\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#whenPUT $httpBackend#whenPUT}\r\n     * but with only the url pattern as parameter\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenDELETE(pattern: string | RegExp): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#when\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#when $httpBackend#when}\r\n     * @param {string} method GET, POST, PUT, or DELETE\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    when(method: RESTMETHOD, pattern: string | RegExp, matchingPayload?: Cloneable): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#whenAsync\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to legacy $httpBackend#whenAsync, use {@link @smartutils.services:HttpBackendService#when HttpBackendService#when} instead\r\n     * @param {string} method GET, POST, PUT, or DELETE\r\n     * @param {string | RegExp} pattern url end of the url pattern to match\r\n     * @param {Cloenable=} matchingPayload HTTP request body to be matched\r\n     * @returns {BackendEntry} the {@link @smartutils.services:BackendEntry backenEntry}\r\n     */\r\n    whenAsync(method: RESTMETHOD, pattern: string | RegExp, matchingPayload?: Cloneable): BackendEntry;\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:HttpBackendService#matchLatestDefinitionEnabled\r\n     * @methodOf @smartutils.services:HttpBackendService\r\n     * @description\r\n     * method similar to {@link https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend#matchLatestDefinitionEnabled $httpBackend#matchLatestDefinitionEnabled}\r\n     * @param {boolean=false} matchLatestDefinitionEnabled if true, the last matching pattern will be picked. Otherwise the first is picked\r\n     */\r\n    matchLatestDefinitionEnabled(matchLatestDefinitionEnabled: boolean): void;\r\n    findMatchingMock(request: HttpRequest<any>): BackendRespond | undefined;\r\n    private _whenMethod;\r\n    private matchingPayloadRestriction;\r\n}\r\n"}}
