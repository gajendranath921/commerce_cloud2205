{"code":"/**\r\n * Recursively explore schema to return a form data structure\r\n * which is used to generated dynamic forms.\r\n *\r\n * If a schema is a field, simply return the related data\r\n *\r\n * If a schema is a group or list, explore its inner\r\n * schemas and return equivalent value\r\n *\r\n * @param data persisted data object\r\n * @param schema related schema\r\n */\r\nexport const toFormValue = (data, schema) => {\r\n    if (schema.type === 'field') {\r\n        // Return related value\r\n        return data;\r\n    }\r\n    if (schema.type === 'group') {\r\n        return processGroupSchema(data, schema);\r\n    }\r\n    return processListSchema(data, schema);\r\n};\r\n/**\r\n * Process schemas of type FormGroupSchema.\r\n *\r\n * @param data persisted data object\r\n * @param schema related schema\r\n */\r\nconst processGroupSchema = (data, schema) => {\r\n    const value = {};\r\n    // Populate fields of value based on inner schemas\r\n    Object.keys(schema.schemas).forEach((key) => {\r\n        // Create inner data object with only data related to the inner schema\r\n        const innerData = getInnerData(data, key, schema.schemas[key].type);\r\n        value[key] = toFormValue(innerData, schema.schemas[key]);\r\n    });\r\n    return value;\r\n};\r\n/**\r\n * Process schemas of type FormListSchema.\r\n *\r\n * @param data persisted data object\r\n * @param schema related schema\r\n */\r\nconst processListSchema = (data, schema) => {\r\n    // If schema is a list, related data must also be a list\r\n    const listSchema = schema;\r\n    const listValue = [];\r\n    const listData = Array.isArray(data) ? data : [];\r\n    // If there is only one inner schema, treat it as an array of 1\r\n    const innerSchemas = Array.isArray(listSchema.schema) ? listSchema.schema : [listSchema.schema];\r\n    listData.forEach((el, i) => {\r\n        // If there is more data than schemas, use the last one.\r\n        if (i > innerSchemas.length - 1) {\r\n            i = innerSchemas.length - 1;\r\n        }\r\n        listValue.push(toFormValue(el, innerSchemas[i]));\r\n    });\r\n    return listValue;\r\n};\r\n/**\r\n * Return inner field of persisted data.\r\n *\r\n * If inner field is found, then it is returned\r\n * If the schema is a field, and the data field wasn't found, return null\r\n * Otherwise, the data object itself is returned.\r\n *\r\n * @param data persisted data object\r\n * @param key name of the value to retrieve from data\r\n * @param schemaType type of the related schema\r\n */\r\nconst getInnerData = (data, key, schemaType) => {\r\n    // If data is null or undefined, return null\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    const value = data[key];\r\n    if (value !== undefined) {\r\n        return value;\r\n    }\r\n    else if (schemaType === 'field') {\r\n        return null;\r\n    }\r\n    return data;\r\n};\r\n//# sourceMappingURL=to-form-value.helper.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/modules/form-builder/models/index.ts"],"map":"{\"version\":3,\"file\":\"to-form-value.helper.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modules/form-builder/to-form-value.helper.ts\"],\"names\":[],\"mappings\":\"AAKA;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAS,EAAE,MAAkB,EAAO,EAAE;IAC9D,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;QACzB,uBAAuB;QACvB,OAAO,IAAI,CAAC;KACf;IAED,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;QACzB,OAAO,kBAAkB,CAAC,IAAI,EAAE,MAAyB,CAAC,CAAC;KAC9D;IAED,OAAO,iBAAiB,CAAC,IAAI,EAAE,MAAwB,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,kBAAkB,GAAG,CAAC,IAAS,EAAE,MAAuB,EAAO,EAAE;IACnE,MAAM,KAAK,GAAQ,EAAE,CAAC;IAEtB,kDAAkD;IAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;QAChD,sEAAsE;QACtE,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;QACpE,KAAK,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,iBAAiB,GAAG,CAAC,IAAS,EAAE,MAAsB,EAAO,EAAE;IACjE,wDAAwD;IACxD,MAAM,UAAU,GAAG,MAAM,CAAC;IAC1B,MAAM,SAAS,GAAU,EAAE,CAAC;IAC5B,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;IAEjD,+DAA+D;IAC/D,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAEhG,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;QACvB,wDAAwD;QACxD,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;SAC/B;QAED,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAEF;;;;;;;;;;GAUG;AACH,MAAM,YAAY,GAAG,CAAC,IAAS,EAAE,GAAW,EAAE,UAAsC,EAAO,EAAE;IACzF,4CAA4C;IAC5C,IAAI,IAAI,IAAI,IAAI,EAAE;QACd,OAAO,IAAI,CAAC;KACf;IAED,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,KAAK,CAAC;KAChB;SAAM,IAAI,UAAU,KAAK,OAAO,EAAE;QAC/B,OAAO,IAAI,CAAC;KACf;IAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/modules/form-builder/to-form-value.helper.d.ts","writeByteOrderMark":false,"text":"import { FormSchema } from './models';\r\n/**\r\n * Recursively explore schema to return a form data structure\r\n * which is used to generated dynamic forms.\r\n *\r\n * If a schema is a field, simply return the related data\r\n *\r\n * If a schema is a group or list, explore its inner\r\n * schemas and return equivalent value\r\n *\r\n * @param data persisted data object\r\n * @param schema related schema\r\n */\r\nexport declare const toFormValue: (data: any, schema: FormSchema) => any;\r\n"}}
