{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport * as CryptoJS from 'crypto-js';\r\n/**\r\n * @ngdoc service\r\n * @name @smartutils.services:CryptographicUtils\r\n *\r\n * @description\r\n * utility service around Cryptographic operations.\r\n */\r\nexport class CryptographicUtils {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CryptographicUtils#sha1Hash\r\n     * @methodOf @smartutils.services:CryptographicUtils\r\n     *\r\n     * @description\r\n     * A utility function that takes an input string and provides a cryptographic SHA1 hash value.\r\n     *\r\n     * @param {String} data The input string to be encrypted.\r\n     * @returns {String} the encrypted hashed result.\r\n     */\r\n    sha1Hash(data) {\r\n        return CryptoJS.SHA1(data).toString();\r\n    }\r\n    aesBase64Encrypt(base64EncodedMessage, secretPassphrase) {\r\n        return CryptoJS.AES.encrypt(CryptoJS.enc.Base64.parse(base64EncodedMessage), secretPassphrase).toString();\r\n    }\r\n    aesDecrypt(encryptedMessage, secretPassphrase) {\r\n        return CryptoJS.AES.decrypt(encryptedMessage, secretPassphrase).toString(CryptoJS.enc.Utf8);\r\n    }\r\n}\r\n//# sourceMappingURL=cryptographic-utils.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+crypto-js@3.1.43/node_modules/@types/crypto-js/index.d.ts"],"map":"{\"version\":3,\"file\":\"cryptographic-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/cryptographic-utils.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;;GAGG;AACH,OAAO,KAAK,QAAQ,MAAM,WAAW,CAAC;AAEtC;;;;;;GAMG;AACH,MAAM,OAAO,kBAAkB;IAC3B;;;;;;;;;;OAUG;IACH,QAAQ,CAAC,IAAY;QACjB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;IAED,gBAAgB,CAAC,oBAA4B,EAAE,gBAAwB;QACnE,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CACvB,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAC/C,gBAAgB,CACnB,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAED,UAAU,CAAC,gBAAwB,EAAE,gBAAwB;QACzD,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAChG,CAAC;CACJ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/cryptographic-utils.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @ngdoc service\r\n * @name @smartutils.services:CryptographicUtils\r\n *\r\n * @description\r\n * utility service around Cryptographic operations.\r\n */\r\nexport declare class CryptographicUtils {\r\n    /**\r\n     * @ngdoc method\r\n     * @name @smartutils.services:CryptographicUtils#sha1Hash\r\n     * @methodOf @smartutils.services:CryptographicUtils\r\n     *\r\n     * @description\r\n     * A utility function that takes an input string and provides a cryptographic SHA1 hash value.\r\n     *\r\n     * @param {String} data The input string to be encrypted.\r\n     * @returns {String} the encrypted hashed result.\r\n     */\r\n    sha1Hash(data: string): string;\r\n    aesBase64Encrypt(base64EncodedMessage: string, secretPassphrase: string): string;\r\n    aesDecrypt(encryptedMessage: string, secretPassphrase: string): string;\r\n}\r\n"}}
