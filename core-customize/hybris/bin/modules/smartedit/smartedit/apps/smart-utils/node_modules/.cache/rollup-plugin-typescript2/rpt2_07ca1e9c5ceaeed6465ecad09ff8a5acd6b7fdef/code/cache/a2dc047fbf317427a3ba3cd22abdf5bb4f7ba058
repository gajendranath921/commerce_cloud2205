{"code":"/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\n/*\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * @ngdoc interface\r\n * @name smarteditServicesModule.interface:ISharedDataService\r\n *\r\n * @description\r\n * Provides an abstract extensible shared data service. Used to store any data to be used either the SmartEdit\r\n * application or the SmartEdit container.\r\n *\r\n * This class serves as an interface and should be extended, not instantiated.\r\n */\r\nexport class ISharedDataService {\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#get\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Get the data for the given key.\r\n     *\r\n     * @param {String} key The key of the data to fetch\r\n     */\r\n    get(key) {\r\n        'proxyFunction';\r\n        return Promise.resolve({});\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#set\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Set data for the given key.\r\n     *\r\n     * @param {String} key The key of the data to set\r\n     * @param {object} value The value of the data to set\r\n     */\r\n    set(key, value) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#update\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Convenience method to retrieve and modify on the fly the content stored under a given key\r\n     *\r\n     * @param {String} key The key of the data to store\r\n     * @param {Function} modifyingCallback callback fed with the value stored under the given key. The callback must return the new value of the object to update.\r\n     */\r\n    update(key, modifyingCallback) {\r\n        'proxyFunction';\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#remove\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Remove the entry for the given key.\r\n     *\r\n     * @param {String} key The key of the data to remove.\r\n     * @returns {Promise<Cloneable>} A promise which resolves to the removed data for the given key.\r\n     */\r\n    remove(key) {\r\n        'proxyFunction';\r\n        return Promise.resolve({});\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#containsKey\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Checks the given key exists or not.\r\n     *\r\n     * @param {String} key The key of the data to check.\r\n     * @returns {Promise<boolean>} A promise which resolves to true if the given key is found. Otherwise false.\r\n     */\r\n    containsKey(key) {\r\n        'proxyFunction';\r\n        return Promise.resolve(true);\r\n    }\r\n}\r\n//# sourceMappingURL=i-shared-data.service.js.map","references":["/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/src/dtos/index.ts"],"map":"{\"version\":3,\"file\":\"i-shared-data.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/interfaces/i-shared-data.service.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;;;GAGG;AACH;;GAEG;AAIH;;;;;;;;;GASG;AACH,MAAM,OAAgB,kBAAkB;IACpC;;;;;;;;;OASG;IACH,GAAG,CAAC,GAAW;QACX,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;;;;OAUG;IACH,GAAG,CAAC,GAAW,EAAE,KAAgB;QAC7B,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACH,MAAM,CAAC,GAAW,EAAE,iBAAyC;QACzD,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;OAUG;IACH,MAAM,CAAC,GAAW;QACd,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;;;;OAUG;IACH,WAAW,CAAC,GAAW;QACnB,eAAe,CAAC;QAChB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACJ\"}","dts":{"name":"/home/wadmin/Documents/cloud-commerce-sample-setup-update-2211/core-customize/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/interfaces/i-shared-data.service.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\r\n * @module smartutils\r\n */\r\nimport { Cloneable } from '../dtos';\r\n/**\r\n * @ngdoc interface\r\n * @name smarteditServicesModule.interface:ISharedDataService\r\n *\r\n * @description\r\n * Provides an abstract extensible shared data service. Used to store any data to be used either the SmartEdit\r\n * application or the SmartEdit container.\r\n *\r\n * This class serves as an interface and should be extended, not instantiated.\r\n */\r\nexport declare abstract class ISharedDataService {\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#get\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Get the data for the given key.\r\n     *\r\n     * @param {String} key The key of the data to fetch\r\n     */\r\n    get(key: string): Promise<Cloneable>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#set\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Set data for the given key.\r\n     *\r\n     * @param {String} key The key of the data to set\r\n     * @param {object} value The value of the data to set\r\n     */\r\n    set(key: string, value: Cloneable): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#update\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Convenience method to retrieve and modify on the fly the content stored under a given key\r\n     *\r\n     * @param {String} key The key of the data to store\r\n     * @param {Function} modifyingCallback callback fed with the value stored under the given key. The callback must return the new value of the object to update.\r\n     */\r\n    update(key: string, modifyingCallback: (oldValue: any) => any): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#remove\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Remove the entry for the given key.\r\n     *\r\n     * @param {String} key The key of the data to remove.\r\n     * @returns {Promise<Cloneable>} A promise which resolves to the removed data for the given key.\r\n     */\r\n    remove(key: string): Promise<Cloneable>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name smarteditServicesModule.interface:ISharedDataService#containsKey\r\n     * @methodOf smarteditServicesModule.interface:ISharedDataService\r\n     *\r\n     * @description\r\n     * Checks the given key exists or not.\r\n     *\r\n     * @param {String} key The key of the data to check.\r\n     * @returns {Promise<boolean>} A promise which resolves to true if the given key is found. Otherwise false.\r\n     */\r\n    containsKey(key: string): Promise<boolean>;\r\n}\r\n"}}
