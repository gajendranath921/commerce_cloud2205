import { TerminalWritable } from '@rushstack/terminal';
import { Operation } from './Operation';
import { CommandLineConfiguration } from '../../api/CommandLineConfiguration';
export interface IOperationExecutionManagerOptions {
    quietMode: boolean;
    debugMode: boolean;
    parallelism: string | undefined;
    changedProjectsOnly: boolean;
    repoCommandLineConfiguration: CommandLineConfiguration;
    destination?: TerminalWritable;
}
/**
 * A class which manages the execution of a set of tasks with interdependencies.
 * Initially, and at the end of each task execution, all unblocked tasks
 * are added to a ready queue which is then executed. This is done continually until all
 * tasks are complete, or prematurely fails if any of the tasks fail.
 */
export declare class OperationExecutionManager {
    private readonly _operations;
    private readonly _changedProjectsOnly;
    private readonly _quietMode;
    private readonly _debugMode;
    private readonly _parallelism;
    private readonly _repoCommandLineConfiguration;
    private readonly _totalOperations;
    private readonly _outputWritable;
    private readonly _colorsNewlinesTransform;
    private readonly _streamCollator;
    private readonly _terminal;
    private _hasAnyFailures;
    private _hasAnyNonAllowedWarnings;
    private _completedOperations;
    constructor(operations: Set<Operation>, options: IOperationExecutionManagerOptions);
    private _streamCollator_onWriterActive;
    /**
     * Executes all operations which have been registered, returning a promise which is resolved when all the
     * operations are completed successfully, or rejects when any operation fails.
     */
    executeAsync(): Promise<void>;
    private _executeOperationAsync;
    /**
     * Marks an operation as having failed and marks each of its dependents as blocked
     */
    private _markAsFailed;
    /**
     * Marks an operation and all its dependents as blocked
     */
    private _markAsBlocked;
    /**
     * Marks an operation as being completed, and removes it from the dependencies list of all its dependents
     */
    private _markAsSuccess;
    /**
     * Marks an operation as being completed, but with warnings written to stderr, and removes it from the dependencies
     * list of all its dependents
     */
    private _markAsSuccessWithWarning;
    /**
     * Marks an operation as skipped.
     */
    private _markAsSkipped;
    /**
     * Marks an operation as provided by cache.
     */
    private _markAsFromCache;
    /**
     * Prints out a report of the status of each project
     */
    private _printOperationStatus;
    private _writeCondensedSummary;
    private _writeDetailedSummary;
    private _writeSummaryHeader;
}
//# sourceMappingURL=OperationExecutionManager.d.ts.map