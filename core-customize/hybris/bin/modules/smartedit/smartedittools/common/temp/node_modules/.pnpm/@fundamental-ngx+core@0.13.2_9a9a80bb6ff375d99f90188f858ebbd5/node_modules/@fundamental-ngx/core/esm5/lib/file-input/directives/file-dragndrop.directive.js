/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input/directives/file-dragndrop.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
/**
 * Directive that handles the drag and drop feature of the file input.
 */
var FileDragndropDirective = /** @class */ (function () {
    function FileDragndropDirective() {
        /**
         * Whether multiple files can be dropped at once.
         */
        this.multiple = true;
        /**
         * Whether selecting of new files is disabled.
         */
        this.disabled = false;
        /**
         * Whether drag and drop is enabled. Disables this directive.
         */
        this.dragndrop = true;
        /**
         * Event emitted when files are selected. Passes back an array of files.
         */
        this.onFileChange = new EventEmitter();
        /**
         * Event emitted when invalid files are selected. Passes back an array of files.
         */
        this.onInvalidFiles = new EventEmitter();
        /**
         * Event emitted when the dragged file enters the dropzone.
         */
        this.onDragEnter = new EventEmitter();
        /**
         * Event emitted when the dragged file exits the dropzone.
         */
        this.onDragLeave = new EventEmitter();
        this.elementStateCounter = 0;
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    FileDragndropDirective.prototype.onDragover = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dragndrop) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    FileDragndropDirective.prototype.onDragenter = /**
     * @hidden
     * @return {?}
     */
    function () {
        ++this.elementStateCounter;
        if (this.dragndrop && this.elementStateCounter === 1) {
            this.onDragEnter.emit();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    FileDragndropDirective.prototype.onDragleave = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        --this.elementStateCounter;
        if (this.dragndrop && this.elementStateCounter === 0) {
            event.preventDefault();
            event.stopPropagation();
            this.onDragLeave.emit();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    FileDragndropDirective.prototype.onDrop = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.elementStateCounter = 0;
        if (!this.dragndrop || this.disabled) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var rawFiles = event.dataTransfer.files;
        /** @type {?} */
        var files = Array.from(rawFiles);
        if (!this.multiple && files.length > 1) {
            this.onInvalidFiles.emit(files);
            return;
        }
        /** @type {?} */
        var valid_files = [];
        /** @type {?} */
        var invalid_files = [];
        if (files.length > 0) {
            if (!this.accept) {
                files.forEach((/**
                 * @param {?} file
                 * @return {?}
                 */
                function (file) {
                    valid_files.push(file);
                }));
            }
            else {
                /** @type {?} */
                var allowed_extensions_1 = this.accept.toLocaleLowerCase().replace(/[\s.]/g, '').split(',');
                files.forEach((/**
                 * @param {?} file
                 * @return {?}
                 */
                function (file) {
                    /** @type {?} */
                    var ext = file.name.split('.')[file.name.split('.').length - 1];
                    if (allowed_extensions_1.lastIndexOf(ext) !== -1) {
                        valid_files.push(file);
                    }
                    else {
                        invalid_files.push(file);
                    }
                }));
            }
            this.onFileChange.emit(valid_files);
            if (invalid_files.length > 0) {
                this.onInvalidFiles.emit(invalid_files);
            }
        }
    };
    FileDragndropDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdFileDragnDrop]'
                },] }
    ];
    FileDragndropDirective.propDecorators = {
        multiple: [{ type: Input }],
        accept: [{ type: Input }],
        disabled: [{ type: Input }],
        dragndrop: [{ type: Input }],
        onFileChange: [{ type: Output }],
        onInvalidFiles: [{ type: Output }],
        onDragEnter: [{ type: Output }],
        onDragLeave: [{ type: Output }],
        onDragover: [{ type: HostListener, args: ['dragover', ['$event'],] }],
        onDragenter: [{ type: HostListener, args: ['dragenter', [],] }],
        onDragleave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
    return FileDragndropDirective;
}());
export { FileDragndropDirective };
if (false) {
    /**
     * Whether multiple files can be dropped at once.
     * @type {?}
     */
    FileDragndropDirective.prototype.multiple;
    /**
     * Accepted file extensions. Format: `'.png,.jpg'`.
     * @type {?}
     */
    FileDragndropDirective.prototype.accept;
    /**
     * Whether selecting of new files is disabled.
     * @type {?}
     */
    FileDragndropDirective.prototype.disabled;
    /**
     * Whether drag and drop is enabled. Disables this directive.
     * @type {?}
     */
    FileDragndropDirective.prototype.dragndrop;
    /**
     * Event emitted when files are selected. Passes back an array of files.
     * @type {?}
     */
    FileDragndropDirective.prototype.onFileChange;
    /**
     * Event emitted when invalid files are selected. Passes back an array of files.
     * @type {?}
     */
    FileDragndropDirective.prototype.onInvalidFiles;
    /**
     * Event emitted when the dragged file enters the dropzone.
     * @type {?}
     */
    FileDragndropDirective.prototype.onDragEnter;
    /**
     * Event emitted when the dragged file exits the dropzone.
     * @type {?}
     */
    FileDragndropDirective.prototype.onDragLeave;
    /**
     * @type {?}
     * @private
     */
    FileDragndropDirective.prototype.elementStateCounter;
}
//# sourceMappingURL=data:application/json;base64,