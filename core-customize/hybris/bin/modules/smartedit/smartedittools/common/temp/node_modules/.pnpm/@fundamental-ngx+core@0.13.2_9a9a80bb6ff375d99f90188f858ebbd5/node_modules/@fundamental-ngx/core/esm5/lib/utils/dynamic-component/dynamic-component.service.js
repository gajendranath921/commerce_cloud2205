/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/dynamic-component/dynamic-component.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Injectable, ApplicationRef, Injector } from '@angular/core';
import { DynamicComponentInjector } from './dynamic-component-injector';
/**
 * Service used to dynamically generate components like modals/alerts/notifications
 */
var DynamicComponentService = /** @class */ (function () {
    /** @hidden */
    function DynamicComponentService(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    /**
     * Function that creates dynamic component and injects services to allow communication between component and outside
     * @param contentType Type of the component content
     * @param componentType Type of component that should be rendered.
     * @param config Configuration that will be passed to the component.
     * @param services Services that will be injected to the component.
     */
    /**
     * Function that creates dynamic component and injects services to allow communication between component and outside
     * @template T
     * @param {?} contentType Type of the component content
     * @param {?} componentType Type of component that should be rendered.
     * @param {?} config Configuration that will be passed to the component.
     * @param {?=} services Services that will be injected to the component.
     * @return {?}
     */
    DynamicComponentService.prototype.createDynamicComponent = /**
     * Function that creates dynamic component and injects services to allow communication between component and outside
     * @template T
     * @param {?} contentType Type of the component content
     * @param {?} componentType Type of component that should be rendered.
     * @param {?} config Configuration that will be passed to the component.
     * @param {?=} services Services that will be injected to the component.
     * @return {?}
     */
    function (contentType, componentType, config, services) {
        // Dynamically inject services to component
        /** @type {?} */
        var configMap = new WeakMap();
        if (services) {
            services.forEach((/**
             * @param {?} service
             * @return {?}
             */
            function (service) { return configMap.set(service.constructor, service); }));
        }
        // Prepare component
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        /** @type {?} */
        var componentRef = componentFactory.create(new DynamicComponentInjector(this.injector, configMap));
        this.appRef.attachView(componentRef.hostView);
        // Assign component attributes
        /** @type {?} */
        var configObj = Object.assign({}, config);
        Object.keys(configObj).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (key !== 'data') {
                componentRef.instance[key] = configObj[key];
            }
        }));
        componentRef.instance.childComponentType = contentType;
        // Render component
        /** @type {?} */
        var componentEl = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        if (configObj.container !== 'body') {
            configObj.container.appendChild(componentEl);
        }
        else {
            document.body.appendChild(componentEl);
        }
        return componentRef;
    };
    /** Function that destroys dynamic component */
    /**
     * Function that destroys dynamic component
     * @param {?} componentRef
     * @return {?}
     */
    DynamicComponentService.prototype.destroyComponent = /**
     * Function that destroys dynamic component
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.appRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    DynamicComponentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DynamicComponentService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    return DynamicComponentService;
}());
export { DynamicComponentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicComponentService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    DynamicComponentService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    DynamicComponentService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9keW5hbWljLWNvbXBvbmVudC9keW5hbWljLWNvbXBvbmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILHdCQUF3QixFQUN4QixVQUFVLEVBQ1YsY0FBYyxFQUNkLFFBQVEsRUFJWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU14RTtJQUdJLGNBQWM7SUFDZCxpQ0FDWSx3QkFBa0QsRUFDbEQsTUFBc0IsRUFDdEIsUUFBa0I7UUFGbEIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQzNCLENBQUM7SUFFSjs7Ozs7O09BTUc7Ozs7Ozs7Ozs7SUFDSSx3REFBc0I7Ozs7Ozs7OztJQUE3QixVQUNJLFdBQTJELEVBQzNELGFBQXdCLEVBQ3hCLE1BQThCLEVBQzlCLFFBQWdCOzs7WUFJVixTQUFTLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDL0IsSUFBSSxRQUFRLEVBQUU7WUFDVixRQUFRLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxFQUEzQyxDQUEyQyxFQUFDLENBQUE7U0FDM0U7OztZQUdLLGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUM7O1lBQ3ZGLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O1lBR3hDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUM7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxHQUFHO1lBQzlCLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDL0M7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUNILFlBQVksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsV0FBVyxDQUFDOzs7WUFHakQsV0FBVyxHQUFHLG1CQUFBLENBQUMsbUJBQUEsWUFBWSxDQUFDLFFBQVEsRUFBd0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBZTtRQUMvRixJQUFJLFNBQVMsQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO1lBQ2hDLFNBQVMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDSCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMxQztRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFRCwrQ0FBK0M7Ozs7OztJQUN4QyxrREFBZ0I7Ozs7O0lBQXZCLFVBQXdCLFlBQStCO1FBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Z0JBM0RKLFVBQVU7Ozs7Z0JBZFAsd0JBQXdCO2dCQUV4QixjQUFjO2dCQUNkLFFBQVE7O0lBd0VaLDhCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E1RFksdUJBQXVCOzs7Ozs7SUFJNUIsMkRBQTBEOzs7OztJQUMxRCx5Q0FBOEI7Ozs7O0lBQzlCLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIEluamVjdGFibGUsXG4gICAgQXBwbGljYXRpb25SZWYsXG4gICAgSW5qZWN0b3IsXG4gICAgRW1iZWRkZWRWaWV3UmVmLFxuICAgIENvbXBvbmVudFJlZixcbiAgICBUeXBlLCBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRJbmplY3RvciB9IGZyb20gJy4vZHluYW1pYy1jb21wb25lbnQtaW5qZWN0b3InO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudENvbmZpZyB9IGZyb20gJy4vZHluYW1pYy1jb21wb25lbnQtY29uZmlnJztcblxuLyoqXG4gKiBTZXJ2aWNlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgY29tcG9uZW50cyBsaWtlIG1vZGFscy9hbGVydHMvbm90aWZpY2F0aW9uc1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRHluYW1pY0NvbXBvbmVudFNlcnZpY2Uge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBkeW5hbWljIGNvbXBvbmVudCBhbmQgaW5qZWN0cyBzZXJ2aWNlcyB0byBhbGxvdyBjb21tdW5pY2F0aW9uIGJldHdlZW4gY29tcG9uZW50IGFuZCBvdXRzaWRlXG4gICAgICogQHBhcmFtIGNvbnRlbnRUeXBlIFR5cGUgb2YgdGhlIGNvbXBvbmVudCBjb250ZW50XG4gICAgICogQHBhcmFtIGNvbXBvbmVudFR5cGUgVHlwZSBvZiBjb21wb25lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICogQHBhcmFtIGNvbmZpZyBDb25maWd1cmF0aW9uIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0gc2VydmljZXMgU2VydmljZXMgdGhhdCB3aWxsIGJlIGluamVjdGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUR5bmFtaWNDb21wb25lbnQ8VD4oXG4gICAgICAgIGNvbnRlbnRUeXBlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgVHlwZTxhbnk+IHwgc3RyaW5nIHwgT2JqZWN0LFxuICAgICAgICBjb21wb25lbnRUeXBlOiBUeXBlPGFueT4sXG4gICAgICAgIGNvbmZpZzogRHluYW1pY0NvbXBvbmVudENvbmZpZyxcbiAgICAgICAgc2VydmljZXM/OiBhbnlbXVxuICAgICk6IENvbXBvbmVudFJlZjxUPiB7XG5cbiAgICAgICAgLy8gRHluYW1pY2FsbHkgaW5qZWN0IHNlcnZpY2VzIHRvIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBjb25maWdNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICBpZiAoc2VydmljZXMpIHtcbiAgICAgICAgICAgIHNlcnZpY2VzLmZvckVhY2goc2VydmljZSA9PiBjb25maWdNYXAuc2V0KHNlcnZpY2UuY29uc3RydWN0b3IsIHNlcnZpY2UpKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJlcGFyZSBjb21wb25lbnRcbiAgICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudFR5cGUpO1xuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZShuZXcgRHluYW1pY0NvbXBvbmVudEluamVjdG9yKHRoaXMuaW5qZWN0b3IsIGNvbmZpZ01hcCkpO1xuICAgICAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG5cbiAgICAgICAgLy8gQXNzaWduIGNvbXBvbmVudCBhdHRyaWJ1dGVzXG4gICAgICAgIGNvbnN0IGNvbmZpZ09iaiA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG4gICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZ09iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlW2tleV0gPSBjb25maWdPYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jaGlsZENvbXBvbmVudFR5cGUgPSBjb250ZW50VHlwZTtcblxuICAgICAgICAvLyBSZW5kZXIgY29tcG9uZW50XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEVsID0gKGNvbXBvbmVudFJlZi5ob3N0VmlldyBhcyBFbWJlZGRlZFZpZXdSZWY8YW55Pikucm9vdE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBpZiAoY29uZmlnT2JqLmNvbnRhaW5lciAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICBjb25maWdPYmouY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbXBvbmVudEVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29tcG9uZW50RWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcbiAgICB9XG5cbiAgICAvKiogRnVuY3Rpb24gdGhhdCBkZXN0cm95cyBkeW5hbWljIGNvbXBvbmVudCAqL1xuICAgIHB1YmxpYyBkZXN0cm95Q29tcG9uZW50KGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hcHBSZWYuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgICAgICBjb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgIH1cblxufVxuIl19