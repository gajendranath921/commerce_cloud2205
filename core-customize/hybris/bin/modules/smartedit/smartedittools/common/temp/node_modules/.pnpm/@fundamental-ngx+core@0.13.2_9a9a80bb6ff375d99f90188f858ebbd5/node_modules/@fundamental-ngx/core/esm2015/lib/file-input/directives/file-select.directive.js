/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input/directives/file-select.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener, HostBinding } from '@angular/core';
/**
 * Directive tool to facilitate interacting with a native file input element.
 */
export class FileSelectDirective {
    constructor() {
        /**
         * Whether the input should accept multiple file selections.
         */
        this.multiple = true;
        /**
         * Event emitted when files are selected.
         */
        this.onFileSelect = new EventEmitter();
    }
    /**
     * @hidden
     * @return {?}
     */
    get multipleBinding() {
        return this.multiple ? '' : undefined;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        if (event.target instanceof HTMLInputElement) {
            /** @type {?} */
            const elRef = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            const files = elRef.files;
            /** @type {?} */
            const fileArray = Array.from(files);
            if (files.length) {
                this.onFileSelect.emit(fileArray);
            }
        }
    }
}
FileSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdFileSelect]',
            },] }
];
FileSelectDirective.propDecorators = {
    multiple: [{ type: Input }],
    onFileSelect: [{ type: Output }],
    multipleBinding: [{ type: HostBinding, args: ['attr.multiple',] }],
    onChange: [{ type: HostListener, args: ['change', ['$event'],] }]
};
if (false) {
    /**
     * Whether the input should accept multiple file selections.
     * @type {?}
     * @private
     */
    FileSelectDirective.prototype.multiple;
    /**
     * Event emitted when files are selected.
     * @type {?}
     */
    FileSelectDirective.prototype.onFileSelect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtaW5wdXQvZGlyZWN0aXZlcy9maWxlLXNlbGVjdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBUTFELE1BQU0sT0FBTyxtQkFBbUI7SUFIaEM7Ozs7UUFPWSxhQUFRLEdBQVksSUFBSSxDQUFDOzs7O1FBSXhCLGlCQUFZLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFvQjdFLENBQUM7Ozs7O0lBakJHLElBQ0ksZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQzs7Ozs7O0lBSUQsUUFBUSxDQUFDLEtBQVk7UUFDakIsSUFBSSxLQUFLLENBQUMsTUFBTSxZQUFZLGdCQUFnQixFQUFFOztrQkFDcEMsS0FBSyxHQUFxQixDQUFDLG1CQUFrQixLQUFLLENBQUMsTUFBTSxFQUFBLENBQUM7O2tCQUMxRCxLQUFLLEdBQWEsS0FBSyxDQUFDLEtBQUs7O2tCQUM3QixTQUFTLEdBQVcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDM0MsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3JDO1NBQ0o7SUFDTCxDQUFDOzs7WUE5QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7YUFDN0I7Ozt1QkFJSSxLQUFLOzJCQUlMLE1BQU07OEJBSU4sV0FBVyxTQUFDLGVBQWU7dUJBTTNCLFlBQVksU0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7O0lBZGxDLHVDQUNpQzs7Ozs7SUFHakMsMkNBQ3lFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdG9vbCB0byBmYWNpbGl0YXRlIGludGVyYWN0aW5nIHdpdGggYSBuYXRpdmUgZmlsZSBpbnB1dCBlbGVtZW50LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmZEZpbGVTZWxlY3RdJyxcbn0pXG5leHBvcnQgY2xhc3MgRmlsZVNlbGVjdERpcmVjdGl2ZSB7XG5cbiAgICAvKiogV2hldGhlciB0aGUgaW5wdXQgc2hvdWxkIGFjY2VwdCBtdWx0aXBsZSBmaWxlIHNlbGVjdGlvbnMuICovXG4gICAgQElucHV0KClcbiAgICBwcml2YXRlIG11bHRpcGxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gZmlsZXMgYXJlIHNlbGVjdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IG9uRmlsZVNlbGVjdDogRXZlbnRFbWl0dGVyPEZpbGVbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPEZpbGVbXT4oKTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLm11bHRpcGxlJylcbiAgICBnZXQgbXVsdGlwbGVCaW5kaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGxlID8gJycgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdExpc3RlbmVyKCdjaGFuZ2UnLCBbJyRldmVudCddKVxuICAgIG9uQ2hhbmdlKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZWxSZWY6IEhUTUxJbnB1dEVsZW1lbnQgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzOiBGaWxlTGlzdCA9IGVsUmVmLmZpbGVzO1xuICAgICAgICAgICAgY29uc3QgZmlsZUFycmF5OiBGaWxlW10gPSBBcnJheS5mcm9tKGZpbGVzKTtcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRmlsZVNlbGVjdC5lbWl0KGZpbGVBcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=