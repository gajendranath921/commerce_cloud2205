/**
 * @fileoverview added by tsickle
 * Generated from: lib/datetime-picker/models/fd-datetime.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Default date with time model used by the fundamental components.
 */
import { FdDate } from '../../calendar/models/fd-date';
export class FdDatetime {
    /**
     * Static function to get the current date in FdDateTime form.
     * @return {?}
     */
    static getToday() {
        /** @type {?} */
        const date = new Date();
        /** @type {?} */
        const time = { hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds() };
        return new FdDatetime(FdDate.getToday(), time);
    }
    /**
     * Constructor to build a FdDateTime object from a FdDate and TimeObject.
     * @param {?} date the FdDate object.
     * @param {?} time the TimeObject object.
     */
    constructor(date, time) {
        this.date = date;
        this.time = time;
    }
    /**
     * Get Luxon date object converted to string from FdDate.
     * @return {?}
     */
    toLocaleDateString() {
        if (this.toDate() && this.isTimeValid() && this.isDateValid()) {
            return this.toDate().toLocaleString();
        }
        else {
            return null;
        }
    }
    /**
     * Method that checks validity of time on FdDateTime object.
     * @return {?}
     */
    isTimeValid() {
        if (!this.time ||
            this.hour === undefined ||
            this.minute === undefined ||
            this.second === undefined ||
            isNaN(this.hour) ||
            isNaN(this.minute) ||
            isNaN(this.second)) {
            return false;
        }
        if (this.hour > 23 || this.hour < 0) {
            return false;
        }
        if (this.minute > 59 || this.minute < 0) {
            return false;
        }
        if (this.second > 59 || this.second < 0) {
            return false;
        }
        return true;
    }
    /**
     * Method that checks validity of date on FdDateTime object.
     * @return {?}
     */
    isDateValid() {
        return this.date && this.date.isDateValid();
    }
    /**
     * @return {?}
     */
    get year() {
        if (this.date) {
            return this.date.year;
        }
    }
    /**
     * @return {?}
     */
    get month() {
        if (this.date) {
            return this.date.month;
        }
    }
    /**
     * @return {?}
     */
    get day() {
        if (this.date) {
            return this.date.day;
        }
    }
    /**
     * @return {?}
     */
    get hour() {
        if (this.time) {
            return this.time.hour;
        }
    }
    /**
     * @return {?}
     */
    get minute() {
        if (this.time) {
            return this.time.minute;
        }
    }
    /**
     * @return {?}
     */
    get second() {
        if (this.time) {
            return this.time.second;
        }
    }
    /**
     * Get native date object from FdDate.
     * @return {?}
     */
    toDate() {
        return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second);
    }
}
if (false) {
    /** @type {?} */
    FdDatetime.prototype.date;
    /** @type {?} */
    FdDatetime.prototype.time;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmQtZGF0ZXRpbWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZXRpbWUtcGlja2VyL21vZGVscy9mZC1kYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUd2RCxNQUFNLE9BQU8sVUFBVTs7Ozs7SUFRbkIsTUFBTSxDQUFDLFFBQVE7O2NBQ0wsSUFBSSxHQUFTLElBQUksSUFBSSxFQUFFOztjQUN2QixJQUFJLEdBQWUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBQztRQUN0RyxPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7Ozs7SUFPRCxZQUNJLElBQVksRUFDWixJQUFnQjtRQUVoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDOzs7OztJQUtNLGtCQUFrQjtRQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzNELE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pDO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQzs7Ozs7SUFLTSxXQUFXO1FBRWQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ1YsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUztZQUN6QixJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVM7WUFDekIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDcEI7WUFDRSxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDakMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBS00sV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hELENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7UUFDWCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7OztJQUVELElBQVcsS0FBSztRQUNaLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDMUI7SUFDTCxDQUFDOzs7O0lBRUQsSUFBVyxHQUFHO1FBQ1YsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUN4QjtJQUNMLENBQUM7Ozs7SUFFRCxJQUFXLElBQUk7UUFDWCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7OztJQUVELElBQVcsTUFBTTtRQUNiLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDM0I7SUFDTCxDQUFDOzs7O0lBRUQsSUFBVyxNQUFNO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUMzQjtJQUNMLENBQUM7Ozs7O0lBS00sTUFBTTtRQUNULE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUYsQ0FBQztDQUNKOzs7SUFwSEcsMEJBQWE7O0lBQ2IsMEJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWZhdWx0IGRhdGUgd2l0aCB0aW1lIG1vZGVsIHVzZWQgYnkgdGhlIGZ1bmRhbWVudGFsIGNvbXBvbmVudHMuXG4gKi9cblxuaW1wb3J0IHsgRmREYXRlIH0gZnJvbSAnLi4vLi4vY2FsZW5kYXIvbW9kZWxzL2ZkLWRhdGUnO1xuaW1wb3J0IHsgVGltZU9iamVjdCB9IGZyb20gJy4uLy4uL3RpbWUvdGltZS1vYmplY3QnO1xuXG5leHBvcnQgY2xhc3MgRmREYXRldGltZSB7XG5cbiAgICBkYXRlOiBGZERhdGU7XG4gICAgdGltZTogVGltZU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBmdW5jdGlvbiB0byBnZXQgdGhlIGN1cnJlbnQgZGF0ZSBpbiBGZERhdGVUaW1lIGZvcm0uXG4gICAgICovXG4gICAgc3RhdGljIGdldFRvZGF5KCk6IEZkRGF0ZXRpbWUge1xuICAgICAgICBjb25zdCBkYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgdGltZTogVGltZU9iamVjdCA9IHtob3VyOiBkYXRlLmdldEhvdXJzKCksIG1pbnV0ZTogZGF0ZS5nZXRNaW51dGVzKCksIHNlY29uZDogZGF0ZS5nZXRTZWNvbmRzKCl9O1xuICAgICAgICByZXR1cm4gbmV3IEZkRGF0ZXRpbWUoRmREYXRlLmdldFRvZGF5KCksIHRpbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIHRvIGJ1aWxkIGEgRmREYXRlVGltZSBvYmplY3QgZnJvbSBhIEZkRGF0ZSBhbmQgVGltZU9iamVjdC5cbiAgICAgKiBAcGFyYW0gZGF0ZSB0aGUgRmREYXRlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdGltZSB0aGUgVGltZU9iamVjdCBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRhdGU6IEZkRGF0ZSxcbiAgICAgICAgdGltZTogVGltZU9iamVjdFxuICAgICkge1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBMdXhvbiBkYXRlIG9iamVjdCBjb252ZXJ0ZWQgdG8gc3RyaW5nIGZyb20gRmREYXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyB0b0xvY2FsZURhdGVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudG9EYXRlKCkgJiYgdGhpcy5pc1RpbWVWYWxpZCgpICYmIHRoaXMuaXNEYXRlVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIHZhbGlkaXR5IG9mIHRpbWUgb24gRmREYXRlVGltZSBvYmplY3QuXG4gICAgICovXG4gICAgcHVibGljIGlzVGltZVZhbGlkKCk6IGJvb2xlYW4ge1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lIHx8XG4gICAgICAgICAgICB0aGlzLmhvdXIgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdGhpcy5taW51dGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdGhpcy5zZWNvbmQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgaXNOYU4odGhpcy5ob3VyKSB8fFxuICAgICAgICAgICAgaXNOYU4odGhpcy5taW51dGUpIHx8XG4gICAgICAgICAgICBpc05hTih0aGlzLnNlY29uZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ob3VyID4gMjMgfHwgdGhpcy5ob3VyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWludXRlID4gNTkgfHwgdGhpcy5taW51dGUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZWNvbmQgPiA1OSB8fCB0aGlzLnNlY29uZCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyB2YWxpZGl0eSBvZiBkYXRlIG9uIEZkRGF0ZVRpbWUgb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBpc0RhdGVWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUuaXNEYXRlVmFsaWQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHllYXIoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS55ZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtb250aCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlLm1vbnRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkYXkoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5kYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhvdXIoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZS5ob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW51dGUoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZS5taW51dGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNlY29uZCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lLnNlY29uZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBuYXRpdmUgZGF0ZSBvYmplY3QgZnJvbSBGZERhdGUuXG4gICAgICovXG4gICAgcHVibGljIHRvRGF0ZSgpOiBEYXRlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMueWVhciwgdGhpcy5tb250aCAtIDEsIHRoaXMuZGF5LCB0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCk7XG4gICAgfVxufVxuIl19