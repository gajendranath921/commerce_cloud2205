/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-utils/modal-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ModalConfig = /** @class */ (function () {
    function ModalConfig() {
        /**
         * Aria label for the modal component element.
         */
        this.ariaLabel = null;
        /**
         * Id of the element that labels the modal.
         */
        this.ariaLabelledBy = null;
        /**
         * Id of the element that describes the modal.
         */
        this.ariaDescribedBy = null;
        /**
         * Whether the modal should have a backdrop.
         */
        this.hasBackdrop = true;
        /**
         * Global classes to apply to the backdrop.
         */
        this.backdropClass = '';
        /**
         * Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true.
         */
        this.backdropClickCloseable = true;
        /**
         * Global classes to apply to the modal panel.
         */
        this.modalPanelClass = '';
        /**
         * Whether the escape key should close the modal.
         */
        this.escKeyCloseable = true;
        /**
         * Whether the modal should be focus trapped.
         */
        this.focusTrapped = true;
        /**
         * The container that the modal is appended to. By default, it is appended to the body.
         */
        this.container = 'body';
    }
    return ModalConfig;
}());
export { ModalConfig };
if (false) {
    /**
     * Id for the modal component. If omitted, a unique one is generated.
     * @type {?}
     */
    ModalConfig.prototype.id;
    /**
     * Width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.width;
    /**
     * Height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.height;
    /**
     * Minimum width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.minWidth;
    /**
     * Minimum height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.minHeight;
    /**
     * Maximum width of the modal.
     * @type {?}
     */
    ModalConfig.prototype.maxWidth;
    /**
     * Maximum height of the modal.
     * @type {?}
     */
    ModalConfig.prototype.maxHeight;
    /**
     * Position of the modal.
     * @type {?}
     */
    ModalConfig.prototype.position;
    /**
     * Aria label for the modal component element.
     * @type {?}
     */
    ModalConfig.prototype.ariaLabel;
    /**
     * Id of the element that labels the modal.
     * @type {?}
     */
    ModalConfig.prototype.ariaLabelledBy;
    /**
     * Id of the element that describes the modal.
     * @type {?}
     */
    ModalConfig.prototype.ariaDescribedBy;
    /**
     * Whether the modal should have a backdrop.
     * @type {?}
     */
    ModalConfig.prototype.hasBackdrop;
    /**
     * Global classes to apply to the backdrop.
     * @type {?}
     */
    ModalConfig.prototype.backdropClass;
    /**
     * Whether clicking on the backdrop should close the modal. Only works if hasBackdrop is true.
     * @type {?}
     */
    ModalConfig.prototype.backdropClickCloseable;
    /**
     * Global classes to apply to the modal panel.
     * @type {?}
     */
    ModalConfig.prototype.modalPanelClass;
    /**
     * Whether the escape key should close the modal.
     * @type {?}
     */
    ModalConfig.prototype.escKeyCloseable;
    /**
     * Whether the modal should be focus trapped.
     * @type {?}
     */
    ModalConfig.prototype.focusTrapped;
    /**
     * The container that the modal is appended to. By default, it is appended to the body.
     * @type {?}
     */
    ModalConfig.prototype.container;
    /**
     * Data to pass along to the content through the ModalRef.
     * @type {?}
     */
    ModalConfig.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGFsL21vZGFsLXV0aWxzL21vZGFsLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQU1BO0lBQUE7Ozs7UUEyQkksY0FBUyxHQUFZLElBQUksQ0FBQzs7OztRQUcxQixtQkFBYyxHQUFZLElBQUksQ0FBQzs7OztRQUcvQixvQkFBZSxHQUFZLElBQUksQ0FBQzs7OztRQUdoQyxnQkFBVyxHQUFhLElBQUksQ0FBQzs7OztRQUc3QixrQkFBYSxHQUFZLEVBQUUsQ0FBQzs7OztRQUc1QiwyQkFBc0IsR0FBYSxJQUFJLENBQUM7Ozs7UUFHeEMsb0JBQWUsR0FBWSxFQUFFLENBQUM7Ozs7UUFHOUIsb0JBQWUsR0FBYSxJQUFJLENBQUM7Ozs7UUFHakMsaUJBQVksR0FBYSxJQUFJLENBQUM7Ozs7UUFHOUIsY0FBUyxHQUEwQixNQUFNLENBQUM7SUFJOUMsQ0FBQztJQUFELGtCQUFDO0FBQUQsQ0FBQyxBQTFERCxJQTBEQzs7Ozs7OztJQXZERyx5QkFBWTs7Ozs7SUFHWiw0QkFBZTs7Ozs7SUFHZiw2QkFBZ0I7Ozs7O0lBR2hCLCtCQUFrQjs7Ozs7SUFHbEIsZ0NBQW1COzs7OztJQUduQiwrQkFBa0I7Ozs7O0lBR2xCLGdDQUFtQjs7Ozs7SUFHbkIsK0JBQXlCOzs7OztJQUd6QixnQ0FBMEI7Ozs7O0lBRzFCLHFDQUErQjs7Ozs7SUFHL0Isc0NBQWdDOzs7OztJQUdoQyxrQ0FBNkI7Ozs7O0lBRzdCLG9DQUE0Qjs7Ozs7SUFHNUIsNkNBQXdDOzs7OztJQUd4QyxzQ0FBOEI7Ozs7O0lBRzlCLHNDQUFpQzs7Ozs7SUFHakMsbUNBQThCOzs7OztJQUc5QixnQ0FBMEM7Ozs7O0lBRzFDLDJCQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciBvcGVuaW5nIGEgbW9kYWwgd2l0aCB0aGUgTW9kYWxTZXJ2aWNlLlxuICovXG5pbXBvcnQgeyBNb2RhbFBvc2l0aW9uIH0gZnJvbSAnLi9tb2RhbC1wb3NpdGlvbic7XG5pbXBvcnQgeyBEeW5hbWljQ29tcG9uZW50Q29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbHMvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQtY29uZmlnJztcblxuZXhwb3J0IGNsYXNzIE1vZGFsQ29uZmlnIGltcGxlbWVudHMgRHluYW1pY0NvbXBvbmVudENvbmZpZyB7XG5cbiAgICAvKiogSWQgZm9yIHRoZSBtb2RhbCBjb21wb25lbnQuIElmIG9taXR0ZWQsIGEgdW5pcXVlIG9uZSBpcyBnZW5lcmF0ZWQuICovXG4gICAgaWQ/OiBzdHJpbmc7XG5cbiAgICAvKiogV2lkdGggb2YgdGhlIG1vZGFsLiAqL1xuICAgIHdpZHRoPzogc3RyaW5nO1xuXG4gICAgLyoqIEhlaWdodCBvZiB0aGUgbW9kYWwuICovXG4gICAgaGVpZ2h0Pzogc3RyaW5nO1xuXG4gICAgLyoqIE1pbmltdW0gd2lkdGggb2YgdGhlIG1vZGFsLiAqL1xuICAgIG1pbldpZHRoPzogc3RyaW5nO1xuXG4gICAgLyoqIE1pbmltdW0gaGVpZ2h0IG9mIHRoZSBtb2RhbC4gKi9cbiAgICBtaW5IZWlnaHQ/OiBzdHJpbmc7XG5cbiAgICAvKiogTWF4aW11bSB3aWR0aCBvZiB0aGUgbW9kYWwuICovXG4gICAgbWF4V2lkdGg/OiBzdHJpbmc7XG5cbiAgICAvKiogTWF4aW11bSBoZWlnaHQgb2YgdGhlIG1vZGFsLiAqL1xuICAgIG1heEhlaWdodD86IHN0cmluZztcblxuICAgIC8qKiBQb3NpdGlvbiBvZiB0aGUgbW9kYWwuICovXG4gICAgcG9zaXRpb24/OiBNb2RhbFBvc2l0aW9uO1xuXG4gICAgLyoqIEFyaWEgbGFiZWwgZm9yIHRoZSBtb2RhbCBjb21wb25lbnQgZWxlbWVudC4gKi9cbiAgICBhcmlhTGFiZWw/OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIElkIG9mIHRoZSBlbGVtZW50IHRoYXQgbGFiZWxzIHRoZSBtb2RhbC4gKi9cbiAgICBhcmlhTGFiZWxsZWRCeT86IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKiogSWQgb2YgdGhlIGVsZW1lbnQgdGhhdCBkZXNjcmliZXMgdGhlIG1vZGFsLiAqL1xuICAgIGFyaWFEZXNjcmliZWRCeT86IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKiogV2hldGhlciB0aGUgbW9kYWwgc2hvdWxkIGhhdmUgYSBiYWNrZHJvcC4gKi9cbiAgICBoYXNCYWNrZHJvcD86IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEdsb2JhbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSBiYWNrZHJvcC4gKi9cbiAgICBiYWNrZHJvcENsYXNzPzogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogV2hldGhlciBjbGlja2luZyBvbiB0aGUgYmFja2Ryb3Agc2hvdWxkIGNsb3NlIHRoZSBtb2RhbC4gT25seSB3b3JrcyBpZiBoYXNCYWNrZHJvcCBpcyB0cnVlLiAqL1xuICAgIGJhY2tkcm9wQ2xpY2tDbG9zZWFibGU/OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBHbG9iYWwgY2xhc3NlcyB0byBhcHBseSB0byB0aGUgbW9kYWwgcGFuZWwuICovXG4gICAgbW9kYWxQYW5lbENsYXNzPzogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgZXNjYXBlIGtleSBzaG91bGQgY2xvc2UgdGhlIG1vZGFsLiAqL1xuICAgIGVzY0tleUNsb3NlYWJsZT86IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIG1vZGFsIHNob3VsZCBiZSBmb2N1cyB0cmFwcGVkLiAqL1xuICAgIGZvY3VzVHJhcHBlZD86IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRoZSBjb250YWluZXIgdGhhdCB0aGUgbW9kYWwgaXMgYXBwZW5kZWQgdG8uIEJ5IGRlZmF1bHQsIGl0IGlzIGFwcGVuZGVkIHRvIHRoZSBib2R5LiAqL1xuICAgIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgJ2JvZHknID0gJ2JvZHknO1xuXG4gICAgLyoqIERhdGEgdG8gcGFzcyBhbG9uZyB0byB0aGUgY29udGVudCB0aHJvdWdoIHRoZSBNb2RhbFJlZi4gKi9cbiAgICBkYXRhPzogYW55O1xufVxuIl19