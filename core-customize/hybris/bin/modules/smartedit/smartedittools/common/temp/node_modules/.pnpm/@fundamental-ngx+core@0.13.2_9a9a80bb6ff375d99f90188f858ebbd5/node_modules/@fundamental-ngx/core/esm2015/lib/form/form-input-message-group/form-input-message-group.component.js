/**
 * @fileoverview added by tsickle
 * Generated from: lib/form/form-input-message-group/form-input-message-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
export class FormInputMessageGroupComponent {
    constructor() {
        /*
             * To allow user to determine what event he wants to trigger the messages to show
             * Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
             */
        this.triggers = ['click'];
        /*
             * Allows the user to decide if he wants to keep the error message after they click outside
             *  Whether the popover should close when a click is made outside its boundaries.
             */
        this.closeOnOutsideClick = true;
        /**
         * Whether the message is open. Can be used through two-way binding.
         */
        this.isOpen = false;
        /**
         * Event emitted when the state of the isOpen property changes.
         */
        this.isOpenChange = new EventEmitter();
    }
    /**
     * Function is called every time message changes isOpen attribute
     * @param {?} isOpen
     * @return {?}
     */
    openChanged(isOpen) {
        this.isOpenChange.emit(isOpen);
    }
}
FormInputMessageGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-form-input-message-group',
                template: "<fd-popover class=\"fd-form-input-message-group\"\n            [triggers]=\"triggers\"\n            [fillControlMode]=\"fillControlMode\"\n            [closeOnOutsideClick]=\"closeOnOutsideClick\"\n            [isOpen]=\"isOpen\"\n            (isOpenChange)=\"openChanged($event)\"\n            [addContainerClass]=\"'fd-popover-container-custom--message'\">\n    <fd-popover-control>\n        <ng-content select=\"[fd-form-control]\"></ng-content>\n    </fd-popover-control>\n    <fd-popover-body>\n        <ng-content select=\"fd-form-message\"></ng-content>\n    </fd-popover-body>\n</fd-popover>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n\n.fd-form-input-message-group\n*/.fd-form-input-message-group{display:flex;flex-grow:1;position:relative}.fd-popover-container-custom--message{flex-grow:1}.fd-popover-container-custom{border:none}"]
            }] }
];
FormInputMessageGroupComponent.propDecorators = {
    triggers: [{ type: Input }],
    closeOnOutsideClick: [{ type: Input }],
    fillControlMode: [{ type: Input }],
    isOpen: [{ type: Input }],
    isOpenChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FormInputMessageGroupComponent.prototype.triggers;
    /** @type {?} */
    FormInputMessageGroupComponent.prototype.closeOnOutsideClick;
    /**
     * Preset options for the message body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.fillControlMode;
    /**
     * Whether the message is open. Can be used through two-way binding.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.isOpen;
    /**
     * Event emitted when the state of the isOpen property changes.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.isOpenChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1pbnB1dC1tZXNzYWdlLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2Zvcm0taW5wdXQtbWVzc2FnZS1ncm91cC9mb3JtLWlucHV0LW1lc3NhZ2UtZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVVuSCxNQUFNLE9BQU8sOEJBQThCO0lBUDNDOzs7OztRQWNJLGFBQVEsR0FBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7OztRQU8vQix3QkFBbUIsR0FBWSxJQUFJLENBQUM7Ozs7UUFhcEMsV0FBTSxHQUFZLEtBQUssQ0FBQzs7OztRQUl4QixpQkFBWSxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0lBU3RFLENBQUM7Ozs7OztJQUpVLFdBQVcsQ0FBQyxNQUFlO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7OztZQTdDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMscW1CQUF3RDtnQkFFeEQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNsRDs7O3VCQU9JLEtBQUs7a0NBT0wsS0FBSzs4QkFTTCxLQUFLO3FCQUlMLEtBQUs7MkJBSUwsTUFBTTs7OztJQXhCUCxrREFDK0I7O0lBTS9CLDZEQUNvQzs7Ozs7Ozs7SUFRcEMseURBQ2lDOzs7OztJQUdqQyxnREFDd0I7Ozs7O0lBR3hCLHNEQUNrRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvcG92ZXJGaWxsTW9kZSB9IGZyb20gJy4uLy4uL3BvcG92ZXIvcG9wb3Zlci1kaXJlY3RpdmUvcG9wb3Zlci5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2ZkLWZvcm0taW5wdXQtbWVzc2FnZS1ncm91cCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0taW5wdXQtbWVzc2FnZS1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9ybS1pbnB1dC1tZXNzYWdlLWdyb3VwLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtSW5wdXRNZXNzYWdlR3JvdXBDb21wb25lbnQge1xuXG4gICAgLypcbiAgICAgKiBUbyBhbGxvdyB1c2VyIHRvIGRldGVybWluZSB3aGF0IGV2ZW50IGhlIHdhbnRzIHRvIHRyaWdnZXIgdGhlIG1lc3NhZ2VzIHRvIHNob3dcbiAgICAgKiBBY2NlcHRzIGFueSBbSFRNTCBET00gRXZlbnRzXShodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2RvbV9vYmpfZXZlbnQuYXNwKS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHRyaWdnZXJzOiBzdHJpbmdbXSA9IFsnY2xpY2snXTtcblxuICAgIC8qXG4gICAgICogQWxsb3dzIHRoZSB1c2VyIHRvIGRlY2lkZSBpZiBoZSB3YW50cyB0byBrZWVwIHRoZSBlcnJvciBtZXNzYWdlIGFmdGVyIHRoZXkgY2xpY2sgb3V0c2lkZVxuICAgICAqICBXaGV0aGVyIHRoZSBwb3BvdmVyIHNob3VsZCBjbG9zZSB3aGVuIGEgY2xpY2sgaXMgbWFkZSBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgY2xvc2VPbk91dHNpZGVDbGljazogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBQcmVzZXQgb3B0aW9ucyBmb3IgdGhlIG1lc3NhZ2UgYm9keSB3aWR0aC5cbiAgICAgKiAqIGBhdC1sZWFzdGAgd2lsbCBhcHBseSBhIG1pbmltdW0gd2lkdGggdG8gdGhlIGJvZHkgZXF1aXZhbGVudCB0byB0aGUgd2lkdGggb2YgdGhlIGNvbnRyb2wuXG4gICAgICogKiBgZXF1YWxgIHdpbGwgYXBwbHkgYSB3aWR0aCB0byB0aGUgYm9keSBlcXVpdmFsZW50IHRvIHRoZSB3aWR0aCBvZiB0aGUgY29udHJvbC5cbiAgICAgKiAqIExlYXZlIGJsYW5rIGZvciBubyBlZmZlY3QuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29udHJvbE1vZGU6IFBvcG92ZXJGaWxsTW9kZTtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBtZXNzYWdlIGlzIG9wZW4uIENhbiBiZSB1c2VkIHRocm91Z2ggdHdvLXdheSBiaW5kaW5nLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgaXNPcGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgaXNPcGVuIHByb3BlcnR5IGNoYW5nZXMuICovXG4gICAgQE91dHB1dCgpXG4gICAgaXNPcGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBtZXNzYWdlIGNoYW5nZXMgaXNPcGVuIGF0dHJpYnV0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBvcGVuQ2hhbmdlZChpc09wZW46IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5pc09wZW5DaGFuZ2UuZW1pdChpc09wZW4pO1xuICAgIH1cblxufVxuIl19