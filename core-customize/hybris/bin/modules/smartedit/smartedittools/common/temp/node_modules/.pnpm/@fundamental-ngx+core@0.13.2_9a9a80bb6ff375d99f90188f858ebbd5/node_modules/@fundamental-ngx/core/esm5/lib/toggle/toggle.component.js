/**
 * @fileoverview added by tsickle
 * Generated from: lib/toggle/toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
var toggleUniqueId = 0;
/**
 * The Toggle component is used to activate or deactivate an element.
 * It uses a visual metaphor to inform the user of the state of the toggle.
 */
var ToggleComponent = /** @class */ (function () {
    function ToggleComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Whether the toggle is disabled.
         */
        this.disabled = false;
        /**
         * Id for the toggle component. If omitted, a unique one is generated.
         */
        this.id = 'fd-toggle-' + toggleUniqueId++;
        /**
         * Whether the toggle is checked.
         */
        this.checked = false;
        /**
         * Whether the toggle is semantic
         */
        this.semantic = false;
        /**
         * Whether the toggle is compact
         */
        this.compact = false;
        /**
         * aria-label attribute of the inner input element.
         */
        this.ariaLabel = null;
        /**
         * aria-labelledby attribute of the inner input element.
         */
        this.ariaLabelledby = null;
        /**
         * Event fired when the state of the toggle changes.
         * *$event* can be used to retrieve the new state of the toggle.
         */
        this.checkedChange = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ToggleComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.size && this.size !== 'xs' && this.size !== 's' && this.size !== 'l') {
            this.size = null;
        }
    };
    /** Set focus on the input element. */
    /**
     * Set focus on the input element.
     * @return {?}
     */
    ToggleComponent.prototype.focus = /**
     * Set focus on the input element.
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.focus();
    };
    Object.defineProperty(ToggleComponent.prototype, "innerInputId", {
        /** Get the id of the inner input element of the toggle. */
        get: /**
         * Get the id of the inner input element of the toggle.
         * @return {?}
         */
        function () {
            return this.id + "-input";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToggleComponent.prototype, "isChecked", {
        /** Get the isChecked property of the toggle. */
        get: /**
         * Get the isChecked property of the toggle.
         * @return {?}
         */
        function () {
            return this.checked;
        },
        /** Set the isChecked property of the toggle. */
        set: /**
         * Set the isChecked property of the toggle.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.checked = value;
            this.onChange(value);
            this.onTouched();
            this.checkedChange.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param value Sets the value of the *checked* property of the toggle.
     */
    /**
     * @hidden
     * @param {?} value Sets the value of the *checked* property of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value Sets the value of the *checked* property of the toggle.
     * @return {?}
     */
    function (value) {
        this.checked = value;
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @hidden
     * @param fn User defined function that handles the *onChange* event of the toggle.
     */
    /**
     * @hidden
     * @param {?} fn User defined function that handles the *onChange* event of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn User defined function that handles the *onChange* event of the toggle.
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     * @param fn User defined function that handles the *onTouch* event of the toggle.
     */
    /**
     * @hidden
     * @param {?} fn User defined function that handles the *onTouch* event of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn User defined function that handles the *onTouch* event of the toggle.
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     * @param isDisabled Sets the value of the *disabled* property of the toggle.
     */
    /**
     * @hidden
     * @param {?} isDisabled Sets the value of the *disabled* property of the toggle.
     * @return {?}
     */
    ToggleComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled Sets the value of the *disabled* property of the toggle.
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.changeDetectorRef.detectChanges();
    };
    ToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-toggle',
                    template: "<label fd-form-label [attr.for]=\"innerInputId\">\n    <span class=\"fd-toggle\"\n          [ngClass]=\"\n          (size ? ('fd-toggle--' + size) : '') +\n          (semantic ? ' fd-toggle--semantic' : '') +\n          (compact ? ' fd-toggle--compact' : '') \"\n    >\n        <input #input\n               type=\"checkbox\"\n               class=\"fd-toggle__input\"\n               [id]=\"innerInputId\"\n               [disabled]=\"disabled\"\n               [attr.aria-checked]=\"checked\"\n               [attr.aria-label]=\"ariaLabel\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [(ngModel)]=\"isChecked\">\n        <span class=\"fd-toggle__switch\" role=\"presentation\">\n            <ng-container *ngIf=\"semantic\">\n                <span class=\"fd-toggle__semantic--off sap-icon--decline\"></span>\n                <span class=\"fd-toggle__semantic--on sap-icon--accept\"></span>\n            </ng-container>\n        </span>\n    </span>\n    <ng-content></ng-content>\n</label>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ToggleComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        class: 'fd-form__item fd-form__item--check fd-toggle-custom',
                        '[attr.id]': 'id',
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-toggle+(--no-border)\n    .fd-toggle__content+()\n    .fd-toggle__title+()\n*/.fd-toggle{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0 5px 0 0;border:0;position:relative;display:inline-block;width:52px;height:22px;vertical-align:middle}.fd-toggle:after,.fd-toggle:before{box-sizing:inherit;font-size:inherit}.fd-toggle[dir=rtl],[dir=rtl] .fd-toggle{margin-left:5px;margin-right:0}.fd-toggle__input{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;opacity:0;width:0;height:0}.fd-toggle__input:after,.fd-toggle__input:before{box-sizing:inherit;font-size:inherit;display:none}.fd-toggle__input:active,.fd-toggle__input:focus,.fd-toggle__input:hover{border-color:transparent}.fd-toggle__input.is-disabled,.fd-toggle__input[disabled]{opacity:0;background-color:#ededee;border-color:rgba(137,145,154,.4)}.fd-toggle__input.is-disabled+.fd-toggle__switch,.fd-toggle__input[disabled]+.fd-toggle__switch{opacity:1;border-color:rgba(137,145,154,.4);box-shadow:none;background-color:#ededee;pointer-events:none}.fd-toggle__input.is-disabled+.fd-toggle__switch:before,.fd-toggle__input[disabled]+.fd-toggle__switch:before{border-color:rgba(137,145,154,.4)}.fd-toggle__input:checked.is-disabled+.fd-toggle__switch,.fd-toggle__input:checked[disabled]+.fd-toggle__switch{border-color:transparent;background-color:#c5dcf2;pointer-events:none}.fd-toggle__input:checked.is-disabled+.fd-toggle__switch:before,.fd-toggle__input:checked[disabled]+.fd-toggle__switch:before{border-color:transparent;background-color:#9ebbd8}.fd-toggle__switch{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:1px solid #89919a;position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;border-color:var(--fd-color-neutral-4,#89919a);background-color:#d9d9d9;background-color:var(--fd-color-neutral-3,#d9d9d9);transition:.4s;border-radius:34px}.fd-toggle__switch:after,.fd-toggle__switch:before{box-sizing:inherit;font-size:inherit}.fd-toggle__switch:hover{border-color:#0254a7;border-color:var(--fd-color-action-selected,#0254a7)}.fd-toggle__switch:hover:before{border-color:#0254a7;border-color:var(--fd-color-action-selected,#0254a7);background-color:#ebf5fe}.fd-toggle__switch:before{position:absolute;content:\"\";height:32px;width:32px;left:-1px;top:-6px;background-color:#fff;background-color:var(--fd-color-background-2,#fff);border-color:var(--fd-color-neutral-4,#89919a);transition:.4s;border-radius:50%;z-index:1;box-shadow:0 1px 2px 0 rgba(0,0,0,.2);border:1px solid #89919a}.fd-toggle__input:checked+.fd-toggle__switch{background-color:rgba(10,110,209,.6);border-color:#0254a7;border-color:var(--fd-color-action-selected,#0254a7)}.fd-toggle__input:checked+.fd-toggle__switch:before{background-color:#0254a7;background-color:var(--fd-color-action-selected,#0254a7);border-color:#0254a7;border-color:var(--fd-color-action-selected,#0254a7);pointer-events:none;left:calc(100% - 31px)}.fd-toggle--xs{height:14px;width:36px}.fd-toggle--xs .fd-toggle__switch:before{height:20px;width:20px;top:-4.5px}.fd-toggle--xs input:checked+.fd-toggle__switch:before{left:15px}.fd-toggle--s{height:17px;width:40px}.fd-toggle--s .fd-toggle__switch:before{height:24px;width:24px;top:-5px}.fd-toggle--s input:checked+.fd-toggle__switch:before{left:15px}.fd-toggle--compact{height:16px;width:40px}.fd-toggle--compact .fd-toggle__switch:before{height:26px;width:26px;top:-6px}.fd-toggle--compact input:checked+.fd-toggle__switch:before{left:13px}.fd-toggle--l{height:22px;width:56px}.fd-toggle--l .fd-toggle__switch:before{height:32px;width:32px;top:-6px}.fd-toggle--l input:checked+.fd-toggle__switch:before{left:23px}.fd-toggle--label,.fd-toggle--semantic{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;width:62px;height:22px}.fd-toggle--label:after,.fd-toggle--label:before,.fd-toggle--semantic:after,.fd-toggle--semantic:before{box-sizing:inherit;font-size:inherit}.fd-toggle--label .fd-toggle__label--on,.fd-toggle--semantic .fd-toggle__label--on{visibility:hidden}.fd-toggle--label.fd-toggle--compact,.fd-toggle--semantic.fd-toggle--compact{width:56px}.fd-toggle--label.fd-toggle--compact .fd-toggle__switch:before,.fd-toggle--semantic.fd-toggle--compact .fd-toggle__switch:before{top:-3px}.fd-toggle--label .fd-toggle__input:checked+.fd-toggle__switch:before,.fd-toggle--semantic .fd-toggle__input:checked+.fd-toggle__switch:before{left:calc(100% - 31px)}.fd-toggle--label .fd-toggle__input:checked+.fd-toggle__switch .fd-toggle__label--off,.fd-toggle--semantic .fd-toggle__input:checked+.fd-toggle__switch .fd-toggle__label--off{visibility:hidden}.fd-toggle--label .fd-toggle__input:checked+.fd-toggle__switch .fd-toggle__label--on,.fd-toggle--semantic .fd-toggle__input:checked+.fd-toggle__switch .fd-toggle__label--on{visibility:visible}.fd-toggle--label.fd-toggle--compact .fd-toggle__input:checked+.fd-toggle__switch:before,.fd-toggle--semantic.fd-toggle--compact .fd-toggle__input:checked+.fd-toggle__switch:before{left:calc(100% - 25px)}.fd-toggle__label{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-toggle__label:after,.fd-toggle__label:before{box-sizing:inherit;font-size:inherit}.fd-toggle__label--off{font-size:12px;line-height:1.33333;font-weight:400;position:absolute;right:6px;top:3px}.fd-toggle__label--on{font-size:12px;line-height:1.33333;font-weight:400;position:absolute;left:8px;top:3px}.fd-toggle--semantic .fd-toggle__switch{background-color:#ffebeb;background-color:var(--fd-color-background-5,#ffebeb);border-color:#b00;border-color:var(--fd-color-status-3,#b00)}.fd-toggle--semantic .fd-toggle__switch:before{background-color:#b00;background-color:var(--fd-color-status-3,#b00);border-color:#b00;border-color:var(--fd-color-status-3,#b00)}.fd-toggle--semantic input:checked+.fd-toggle__switch{background-color:#f1fdf6;background-color:var(--fd-color-background-3,#f1fdf6);border-color:#0a7e3e;border-color:var(--fd-color-status-1,#0a7e3e)}.fd-toggle--semantic input:checked+.fd-toggle__switch:before{background-color:#0a7e3e;background-color:var(--fd-color-status-1,#0a7e3e);border-color:#0a7e3e;border-color:var(--fd-color-status-1,#0a7e3e)}.fd-toggle__semantic--off{font-size:12px;line-height:1.33333;font-weight:400;position:absolute;right:12px;top:2px;color:#b00;color:var(--fd-color-status-3,#b00)}.fd-toggle__semantic--off:before{font-size:12px;line-height:1.33333;font-weight:400}.fd-toggle__semantic--on{font-size:12px;line-height:1.33333;font-weight:400;position:absolute;left:12px;top:2px;color:#0a7e3e;color:var(--fd-color-status-1,#0a7e3e)}.fd-toggle__semantic--on:before{font-size:12px;line-height:1.33333;font-weight:400}.fd-toggle-custom{display:block}"]
                }] }
    ];
    /** @nocollapse */
    ToggleComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    ToggleComponent.propDecorators = {
        inputElement: [{ type: ViewChild, args: ['input', { static: false },] }],
        size: [{ type: Input }],
        disabled: [{ type: Input }],
        id: [{ type: Input }],
        checked: [{ type: Input }],
        semantic: [{ type: Input }],
        compact: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        checkedChange: [{ type: Output }]
    };
    return ToggleComponent;
}());
export { ToggleComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.inputElement;
    /**
     * The size of the toggle.
     * Can be one of the four *xs*, *s*, *l*, *error* or default.
     * @type {?}
     */
    ToggleComponent.prototype.size;
    /**
     * Whether the toggle is disabled.
     * @type {?}
     */
    ToggleComponent.prototype.disabled;
    /**
     * Id for the toggle component. If omitted, a unique one is generated.
     * @type {?}
     */
    ToggleComponent.prototype.id;
    /**
     * Whether the toggle is checked.
     * @type {?}
     */
    ToggleComponent.prototype.checked;
    /**
     * Whether the toggle is semantic
     * @type {?}
     */
    ToggleComponent.prototype.semantic;
    /**
     * Whether the toggle is compact
     * @type {?}
     */
    ToggleComponent.prototype.compact;
    /**
     * aria-label attribute of the inner input element.
     * @type {?}
     */
    ToggleComponent.prototype.ariaLabel;
    /**
     * aria-labelledby attribute of the inner input element.
     * @type {?}
     */
    ToggleComponent.prototype.ariaLabelledby;
    /**
     * Event fired when the state of the toggle changes.
     * *$event* can be used to retrieve the new state of the toggle.
     * @type {?}
     */
    ToggleComponent.prototype.checkedChange;
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    ToggleComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ToggleComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,