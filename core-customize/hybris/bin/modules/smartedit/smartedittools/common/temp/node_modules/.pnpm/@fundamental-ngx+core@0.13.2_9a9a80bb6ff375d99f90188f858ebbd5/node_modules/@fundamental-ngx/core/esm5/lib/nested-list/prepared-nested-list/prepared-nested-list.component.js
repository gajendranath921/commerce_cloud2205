/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/prepared-nested-list/prepared-nested-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, forwardRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NestedListDirective } from '../nested-list/nested-list.directive';
import { NestedListStateService } from '../nested-list-state.service';
import { NestedItemDirective } from '../nested-item/nested-item.directive';
/**
 * Component for internal usage, allows to generate the nested list from defined object.
 */
var PreparedNestedListComponent = /** @class */ (function () {
    /** @hidden */
    function PreparedNestedListComponent(changeDetRef, stateService) {
        this.changeDetRef = changeDetRef;
        this.stateService = stateService;
        /**
         * @hidden
         * For internal usage.
         * Defines if the component is first
         */
        this.first = true;
        /**
         * Defines if list should be displayed in condensed mode
         */
        this.condensed = false;
    }
    Object.defineProperty(PreparedNestedListComponent.prototype, "nestedListDirective", {
        /**
         * In prepared nested list, nested items should be taken as reference of View, not Content.
         * There is direct reference to these directives here.
         */
        get: /**
         * In prepared nested list, nested items should be taken as reference of View, not Content.
         * There is direct reference to these directives here.
         * @return {?}
         */
        function () {
            return Object.assign(this._nestedListDirective, { nestedItems: this.nestedListItems });
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    PreparedNestedListComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.stateService.propagateSelected(this.nestedListDirective);
        this.changeDetRef.markForCheck();
        this.changeDetRef.detectChanges();
    };
    PreparedNestedListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-prepared-nested-list',
                    template: "<ul fd-nested-list [textOnly]=\"list?.textOnly\">\n    <ng-container *ngFor=\"let item of list?.items\">\n        <li *ngIf=\"item.headerTitle\" fd-nested-list-header>\n            {{item.headerTitle}}\n        </li>\n        <li *ngIf=\"!item.headerTitle\"\n            fd-nested-list-item\n            [(expanded)]=\"item.expanded\">\n\n            <fd-nested-list-popover *ngIf=\"condensed && first && item.list\">\n                <a fd-nested-list-link *ngIf=\"item.link\"\n                   [onClickCallback]=\"item.link.callback\"\n                   [selected]=\"item.link.selected\"\n                   [attr.href]=\"item.link.href ? item.link.href : null\"\n                   [routerLink]=\"item.link.routerLink ? item.link.routerLink : []\">\n                    <span fd-nested-list-icon *ngIf=\"item.link.icon\" [glyph]=\"item.link.icon\"></span>\n                    <span fd-nested-list-title>{{item.link.title}}</span>\n                </a>\n                <fd-prepared-nested-list [first]=\"false\" *ngIf=\"item.list\" [list]=\"item.list\"></fd-prepared-nested-list>\n            </fd-nested-list-popover>\n\n            <ng-container *ngIf=\"!condensed || !first || !item.list\">\n                <a fd-nested-list-link *ngIf=\"item.link\"\n                   [onClickCallback]=\"item.link.callback\"\n                   [selected]=\"item.link.selected\"\n                   [attr.href]=\"item.link.href ? item.link.href : null\"\n                   [routerLink]=\"item.link.routerLink ? item.link.routerLink : []\">\n                    <span fd-nested-list-icon *ngIf=\"item.link.icon\" [glyph]=\"item.link.icon\"></span>\n                    <span fd-nested-list-title>{{item.link.title}}</span>\n                </a>\n                <fd-prepared-nested-list [first]=\"false\" *ngIf=\"item.list\" [list]=\"item.list\"></fd-prepared-nested-list>\n            </ng-container>\n\n        </li>\n    </ng-container>\n</ul>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PreparedNestedListComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NestedListStateService }
    ]; };
    PreparedNestedListComponent.propDecorators = {
        first: [{ type: Input }],
        condensed: [{ type: Input }],
        list: [{ type: Input }],
        _nestedListDirective: [{ type: ViewChild, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NestedListDirective; })), { static: false },] }],
        nestedListItems: [{ type: ViewChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NestedItemDirective; })),] }]
    };
    return PreparedNestedListComponent;
}());
export { PreparedNestedListComponent };
if (false) {
    /**
     * @hidden
     * For internal usage.
     * Defines if the component is first
     * @type {?}
     */
    PreparedNestedListComponent.prototype.first;
    /**
     * Defines if list should be displayed in condensed mode
     * @type {?}
     */
    PreparedNestedListComponent.prototype.condensed;
    /**
     * List configuration
     * @type {?}
     */
    PreparedNestedListComponent.prototype.list;
    /**
     * @hidden
     * @type {?}
     */
    PreparedNestedListComponent.prototype._nestedListDirective;
    /**
     * @hidden
     * @type {?}
     */
    PreparedNestedListComponent.prototype.nestedListItems;
    /**
     * @type {?}
     * @private
     */
    PreparedNestedListComponent.prototype.changeDetRef;
    /**
     * @type {?}
     * @private
     */
    PreparedNestedListComponent.prototype.stateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcGFyZWQtbmVzdGVkLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL25lc3RlZC1saXN0L3ByZXBhcmVkLW5lc3RlZC1saXN0L3ByZXBhcmVkLW5lc3RlZC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUIsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkksT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFM0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7QUFLM0U7SUErQ0ksY0FBYztJQUNkLHFDQUNZLFlBQStCLEVBQy9CLFlBQW9DO1FBRHBDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtRQUMvQixpQkFBWSxHQUFaLFlBQVksQ0FBd0I7Ozs7OztRQXJDaEQsVUFBSyxHQUFZLElBQUksQ0FBQzs7OztRQU10QixjQUFTLEdBQVksS0FBSyxDQUFDO0lBZ0N4QixDQUFDO0lBUkosc0JBQUksNERBQW1CO1FBSnZCOzs7V0FHRzs7Ozs7O1FBQ0g7WUFDSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLENBQUM7OztPQUFBO0lBUUQsY0FBYzs7Ozs7SUFDZCxxREFBZTs7OztJQUFmO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Z0JBMURKLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxxNkRBQW9EOztpQkFFckQ7Ozs7Z0JBYnVCLGlCQUFpQjtnQkFHaEMsc0JBQXNCOzs7d0JBa0IxQixLQUFLOzRCQU1MLEtBQUs7dUJBTUwsS0FBSzt1Q0FNTCxTQUFTLFNBQUMsVUFBVTs7O29CQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtrQ0FNbEUsWUFBWSxTQUFDLFVBQVU7OztvQkFBQyxjQUFNLE9BQUEsbUJBQW1CLEVBQW5CLENBQW1CLEVBQUM7O0lBdUJ2RCxrQ0FBQztDQUFBLEFBM0RELElBMkRDO1NBdERZLDJCQUEyQjs7Ozs7Ozs7SUFPcEMsNENBQ3NCOzs7OztJQUt0QixnREFDMkI7Ozs7O0lBSzNCLDJDQUNzQjs7Ozs7SUFLdEIsMkRBQzBDOzs7OztJQUsxQyxzREFDZ0Q7Ozs7O0lBWTVDLG1EQUF1Qzs7Ozs7SUFDdkMsbURBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkLCBWaWV3Q2hpbGRyZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5lc3RlZExpc3REaXJlY3RpdmUgfSBmcm9tICcuLi9uZXN0ZWQtbGlzdC9uZXN0ZWQtbGlzdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTmVzdGVkTGlzdE1vZGVsIH0gZnJvbSAnLi4vbmVzdGVkLWxpc3QtbW9kZWwnO1xuaW1wb3J0IHsgTmVzdGVkTGlzdFN0YXRlU2VydmljZSB9IGZyb20gJy4uL25lc3RlZC1saXN0LXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmVzdGVkSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4uL25lc3RlZC1pdGVtL25lc3RlZC1pdGVtLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBpbnRlcm5hbCB1c2FnZSwgYWxsb3dzIHRvIGdlbmVyYXRlIHRoZSBuZXN0ZWQgbGlzdCBmcm9tIGRlZmluZWQgb2JqZWN0LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmZC1wcmVwYXJlZC1uZXN0ZWQtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcmVwYXJlZC1uZXN0ZWQtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3ByZXBhcmVkLW5lc3RlZC1saXN0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUHJlcGFyZWROZXN0ZWRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRm9yIGludGVybmFsIHVzYWdlLlxuICAgICAqIERlZmluZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBmaXJzdFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZmlyc3Q6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBpZiBsaXN0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gY29uZGVuc2VkIG1vZGVcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGNvbmRlbnNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogTGlzdCBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBsaXN0OiBOZXN0ZWRMaXN0TW9kZWw7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQFZpZXdDaGlsZChmb3J3YXJkUmVmKCgpID0+IE5lc3RlZExpc3REaXJlY3RpdmUpLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgICBfbmVzdGVkTGlzdERpcmVjdGl2ZTogTmVzdGVkTGlzdERpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkcmVuKGZvcndhcmRSZWYoKCkgPT4gTmVzdGVkSXRlbURpcmVjdGl2ZSkpXG4gICAgbmVzdGVkTGlzdEl0ZW1zOiBRdWVyeUxpc3Q8TmVzdGVkSXRlbURpcmVjdGl2ZT47XG5cbiAgICAvKipcbiAgICAgKiBJbiBwcmVwYXJlZCBuZXN0ZWQgbGlzdCwgbmVzdGVkIGl0ZW1zIHNob3VsZCBiZSB0YWtlbiBhcyByZWZlcmVuY2Ugb2YgVmlldywgbm90IENvbnRlbnQuXG4gICAgICogVGhlcmUgaXMgZGlyZWN0IHJlZmVyZW5jZSB0byB0aGVzZSBkaXJlY3RpdmVzIGhlcmUuXG4gICAgICovXG4gICAgZ2V0IG5lc3RlZExpc3REaXJlY3RpdmUoKTogTmVzdGVkTGlzdERpcmVjdGl2ZSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuX25lc3RlZExpc3REaXJlY3RpdmUsIHsgbmVzdGVkSXRlbXM6IHRoaXMubmVzdGVkTGlzdEl0ZW1zIH0pO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwcml2YXRlIGNoYW5nZURldFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIHByaXZhdGUgc3RhdGVTZXJ2aWNlOiBOZXN0ZWRMaXN0U3RhdGVTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnByb3BhZ2F0ZVNlbGVjdGVkKHRoaXMubmVzdGVkTGlzdERpcmVjdGl2ZSk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0UmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB0aGlzLmNoYW5nZURldFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxufVxuIl19