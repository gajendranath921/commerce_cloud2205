/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/abstract-fd-ngx-class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
/*
 This abstract class allows the user to set their own custom styles on a Fundamental NGX directive, in addition to the
 styles the library needs to add itself.
 When library styles were added through the directive's host: {'[class]'} property, any styles the user added would be
 overwritten.  By extending this class, we instead add library styles to the user's classList rather than replace them.
 */
/**
 * @hidden
 * @abstract
 */
var AbstractFdNgxClass = /** @class */ (function () {
    /** @hidden */
    function AbstractFdNgxClass(elementRef) {
        this._elementRef = elementRef;
        this._setProperties();
    }
    /**
     * @param {?} className
     * @return {?}
     */
    AbstractFdNgxClass.prototype._setClassToElement = /**
     * @param {?} className
     * @return {?}
     */
    function (className) {
        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.value = className + " " + this.class;
    };
    /**
     * @return {?}
     */
    AbstractFdNgxClass.prototype._clearElementClass = /**
     * @return {?}
     */
    function () {
        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.value = '';
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} className
     * @return {?}
     */
    AbstractFdNgxClass.prototype._addClassToElement = /**
     * @hidden
     * @param {?} className
     * @return {?}
     */
    function (className) {
        var _a;
        (_a = ((/** @type {?} */ (this._elementRef.nativeElement))).classList).add.apply(_a, tslib_1.__spread(className.split(' ')));
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} attribute
     * @param {?} value
     * @return {?}
     */
    AbstractFdNgxClass.prototype._addStyleToElement = /**
     * @hidden
     * @param {?} attribute
     * @param {?} value
     * @return {?}
     */
    function (attribute, value) {
        ((/** @type {?} */ (this._elementRef.nativeElement))).style[attribute] = value;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    AbstractFdNgxClass.prototype.ngOnChanges = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classList = ((/** @type {?} */ (this._elementRef.nativeElement))).classList;
        while (classList.length > 0) {
            classList.remove(classList.item(0));
        }
        if (this.class) {
            this._addClassToElement(this.class);
        }
        this._setProperties();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    AbstractFdNgxClass.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._setProperties();
    };
    AbstractFdNgxClass.propDecorators = {
        class: [{ type: Input }]
    };
    return AbstractFdNgxClass;
}());
export { AbstractFdNgxClass };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AbstractFdNgxClass.prototype._elementRef;
    /**
     * @hidden
     * @type {?}
     */
    AbstractFdNgxClass.prototype.class;
    /**
     * @hidden
     * @abstract
     * @return {?}
     */
    AbstractFdNgxClass.prototype._setProperties = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZmQtbmd4LWNsYXNzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWlDLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7QUFVckU7SUErQkksY0FBYztJQUNkLDRCQUFzQixVQUFzQjtRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUF0QkQsK0NBQWtCOzs7O0lBQWxCLFVBQW1CLFNBQWlCO1FBQ2hDLENBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQU0sU0FBUyxTQUFJLElBQUksQ0FBQyxLQUFPLENBQUM7SUFDbkcsQ0FBQzs7OztJQUVELCtDQUFrQjs7O0lBQWxCO1FBQ0ksQ0FBQyxtQkFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVELGNBQWM7Ozs7OztJQUNkLCtDQUFrQjs7Ozs7SUFBbEIsVUFBbUIsU0FBaUI7O1FBQ2hDLENBQUEsS0FBQSxDQUFDLG1CQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFlLENBQUMsQ0FBQyxTQUFTLENBQUEsQ0FBQyxHQUFHLDRCQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUU7SUFDM0YsQ0FBQztJQUVELGNBQWM7Ozs7Ozs7SUFDZCwrQ0FBa0I7Ozs7OztJQUFsQixVQUFtQixTQUFTLEVBQUUsS0FBSztRQUMvQixDQUFDLG1CQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzdFLENBQUM7SUFRRCxjQUFjOzs7OztJQUNkLHdDQUFXOzs7O0lBQVg7O1lBQ1UsU0FBUyxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQWUsQ0FBQyxDQUFDLFNBQVM7UUFDM0UsT0FBTyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGNBQWM7Ozs7O0lBQ2QscUNBQVE7Ozs7SUFBUjtRQUNJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzt3QkFoREEsS0FBSzs7SUFpRFYseUJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEcUIsa0JBQWtCOzs7Ozs7SUFDcEMseUNBQWdDOzs7OztJQUdoQyxtQ0FBc0I7Ozs7OztJQU90Qiw4REFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLypcbiBUaGlzIGFic3RyYWN0IGNsYXNzIGFsbG93cyB0aGUgdXNlciB0byBzZXQgdGhlaXIgb3duIGN1c3RvbSBzdHlsZXMgb24gYSBGdW5kYW1lbnRhbCBOR1ggZGlyZWN0aXZlLCBpbiBhZGRpdGlvbiB0byB0aGVcbiBzdHlsZXMgdGhlIGxpYnJhcnkgbmVlZHMgdG8gYWRkIGl0c2VsZi5cbiBXaGVuIGxpYnJhcnkgc3R5bGVzIHdlcmUgYWRkZWQgdGhyb3VnaCB0aGUgZGlyZWN0aXZlJ3MgaG9zdDogeydbY2xhc3NdJ30gcHJvcGVydHksIGFueSBzdHlsZXMgdGhlIHVzZXIgYWRkZWQgd291bGQgYmVcbiBvdmVyd3JpdHRlbi4gIEJ5IGV4dGVuZGluZyB0aGlzIGNsYXNzLCB3ZSBpbnN0ZWFkIGFkZCBsaWJyYXJ5IHN0eWxlcyB0byB0aGUgdXNlcidzIGNsYXNzTGlzdCByYXRoZXIgdGhhbiByZXBsYWNlIHRoZW0uXG4gKi9cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEZkTmd4Q2xhc3MgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQElucHV0KCkgY2xhc3M6IHN0cmluZyAvLyB1c2VyJ3MgY3VzdG9tIGNsYXNzZXNcblxuICAgIC8qXG4gICAgIGVhY2ggZGlyZWN0aXZlIHRoYXQgZXh0ZW5kcyB0aGlzIGNsYXNzIHdpbGwgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gYW5kIHBvcHVsYXRlIGl0IHdpdGggb25lIG9yIG1vcmUgY2FsbHMgdG9cbiAgICAgdGhlICdfYWRkQ2xhc3NUb0VsZW1lbnQnIGZ1bmN0aW9uLCBwYXNzaW5nIHRoZSBzdHlsZSBuYW1lcyB0byBiZSBhZGRlZCB3aXRoIGVhY2ggY2FsbFxuICAgICAqL1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgYWJzdHJhY3QgX3NldFByb3BlcnRpZXMoKTogdm9pZDtcblxuICAgIF9zZXRDbGFzc1RvRWxlbWVudChjbGFzc05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QudmFsdWUgPSBgJHtjbGFzc05hbWV9ICR7dGhpcy5jbGFzc31gO1xuICAgIH1cblxuICAgIF9jbGVhckVsZW1lbnRDbGFzcygpOiB2b2lkIHtcbiAgICAgICAgKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LnZhbHVlID0gJyc7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfYWRkQ2xhc3NUb0VsZW1lbnQoY2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWUuc3BsaXQoJyAnKSk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfYWRkU3R5bGVUb0VsZW1lbnQoYXR0cmlidXRlLCB2YWx1ZSk6IHZvaWQge1xuICAgICAgICAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5zdHlsZVthdHRyaWJ1dGVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLl9lbGVtZW50UmVmID0gZWxlbWVudFJlZjtcbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzTGlzdCA9ICh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdDtcbiAgICAgICAgd2hpbGUgKGNsYXNzTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGNsYXNzTGlzdC5pdGVtKDApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jbGFzcykge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQodGhpcy5jbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX3NldFByb3BlcnRpZXMoKTtcbiAgICB9XG59XG4iXX0=