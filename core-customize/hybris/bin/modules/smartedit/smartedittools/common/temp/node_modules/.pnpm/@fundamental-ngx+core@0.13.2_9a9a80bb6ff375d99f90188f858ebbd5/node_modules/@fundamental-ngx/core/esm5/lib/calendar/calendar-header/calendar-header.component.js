/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/calendar-header/calendar-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { CalendarI18nLabels } from '../i18n/calendar-i18n-labels';
import { CalendarI18n } from '../i18n/calendar-i18n';
import { takeUntil } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
/**
 * Internal use only.
 * Header of the calendar component.
 */
var CalendarHeaderComponent = /** @class */ (function () {
    function CalendarHeaderComponent(calendarI18nLabels, calendarI18n, changeDetRef) {
        var _this = this;
        this.calendarI18nLabels = calendarI18nLabels;
        this.calendarI18n = calendarI18n;
        this.changeDetRef = changeDetRef;
        /**
         * Event emitted when the active view should change.
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Event emitted when the previous button is clicked.
         */
        this.previousClicked = new EventEmitter();
        /**
         * Event emitted when the next button is clicked.
         */
        this.nextClicked = new EventEmitter();
        /**
         * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * Merging 18n observables
         * @type {?}
         */
        var i18nObservables = merge(this.calendarI18n.i18nChange, this.calendarI18nLabels.labelsChange);
        /** Called to trigger change detection */
        i18nObservables.pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.changeDetRef.markForCheck(); }));
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    CalendarHeaderComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    Object.defineProperty(CalendarHeaderComponent.prototype, "previousLabel", {
        /** Get the aria label for the previous button. Depends on the active view. */
        get: /**
         * Get the aria label for the previous button. Depends on the active view.
         * @return {?}
         */
        function () {
            return this.activeView !== 'year' ? this.calendarI18nLabels.previousMonthLabel
                : this.calendarI18nLabels.previousYearLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "nextLabel", {
        /** Get the aria label for the next button. Depends on the active view. */
        get: /**
         * Get the aria label for the next button. Depends on the active view.
         * @return {?}
         */
        function () {
            return this.activeView !== 'year' ? this.calendarI18nLabels.nextMonthLabel
                : this.calendarI18nLabels.nextMonthLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarHeaderComponent.prototype, "monthLabel", {
        /** Get aria label for the month shown. */
        get: /**
         * Get aria label for the month shown.
         * @return {?}
         */
        function () {
            return this.calendarI18n.getAllFullMonthNames()[this.currentlyDisplayed.month - 1];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CalendarHeaderComponent.prototype.isOnMonthView = /**
     * @return {?}
     */
    function () {
        return this.activeView === 'month';
    };
    /**
     * @return {?}
     */
    CalendarHeaderComponent.prototype.isOnYearView = /**
     * @return {?}
     */
    function () {
        return this.activeView === 'year';
    };
    /**
     * @param {?} type
     * @return {?}
     */
    CalendarHeaderComponent.prototype.processViewChange = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === this.activeView) {
            this.activeView = 'day';
        }
        else {
            this.activeView = type;
        }
        this.activeViewChange.emit(this.activeView);
    };
    CalendarHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-calendar-header',
                    template: "<header class=\"fd-calendar__header\" aria-live=\"polite\">\n    <div class=\"fd-calendar__navigation\">\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [fdType]=\"'standard'\"\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [glyph]=\"'slim-arrow-left'\"\n                    [attr.id]=\"id + '-left-arrow'\"\n                    [attr.aria-label]=\"previousLabel\"\n                    [attr.aria-disabled]=\"false\"\n                    type=\"button\"\n                    (click)=\"previousClicked.emit()\">\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [attr.aria-label]=\"calendarI18nLabels.monthSelectionLabel + ' ' + monthLabel\"\n                    [attr.aria-selected]=\"isOnMonthView()\"\n                    (click)=\"processViewChange('month')\"\n                    type=\"button\">\n                {{monthLabel}}\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [attr.aria-label]=\"calendarI18nLabels.yearSelectionLabel + ' ' + currentlyDisplayed.year\"\n                    [attr.aria-selected]=\"isOnYearView()\"\n                    (click)=\"processViewChange('year')\"\n                    type=\"button\">\n                {{currentlyDisplayed.year}}\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [fdType]=\"'standard'\"\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [glyph]=\"'slim-arrow-right'\"\n                    [attr.id]=\"id + '-right-arrow'\"\n                    [attr.aria-label]=\"nextLabel\"\n                    [attr.aria-disabled]=\"false\"\n                    (click)=\"nextClicked.emit()\"\n                    type=\"button\">\n            </button>\n        </div>\n    </div>\n</header>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[attr.id]': 'id + "-header"'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CalendarHeaderComponent.ctorParameters = function () { return [
        { type: CalendarI18nLabels },
        { type: CalendarI18n },
        { type: ChangeDetectorRef }
    ]; };
    CalendarHeaderComponent.propDecorators = {
        activeView: [{ type: Input }],
        currentlyDisplayed: [{ type: Input }],
        id: [{ type: Input }],
        activeViewChange: [{ type: Output }],
        previousClicked: [{ type: Output }],
        nextClicked: [{ type: Output }]
    };
    return CalendarHeaderComponent;
}());
export { CalendarHeaderComponent };
if (false) {
    /**
     * Currently active view. Needed for a11y labels.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.activeView;
    /**
     * Currently displayed date on the calendar.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.currentlyDisplayed;
    /**
     * Id
     * @type {?}
     */
    CalendarHeaderComponent.prototype.id;
    /**
     * Event emitted when the active view should change.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.activeViewChange;
    /**
     * Event emitted when the previous button is clicked.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.previousClicked;
    /**
     * Event emitted when the next button is clicked.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.nextClicked;
    /**
     * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype.onDestroy$;
    /** @type {?} */
    CalendarHeaderComponent.prototype.calendarI18nLabels;
    /** @type {?} */
    CalendarHeaderComponent.prototype.calendarI18n;
    /**
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype.changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jYWxlbmRhci9jYWxlbmRhci1oZWFkZXIvY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixpQkFBaUIsRUFDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFNdEM7SUEwQ0ksaUNBQ1csa0JBQXNDLEVBQ3RDLFlBQTBCLEVBQ3pCLFlBQStCO1FBSDNDLGlCQVlDO1FBWFUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6QixpQkFBWSxHQUFaLFlBQVksQ0FBbUI7Ozs7UUFuQmxDLHFCQUFnQixHQUNuQixJQUFJLFlBQVksRUFBa0IsQ0FBQzs7OztRQUloQyxvQkFBZSxHQUNsQixJQUFJLFlBQVksRUFBUSxDQUFDOzs7O1FBSXRCLGdCQUFXLEdBQ2QsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7OztRQUdkLGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQzs7Ozs7WUFRdkQsZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDO1FBRWpHLHlDQUF5QztRQUN6QyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDM0MsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLEVBQWhDLENBQWdDLEVBQUMsQ0FDckQ7SUFDTCxDQUFDO0lBRUQsY0FBYzs7Ozs7SUFDZCw2Q0FBVzs7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFHRCxzQkFBSSxrREFBYTtRQURqQiw4RUFBOEU7Ozs7O1FBQzlFO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQjtnQkFDMUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNwRCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLDhDQUFTO1FBRGIsMEVBQTBFOzs7OztRQUMxRTtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjO2dCQUN0RSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztRQUNqRCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLCtDQUFVO1FBRGQsMENBQTBDOzs7OztRQUMxQztZQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkYsQ0FBQzs7O09BQUE7Ozs7SUFFRCwrQ0FBYTs7O0lBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssT0FBTyxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCw4Q0FBWTs7O0lBQVo7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBRUQsbURBQWlCOzs7O0lBQWpCLFVBQWtCLElBQW9CO1FBQ2xDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDM0I7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Z0JBOUZKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5Qixrc0VBQStDO29CQUUvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsSUFBSSxFQUFFO3dCQUNGLFdBQVcsRUFBRSxnQkFBZ0I7cUJBQ2hDO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztpQkFDbEQ7Ozs7Z0JBcEJRLGtCQUFrQjtnQkFDbEIsWUFBWTtnQkFUakIsaUJBQWlCOzs7NkJBZ0NoQixLQUFLO3FDQUlMLEtBQUs7cUJBSUwsS0FBSzttQ0FJTCxNQUFNO2tDQUtOLE1BQU07OEJBS04sTUFBTTs7SUE2RFgsOEJBQUM7Q0FBQSxBQWhHRCxJQWdHQztTQXRGWSx1QkFBdUI7Ozs7OztJQUdoQyw2Q0FDMkI7Ozs7O0lBRzNCLHFEQUNvQzs7Ozs7SUFHcEMscUNBQ1c7Ozs7O0lBR1gsbURBRXlDOzs7OztJQUd6QyxrREFFK0I7Ozs7O0lBRy9CLDhDQUUrQjs7Ozs7O0lBRy9CLDZDQUFpRTs7SUFHN0QscURBQTZDOztJQUM3QywrQ0FBaUM7Ozs7O0lBQ2pDLCtDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCwgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYWxlbmRhckkxOG5MYWJlbHMgfSBmcm9tICcuLi9pMThuL2NhbGVuZGFyLWkxOG4tbGFiZWxzJztcbmltcG9ydCB7IENhbGVuZGFySTE4biB9IGZyb20gJy4uL2kxOG4vY2FsZW5kYXItaTE4bic7XG5pbXBvcnQgeyBGZENhbGVuZGFyVmlldyB9IGZyb20gJy4uL2NhbGVuZGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhckN1cnJlbnQgfSBmcm9tICcuLi9tb2RlbHMvY2FsZW5kYXItY3VycmVudCc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBtZXJnZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEludGVybmFsIHVzZSBvbmx5LlxuICogSGVhZGVyIG9mIHRoZSBjYWxlbmRhciBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZmQtY2FsZW5kYXItaGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY2FsZW5kYXItaGVhZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jYWxlbmRhci1oZWFkZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmlkXSc6ICdpZCArIFwiLWhlYWRlclwiJ1xuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgLyoqIEN1cnJlbnRseSBhY3RpdmUgdmlldy4gTmVlZGVkIGZvciBhMTF5IGxhYmVscy4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFjdGl2ZVZpZXc6IEZkQ2FsZW5kYXJWaWV3O1xuXG4gICAgLyoqIEN1cnJlbnRseSBkaXNwbGF5ZWQgZGF0ZSBvbiB0aGUgY2FsZW5kYXIuICovXG4gICAgQElucHV0KClcbiAgICBjdXJyZW50bHlEaXNwbGF5ZWQ6IENhbGVuZGFyQ3VycmVudDtcblxuICAgIC8qKiBJZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIGFjdGl2ZSB2aWV3IHNob3VsZCBjaGFuZ2UuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgYWN0aXZlVmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPEZkQ2FsZW5kYXJWaWV3PlxuICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8RmRDYWxlbmRhclZpZXc+KCk7XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBwcmV2aW91cyBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBwcmV2aW91c0NsaWNrZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPlxuICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIG5leHQgYnV0dG9uIGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgbmV4dENsaWNrZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPlxuICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8qKiBBbiBSeEpTIFN1YmplY3QgdGhhdCB3aWxsIGtpbGwgdGhlIGRhdGEgc3RyZWFtIHVwb24gY29tcG9uZW504oCZcyBkZXN0cnVjdGlvbiAoZm9yIHVuc3Vic2NyaWJpbmcpICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25EZXN0cm95JDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGNhbGVuZGFySTE4bkxhYmVsczogQ2FsZW5kYXJJMThuTGFiZWxzLFxuICAgICAgICBwdWJsaWMgY2FsZW5kYXJJMThuOiBDYWxlbmRhckkxOG4sXG4gICAgICAgIHByaXZhdGUgY2hhbmdlRGV0UmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICAgICkge1xuICAgICAgICAvKiogTWVyZ2luZyAxOG4gb2JzZXJ2YWJsZXMgKi9cbiAgICAgICAgY29uc3QgaTE4bk9ic2VydmFibGVzID0gbWVyZ2UodGhpcy5jYWxlbmRhckkxOG4uaTE4bkNoYW5nZSwgdGhpcy5jYWxlbmRhckkxOG5MYWJlbHMubGFiZWxzQ2hhbmdlKTtcblxuICAgICAgICAvKiogQ2FsbGVkIHRvIHRyaWdnZXIgY2hhbmdlIGRldGVjdGlvbiAqL1xuICAgICAgICBpMThuT2JzZXJ2YWJsZXMucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5jaGFuZ2VEZXRSZWYubWFya0ZvckNoZWNrKCkpXG4gICAgICAgIDtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCgpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICAvKiogR2V0IHRoZSBhcmlhIGxhYmVsIGZvciB0aGUgcHJldmlvdXMgYnV0dG9uLiBEZXBlbmRzIG9uIHRoZSBhY3RpdmUgdmlldy4gKi9cbiAgICBnZXQgcHJldmlvdXNMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVWaWV3ICE9PSAneWVhcicgPyB0aGlzLmNhbGVuZGFySTE4bkxhYmVscy5wcmV2aW91c01vbnRoTGFiZWxcbiAgICAgICAgICAgIDogdGhpcy5jYWxlbmRhckkxOG5MYWJlbHMucHJldmlvdXNZZWFyTGFiZWw7XG4gICAgfVxuXG4gICAgLyoqIEdldCB0aGUgYXJpYSBsYWJlbCBmb3IgdGhlIG5leHQgYnV0dG9uLiBEZXBlbmRzIG9uIHRoZSBhY3RpdmUgdmlldy4gKi9cbiAgICBnZXQgbmV4dExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVZpZXcgIT09ICd5ZWFyJyA/IHRoaXMuY2FsZW5kYXJJMThuTGFiZWxzLm5leHRNb250aExhYmVsXG4gICAgICAgICAgICA6IHRoaXMuY2FsZW5kYXJJMThuTGFiZWxzLm5leHRNb250aExhYmVsO1xuICAgIH1cblxuICAgIC8qKiBHZXQgYXJpYSBsYWJlbCBmb3IgdGhlIG1vbnRoIHNob3duLiAqL1xuICAgIGdldCBtb250aExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFySTE4bi5nZXRBbGxGdWxsTW9udGhOYW1lcygpW3RoaXMuY3VycmVudGx5RGlzcGxheWVkLm1vbnRoIC0gMV07XG4gICAgfVxuXG4gICAgaXNPbk1vbnRoVmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlVmlldyA9PT0gJ21vbnRoJztcbiAgICB9XG5cbiAgICBpc09uWWVhclZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVZpZXcgPT09ICd5ZWFyJztcbiAgICB9XG5cbiAgICBwcm9jZXNzVmlld0NoYW5nZSh0eXBlOiBGZENhbGVuZGFyVmlldyk6IHZvaWQge1xuICAgICAgICBpZiAodHlwZSA9PT0gdGhpcy5hY3RpdmVWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVZpZXcgPSAnZGF5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlVmlldyA9IHR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3Q2hhbmdlLmVtaXQodGhpcy5hY3RpdmVWaWV3KTtcbiAgICB9XG5cbn1cbiJdfQ==