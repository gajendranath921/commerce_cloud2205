{"version":3,"file":"OperationExecutionManager.js","sourceRoot":"","sources":["../../../src/logic/operations/OperationExecutionManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport colors from 'colors/safe';\nimport {\n  StdioSummarizer,\n  TerminalWritable,\n  StdioWritable,\n  TerminalChunkKind,\n  TextRewriterTransform\n} from '@rushstack/terminal';\nimport { StreamCollator, CollatedTerminal, CollatedWriter } from '@rushstack/stream-collator';\nimport { AlreadyReportedError, NewlineKind, InternalError, Sort } from '@rushstack/node-core-library';\n\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { AsyncOperationQueue, IOperationSortFunction } from './AsyncOperationQueue';\nimport { Operation } from './Operation';\nimport { OperationStatus } from './OperationStatus';\nimport { IOperationRunnerContext } from './IOperationRunner';\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\nimport { OperationError } from './OperationError';\n\nexport interface IOperationExecutionManagerOptions {\n  quietMode: boolean;\n  debugMode: boolean;\n  parallelism: string | undefined;\n  changedProjectsOnly: boolean;\n  repoCommandLineConfiguration: CommandLineConfiguration;\n  destination?: TerminalWritable;\n}\n\n/**\n * Format \"======\" lines for a shell window with classic 80 columns\n */\nconst ASCII_HEADER_WIDTH: number = 79;\n\n/**\n * A class which manages the execution of a set of tasks with interdependencies.\n * Initially, and at the end of each task execution, all unblocked tasks\n * are added to a ready queue which is then executed. This is done continually until all\n * tasks are complete, or prematurely fails if any of the tasks fail.\n */\nexport class OperationExecutionManager {\n  private readonly _operations: Set<Operation>;\n  private readonly _changedProjectsOnly: boolean;\n  private readonly _quietMode: boolean;\n  private readonly _debugMode: boolean;\n  private readonly _parallelism: number;\n  private readonly _repoCommandLineConfiguration: CommandLineConfiguration;\n  private readonly _totalOperations: number;\n\n  private readonly _outputWritable: TerminalWritable;\n  private readonly _colorsNewlinesTransform: TextRewriterTransform;\n  private readonly _streamCollator: StreamCollator;\n\n  private readonly _terminal: CollatedTerminal;\n\n  // Variables for current status\n  private _hasAnyFailures: boolean;\n  private _hasAnyNonAllowedWarnings: boolean;\n  private _completedOperations: number;\n\n  public constructor(operations: Set<Operation>, options: IOperationExecutionManagerOptions) {\n    const { quietMode, debugMode, parallelism, changedProjectsOnly, repoCommandLineConfiguration } = options;\n    this._operations = operations;\n    this._completedOperations = 0;\n    this._totalOperations = operations.size;\n    this._quietMode = quietMode;\n    this._debugMode = debugMode;\n    this._hasAnyFailures = false;\n    this._hasAnyNonAllowedWarnings = false;\n    this._changedProjectsOnly = changedProjectsOnly;\n    this._repoCommandLineConfiguration = repoCommandLineConfiguration;\n\n    // TERMINAL PIPELINE:\n    //\n    // streamCollator --> colorsNewlinesTransform --> StdioWritable\n    //\n    this._outputWritable = options.destination ? options.destination : StdioWritable.instance;\n    this._colorsNewlinesTransform = new TextRewriterTransform({\n      destination: this._outputWritable,\n      normalizeNewlines: NewlineKind.OsDefault,\n      removeColors: !colors.enabled\n    });\n    this._streamCollator = new StreamCollator({\n      destination: this._colorsNewlinesTransform,\n      onWriterActive: this._streamCollator_onWriterActive\n    });\n    this._terminal = this._streamCollator.terminal;\n\n    const numberOfCores: number = os.cpus().length;\n\n    if (parallelism) {\n      if (parallelism === 'max') {\n        this._parallelism = numberOfCores;\n      } else {\n        const parallelismInt: number = parseInt(parallelism, 10);\n\n        if (isNaN(parallelismInt)) {\n          throw new Error(`Invalid parallelism value of '${parallelism}', expected a number or 'max'`);\n        }\n\n        this._parallelism = parallelismInt;\n      }\n    } else {\n      // If an explicit parallelism number wasn't provided, then choose a sensible\n      // default.\n      if (os.platform() === 'win32') {\n        // On desktop Windows, some people have complained that their system becomes\n        // sluggish if Rush is using all the CPU cores.  Leave one thread for\n        // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\n        this._parallelism = Math.max(numberOfCores - 1, 1);\n      } else {\n        // Unix-like operating systems have more balanced scheduling, so default\n        // to the number of CPU cores\n        this._parallelism = numberOfCores;\n      }\n    }\n  }\n\n  private _streamCollator_onWriterActive = (writer: CollatedWriter | undefined): void => {\n    if (writer) {\n      this._completedOperations++;\n\n      // Format a header like this\n      //\n      // ==[ @rushstack/the-long-thing ]=================[ 1 of 1000 ]==\n\n      // leftPart: \"==[ @rushstack/the-long-thing \"\n      const leftPart: string = colors.gray('==[') + ' ' + colors.cyan(writer.taskName) + ' ';\n      const leftPartLength: number = 4 + writer.taskName.length + 1;\n\n      // rightPart: \" 1 of 1000 ]==\"\n      const completedOfTotal: string = `${this._completedOperations} of ${this._totalOperations}`;\n      const rightPart: string = ' ' + colors.white(completedOfTotal) + ' ' + colors.gray(']==');\n      const rightPartLength: number = 1 + completedOfTotal.length + 4;\n\n      // middlePart: \"]=================[\"\n      const twoBracketsLength: number = 2;\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\n        ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\n        0\n      );\n\n      const middlePart: string = colors.gray(']' + '='.repeat(middlePartLengthMinusTwoBrackets) + '[');\n\n      this._terminal.writeStdoutLine('\\n' + leftPart + middlePart + rightPart);\n\n      if (!this._quietMode) {\n        this._terminal.writeStdoutLine('');\n      }\n    }\n  };\n\n  /**\n   * Executes all operations which have been registered, returning a promise which is resolved when all the\n   * operations are completed successfully, or rejects when any operation fails.\n   */\n  public async executeAsync(): Promise<void> {\n    this._completedOperations = 0;\n    const totalTasks: number = this._totalOperations;\n\n    if (!this._quietMode) {\n      const plural: string = totalTasks === 1 ? '' : 's';\n      this._terminal.writeStdoutLine(`Selected ${totalTasks} project${plural}:`);\n      this._terminal.writeStdoutLine(\n        Array.from(this._operations, (x) => `  ${x.name}`)\n          .sort()\n          .join('\\n')\n      );\n      this._terminal.writeStdoutLine('');\n    }\n\n    this._terminal.writeStdoutLine(`Executing a maximum of ${this._parallelism} simultaneous processes...`);\n\n    const maxParallelism: number = Math.min(totalTasks, this._parallelism);\n    const prioritySort: IOperationSortFunction = (a: Operation, b: Operation): number => {\n      let diff: number = a.criticalPathLength! - b.criticalPathLength!;\n      if (diff) {\n        return diff;\n      }\n\n      diff = a.dependents.size - b.dependents.size;\n      if (diff) {\n        return diff;\n      }\n\n      // No further default considerations.\n      return 0;\n    };\n    const executionQueue: AsyncOperationQueue = new AsyncOperationQueue(this._operations, prioritySort);\n\n    // Iterate in parallel with maxParallelism concurrent lanes\n    await Promise.all(\n      Array.from({ length: maxParallelism }, async (unused: undefined, index: number): Promise<void> => {\n        // laneId can be used in logging to examine concurrency\n        const laneId: number = index + 1;\n        // The executionQueue is a singular async iterable that stalls until an operation is available, and marks itself\n        // done when the queue is empty.\n        for await (const operations of executionQueue) {\n          // Take an operation, execute it, wait for it to finish, wait for a new operations\n          await this._executeOperationAsync(operations, laneId);\n        }\n      })\n    );\n\n    this._printOperationStatus();\n\n    if (this._hasAnyFailures) {\n      this._terminal.writeStderrLine(colors.red('Projects failed to build.') + '\\n');\n      throw new AlreadyReportedError();\n    } else if (this._hasAnyNonAllowedWarnings) {\n      this._terminal.writeStderrLine(colors.yellow('Projects succeeded with warnings.') + '\\n');\n      throw new AlreadyReportedError();\n    }\n  }\n\n  private async _executeOperationAsync(operation: Operation, tid: number): Promise<void> {\n    operation.status = OperationStatus.Executing;\n    operation.stopwatch = Stopwatch.start();\n    operation.collatedWriter = this._streamCollator.registerTask(operation.name);\n    operation.stdioSummarizer = new StdioSummarizer();\n\n    const context: IOperationRunnerContext = {\n      repoCommandLineConfiguration: this._repoCommandLineConfiguration,\n      stdioSummarizer: operation.stdioSummarizer,\n      collatedWriter: operation.collatedWriter,\n      quietMode: this._quietMode,\n      debugMode: this._debugMode\n    };\n\n    try {\n      const result: OperationStatus = await operation.runner.executeAsync(context);\n\n      operation.stopwatch.stop();\n      operation.stdioSummarizer.close();\n\n      switch (result) {\n        case OperationStatus.Success:\n          this._markAsSuccess(operation);\n          break;\n        case OperationStatus.SuccessWithWarning:\n          this._hasAnyNonAllowedWarnings =\n            this._hasAnyNonAllowedWarnings || !operation.runner.warningsAreAllowed;\n          this._markAsSuccessWithWarning(operation);\n          break;\n        case OperationStatus.FromCache:\n          this._markAsFromCache(operation);\n          break;\n        case OperationStatus.Skipped:\n          this._markAsSkipped(operation);\n          break;\n        case OperationStatus.Failure:\n          this._hasAnyFailures = true;\n          this._markAsFailed(operation);\n          break;\n      }\n    } catch (error) {\n      operation.stdioSummarizer.close();\n\n      this._hasAnyFailures = true;\n\n      // eslint-disable-next-line require-atomic-updates\n      operation.error = error as OperationError;\n\n      this._markAsFailed(operation);\n    }\n\n    operation.collatedWriter.close();\n  }\n\n  /**\n   * Marks an operation as having failed and marks each of its dependents as blocked\n   */\n  private _markAsFailed(operation: Operation): void {\n    if (operation.error) {\n      operation.collatedWriter.terminal.writeStderrLine(operation.error.message);\n    }\n    operation.collatedWriter.terminal.writeStderrLine(colors.red(`\"${operation.name}\" failed to build.`));\n    operation.status = OperationStatus.Failure;\n    operation.dependents.forEach((dependent: Operation) => {\n      this._markAsBlocked(dependent, operation);\n    });\n  }\n\n  /**\n   * Marks an operation and all its dependents as blocked\n   */\n  private _markAsBlocked(blockedOperation: Operation, failedOperation: Operation): void {\n    if (blockedOperation.status === OperationStatus.Ready) {\n      this._completedOperations++;\n\n      // Note: We cannot write to blockedOperation.collatedWriter because \"blockedOperation\" will be skipped\n      failedOperation.collatedWriter.terminal.writeStdoutLine(\n        `\"${blockedOperation.name}\" is blocked by \"${failedOperation.name}\".`\n      );\n      blockedOperation.status = OperationStatus.Blocked;\n      blockedOperation.dependents.forEach((dependent: Operation) => {\n        this._markAsBlocked(dependent, failedOperation);\n      });\n    }\n  }\n\n  /**\n   * Marks an operation as being completed, and removes it from the dependencies list of all its dependents\n   */\n  private _markAsSuccess(operation: Operation): void {\n    if (operation.runner.hadEmptyScript) {\n      operation.collatedWriter.terminal.writeStdoutLine(\n        colors.green(`\"${operation.name}\" had an empty script.`)\n      );\n    } else {\n      operation.collatedWriter.terminal.writeStdoutLine(\n        colors.green(`\"${operation.name}\" completed successfully in ${operation.stopwatch.toString()}.`)\n      );\n    }\n    operation.status = OperationStatus.Success;\n\n    operation.dependents.forEach((dependent: Operation) => {\n      if (!this._changedProjectsOnly) {\n        dependent.runner.isSkipAllowed = false;\n      }\n      dependent.dependencies.delete(operation);\n    });\n  }\n\n  /**\n   * Marks an operation as being completed, but with warnings written to stderr, and removes it from the dependencies\n   * list of all its dependents\n   */\n  private _markAsSuccessWithWarning(operation: Operation): void {\n    operation.collatedWriter.terminal.writeStderrLine(\n      colors.yellow(`\"${operation.name}\" completed with warnings in ${operation.stopwatch.toString()}.`)\n    );\n    operation.status = OperationStatus.SuccessWithWarning;\n    operation.dependents.forEach((dependent: Operation) => {\n      if (!this._changedProjectsOnly) {\n        dependent.runner.isSkipAllowed = false;\n      }\n      dependent.dependencies.delete(operation);\n    });\n  }\n\n  /**\n   * Marks an operation as skipped.\n   */\n  private _markAsSkipped(operation: Operation): void {\n    operation.collatedWriter.terminal.writeStdoutLine(colors.green(`${operation.name} was skipped.`));\n    operation.status = OperationStatus.Skipped;\n    operation.dependents.forEach((dependent: Operation) => {\n      dependent.dependencies.delete(operation);\n    });\n\n    const invalidationQueue: Set<Operation> = new Set(operation.dependents);\n    for (const consumer of invalidationQueue) {\n      // If an operation is skipped, state is not guaranteed in downstream tasks, so block cache write\n      consumer.runner.isCacheWriteAllowed = false;\n\n      // Propagate through the entire build queue applying cache write prevention.\n      for (const indirectConsumer of consumer.dependents) {\n        invalidationQueue.add(indirectConsumer);\n      }\n    }\n  }\n\n  /**\n   * Marks an operation as provided by cache.\n   */\n  private _markAsFromCache(operation: Operation): void {\n    operation.collatedWriter.terminal.writeStdoutLine(\n      colors.green(`${operation.name} was restored from the build cache.`)\n    );\n    operation.status = OperationStatus.FromCache;\n    operation.dependents.forEach((dependent: Operation) => {\n      dependent.dependencies.delete(operation);\n    });\n  }\n\n  /**\n   * Prints out a report of the status of each project\n   */\n  private _printOperationStatus(): void {\n    const operationsByStatus: Record<string, Operation[]> = {};\n    for (const operation of this._operations) {\n      switch (operation.status) {\n        // These are the sections that we will report below\n        case OperationStatus.Skipped:\n        case OperationStatus.FromCache:\n        case OperationStatus.Success:\n        case OperationStatus.SuccessWithWarning:\n        case OperationStatus.Blocked:\n        case OperationStatus.Failure:\n          break;\n        default:\n          // This should never happen\n          throw new InternalError('Unexpected task status: ' + operation.status);\n      }\n\n      if (operationsByStatus[operation.status]) {\n        operationsByStatus[operation.status].push(operation);\n      } else {\n        operationsByStatus[operation.status] = [operation];\n      }\n    }\n\n    // Skip a few lines before we start the summary\n    this._terminal.writeStdoutLine('');\n    this._terminal.writeStdoutLine('');\n    this._terminal.writeStdoutLine('');\n\n    // These are ordered so that the most interesting statuses appear last:\n    this._writeCondensedSummary(\n      OperationStatus.Skipped,\n      operationsByStatus,\n      colors.green,\n      'These projects were already up to date:'\n    );\n\n    this._writeCondensedSummary(\n      OperationStatus.FromCache,\n      operationsByStatus,\n      colors.green,\n      'These projects were restored from the build cache:'\n    );\n\n    this._writeCondensedSummary(\n      OperationStatus.Success,\n      operationsByStatus,\n      colors.green,\n      'These projects completed successfully:'\n    );\n\n    this._writeDetailedSummary(\n      OperationStatus.SuccessWithWarning,\n      operationsByStatus,\n      colors.yellow,\n      'WARNING'\n    );\n\n    this._writeCondensedSummary(\n      OperationStatus.Blocked,\n      operationsByStatus,\n      colors.white,\n      'These projects were blocked by dependencies that failed:'\n    );\n\n    this._writeDetailedSummary(OperationStatus.Failure, operationsByStatus, colors.red);\n\n    this._terminal.writeStdoutLine('');\n  }\n\n  private _writeCondensedSummary(\n    status: OperationStatus,\n    operationsByStatus: Record<string, Operation[]>,\n    headingColor: (text: string) => string,\n    preamble: string\n  ): void {\n    // Example:\n    //\n    // ==[ BLOCKED: 4 projects ]==============================================================\n    //\n    // These projects were blocked by dependencies that failed:\n    //   @scope/name\n    //   e\n    //   k\n\n    const operations: Operation[] | undefined = operationsByStatus[status];\n    if (!operations || operations.length === 0) {\n      return;\n    }\n    Sort.sortBy(operations, (x) => x.name);\n\n    this._writeSummaryHeader(status, operations, headingColor);\n    this._terminal.writeStdoutLine(preamble);\n\n    const longestTaskName: number = Math.max(...operations.map((x) => x.name.length));\n\n    for (const operation of operations) {\n      if (\n        operation.stopwatch &&\n        !operation.runner.hadEmptyScript &&\n        operation.status !== OperationStatus.Skipped\n      ) {\n        const time: string = operation.stopwatch.toString();\n        const padding: string = ' '.repeat(longestTaskName - operation.name.length);\n        this._terminal.writeStdoutLine(`  ${operation.name}${padding}    ${time}`);\n      } else {\n        this._terminal.writeStdoutLine(`  ${operation.name}`);\n      }\n    }\n    this._terminal.writeStdoutLine('');\n  }\n\n  private _writeDetailedSummary(\n    status: OperationStatus,\n    operationsByStatus: Record<string, Operation[]>,\n    headingColor: (text: string) => string,\n    shortStatusName?: string\n  ): void {\n    // Example:\n    //\n    // ==[ SUCCESS WITH WARNINGS: 2 projects ]================================\n    //\n    // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n    //\n    // [eslint] Warning: src/logic/operations/OperationsExecutionManager.ts:393:3 ...\n\n    const operations: Operation[] | undefined = operationsByStatus[status];\n    if (!operations || operations.length === 0) {\n      return;\n    }\n\n    this._writeSummaryHeader(status, operations, headingColor);\n\n    if (shortStatusName === undefined) {\n      shortStatusName = status;\n    }\n\n    for (const operation of operations) {\n      // Format a header like this\n      //\n      // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n\n      // leftPart: \"--[ WARNINGS: f \"\n      const subheadingText: string = `${shortStatusName}: ${operation.name}`;\n\n      const leftPart: string = colors.gray('--[') + ' ' + headingColor(subheadingText) + ' ';\n      const leftPartLength: number = 4 + subheadingText.length + 1;\n\n      // rightPart: \" 5.07 seconds ]--\"\n      const time: string = operation.stopwatch.toString();\n      const rightPart: string = ' ' + colors.white(time) + ' ' + colors.gray(']--');\n      const rightPartLength: number = 1 + time.length + 1 + 3;\n\n      // middlePart: \"]----------------------[\"\n      const twoBracketsLength: number = 2;\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\n        ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\n        0\n      );\n\n      const middlePart: string = colors.gray(']' + '-'.repeat(middlePartLengthMinusTwoBrackets) + '[');\n\n      this._terminal.writeStdoutLine(leftPart + middlePart + rightPart + '\\n');\n\n      const details: string = operation.stdioSummarizer.getReport();\n      if (details) {\n        // Don't write a newline, because the report will always end with a newline\n        this._terminal.writeChunk({ text: details, kind: TerminalChunkKind.Stdout });\n      }\n\n      this._terminal.writeStdoutLine('');\n    }\n  }\n\n  private _writeSummaryHeader(\n    status: OperationStatus,\n    operations: Operation[],\n    headingColor: (text: string) => string\n  ): void {\n    // Format a header like this\n    //\n    // ==[ FAILED: 2 projects ]================================================\n\n    // \"2 projects\"\n    const projectsText: string = `${operations.length}${operations.length === 1 ? ' project' : ' projects'}`;\n    const headingText: string = `${status}: ${projectsText}`;\n\n    // leftPart: \"==[ FAILED: 2 projects \"\n    const leftPart: string = `${colors.gray('==[')} ${headingColor(headingText)} `;\n    const leftPartLength: number = 3 + 1 + headingText.length + 1;\n\n    const rightPartLengthMinusBracket: number = Math.max(ASCII_HEADER_WIDTH - (leftPartLength + 1), 0);\n\n    // rightPart: \"]======================\"\n    const rightPart: string = colors.gray(`]${'='.repeat(rightPartLengthMinusBracket)}`);\n\n    this._terminal.writeStdoutLine(leftPart + rightPart);\n    this._terminal.writeStdoutLine('');\n  }\n}\n"]}