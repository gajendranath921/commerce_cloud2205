import { ChangeDetectorRef, ElementRef, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CssClassBuilder } from '../../utils/public_api';
export declare type stateType = 'valid' | 'invalid' | 'warning' | 'default' | 'information';
export declare class RadioButtonComponent implements AfterViewInit, CssClassBuilder, ControlValueAccessor {
    private changeDetectionRef;
    /** @hidden */
    class: string;
    /** @hidden */
    inputElement: ElementRef;
    /** @hidden */
    actualValue: any;
    private _compact;
    /** Whether to apply compact mode to the radio button.
     * Value: true or false
     * By default field is set to false
     */
    compact: boolean;
    private _state;
    /** The field to set state of radio button using:
     * 'valid' | 'invalid' | 'warning' | 'default' | 'information'
     * by default value is set to 'default'
     */
    state: stateType;
    private _disabled;
    /** The field is used to tell if radio button should be disabled
     * Value: true or false
     * by default disabled state is set to false
     */
    /** @hidden */
    disabled: boolean;
    /** The field should be only used with reactive forms
     * Its purpose is to pass a current selected value from froumGroup
     * The field is mandatory when working with reactive forms
     */
    selectedValue: any;
    private _name;
    /** The name of the radio button
     * The field is mandatory
     */
    /** @hidden */
    name: string;
    readonly checked: boolean;
    /**
     * Set uniqueId to a radio button
     */
    id: string;
    /** Value field stores information about holding value by radio button
     * The field is mandatory
     */
    value: any;
    /** @hidden */
    onChange: any;
    /** @hidden */
    onTouched: any;
    /** @hidden */
    registerOnChange(fn: (selected: any) => {
        void: any;
    }): void;
    /** @hidden */
    registerOnTouched(fn: any): void;
    /** @hidden */
    setDisabledState(isDisabled: boolean): void;
    /** @hidden */
    writeValue(value: any): void;
    /** @hidden */
    labelClicked(): void;
    /** @hidden */
    valueChange(value: any): void;
    /** @hidden */
    constructor(changeDetectionRef: ChangeDetectorRef);
    /** @hidden */
    ngAfterViewInit(): void;
    /** This method is responsible for building a css class based on current state
     *  It is implementation of CssClassBuilder interface and
     *  should be used with @applyCssClass decorator
     */
    buildComponentCssClass(): string;
    /** @hidden */
    elementRef(): ElementRef<any>;
    /** @hidden */
    private _checkMandatoryFields;
    /** @hidden */
    private _setFocusOnNativeElement;
    /** @hidden */
    private _setNativeElementCheckedState;
}
