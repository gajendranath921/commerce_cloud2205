/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list-directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
export class NestedListHeaderDirective {
    constructor() {
        /**
         * @hidden
         */
        this.fdNestedListHeaderClass = true;
    }
}
NestedListHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdNestedDirectivesHeader], [fd-nested-list-header]'
            },] }
];
NestedListHeaderDirective.propDecorators = {
    fdNestedListHeaderClass: [{ type: HostBinding, args: ['class.fd-nested-list__group-header',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedListHeaderDirective.prototype.fdNestedListHeaderClass;
}
export class NestedListIconDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this.fdNestedListIconClass = true;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        if (this.glyph) {
            this._addClassToElement('sap-icon--' + this.glyph);
        }
        this._addClassToElement('fd-nested-list__icon');
    }
}
NestedListIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdNestedDirectivesIcon], [fd-nested-list-icon]'
            },] }
];
/** @nocollapse */
NestedListIconDirective.ctorParameters = () => [
    { type: ElementRef }
];
NestedListIconDirective.propDecorators = {
    fdNestedListIconClass: [{ type: HostBinding, args: ['class.fd-nested-list__icon',] }],
    glyph: [{ type: Input }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedListIconDirective.prototype.fdNestedListIconClass;
    /**
     * The icon name to display. See the icon page for the list of icons
     * here: https://sap.github.io/fundamental-ngx/icon
     * @type {?}
     */
    NestedListIconDirective.prototype.glyph;
    /**
     * @type {?}
     * @private
     */
    NestedListIconDirective.prototype.elementRef;
}
export class NestedListTitleDirective {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this.fdNestedListTitleClass = true;
    }
    /**
     * Returns element's InnerText
     * @return {?}
     */
    getInnerText() {
        return this.elementRef && this.elementRef.nativeElement.innerText;
    }
}
NestedListTitleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdNestedDirectivesTitle], [fd-nested-list-title]'
            },] }
];
/** @nocollapse */
NestedListTitleDirective.ctorParameters = () => [
    { type: ElementRef }
];
NestedListTitleDirective.propDecorators = {
    fdNestedListTitleClass: [{ type: HostBinding, args: ['class.fd-nested-list__title',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedListTitleDirective.prototype.fdNestedListTitleClass;
    /**
     * @type {?}
     * @private
     */
    NestedListTitleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkLWxpc3QtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZXN0ZWQtbGlzdC9uZXN0ZWQtbGlzdC1kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUtwRSxNQUFNLE9BQU8seUJBQXlCO0lBSHRDOzs7O1FBT0ksNEJBQXVCLEdBQVksSUFBSSxDQUFDO0lBRTVDLENBQUM7OztZQVRBLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscURBQXFEO2FBQ2hFOzs7c0NBSUksV0FBVyxTQUFDLG9DQUFvQzs7Ozs7OztJQUFqRCw0REFDd0M7O0FBTzVDLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxrQkFBa0I7Ozs7O0lBcUIzRCxZQUFvQixVQUFzQjtRQUN0QyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFERixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBakIxQywwQkFBcUIsR0FBWSxJQUFJLENBQUM7SUFtQnRDLENBQUM7Ozs7O0lBVkQsY0FBYztRQUNWLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDcEQsQ0FBQzs7O1lBckJKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaURBQWlEO2FBQzVEOzs7O1lBaEJtQixVQUFVOzs7b0NBb0J6QixXQUFXLFNBQUMsNEJBQTRCO29CQU94QyxLQUFLOzs7Ozs7O0lBUE4sd0RBQ3NDOzs7Ozs7SUFNdEMsd0NBQXVCOzs7OztJQVdYLDZDQUE4Qjs7QUFTOUMsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7SUFPakMsWUFDWSxVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBSmxDLDJCQUFzQixHQUFZLElBQUksQ0FBQztJQUtwQyxDQUFDOzs7OztJQUdHLFlBQVk7UUFDZixPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3RFLENBQUM7OztZQWpCSixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1EQUFtRDthQUM5RDs7OztZQTlDbUIsVUFBVTs7O3FDQWtEekIsV0FBVyxTQUFDLDZCQUE2Qjs7Ozs7OztJQUExQywwREFDdUM7Ozs7O0lBSW5DLDhDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZkTmd4Q2xhc3MgfSBmcm9tICcuLi91dGlscy9hYnN0cmFjdC1mZC1uZ3gtY2xhc3MnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmROZXN0ZWREaXJlY3RpdmVzSGVhZGVyXSwgW2ZkLW5lc3RlZC1saXN0LWhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIE5lc3RlZExpc3RIZWFkZXJEaXJlY3RpdmUge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLW5lc3RlZC1saXN0X19ncm91cC1oZWFkZXInKVxuICAgIGZkTmVzdGVkTGlzdEhlYWRlckNsYXNzOiBib29sZWFuID0gdHJ1ZTtcblxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmROZXN0ZWREaXJlY3RpdmVzSWNvbl0sIFtmZC1uZXN0ZWQtbGlzdC1pY29uXSdcbn0pXG5leHBvcnQgY2xhc3MgTmVzdGVkTGlzdEljb25EaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdEZkTmd4Q2xhc3Mge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLW5lc3RlZC1saXN0X19pY29uJylcbiAgICBmZE5lc3RlZExpc3RJY29uQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGljb24gbmFtZSB0byBkaXNwbGF5LiBTZWUgdGhlIGljb24gcGFnZSBmb3IgdGhlIGxpc3Qgb2YgaWNvbnNcbiAgICAgKiBoZXJlOiBodHRwczovL3NhcC5naXRodWIuaW8vZnVuZGFtZW50YWwtbmd4L2ljb25cbiAgICAgKi9cbiAgICBASW5wdXQoKSBnbHlwaDogc3RyaW5nO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0UHJvcGVydGllcygpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2x5cGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdzYXAtaWNvbi0tJyArIHRoaXMuZ2x5cGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1uZXN0ZWQtbGlzdF9faWNvbicpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICAgIH1cblxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmROZXN0ZWREaXJlY3RpdmVzVGl0bGVdLCBbZmQtbmVzdGVkLWxpc3QtdGl0bGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZXN0ZWRMaXN0VGl0bGVEaXJlY3RpdmUge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLW5lc3RlZC1saXN0X190aXRsZScpXG4gICAgZmROZXN0ZWRMaXN0VGl0bGVDbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmXG4gICAgKSB7fVxuXG4gICAgLyoqIFJldHVybnMgZWxlbWVudCdzIElubmVyVGV4dCAqL1xuICAgIHB1YmxpYyBnZXRJbm5lclRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZiAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lclRleHQ7XG4gICAgfVxuXG59XG4iXX0=