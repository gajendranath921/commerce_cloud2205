import { AfterContentInit, ElementRef, EventEmitter } from '@angular/core';
import { NestedLinkDirective } from '../nested-link/nested-link.directive';
import { NestedListKeyboardService } from '../nested-list-keyboard.service';
import { NestedListPopoverComponent } from '../nested-list-popover/nested-list-popover.component';
import { NestedItemInterface } from './nested-item.interface';
import { NestedListDirective } from '../nested-list/nested-list.directive';
import { PreparedNestedListComponent } from '../prepared-nested-list/prepared-nested-list.component';
export declare class NestedItemDirective implements AfterContentInit, NestedItemInterface {
    private elementRef;
    private keyboardService;
    /** @hidden */
    fdNestedListItemClass: boolean;
    /**
     * @hidden
     * Reference to the link directive, to allow manipulating the properties of this element.
     */
    linkItem: NestedLinkDirective;
    /** @hidden */
    popoverItem: NestedListPopoverComponent;
    /** @hidden */
    nestedListItem: NestedListDirective;
    /** @hidden */
    preparedListComponent: PreparedNestedListComponent;
    /** Check if the item element has any child */
    readonly hasChildren: boolean;
    /** Get all of the children item elements */
    readonly allChildrenItems: NestedItemInterface[];
    /** @hidden */
    constructor(elementRef: ElementRef, keyboardService: NestedListKeyboardService);
    /** Whether item should be expanded */
    /** @hidden */
    expanded: boolean;
    /** @hidden */
    private _expanded;
    /** Event thrown, when expanded state is changed */
    readonly expandedChange: EventEmitter<boolean>;
    /** Event thrown, when any keyboard event is dispatched on this, or link element */
    readonly keyboardTriggered: EventEmitter<KeyboardEvent>;
    /** @hidden */
    ngAfterContentInit(): void;
    /** Method that expand the item and propagate it to children */
    triggerOpen(): void;
    /** Method that close the item and propagate it to children */
    triggerClose(): void;
    /** Method that toggle the item and propagate it to children */
    toggle(): void;
    /** Method that dispatches `click` event on link item*/
    click(): void;
    /** Method that focuses link item*/
    focus(): void;
    /**
     * @hidden
     * Propagate open state to all of the children
     */
    private propagateOpenChange;
    /**
     * @hidden
     */
    private readonly nestedListFromPreparedComponent;
}
