/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
export class NestedListStateService {
    constructor() {
        /**
         * @hidden
         * The condensed state is modified by the parent and read by nested lists.
         */
        this.condensed = false;
        /**
         * Event, that is thrown always, when the link's selected state is changed, triggers
         */
        this.refresh$ = new Subject();
    }
    /**
     * @hidden
     * Recursive method, that adds selected state to parents, when any of the children is selected
     * @private
     * @param {?} item
     * @return {?}
     */
    selected(item) {
        item.allChildrenItems.forEach((/**
         * @param {?} _item
         * @return {?}
         */
        _item => _item.linkItem.controlSelected = _item.linkItem.selected));
        /** @type {?} */
        const hasChildSelected = !!item.allChildrenItems.find((/**
         * @param {?} _item
         * @return {?}
         */
        _item => (_item.linkItem && _item.linkItem.selected || this.selected(_item))));
        if (hasChildSelected) {
            item.linkItem.controlSelected = hasChildSelected;
        }
        return hasChildSelected;
    }
    /**
     * @hidden
     * Recursive method, that removes all of controlSelected properties.
     * @private
     * @param {?} item
     * @return {?}
     */
    resetSelected(item) {
        if (item.linkItem) {
            item.linkItem.controlSelected = false;
        }
        item.allChildrenItems.forEach((/**
         * @param {?} _item
         * @return {?}
         */
        _item => {
            this.resetSelected(_item);
        }));
    }
    /**
     * Method that adds selected state to elements, depending on children from deeper level
     * @param {?} list
     * @return {?}
     */
    propagateSelected(list) {
        list.nestedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => this.resetSelected(item)));
        list.nestedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => this.selected(item)));
    }
}
if (false) {
    /**
     * @hidden
     * The condensed state is modified by the parent and read by nested lists.
     * @type {?}
     */
    NestedListStateService.prototype.condensed;
    /**
     * Event, that is thrown always, when the link's selected state is changed, triggers
     * @type {?}
     */
    NestedListStateService.prototype.refresh$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkLWxpc3Qtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZXN0ZWQtbGlzdC9uZXN0ZWQtbGlzdC1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixNQUFNLE9BQU8sc0JBQXNCO0lBQW5DOzs7OztRQU1JLGNBQVMsR0FBWSxLQUFLLENBQUM7Ozs7UUFLbEIsYUFBUSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0lBdUMzRCxDQUFDOzs7Ozs7OztJQWpDVyxRQUFRLENBQUMsSUFBeUI7UUFFdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFDLENBQUM7O2NBRTNGLGdCQUFnQixHQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSTs7OztRQUMxRCxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQy9FO1FBRUQsSUFBSSxnQkFBZ0IsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztTQUNwRDtRQUNELE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQzs7Ozs7Ozs7SUFNTyxhQUFhLENBQUMsSUFBeUI7UUFDM0MsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLENBQUMsRUFBQyxDQUFBO0lBQ04sQ0FBQzs7Ozs7O0lBR00saUJBQWlCLENBQUMsSUFBeUI7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUM7SUFDMUQsQ0FBQztDQUVKOzs7Ozs7O0lBNUNHLDJDQUEyQjs7Ozs7SUFLM0IsMENBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmVzdGVkTGlzdEludGVyZmFjZSB9IGZyb20gJy4vbmVzdGVkLWxpc3QvbmVzdGVkLWxpc3QuaW50ZXJmYWNlJztcbmltcG9ydCB7IE5lc3RlZEl0ZW1JbnRlcmZhY2UgfSBmcm9tICcuL25lc3RlZC1pdGVtL25lc3RlZC1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBOZXN0ZWRMaXN0U3RhdGVTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBUaGUgY29uZGVuc2VkIHN0YXRlIGlzIG1vZGlmaWVkIGJ5IHRoZSBwYXJlbnQgYW5kIHJlYWQgYnkgbmVzdGVkIGxpc3RzLlxuICAgICAqL1xuICAgIGNvbmRlbnNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQsIHRoYXQgaXMgdGhyb3duIGFsd2F5cywgd2hlbiB0aGUgbGluaydzIHNlbGVjdGVkIHN0YXRlIGlzIGNoYW5nZWQsIHRyaWdnZXJzXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVmcmVzaCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFJlY3Vyc2l2ZSBtZXRob2QsIHRoYXQgYWRkcyBzZWxlY3RlZCBzdGF0ZSB0byBwYXJlbnRzLCB3aGVuIGFueSBvZiB0aGUgY2hpbGRyZW4gaXMgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGVjdGVkKGl0ZW06IE5lc3RlZEl0ZW1JbnRlcmZhY2UpOiBib29sZWFuIHtcblxuICAgICAgICBpdGVtLmFsbENoaWxkcmVuSXRlbXMuZm9yRWFjaChfaXRlbSA9PiBfaXRlbS5saW5rSXRlbS5jb250cm9sU2VsZWN0ZWQgPSBfaXRlbS5saW5rSXRlbS5zZWxlY3RlZCk7XG5cbiAgICAgICAgY29uc3QgaGFzQ2hpbGRTZWxlY3RlZDogYm9vbGVhbiA9ICEhaXRlbS5hbGxDaGlsZHJlbkl0ZW1zLmZpbmQoXG4gICAgICAgICAgICBfaXRlbSA9PiAoX2l0ZW0ubGlua0l0ZW0gJiYgX2l0ZW0ubGlua0l0ZW0uc2VsZWN0ZWQgfHwgdGhpcy5zZWxlY3RlZChfaXRlbSkpXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGhhc0NoaWxkU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGl0ZW0ubGlua0l0ZW0uY29udHJvbFNlbGVjdGVkID0gaGFzQ2hpbGRTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzQ2hpbGRTZWxlY3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogUmVjdXJzaXZlIG1ldGhvZCwgdGhhdCByZW1vdmVzIGFsbCBvZiBjb250cm9sU2VsZWN0ZWQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc2V0U2VsZWN0ZWQoaXRlbTogTmVzdGVkSXRlbUludGVyZmFjZSk6IHZvaWQge1xuICAgICAgICBpZiAoaXRlbS5saW5rSXRlbSkge1xuICAgICAgICAgICAgaXRlbS5saW5rSXRlbS5jb250cm9sU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLmFsbENoaWxkcmVuSXRlbXMuZm9yRWFjaChfaXRlbSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0ZWQoX2l0ZW0pO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBNZXRob2QgdGhhdCBhZGRzIHNlbGVjdGVkIHN0YXRlIHRvIGVsZW1lbnRzLCBkZXBlbmRpbmcgb24gY2hpbGRyZW4gZnJvbSBkZWVwZXIgbGV2ZWwgKi9cbiAgICBwdWJsaWMgcHJvcGFnYXRlU2VsZWN0ZWQobGlzdDogTmVzdGVkTGlzdEludGVyZmFjZSk6IHZvaWQge1xuICAgICAgICBsaXN0Lm5lc3RlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLnJlc2V0U2VsZWN0ZWQoaXRlbSkpO1xuICAgICAgICBsaXN0Lm5lc3RlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLnNlbGVjdGVkKGl0ZW0pKTtcbiAgICB9XG5cbn1cbiJdfQ==