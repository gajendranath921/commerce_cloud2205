/**
 * @fileoverview added by tsickle
 * Generated from: lib/form/form-input-message-group/form-input-message-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
var FormInputMessageGroupComponent = /** @class */ (function () {
    function FormInputMessageGroupComponent() {
        /*
             * To allow user to determine what event he wants to trigger the messages to show
             * Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
             */
        this.triggers = ['click'];
        /*
             * Allows the user to decide if he wants to keep the error message after they click outside
             *  Whether the popover should close when a click is made outside its boundaries.
             */
        this.closeOnOutsideClick = true;
        /**
         * Whether the message is open. Can be used through two-way binding.
         */
        this.isOpen = false;
        /**
         * Event emitted when the state of the isOpen property changes.
         */
        this.isOpenChange = new EventEmitter();
    }
    /**
     * Function is called every time message changes isOpen attribute
     */
    /**
     * Function is called every time message changes isOpen attribute
     * @param {?} isOpen
     * @return {?}
     */
    FormInputMessageGroupComponent.prototype.openChanged = /**
     * Function is called every time message changes isOpen attribute
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        this.isOpenChange.emit(isOpen);
    };
    FormInputMessageGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-form-input-message-group',
                    template: "<fd-popover class=\"fd-form-input-message-group\"\n            [triggers]=\"triggers\"\n            [fillControlMode]=\"fillControlMode\"\n            [closeOnOutsideClick]=\"closeOnOutsideClick\"\n            [isOpen]=\"isOpen\"\n            (isOpenChange)=\"openChanged($event)\"\n            [addContainerClass]=\"'fd-popover-container-custom--message'\">\n    <fd-popover-control>\n        <ng-content select=\"[fd-form-control]\"></ng-content>\n    </fd-popover-control>\n    <fd-popover-body>\n        <ng-content select=\"fd-form-message\"></ng-content>\n    </fd-popover-body>\n</fd-popover>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n\n.fd-form-input-message-group\n*/.fd-form-input-message-group{display:flex;flex-grow:1;position:relative}.fd-popover-container-custom--message{flex-grow:1}.fd-popover-container-custom{border:none}"]
                }] }
    ];
    FormInputMessageGroupComponent.propDecorators = {
        triggers: [{ type: Input }],
        closeOnOutsideClick: [{ type: Input }],
        fillControlMode: [{ type: Input }],
        isOpen: [{ type: Input }],
        isOpenChange: [{ type: Output }]
    };
    return FormInputMessageGroupComponent;
}());
export { FormInputMessageGroupComponent };
if (false) {
    /** @type {?} */
    FormInputMessageGroupComponent.prototype.triggers;
    /** @type {?} */
    FormInputMessageGroupComponent.prototype.closeOnOutsideClick;
    /**
     * Preset options for the message body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.fillControlMode;
    /**
     * Whether the message is open. Can be used through two-way binding.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.isOpen;
    /**
     * Event emitted when the state of the isOpen property changes.
     * @type {?}
     */
    FormInputMessageGroupComponent.prototype.isOpenChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1pbnB1dC1tZXNzYWdlLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2Zvcm0taW5wdXQtbWVzc2FnZS1ncm91cC9mb3JtLWlucHV0LW1lc3NhZ2UtZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduSDtJQUFBOzs7OztRQWNJLGFBQVEsR0FBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7OztRQU8vQix3QkFBbUIsR0FBWSxJQUFJLENBQUM7Ozs7UUFhcEMsV0FBTSxHQUFZLEtBQUssQ0FBQzs7OztRQUl4QixpQkFBWSxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0lBU3RFLENBQUM7SUFQRzs7T0FFRzs7Ozs7O0lBQ0ksb0RBQVc7Ozs7O0lBQWxCLFVBQW1CLE1BQWU7UUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Z0JBN0NKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QyxxbUJBQXdEO29CQUV4RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNsRDs7OzJCQU9JLEtBQUs7c0NBT0wsS0FBSztrQ0FTTCxLQUFLO3lCQUlMLEtBQUs7K0JBSUwsTUFBTTs7SUFVWCxxQ0FBQztDQUFBLEFBL0NELElBK0NDO1NBeENZLDhCQUE4Qjs7O0lBTXZDLGtEQUMrQjs7SUFNL0IsNkRBQ29DOzs7Ozs7OztJQVFwQyx5REFDaUM7Ozs7O0lBR2pDLGdEQUN3Qjs7Ozs7SUFHeEIsc0RBQ2tFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wb3ZlckZpbGxNb2RlIH0gZnJvbSAnLi4vLi4vcG9wb3Zlci9wb3BvdmVyLWRpcmVjdGl2ZS9wb3BvdmVyLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZmQtZm9ybS1pbnB1dC1tZXNzYWdlLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1pbnB1dC1tZXNzYWdlLWdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9mb3JtLWlucHV0LW1lc3NhZ2UtZ3JvdXAuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1JbnB1dE1lc3NhZ2VHcm91cENvbXBvbmVudCB7XG5cbiAgICAvKlxuICAgICAqIFRvIGFsbG93IHVzZXIgdG8gZGV0ZXJtaW5lIHdoYXQgZXZlbnQgaGUgd2FudHMgdG8gdHJpZ2dlciB0aGUgbWVzc2FnZXMgdG8gc2hvd1xuICAgICAqIEFjY2VwdHMgYW55IFtIVE1MIERPTSBFdmVudHNdKGh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvZG9tX29ial9ldmVudC5hc3ApLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgdHJpZ2dlcnM6IHN0cmluZ1tdID0gWydjbGljayddO1xuXG4gICAgLypcbiAgICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZGVjaWRlIGlmIGhlIHdhbnRzIHRvIGtlZXAgdGhlIGVycm9yIG1lc3NhZ2UgYWZ0ZXIgdGhleSBjbGljayBvdXRzaWRlXG4gICAgICogIFdoZXRoZXIgdGhlIHBvcG92ZXIgc2hvdWxkIGNsb3NlIHdoZW4gYSBjbGljayBpcyBtYWRlIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjbG9zZU9uT3V0c2lkZUNsaWNrOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFByZXNldCBvcHRpb25zIGZvciB0aGUgbWVzc2FnZSBib2R5IHdpZHRoLlxuICAgICAqICogYGF0LWxlYXN0YCB3aWxsIGFwcGx5IGEgbWluaW11bSB3aWR0aCB0byB0aGUgYm9keSBlcXVpdmFsZW50IHRvIHRoZSB3aWR0aCBvZiB0aGUgY29udHJvbC5cbiAgICAgKiAqIGBlcXVhbGAgd2lsbCBhcHBseSBhIHdpZHRoIHRvIHRoZSBib2R5IGVxdWl2YWxlbnQgdG8gdGhlIHdpZHRoIG9mIHRoZSBjb250cm9sLlxuICAgICAqICogTGVhdmUgYmxhbmsgZm9yIG5vIGVmZmVjdC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb250cm9sTW9kZTogUG9wb3ZlckZpbGxNb2RlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIG1lc3NhZ2UgaXMgb3Blbi4gQ2FuIGJlIHVzZWQgdGhyb3VnaCB0d28td2F5IGJpbmRpbmcuICovXG4gICAgQElucHV0KClcbiAgICBpc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIHN0YXRlIG9mIHRoZSBpc09wZW4gcHJvcGVydHkgY2hhbmdlcy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBpc09wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGlzIGNhbGxlZCBldmVyeSB0aW1lIG1lc3NhZ2UgY2hhbmdlcyBpc09wZW4gYXR0cmlidXRlXG4gICAgICovXG4gICAgcHVibGljIG9wZW5DaGFuZ2VkKGlzT3BlbjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzT3BlbkNoYW5nZS5lbWl0KGlzT3Blbik7XG4gICAgfVxuXG59XG4iXX0=