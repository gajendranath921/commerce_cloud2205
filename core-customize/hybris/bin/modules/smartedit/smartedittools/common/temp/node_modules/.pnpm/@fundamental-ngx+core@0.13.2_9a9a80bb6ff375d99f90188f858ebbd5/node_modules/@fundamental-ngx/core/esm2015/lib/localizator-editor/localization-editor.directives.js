/**
 * @fileoverview added by tsickle
 * Generated from: lib/localizator-editor/localization-editor.directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * Directive which is used along with input elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <input fd-localization-editor-input type="text" placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
export class LocalizationEditorInputDirective {
    constructor() {
        /**
         * @hidden
         */
        this.fdInputGroupInputClass = true;
    }
}
LocalizationEditorInputDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-input]'
            },] }
];
LocalizationEditorInputDirective.propDecorators = {
    fdInputGroupInputClass: [{ type: HostBinding, args: ['class.fd-input-group__input',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorInputDirective.prototype.fdInputGroupInputClass;
}
/**
 * Directive which is used along with textarea elements, inside the localization editor item or main.
 *  ```html
 *  <fd-localization-editor-item>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 */
export class LocalizationEditorTextareaDirective {
    constructor() {
        /**
         * @hidden
         */
        this.fdInputGroupInputClass = true;
        /**
         * @hidden
         */
        this.fdLocalizationEditorTextareaClass = true;
    }
}
LocalizationEditorTextareaDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-textarea]',
            },] }
];
LocalizationEditorTextareaDirective.propDecorators = {
    compact: [{ type: HostBinding, args: ['class.fd-input--compact',] }],
    fdInputGroupInputClass: [{ type: HostBinding, args: ['class.fd-input-group__input',] }],
    fdLocalizationEditorTextareaClass: [{ type: HostBinding, args: ['class.fd-localization-editor-textarea',] }]
};
if (false) {
    /**
     * @hidden
     *  Variable is controlled by parent component and define if there should be used compact mode
     *
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.compact;
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.fdInputGroupInputClass;
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorTextareaDirective.prototype.fdLocalizationEditorTextareaClass;
}
/**
 * Directive which is used to add complex content, which will be displayed in the add-on space.
 *  ```html
 *  <fd-localization-editor-item>
 *      <ng-template fd-localization-editor-label>
 *          <fd-icon [glyph]="field.glyph"></fd-icon>
 *      </ng-template>
 *      <textarea fd-localization-editor-input placeholder="EN">
 *  </fd-localization-editor-item>
 *  ```
 *
 */
export class LocalizationEditorLabel {
}
LocalizationEditorLabel.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-label]',
            },] }
];
/**
 * Directive that is used to wrap whole localization field inside li element.
 *  ```html
 *  <li fd-localization-editor-element>
 *      <fd-localization-editor-item>
 *          <textarea fd-localization-editor-input placeholder="EN">
 *      </fd-localization-editor-item>
 *  </li>
 *  ```
 *
 */
export class LocalizationEditorElement {
    constructor() {
        /**
         * @hidden
         */
        this.fdLocalizationEditorLanguage = true;
    }
}
LocalizationEditorElement.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-element]',
            },] }
];
LocalizationEditorElement.propDecorators = {
    fdLocalizationEditorLanguage: [{ type: HostBinding, args: ['class.fd-localization-editor__language',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorElement.prototype.fdLocalizationEditorLanguage;
}
/**
 * Not for external use. Portal to render the complex title template.
 */
export class LocalizationEditorLoadLabel {
    /**
     * @hidden
     * @param {?} viewRef
     */
    constructor(viewRef) {
        this.viewRef = viewRef;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.viewRef.clear();
        this.contentRef = this.viewRef.createEmbeddedView(this.content);
    }
}
LocalizationEditorLoadLabel.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-localization-editor-load-label]'
            },] }
];
/** @nocollapse */
LocalizationEditorLoadLabel.ctorParameters = () => [
    { type: ViewContainerRef }
];
LocalizationEditorLoadLabel.propDecorators = {
    content: [{ type: Input, args: ['fd-localization-editor-load-label',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    LocalizationEditorLoadLabel.prototype.content;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.contentRef;
    /**
     * @type {?}
     * @private
     */
    LocalizationEditorLoadLabel.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLWVkaXRvci5kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2xvY2FsaXphdG9yLWVkaXRvci9sb2NhbGl6YXRpb24tZWRpdG9yLmRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixXQUFXLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7O0FBY3RILE1BQU0sT0FBTyxnQ0FBZ0M7SUFKN0M7Ozs7UUFRSSwyQkFBc0IsR0FBWSxJQUFJLENBQUM7SUFDM0MsQ0FBQzs7O1lBVEEsU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsZ0NBQWdDO2FBQzdDOzs7cUNBSUksV0FBVyxTQUFDLDZCQUE2Qjs7Ozs7OztJQUExQyxrRUFDdUM7Ozs7Ozs7Ozs7QUFlM0MsTUFBTSxPQUFPLG1DQUFtQztJQUpoRDs7OztRQWNJLDJCQUFzQixHQUFZLElBQUksQ0FBQzs7OztRQU1oQyxzQ0FBaUMsR0FBWSxJQUFJLENBQUM7SUFDN0QsQ0FBQzs7O1lBckJBLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLG1DQUFtQzthQUNoRDs7O3NCQU1JLFdBQVcsU0FBQyx5QkFBeUI7cUNBSXJDLFdBQVcsU0FBQyw2QkFBNkI7Z0RBTXpDLFdBQVcsU0FBQyx1Q0FBdUM7Ozs7Ozs7OztJQVZwRCxzREFDd0I7Ozs7O0lBR3hCLHFFQUN1Qzs7Ozs7SUFLdkMsZ0ZBQ3lEOzs7Ozs7Ozs7Ozs7OztBQWtCN0QsTUFBTSxPQUFPLHVCQUF1Qjs7O1lBSm5DLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLGdDQUFnQzthQUM3Qzs7Ozs7Ozs7Ozs7OztBQWlCRCxNQUFNLE9BQU8seUJBQXlCO0lBSnRDOzs7O1FBUUksaUNBQTRCLEdBQVksSUFBSSxDQUFDO0lBQ2pELENBQUM7OztZQVRBLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLGtDQUFrQzthQUMvQzs7OzJDQUlJLFdBQVcsU0FBQyx3Q0FBd0M7Ozs7Ozs7SUFBckQsaUVBQzZDOzs7OztBQVVqRCxNQUFNLE9BQU8sMkJBQTJCOzs7OztJQVNwQyxZQUFvQixPQUF5QjtRQUF6QixZQUFPLEdBQVAsT0FBTyxDQUFrQjtJQUFHLENBQUM7Ozs7O0lBR2pELFFBQVE7UUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7O1lBbkJKLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLHFDQUFxQzthQUNsRDs7OztZQWhHNkUsZ0JBQWdCOzs7c0JBbUd6RixLQUFLLFNBQUMsbUNBQW1DOzs7Ozs7O0lBQTFDLDhDQUMwQjs7Ozs7O0lBRzFCLGlEQUF5Qzs7Ozs7SUFHN0IsOENBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB3aGljaCBpcyB1c2VkIGFsb25nIHdpdGggaW5wdXQgZWxlbWVudHMsIGluc2lkZSB0aGUgbG9jYWxpemF0aW9uIGVkaXRvciBpdGVtIG9yIG1haW4uXG4gKiAgYGBgaHRtbFxuICogIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgIDxpbnB1dCBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFTlwiPlxuICogIDwvZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsaXphdGlvbkVkaXRvcklucHV0RGlyZWN0aXZlIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1pbnB1dC1ncm91cF9faW5wdXQnKVxuICAgIGZkSW5wdXRHcm91cElucHV0Q2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xufVxuXG4vKipcbiAqIERpcmVjdGl2ZSB3aGljaCBpcyB1c2VkIGFsb25nIHdpdGggdGV4dGFyZWEgZWxlbWVudHMsIGluc2lkZSB0aGUgbG9jYWxpemF0aW9uIGVkaXRvciBpdGVtIG9yIG1haW4uXG4gKiAgYGBgaHRtbFxuICogIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgIDx0ZXh0YXJlYSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHBsYWNlaG9sZGVyPVwiRU5cIj5cbiAqICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItdGV4dGFyZWFdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxpemF0aW9uRWRpdG9yVGV4dGFyZWFEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiAgVmFyaWFibGUgaXMgY29udHJvbGxlZCBieSBwYXJlbnQgY29tcG9uZW50IGFuZCBkZWZpbmUgaWYgdGhlcmUgc2hvdWxkIGJlIHVzZWQgY29tcGFjdCBtb2RlXG4gICAgICogKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLWlucHV0LS1jb21wYWN0JylcbiAgICBwdWJsaWMgY29tcGFjdDogYm9vbGVhbjtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1pbnB1dC1ncm91cF9faW5wdXQnKVxuICAgIGZkSW5wdXRHcm91cElucHV0Q2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtbG9jYWxpemF0aW9uLWVkaXRvci10ZXh0YXJlYScpXG4gICAgcHVibGljIGZkTG9jYWxpemF0aW9uRWRpdG9yVGV4dGFyZWFDbGFzczogYm9vbGVhbiA9IHRydWU7XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHdoaWNoIGlzIHVzZWQgdG8gYWRkIGNvbXBsZXggY29udGVudCwgd2hpY2ggd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGFkZC1vbiBzcGFjZS5cbiAqICBgYGBodG1sXG4gKiAgPGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICAgICAgPG5nLXRlbXBsYXRlIGZkLWxvY2FsaXphdGlvbi1lZGl0b3ItbGFiZWw+XG4gKiAgICAgICAgICA8ZmQtaWNvbiBbZ2x5cGhdPVwiZmllbGQuZ2x5cGhcIj48L2ZkLWljb24+XG4gKiAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgIDx0ZXh0YXJlYSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWlucHV0IHBsYWNlaG9sZGVyPVwiRU5cIj5cbiAqICA8L2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItaXRlbT5cbiAqICBgYGBcbiAqICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtbG9jYWxpemF0aW9uLWVkaXRvci1sYWJlbF0nLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JMYWJlbCB7fVxuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgdG8gd3JhcCB3aG9sZSBsb2NhbGl6YXRpb24gZmllbGQgaW5zaWRlIGxpIGVsZW1lbnQuXG4gKiAgYGBgaHRtbFxuICogIDxsaSBmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWVsZW1lbnQ+XG4gKiAgICAgIDxmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWl0ZW0+XG4gKiAgICAgICAgICA8dGV4dGFyZWEgZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pbnB1dCBwbGFjZWhvbGRlcj1cIkVOXCI+XG4gKiAgICAgIDwvZmQtbG9jYWxpemF0aW9uLWVkaXRvci1pdGVtPlxuICogIDwvbGk+XG4gKiAgYGBgXG4gKiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWxvY2FsaXphdGlvbi1lZGl0b3ItZWxlbWVudF0nLFxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JFbGVtZW50IHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1sb2NhbGl6YXRpb24tZWRpdG9yX19sYW5ndWFnZScpXG4gICAgZmRMb2NhbGl6YXRpb25FZGl0b3JMYW5ndWFnZTogYm9vbGVhbiA9IHRydWU7XG59XG5cbi8qKlxuICogTm90IGZvciBleHRlcm5hbCB1c2UuIFBvcnRhbCB0byByZW5kZXIgdGhlIGNvbXBsZXggdGl0bGUgdGVtcGxhdGUuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWxvYWQtbGFiZWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6YXRpb25FZGl0b3JMb2FkTGFiZWwgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQElucHV0KCdmZC1sb2NhbGl6YXRpb24tZWRpdG9yLWxvYWQtbGFiZWwnKVxuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByaXZhdGUgY29udGVudFJlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZikge31cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmlld1JlZi5jbGVhcigpO1xuICAgICAgICB0aGlzLmNvbnRlbnRSZWYgPSB0aGlzLnZpZXdSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuY29udGVudCk7XG4gICAgfVxufVxuIl19