/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/decorators/apply-css-style.decorator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ELEMENT_REF_EXCEPTION } from '../public_api';
/**
 * Method decorator to apply css styles to a component through native element
 * decorator will store original method in variable and wrap it with custom one
 * component has to implement HasElementRef or CssStyleBuilder interface
 * more info abour method decorator: https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators
 * @param {?} target a component
 * @param {?} propertyKey name of the method
 * @param {?} descriptor method
 * @return {?}
 */
export function applyCssStyle(target, propertyKey, descriptor) {
    /** @type {?} */
    const originalMethod = descriptor.value;
    descriptor.value = (/**
     * @return {?}
     */
    function () {
        if (!this.elementRef) {
            throw ELEMENT_REF_EXCEPTION;
        }
        /** @type {?} */
        const _styles = originalMethod.apply(this);
        if (!this.elementRef()) {
            return;
        }
        /** @type {?} */
        const htmlElement = (/** @type {?} */ (this.elementRef().nativeElement));
        Object.keys(_styles).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            htmlElement.style[key] = _styles[key];
        }));
        return _styles;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHktY3NzLXN0eWxlLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kZWNvcmF0b3JzL2FwcGx5LWNzcy1zdHlsZS5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQVEscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBVzVELE1BQU0sVUFBVSxhQUFhLENBQUMsTUFBVyxFQUFFLFdBQW1CLEVBQUUsVUFBOEI7O1VBQ3BGLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSztJQUN2QyxVQUFVLENBQUMsS0FBSzs7O0lBQUc7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixNQUFNLHFCQUFxQixDQUFDO1NBQy9COztjQUVLLE9BQU8sR0FBMEIsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPO1NBQ1Y7O2NBRUssV0FBVyxHQUFHLG1CQUFBLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQWU7UUFDbEUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0IsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDLENBQUEsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNoLCBFTEVNRU5UX1JFRl9FWENFUFRJT04gfSBmcm9tICcuLi9wdWJsaWNfYXBpJztcblxuLyoqXG4gKiBNZXRob2QgZGVjb3JhdG9yIHRvIGFwcGx5IGNzcyBzdHlsZXMgdG8gYSBjb21wb25lbnQgdGhyb3VnaCBuYXRpdmUgZWxlbWVudFxuICogZGVjb3JhdG9yIHdpbGwgc3RvcmUgb3JpZ2luYWwgbWV0aG9kIGluIHZhcmlhYmxlIGFuZCB3cmFwIGl0IHdpdGggY3VzdG9tIG9uZVxuICogY29tcG9uZW50IGhhcyB0byBpbXBsZW1lbnQgSGFzRWxlbWVudFJlZiBvciBDc3NTdHlsZUJ1aWxkZXIgaW50ZXJmYWNlXG4gKiBtb3JlIGluZm8gYWJvdXIgbWV0aG9kIGRlY29yYXRvcjogaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svZGVjb3JhdG9ycy5odG1sI21ldGhvZC1kZWNvcmF0b3JzXG4gKiBAcGFyYW0gdGFyZ2V0IGEgY29tcG9uZW50XG4gKiBAcGFyYW0gcHJvcGVydHlLZXkgbmFtZSBvZiB0aGUgbWV0aG9kXG4gKiBAcGFyYW0gZGVzY3JpcHRvciBtZXRob2RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q3NzU3R5bGUodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcik6IHZvaWQge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oKTogSGFzaDxudW1iZXIgfCBzdHJpbmc+IHtcbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgIHRocm93IEVMRU1FTlRfUkVGX0VYQ0VQVElPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IF9zdHlsZXM6IEhhc2g8bnVtYmVyIHwgc3RyaW5nPiA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMpO1xuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudFJlZigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBodG1sRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZigpLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIE9iamVjdC5rZXlzKF9zdHlsZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGh0bWxFbGVtZW50LnN0eWxlW2tleV0gPSBfc3R5bGVzW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfc3R5bGVzO1xuICAgIH07XG59XG4iXX0=