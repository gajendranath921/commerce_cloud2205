/**
 * @fileoverview added by tsickle
 * Generated from: lib/notification/notification-service/notification.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotificationComponent } from '../notification/notification.component';
import { NotificationContainer } from '../notification-utils/notification-container';
import { NotificationConfig } from '../notification-utils/notification-config';
import { NotificationRef } from '../notification-utils/notification-ref';
import { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';
import { NotificationGroupComponent } from '../notification-group/notification-group.component';
export class NotificationService {
    /**
     * @param {?} dynamicComponentService
     */
    constructor(dynamicComponentService) {
        this.dynamicComponentService = dynamicComponentService;
        this.notifications = [];
    }
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or Configuration Object
     * @param {?} content Content of the alert component, or NotificationDefault object.
     * @param {?=} notificationConfig Configuration of the notification component.
     * @param {?=} notificationGroup Configuration of the notification component.
     * @return {?}
     */
    open(content, notificationConfig = new NotificationConfig(), notificationGroup) {
        // Reassigning Object And Service
        /** @type {?} */
        const notificationService = new NotificationRef();
        notificationConfig = Object.assign(new NotificationConfig(), notificationConfig);
        notificationService.data = notificationConfig.data;
        if (notificationService.data) {
            notificationService.data.type = notificationConfig.type;
        }
        // Create Container if it doesn't exist
        if (!this.containerRef) {
            this.containerRef = this.dynamicComponentService.createDynamicComponent(content, NotificationContainer, notificationConfig);
        }
        // Pass Container reference to config
        notificationConfig.container = this.containerRef.location.nativeElement;
        /** @type {?} */
        let notificationComponentRef;
        if (notificationGroup) {
            // If there is group Pass group reference as a container
            notificationConfig.container = notificationGroup.location.nativeElement;
            // Create Notification Component
            notificationComponentRef = this.dynamicComponentService.createDynamicComponent(content, NotificationComponent, notificationConfig, [notificationService]);
            // Add To array
            this.notifications.push({
                notificationComponent: notificationComponentRef,
                notificationGroup: notificationGroup
            });
        }
        else {
            // Create Notification Component
            notificationComponentRef = this.dynamicComponentService.createDynamicComponent(content, NotificationComponent, notificationConfig, [notificationService]);
            // Add To array
            this.notifications.push({
                notificationComponent: notificationComponentRef,
            });
        }
        /** @type {?} */
        const defaultBehaviourOnClose = (/**
         * @return {?}
         */
        () => {
            this.destroyNotificationComponent(notificationComponentRef);
            refSub.unsubscribe();
            refGroupSub.unsubscribe();
        });
        /** @type {?} */
        const defaultBehaviourOnGroupClose = (/**
         * @return {?}
         */
        () => {
            this.destroyWholeGroup(notificationComponentRef);
            refGroupSub.unsubscribe();
            refSub.unsubscribe();
        });
        /** @type {?} */
        const refSub = notificationService.afterClosed
            .subscribe(defaultBehaviourOnClose, defaultBehaviourOnClose);
        /** @type {?} */
        const refGroupSub = notificationService.afterClosedGroup
            .subscribe(defaultBehaviourOnGroupClose, defaultBehaviourOnGroupClose);
        return notificationService;
    }
    /**
     * Method to remove all of notifications from this service instance
     * @return {?}
     */
    destroyAll() {
        this.notifications.forEach((/**
         * @param {?} notification
         * @return {?}
         */
        notification => {
            this.destroyNotificationComponent(notification.notificationComponent);
        }));
    }
    /**
     * Method that informs if there is any notification opened in this service instance
     * @return {?}
     */
    isAnyOpened() {
        return this.notifications && this.notifications.length > 0;
    }
    /**
     * Method to create Notification Group
     * @param {?=} notificationConfig
     * @return {?}
     */
    createNotificationGroup(notificationConfig = new NotificationConfig()) {
        // Reassign Config Object
        notificationConfig = Object.assign(new NotificationConfig(), notificationConfig);
        if (!this.containerRef) {
            // Create Container Component
            this.containerRef = this.dynamicComponentService.createDynamicComponent(null, NotificationContainer, notificationConfig);
        }
        // Pass Container reference as a config container
        notificationConfig.container = this.containerRef.location.nativeElement;
        // Create and return notification Group component reference
        return this.dynamicComponentService.createDynamicComponent(null, NotificationGroupComponent, notificationConfig);
    }
    /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    destroyWholeGroup(notification) {
        // Find Notification Group assigned to this Notification Component
        /** @type {?} */
        const arrayRef = this.notifications.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.notificationComponent === notification));
        if (arrayRef.notificationGroup) {
            // Find Any other Components, that are in this group
            /** @type {?} */
            const arrayToDelete = this.notifications
                .filter((/**
             * @param {?} _notification
             * @return {?}
             */
            _notification => _notification.notificationGroup === arrayRef.notificationGroup));
            // Destroy every single component, that are in the group
            arrayToDelete.forEach((/**
             * @param {?} _notification
             * @return {?}
             */
            _notification => this.destroyNotificationComponent(_notification.notificationComponent)));
        }
    }
    /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    destroyNotificationComponent(notification) {
        // Find Notification component in the array.
        /** @type {?} */
        const arrayRef = this.notifications.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.notificationComponent === notification));
        /** @type {?} */
        const indexOf = this.notifications.indexOf(arrayRef);
        // Check the amount of component within the group
        /** @type {?} */
        const amountOfComponentsWithThisGroup = this.notifications.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.notificationGroup && item.notificationGroup === arrayRef.notificationGroup));
        // If it's the only one component that is in the group, remove group component.
        if (amountOfComponentsWithThisGroup.length === 1) {
            this.dynamicComponentService.destroyComponent(arrayRef.notificationGroup);
        }
        // Destroy Component
        this.dynamicComponentService.destroyComponent(arrayRef.notificationComponent);
        // Remove it from Array
        this.notifications[indexOf] = null;
        this.notifications = this.notifications.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item !== null && item !== undefined));
        // If there is no other notification Components, just remove container.
        if (this.notifications.length === 0) {
            this.dynamicComponentService.destroyComponent(this.containerRef);
            this.containerRef = null;
        }
    }
}
NotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotificationService.ctorParameters = () => [
    { type: DynamicComponentService }
];
if (false) {
    /** @type {?} */
    NotificationService.prototype.notifications;
    /** @type {?} */
    NotificationService.prototype.containerRef;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.dynamicComponentService;
}
//# sourceMappingURL=data:application/json;base64,