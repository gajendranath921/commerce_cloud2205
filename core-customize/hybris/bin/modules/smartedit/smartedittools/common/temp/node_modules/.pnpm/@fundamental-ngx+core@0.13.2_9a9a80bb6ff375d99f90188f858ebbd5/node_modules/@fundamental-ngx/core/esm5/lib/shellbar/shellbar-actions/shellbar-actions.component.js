/**
 * @fileoverview added by tsickle
 * Generated from: lib/shellbar/shellbar-actions/shellbar-actions.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, HostListener, Input, QueryList, ViewEncapsulation, ContentChild, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { ShellbarActionComponent } from '../shellbar-action/shellbar-action.component';
import { ShellbarUserMenuComponent } from '../user-menu/shellbar-user-menu.component';
import { ComboboxComponent } from '../../combobox/combobox.component';
/**
 * The component that represents shellbar actions.
 * It is a container wrapper for all product actions and links (required element).
 * ```html
 * <fd-shellbar-actions [user]="user"
 *                      [userMenu]="userMenu"
 *                      [productSwitcher]="productSwitcher">
 *        <button fd-button [fdType]="'standard'">Custom Button</button>
 *
 *        <fd-shellbar-action *ngFor="let action of actions"
 *                            [glyph]="action.glyph"
 *                            [callback]="action.callback"
 *                            [label]="action.label"
 *                            [notificationCount]="action.notificationCount"
 *                            [notificationLabel]="action.notificationLabel">
 *        </fd-shellbar-action>
 * </fd-shellbar-actions>
 * ```
 */
var ShellbarActionsComponent = /** @class */ (function () {
    function ShellbarActionsComponent() {
        /**
         * @hidden
         */
        this.actionsCollapsed = false;
        /**
         * @hidden
         */
        this.showCollapsedProducts = false;
        /**
         * When set to true, popover list will be closed after selecting the option
         */
        this.closePopoverOnSelect = false;
        /**
         * Label for the collapsed item menu.
         */
        this.collapsedItemMenuLabel = 'Collapsed Item Menu';
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ShellbarActionsComponent.prototype.onResize = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.actionsCollapsed = window.innerWidth < 1024;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    ShellbarActionsComponent.prototype.actionClicked = /**
     * @hidden
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    function (item, event) {
        this.triggerItems();
        item.callback(event);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ShellbarActionsComponent.prototype.triggerItems = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.closePopoverOnSelect) {
            if (this.userComponentView) {
                this.userComponentView.close();
            }
            if (this.userComponent) {
                this.userComponent.close();
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ShellbarActionsComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onResize();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ShellbarActionsComponent.prototype.ngAfterContentChecked = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.totalNotifications = 0;
        this.shellbarActions.forEach((/**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            if (action.notificationCount && typeof action.notificationCount === 'number') {
                _this.totalNotifications = _this.totalNotifications + action.notificationCount;
            }
        }));
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    ShellbarActionsComponent.prototype.toggleCollapsedProducts = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.showCollapsedProducts = !this.showCollapsedProducts;
    };
    Object.defineProperty(ShellbarActionsComponent.prototype, "userItem", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.userComponent) {
                return this.userComponent.user;
            }
            else {
                return this.user;
            }
        },
        enumerable: true,
        configurable: true
    });
    ShellbarActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-shellbar-actions',
                    template: "<div *ngIf=\"comboboxComponent\" class=\"fd-shellbar__action fd-shellbar__action--desktop\">\n    <div class=\"fd-search-input\">\n        <ng-content select=\"fd-combobox\"></ng-content>\n    </div>\n</div>\n\n<div *ngIf=\"actionsCollapsed && shellbarActions.length\"\n        class=\"fd-shellbar__action fd-shellbar__action--mobile\">\n    <div class=\"fd-shellbar-collapse\">\n        <fd-popover [options]=\"{placement: 'bottom-end'}\"\n                    [focusTrapped]=\"false\">\n            <fd-popover-control>\n                <div class=\"fd-shellbar-collapse--control\">\n                    <button fd-button [glyph]=\"'overflow'\" class=\"fd-shellbar__button\"\n                            [attr.aria-label]=\"collapsedItemMenuLabel\">\n                        <span *ngIf=\"totalNotifications\"\n                                class=\"fd-counter fd-counter--notification\">{{totalNotifications}}</span>\n                    </button>\n                </div>\n            </fd-popover-control>\n            <fd-popover-body>\n                <fd-menu>\n                    <ul fd-menu-list\n                        *ngIf=\"!showCollapsedProducts\">\n                        <li fd-menu-item\n                            *ngFor=\"let action of shellbarActions\"\n                            (click)=\"actionClicked(action, $event)\">\n                            <fd-icon fd-menu-item-addon [glyph]=\"action.glyph\"></fd-icon>\n                            {{action.label}}\n                        </li>\n                    </ul>\n                    <ul fd-menu-list\n                        *ngIf=\"showCollapsedProducts\">\n                        <li (click)=\"toggleCollapsedProducts($event)\">\n                            <span fd-menu-item class=\"sap-icon--nav-back\"></span>\n                        </li>\n                    </ul>\n                </fd-menu>\n            </fd-popover-body>\n        </fd-popover>\n    </div>\n</div>\n<ng-content></ng-content>\n<ng-content select=\"fd-shellbar-action\"></ng-content>\n<ng-container *ngIf=\"userItem\">\n    <ng-container *ngIf=\"!userComponent\">\n        <fd-shellbar-user-menu (itemClicked)=\"triggerItems()\"\n                               [options]=\"{placement: 'bottom-end'}\"\n                               [focusTrapped]=\"false\"\n                               [user]=\"user\"\n                               [userMenu]=\"userMenu\"\n        ></fd-shellbar-user-menu>\n    </ng-container>\n    <ng-container *ngIf=\"userComponent\">\n        <ng-content select=\"fd-shellbar-user-menu\"></ng-content>\n    </ng-container>\n</ng-container>\n\n\n<ng-content select=\"fd-product-switch\"></ng-content>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".fd-search-input--closed .fd-popover__popper{width:300px!important;left:-264px!important}fd-shellbar-actions{display:flex}"]
                }] }
    ];
    ShellbarActionsComponent.propDecorators = {
        user: [{ type: Input }],
        userMenu: [{ type: Input }],
        closePopoverOnSelect: [{ type: Input }],
        collapsedItemMenuLabel: [{ type: Input }],
        shellbarActions: [{ type: ContentChildren, args: [ShellbarActionComponent,] }],
        userComponent: [{ type: ContentChild, args: [ShellbarUserMenuComponent, { static: false },] }],
        userComponentView: [{ type: ViewChild, args: [ShellbarUserMenuComponent, { static: false },] }],
        comboboxComponent: [{ type: ContentChild, args: [ComboboxComponent, { static: false },] }],
        onResize: [{ type: HostListener, args: ['window:resize', [],] }]
    };
    return ShellbarActionsComponent;
}());
export { ShellbarActionsComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.actionsCollapsed;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.showCollapsedProducts;
    /**
     * The user data.
     * @type {?}
     */
    ShellbarActionsComponent.prototype.user;
    /**
     * The user menu data.
     * @type {?}
     */
    ShellbarActionsComponent.prototype.userMenu;
    /**
     * When set to true, popover list will be closed after selecting the option
     * @type {?}
     */
    ShellbarActionsComponent.prototype.closePopoverOnSelect;
    /**
     * Label for the collapsed item menu.
     * @type {?}
     */
    ShellbarActionsComponent.prototype.collapsedItemMenuLabel;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.shellbarActions;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.userComponent;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.userComponentView;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.comboboxComponent;
    /**
     * @hidden
     * @type {?}
     */
    ShellbarActionsComponent.prototype.totalNotifications;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlbGxiYXItYWN0aW9ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2hlbGxiYXIvc2hlbGxiYXItYWN0aW9ucy9zaGVsbGJhci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsZUFBZSxFQUNmLFlBQVksRUFDWixLQUFLLEVBR0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQixZQUFZLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUNuRCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUd2RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN0RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQnRFO0lBQUE7Ozs7UUFVSSxxQkFBZ0IsR0FBWSxLQUFLLENBQUM7Ozs7UUFHbEMsMEJBQXFCLEdBQVksS0FBSyxDQUFDOzs7O1FBWXZDLHlCQUFvQixHQUFZLEtBQUssQ0FBQzs7OztRQUl0QywyQkFBc0IsR0FBVyxxQkFBcUIsQ0FBQztJQTZFM0QsQ0FBQztJQXhERyxjQUFjOzs7OztJQUVkLDJDQUFROzs7O0lBRFI7UUFFSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDckQsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0gsZ0RBQWE7Ozs7OztJQUFiLFVBQWMsSUFBNkIsRUFBRSxLQUFVO1FBQ25ELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxjQUFjOzs7OztJQUNkLCtDQUFZOzs7O0lBQVo7UUFDSSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUMzQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2xDO1lBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzlCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsY0FBYzs7Ozs7SUFDZCwyQ0FBUTs7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxjQUFjOzs7OztJQUNkLHdEQUFxQjs7OztJQUFyQjtRQUFBLGlCQU9DO1FBTkcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLE1BQU07WUFDaEMsSUFBSSxNQUFNLENBQUMsaUJBQWlCLElBQUksT0FBTyxNQUFNLENBQUMsaUJBQWlCLEtBQUssUUFBUSxFQUFFO2dCQUMxRSxLQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQzthQUNoRjtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGNBQWM7Ozs7OztJQUNkLDBEQUF1Qjs7Ozs7SUFBdkIsVUFBd0IsS0FBaUI7UUFDckMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUM7SUFDN0QsQ0FBQztJQUVELHNCQUFXLDhDQUFROzs7O1FBQW5CO1lBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNwQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO2FBQ2xDO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQzthQUNwQjtRQUNMLENBQUM7OztPQUFBOztnQkF4R0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLCtvRkFBZ0Q7b0JBRWhELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7aUJBQ2xEOzs7dUJBVUksS0FBSzsyQkFJTCxLQUFLO3VDQUlMLEtBQUs7eUNBSUwsS0FBSztrQ0FJTCxlQUFlLFNBQUMsdUJBQXVCO2dDQUl2QyxZQUFZLFNBQUMseUJBQXlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO29DQUl6RCxTQUFTLFNBQUMseUJBQXlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO29DQUl0RCxZQUFZLFNBQUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzJCQU9qRCxZQUFZLFNBQUMsZUFBZSxFQUFFLEVBQUU7O0lBdURyQywrQkFBQztDQUFBLEFBMUdELElBMEdDO1NBbkdZLHdCQUF3Qjs7Ozs7O0lBR2pDLG9EQUFrQzs7Ozs7SUFHbEMseURBQXVDOzs7OztJQUd2Qyx3Q0FDbUI7Ozs7O0lBR25CLDRDQUM2Qjs7Ozs7SUFHN0Isd0RBQ3NDOzs7OztJQUd0QywwREFDdUQ7Ozs7O0lBR3ZELG1EQUNvRDs7Ozs7SUFHcEQsaURBQ3lDOzs7OztJQUd6QyxxREFDNkM7Ozs7O0lBRzdDLHFEQUNxQzs7Ozs7SUFHckMsc0RBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBPbkluaXQsXG4gICAgQWZ0ZXJDb250ZW50Q2hlY2tlZCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgQ29udGVudENoaWxkLCBWaWV3Q2hpbGQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hlbGxiYXJBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuLi9zaGVsbGJhci1hY3Rpb24vc2hlbGxiYXItYWN0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTaGVsbGJhck1lbnVJdGVtIH0gZnJvbSAnLi4vbW9kZWwvc2hlbGxiYXItbWVudS1pdGVtJztcbmltcG9ydCB7IFNoZWxsYmFyVXNlciB9IGZyb20gJy4uL21vZGVsL3NoZWxsYmFyLXVzZXInO1xuaW1wb3J0IHsgU2hlbGxiYXJVc2VyTWVudUNvbXBvbmVudCB9IGZyb20gJy4uL3VzZXItbWVudS9zaGVsbGJhci11c2VyLW1lbnUuY29tcG9uZW50JztcbmltcG9ydCB7IENvbWJvYm94Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tYm9ib3gvY29tYm9ib3guY29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IHRoYXQgcmVwcmVzZW50cyBzaGVsbGJhciBhY3Rpb25zLlxuICogSXQgaXMgYSBjb250YWluZXIgd3JhcHBlciBmb3IgYWxsIHByb2R1Y3QgYWN0aW9ucyBhbmQgbGlua3MgKHJlcXVpcmVkIGVsZW1lbnQpLlxuICogYGBgaHRtbFxuICogPGZkLXNoZWxsYmFyLWFjdGlvbnMgW3VzZXJdPVwidXNlclwiXG4gKiAgICAgICAgICAgICAgICAgICAgICBbdXNlck1lbnVdPVwidXNlck1lbnVcIlxuICogICAgICAgICAgICAgICAgICAgICAgW3Byb2R1Y3RTd2l0Y2hlcl09XCJwcm9kdWN0U3dpdGNoZXJcIj5cbiAqICAgICAgICA8YnV0dG9uIGZkLWJ1dHRvbiBbZmRUeXBlXT1cIidzdGFuZGFyZCdcIj5DdXN0b20gQnV0dG9uPC9idXR0b24+XG4gKlxuICogICAgICAgIDxmZC1zaGVsbGJhci1hY3Rpb24gKm5nRm9yPVwibGV0IGFjdGlvbiBvZiBhY3Rpb25zXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtnbHlwaF09XCJhY3Rpb24uZ2x5cGhcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NhbGxiYWNrXT1cImFjdGlvbi5jYWxsYmFja1wiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbGFiZWxdPVwiYWN0aW9uLmxhYmVsXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtub3RpZmljYXRpb25Db3VudF09XCJhY3Rpb24ubm90aWZpY2F0aW9uQ291bnRcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgW25vdGlmaWNhdGlvbkxhYmVsXT1cImFjdGlvbi5ub3RpZmljYXRpb25MYWJlbFwiPlxuICogICAgICAgIDwvZmQtc2hlbGxiYXItYWN0aW9uPlxuICogPC9mZC1zaGVsbGJhci1hY3Rpb25zPlxuICogYGBgXG4gKi9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdmZC1zaGVsbGJhci1hY3Rpb25zJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2hlbGxiYXItYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2hlbGxiYXItYWN0aW9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU2hlbGxiYXJBY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRDaGVja2VkIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgYWN0aW9uc0NvbGxhcHNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBzaG93Q29sbGFwc2VkUHJvZHVjdHM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBUaGUgdXNlciBkYXRhLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdXNlcjogU2hlbGxiYXJVc2VyO1xuXG4gICAgLyoqIFRoZSB1c2VyIG1lbnUgZGF0YS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHVzZXJNZW51OiBTaGVsbGJhck1lbnVJdGVtW107XG5cbiAgICAvKiogV2hlbiBzZXQgdG8gdHJ1ZSwgcG9wb3ZlciBsaXN0IHdpbGwgYmUgY2xvc2VkIGFmdGVyIHNlbGVjdGluZyB0aGUgb3B0aW9uICovXG4gICAgQElucHV0KClcbiAgICBjbG9zZVBvcG92ZXJPblNlbGVjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIExhYmVsIGZvciB0aGUgY29sbGFwc2VkIGl0ZW0gbWVudS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGNvbGxhcHNlZEl0ZW1NZW51TGFiZWw6IHN0cmluZyA9ICdDb2xsYXBzZWQgSXRlbSBNZW51JztcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQENvbnRlbnRDaGlsZHJlbihTaGVsbGJhckFjdGlvbkNvbXBvbmVudClcbiAgICBzaGVsbGJhckFjdGlvbnM6IFF1ZXJ5TGlzdDxTaGVsbGJhckFjdGlvbkNvbXBvbmVudD47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBDb250ZW50Q2hpbGQoU2hlbGxiYXJVc2VyTWVudUNvbXBvbmVudCwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gICAgdXNlckNvbXBvbmVudDogU2hlbGxiYXJVc2VyTWVudUNvbXBvbmVudDtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQFZpZXdDaGlsZChTaGVsbGJhclVzZXJNZW51Q29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgICB1c2VyQ29tcG9uZW50VmlldzogU2hlbGxiYXJVc2VyTWVudUNvbXBvbmVudDtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQENvbnRlbnRDaGlsZChDb21ib2JveENvbXBvbmVudCwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gICAgY29tYm9ib3hDb21wb25lbnQ6IENvbWJvYm94Q29tcG9uZW50O1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICB0b3RhbE5vdGlmaWNhdGlvbnM6IG51bWJlcjtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFtdKVxuICAgIG9uUmVzaXplKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbnNDb2xsYXBzZWQgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGFjdGlvbkNsaWNrZWQoaXRlbTogU2hlbGxiYXJBY3Rpb25Db21wb25lbnQsIGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50cmlnZ2VySXRlbXMoKTtcbiAgICAgICAgaXRlbS5jYWxsYmFjayhldmVudCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICB0cmlnZ2VySXRlbXMoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlUG9wb3Zlck9uU2VsZWN0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy51c2VyQ29tcG9uZW50Vmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckNvbXBvbmVudFZpZXcuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJDb21wb25lbnQuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b3RhbE5vdGlmaWNhdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLnNoZWxsYmFyQWN0aW9ucy5mb3JFYWNoKChhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24ubm90aWZpY2F0aW9uQ291bnQgJiYgdHlwZW9mIGFjdGlvbi5ub3RpZmljYXRpb25Db3VudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsTm90aWZpY2F0aW9ucyA9IHRoaXMudG90YWxOb3RpZmljYXRpb25zICsgYWN0aW9uLm5vdGlmaWNhdGlvbkNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHRvZ2dsZUNvbGxhcHNlZFByb2R1Y3RzKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnNob3dDb2xsYXBzZWRQcm9kdWN0cyA9ICF0aGlzLnNob3dDb2xsYXBzZWRQcm9kdWN0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHVzZXJJdGVtKCk6IFNoZWxsYmFyVXNlciB7XG4gICAgICAgIGlmICh0aGlzLnVzZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVzZXJDb21wb25lbnQudXNlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVzZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==