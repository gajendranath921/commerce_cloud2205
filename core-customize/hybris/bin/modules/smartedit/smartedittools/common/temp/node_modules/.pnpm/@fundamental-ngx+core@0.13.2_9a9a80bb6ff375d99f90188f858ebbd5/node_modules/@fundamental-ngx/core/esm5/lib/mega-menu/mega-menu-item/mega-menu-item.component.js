/**
 * @fileoverview added by tsickle
 * Generated from: lib/mega-menu/mega-menu-item/mega-menu-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostListener, Input, Output, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';
import { MegaMenuSubitemDirective } from '../mega-menu-subitem.directive';
import { MegaMenuLinkDirective } from '../mega-menu-link/mega-menu-link.directive';
import { MenuKeyboardService } from '../../menu/menu-keyboard.service';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
/**
 *  Component represents mega menu item, which contains subitems and link.
 *  ```html
 *  <fd-mega-menu-item>
 *      <a fd-mega-menu-link>Item 0</a>
 *      <li fd-mega-menu-subitem>
 *          <a fd-mega-menu-sublink>Sub Item 1</a>
 *      </li>
 *      <li fd-mega-menu-subitem>
 *          <a fd-mega-menu-sublink>Sub Item 2</a>
 *      </li>
 *      <li fd-mega-menu-subitem>
 *          <a fd-mega-menu-sublink>Sub Item 3</a>
 *      </li>
 *  </fd-mega-menu-item>
 *  ```
 *
 */
var MegaMenuItemComponent = /** @class */ (function () {
    /** @hidden */
    function MegaMenuItemComponent(elRef, menuKeyboardService, changeDetectionRef) {
        this.elRef = elRef;
        this.menuKeyboardService = menuKeyboardService;
        this.changeDetectionRef = changeDetectionRef;
        /**
         * Event thrown, when there is some keyboard event detected on mega menu item
         */
        this.keyDown = new EventEmitter();
        /**
         * An RxJS Subject that will kill the data stream upon componentâ€™s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * An RxJS Subject that will kill the data stream upon queryList changes (for unsubscribing)
         */
        this.onRefresh$ = new Subject();
        /**
         * Variable that specifies if the sublist menu is opened.
         */
        this.open = false;
        /**
         * Defines what should be position for sublist
         */
        this.subListPosition = 'right';
        /**
         * Event that is thrown always, when the open variable is changed
         */
        this.openChange = new EventEmitter();
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    MegaMenuItemComponent.prototype.handleKeyboardEvent = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.key) {
            case ('ArrowLeft'): {
                this.closeSubList();
                this.link.focus();
                break;
            }
            case ('ArrowRight'):
            case (' '):
            case ('Enter'): {
                this.openSubList();
                this.changeDetectionRef.detectChanges();
                if (this.subItems.first) {
                    this.subItems.first.focus();
                }
                event.preventDefault();
                break;
            }
            default: {
                this.keyDown.emit(event);
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    MegaMenuItemComponent.prototype.clickHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** Check if click wasn't inside the component, then close. */
        if (!this.elRef.nativeElement.contains(event.target)) {
            this.closeSubList();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuItemComponent.prototype.onResize = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.open && this.isSubListPositionRight()) {
            this.changeDetectionRef.detectChanges();
            /** @type {?} */
            var distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;
            /**
             * When the page is resized and the menu sub list goes beyond the page,
             * the sub list should go over the parent list
             */
            while (distanceFromCorner > window.innerWidth && this.getLeftPropertyFromSubList() > 1) {
                this.subList.nativeElement.style.left = (this.getLeftPropertyFromSubList() - 1) + '%';
                this.changeDetectionRef.detectChanges();
                distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;
            }
            /**
             * When the page is resized and the menu sub list was pulled over parent list,
             * the sub list should go to right side of parent list
             */
            while (distanceFromCorner < window.innerWidth && this.getLeftPropertyFromSubList() < 100) {
                this.subList.nativeElement.style.left = (this.getLeftPropertyFromSubList() + 1) + '%';
                this.changeDetectionRef.detectChanges();
                distanceFromCorner = this.subList.nativeElement.getBoundingClientRect().right;
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuItemComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.link.hasChild = this.subItems.length > 0;
        this.subItems.changes
            .pipe(takeUntil(this.onDestroy$), startWith(5))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.refreshSubscription(); }));
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuItemComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    /**
     * Keyboard events handler from sublist, the event doesn't propagate upper, when it was ArrowDown or ArrowUp.
     * It prevents from changing focus to item on primary menu list
     */
    /**
     * Keyboard events handler from sublist, the event doesn't propagate upper, when it was ArrowDown or ArrowUp.
     * It prevents from changing focus to item on primary menu list
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    MegaMenuItemComponent.prototype.handleSubListKeyDown = /**
     * Keyboard events handler from sublist, the event doesn't propagate upper, when it was ArrowDown or ArrowUp.
     * It prevents from changing focus to item on primary menu list
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.menuKeyboardService.keyDownHandler(event, index, this.subItems.toArray());
        if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
            event.stopPropagation();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuItemComponent.prototype.click = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.link.click();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuItemComponent.prototype.focus = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.link.focus();
    };
    /** Method that informs if actual position of sublist is set to right */
    /**
     * Method that informs if actual position of sublist is set to right
     * @return {?}
     */
    MegaMenuItemComponent.prototype.isSubListPositionRight = /**
     * Method that informs if actual position of sublist is set to right
     * @return {?}
     */
    function () {
        return this.subListPosition === 'right';
    };
    /** Method that changes state of open variable */
    /**
     * Method that changes state of open variable
     * @return {?}
     */
    MegaMenuItemComponent.prototype.toggleOpen = /**
     * Method that changes state of open variable
     * @return {?}
     */
    function () {
        if (this.open) {
            this.closeSubList();
        }
        else {
            this.openSubList();
        }
    };
    /** Method that closes sublist */
    /**
     * Method that closes sublist
     * @return {?}
     */
    MegaMenuItemComponent.prototype.closeSubList = /**
     * Method that closes sublist
     * @return {?}
     */
    function () {
        this.open = false;
        this.link.isExpanded = this.isShow();
        this.openChange.emit(this.open);
    };
    /** Method that opens sublist */
    /**
     * Method that opens sublist
     * @return {?}
     */
    MegaMenuItemComponent.prototype.openSubList = /**
     * Method that opens sublist
     * @return {?}
     */
    function () {
        this.open = true;
        this.link.isExpanded = this.isShow();
        this.openChange.emit(this.open);
        this.onResize();
    };
    /** Method that gives information if the sublist should behave like it is opened. */
    /**
     * Method that gives information if the sublist should behave like it is opened.
     * @return {?}
     */
    MegaMenuItemComponent.prototype.isShow = /**
     * Method that gives information if the sublist should behave like it is opened.
     * @return {?}
     */
    function () {
        return this.open && this.subItems.length > 0;
    };
    /** Method that helps with the responsive support. Gives percentage number of left css attribute on list. */
    /**
     * Method that helps with the responsive support. Gives percentage number of left css attribute on list.
     * @private
     * @return {?}
     */
    MegaMenuItemComponent.prototype.getLeftPropertyFromSubList = /**
     * Method that helps with the responsive support. Gives percentage number of left css attribute on list.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styles = getComputedStyle(this.subList.nativeElement);
        if (styles.left) {
            if (styles.left.includes('px')) {
                return Number(styles.left.split('px')[0]) / this.parentElement.nativeElement.offsetWidth * 100;
            }
            else if (styles.left.includes('%')) {
                return Number(styles.left.split('%')[0]);
            }
        }
        else {
            return 100;
        }
    };
    /** Whether any querylist detects any changes */
    /**
     * Whether any querylist detects any changes
     * @private
     * @return {?}
     */
    MegaMenuItemComponent.prototype.refreshSubscription = /**
     * Whether any querylist detects any changes
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** Finish all of the streams, form before */
        this.onRefresh$.next();
        /**
         * Merge refresh/destroy observables
         * @type {?}
         */
        var refreshObs = merge(this.onRefresh$, this.onDestroy$);
        this.subItems.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) { return item.keyDown
            .pipe(takeUntil(_this.onDestroy$))
            .subscribe((/**
         * @param {?} keyboardEvent
         * @return {?}
         */
        function (keyboardEvent) { return _this.handleSubListKeyDown(keyboardEvent, index); })); }));
    };
    MegaMenuItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-mega-menu-item',
                    template: "<li class=\"fd-mega-menu__item\" (click)=\"toggleOpen()\" #parentElement>\n    <ng-content select=\"[fd-mega-menu-link]\"></ng-content>\n    <ng-content></ng-content>\n    <ul class=\"fd-mega-menu__sublist\"\n        #subList\n        [attr.aria-hidden]=\"!isShow()\"\n        [ngClass]=\"{'fd-mega-menu__sublist--left': !isSubListPositionRight()}\"\n        (click)=\"$event.stopPropagation()\">\n        <ng-content select=\"[fd-mega-menu-subitem]\"></ng-content>\n    </ul>\n</li>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".fd-mega-menu__sublist{right:initial;left:100%;z-index:2;margin-top:4px}.fd-mega-menu__sublist--left{right:100%;left:initial}.fd-mega-menu__item{cursor:pointer}.fd-mega-menu__item .fd-mega-menu__link{position:relative}.fd-mega-menu__item .fd-mega-menu__link:focus{z-index:1}ul.fd-mega-menu__sublist{margin-left:-4px}"]
                }] }
    ];
    /** @nocollapse */
    MegaMenuItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MenuKeyboardService },
        { type: ChangeDetectorRef }
    ]; };
    MegaMenuItemComponent.propDecorators = {
        subItems: [{ type: ContentChildren, args: [MegaMenuSubitemDirective,] }],
        link: [{ type: ContentChild, args: [MegaMenuLinkDirective, { static: false },] }],
        subList: [{ type: ViewChild, args: ['subList', { static: false },] }],
        parentElement: [{ type: ViewChild, args: ['parentElement', { static: false },] }],
        keyDown: [{ type: Output }],
        open: [{ type: Input }],
        subListPosition: [{ type: Input }],
        openChange: [{ type: Output }],
        handleKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        clickHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return MegaMenuItemComponent;
}());
export { MegaMenuItemComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuItemComponent.prototype.subItems;
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuItemComponent.prototype.link;
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuItemComponent.prototype.subList;
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuItemComponent.prototype.parentElement;
    /**
     * Event thrown, when there is some keyboard event detected on mega menu item
     * @type {?}
     */
    MegaMenuItemComponent.prototype.keyDown;
    /**
     * An RxJS Subject that will kill the data stream upon componentâ€™s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    MegaMenuItemComponent.prototype.onDestroy$;
    /**
     * An RxJS Subject that will kill the data stream upon queryList changes (for unsubscribing)
     * @type {?}
     * @private
     */
    MegaMenuItemComponent.prototype.onRefresh$;
    /**
     * Variable that specifies if the sublist menu is opened.
     * @type {?}
     */
    MegaMenuItemComponent.prototype.open;
    /**
     * Defines what should be position for sublist
     * @type {?}
     */
    MegaMenuItemComponent.prototype.subListPosition;
    /**
     * Event that is thrown always, when the open variable is changed
     * @type {?}
     */
    MegaMenuItemComponent.prototype.openChange;
    /**
     * @type {?}
     * @private
     */
    MegaMenuItemComponent.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    MegaMenuItemComponent.prototype.menuKeyboardService;
    /**
     * @type {?}
     * @private
     */
    MegaMenuItemComponent.prototype.changeDetectionRef;
}
//# sourceMappingURL=data:application/json;base64,