/**
 * @fileoverview added by tsickle
 * Generated from: lib/form/form-control/form-control.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, ElementRef, Directive } from '@angular/core';
import { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';
/**
 * Directive intended for use on form controls.
 *
 * ```html
 * <input type="text" fd-form-control />
 * ```
 */
var FormControlDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FormControlDirective, _super);
    /** @hidden */
    function FormControlDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        /**
         * Whether form is in compact mode
         */
        _this.compact = false;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    FormControlDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.state) {
            this._addClassToElement('is-' + this.state);
        }
        switch (this.type) {
            case 'radio': {
                this._addControlClass('fd-radio');
                break;
            }
            default: {
                if (this.getElementTag() === 'input') {
                    this._addControlClass('fd-input');
                }
                else if (this.getElementTag() === 'textarea') {
                    this._addControlClass('fd-textarea');
                }
                else if (this.getElementTag() === 'select') {
                    this._addControlClass('fd-form-select');
                }
                break;
            }
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    FormControlDirective.prototype.getElementTag = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        if (this.elementRef && this.elementRef.nativeElement) {
            return this.elementRef.nativeElement.tagName.toLocaleLowerCase();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @param {?} className
     * @return {?}
     */
    FormControlDirective.prototype._addControlClass = /**
     * @hidden
     * @private
     * @param {?} className
     * @return {?}
     */
    function (className) {
        this._addClassToElement(className);
        if (this.compact) {
            this._addClassToElement(className + '--compact');
        }
    };
    FormControlDirective.decorators = [
        { type: Directive, args: [{
                    // TODO to be discussed
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-form-control]',
                },] }
    ];
    /** @nocollapse */
    FormControlDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FormControlDirective.propDecorators = {
        state: [{ type: Input }],
        compact: [{ type: Input }],
        type: [{ type: Input }]
    };
    return FormControlDirective;
}(AbstractFdNgxClass));
export { FormControlDirective };
if (false) {
    /**
     *  The state of the form control - applies css classes.
     *  Can be `valid`, `invalid`, `warning`, `information` or blank for default.
     * @type {?}
     */
    FormControlDirective.prototype.state;
    /**
     * Whether form is in compact mode
     * @type {?}
     */
    FormControlDirective.prototype.compact;
    /** @type {?} */
    FormControlDirective.prototype.type;
    /**
     * @type {?}
     * @private
     */
    FormControlDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2Zvcm0tY29udHJvbC9mb3JtLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7QUFXdkU7SUFLMEMsZ0RBQWtCO0lBMkN4RCxjQUFjO0lBQ2QsOEJBQW9CLFVBQXNCO1FBQTFDLFlBQ0ksa0JBQU0sVUFBVSxDQUFDLFNBQ3BCO1FBRm1CLGdCQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBL0IxQyxhQUFPLEdBQVksS0FBSyxDQUFDOztJQWlDekIsQ0FBQztJQTNCRCxjQUFjOzs7OztJQUNkLDZDQUFjOzs7O0lBQWQ7UUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQztRQUVELFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNmLEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNsQyxNQUFNO2FBQ1Q7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDTCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxPQUFPLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDckM7cUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssVUFBVSxFQUFFO29CQUM1QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQ3hDO3FCQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLFFBQVEsRUFBRTtvQkFDMUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUM7aUJBQzNDO2dCQUNELE1BQU07YUFDVDtTQUNKO0lBQ0wsQ0FBQztJQU9ELGNBQWM7Ozs7OztJQUNOLDRDQUFhOzs7OztJQUFyQjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRTtZQUNsRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQ3BFO0lBQ0wsQ0FBQztJQUVELGNBQWM7Ozs7Ozs7SUFDTiwrQ0FBZ0I7Ozs7OztJQUF4QixVQUF5QixTQUFpQjtRQUN0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQztTQUNwRDtJQUNMLENBQUM7O2dCQWxFSixTQUFTLFNBQUM7OztvQkFHUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs7OztnQkFoQmUsVUFBVTs7O3dCQXVCckIsS0FBSzswQkFNTCxLQUFLO3VCQUlMLEtBQUs7O0lBOENWLDJCQUFDO0NBQUEsQUFuRUQsQ0FLMEMsa0JBQWtCLEdBOEQzRDtTQTlEWSxvQkFBb0I7Ozs7Ozs7SUFNN0IscUNBQ2tCOzs7OztJQUtsQix1Q0FDeUI7O0lBR3pCLG9DQUNhOzs7OztJQTJCRCwwQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZkTmd4Q2xhc3MgfSBmcm9tICcuLi8uLi91dGlscy9hYnN0cmFjdC1mZC1uZ3gtY2xhc3MnO1xuaW1wb3J0IHsgRm9ybVN0YXRlcyB9IGZyb20gJy4vZm9ybS1zdGF0ZXMnO1xuXG5cbi8qKlxuICogRGlyZWN0aXZlIGludGVuZGVkIGZvciB1c2Ugb24gZm9ybSBjb250cm9scy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8aW5wdXQgdHlwZT1cInRleHRcIiBmZC1mb3JtLWNvbnRyb2wgLz5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyBUT0RPIHRvIGJlIGRpc2N1c3NlZFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1mb3JtLWNvbnRyb2xdJyxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRyb2xEaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdEZkTmd4Q2xhc3Mge1xuXG4gICAgLyoqXG4gICAgICogIFRoZSBzdGF0ZSBvZiB0aGUgZm9ybSBjb250cm9sIC0gYXBwbGllcyBjc3MgY2xhc3Nlcy5cbiAgICAgKiAgQ2FuIGJlIGB2YWxpZGAsIGBpbnZhbGlkYCwgYHdhcm5pbmdgLCBgaW5mb3JtYXRpb25gIG9yIGJsYW5rIGZvciBkZWZhdWx0LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhdGU6IEZvcm1TdGF0ZXM7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGZvcm0gaXMgaW4gY29tcGFjdCBtb2RlXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjb21wYWN0OiBib29sZWFuID0gZmFsc2U7XG5cblxuICAgIEBJbnB1dCgpXG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0UHJvcGVydGllcygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdpcy0nICsgdGhpcy5zdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAncmFkaW8nOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQ29udHJvbENsYXNzKCdmZC1yYWRpbycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEVsZW1lbnRUYWcoKSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRDb250cm9sQ2xhc3MoJ2ZkLWlucHV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldEVsZW1lbnRUYWcoKSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRDb250cm9sQ2xhc3MoJ2ZkLXRleHRhcmVhJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldEVsZW1lbnRUYWcoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQ29udHJvbENsYXNzKCdmZC1mb3JtLXNlbGVjdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJpdmF0ZSBnZXRFbGVtZW50VGFnKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRSZWYgJiYgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByaXZhdGUgX2FkZENvbnRyb2xDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudChjbGFzc05hbWUpO1xuICAgICAgICBpZiAodGhpcy5jb21wYWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudChjbGFzc05hbWUgKyAnLS1jb21wYWN0Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=