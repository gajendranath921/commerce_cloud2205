/**
 * @fileoverview added by tsickle
 * Generated from: lib/notification/notification-utils/notification-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * Reference to a notification component generated via the NotificationService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
var /**
 * Reference to a notification component generated via the NotificationService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
NotificationRef = /** @class */ (function () {
    function NotificationRef() {
        this._afterClosed = new Subject();
        this._afterClosedGroup = new Subject();
        /**
         * Observable that is triggered when the notification is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosed = this._afterClosed.asObservable();
        /**
         * Observable that is triggered when the notification is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosedGroup = this._afterClosedGroup.asObservable();
    }
    /**
     * Closes the notification and passes the argument to the afterClosed observable.
     * @param result Value passed back to the observable as a result.
     */
    /**
     * Closes the notification and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    NotificationRef.prototype.close = /**
     * Closes the notification and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    function (result) {
        this._afterClosed.next(result);
    };
    /**
     * Dismisses the notification and passes the argument to the afterClosed observable as an error.
     * @param reason Value passed back to the observable as an error.
     */
    /**
     * Dismisses the notification and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    NotificationRef.prototype.dismiss = /**
     * Dismisses the notification and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    function (reason) {
        this._afterClosed.error(reason);
    };
    /**
     * Closes the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param reason Value passed back to the observable as an error.
     */
    /**
     * Closes the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    NotificationRef.prototype.closeWholeGroup = /**
     * Closes the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    function (reason) {
        this._afterClosedGroup.next(reason);
    };
    /**
     * Dismisses the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param reason Value passed back to the observable as an error.
     */
    /**
     * Dismisses the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    NotificationRef.prototype.dismissWholeGroup = /**
     * Dismisses the notification group and passes the argument to the afterClosed observable
     * as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    function (reason) {
        this._afterClosedGroup.error(reason);
    };
    return NotificationRef;
}());
/**
 * Reference to a notification component generated via the NotificationService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
export { NotificationRef };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NotificationRef.prototype._afterClosed;
    /**
     * @type {?}
     * @private
     */
    NotificationRef.prototype._afterClosedGroup;
    /**
     * Observable that is triggered when the notification is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    NotificationRef.prototype.afterClosed;
    /**
     * Observable that is triggered when the notification is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    NotificationRef.prototype.afterClosedGroup;
    /**
     * Data passed from the calling component to the content.
     * @type {?}
     */
    NotificationRef.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXJlZi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLXV0aWxzL25vdGlmaWNhdGlvbi1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFPM0M7Ozs7OztJQUFBO1FBQ3FCLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUNsQyxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDOzs7OztRQU1qRCxnQkFBVyxHQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDOzs7OztRQU1oRSxxQkFBZ0IsR0FBb0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBc0NyRixDQUFDO0lBakNHOzs7T0FHRzs7Ozs7O0lBQ0gsK0JBQUs7Ozs7O0lBQUwsVUFBTSxNQUFZO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsaUNBQU87Ozs7O0lBQVAsVUFBUSxNQUFZO1FBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0gseUNBQWU7Ozs7OztJQUFmLFVBQWdCLE1BQVk7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILDJDQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLE1BQVk7UUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBcERELElBb0RDOzs7Ozs7Ozs7Ozs7SUFuREcsdUNBQW1EOzs7OztJQUNuRCw0Q0FBd0Q7Ozs7OztJQU14RCxzQ0FBdUU7Ozs7OztJQU12RSwyQ0FBaUY7Ozs7O0lBR2pGLCtCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gYSBub3RpZmljYXRpb24gY29tcG9uZW50IGdlbmVyYXRlZCB2aWEgdGhlIE5vdGlmaWNhdGlvblNlcnZpY2UuXG4gKiBJdCBjYW4gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udGVudCBjb21wb25lbnQgdGhyb3VnaCB0aGUgY29uc3RydWN0b3IuXG4gKiBGb3IgYSB0ZW1wbGF0ZSwgaXQgaXMgZGVjbGFyZWQgYXMgcGFydCBvZiB0aGUgaW1wbGljaXQgY29udGV4dCwgc2VlIGV4YW1wbGVzLlxuICovXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uUmVmIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9hZnRlckNsb3NlZCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9hZnRlckNsb3NlZEdyb3VwID0gbmV3IFN1YmplY3Q8YW55PigpO1xuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBub3RpZmljYXRpb24gaXMgY2xvc2VkLlxuICAgICAqIE9uIGNsb3NlIGEgKnJlc3VsdCogaXMgcGFzc2VkIGJhY2suIE9uIGRpc21pc3MsIGFuICplcnJvciogaXMgcmV0dXJuZWQgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWZ0ZXJDbG9zZWQ6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuX2FmdGVyQ2xvc2VkLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBub3RpZmljYXRpb24gaXMgY2xvc2VkLlxuICAgICAqIE9uIGNsb3NlIGEgKnJlc3VsdCogaXMgcGFzc2VkIGJhY2suIE9uIGRpc21pc3MsIGFuICplcnJvciogaXMgcmV0dXJuZWQgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWZ0ZXJDbG9zZWRHcm91cDogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5fYWZ0ZXJDbG9zZWRHcm91cC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKiBEYXRhIHBhc3NlZCBmcm9tIHRoZSBjYWxsaW5nIGNvbXBvbmVudCB0byB0aGUgY29udGVudC4qL1xuICAgIHB1YmxpYyBkYXRhOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG5vdGlmaWNhdGlvbiBhbmQgcGFzc2VzIHRoZSBhcmd1bWVudCB0byB0aGUgYWZ0ZXJDbG9zZWQgb2JzZXJ2YWJsZS5cbiAgICAgKiBAcGFyYW0gcmVzdWx0IFZhbHVlIHBhc3NlZCBiYWNrIHRvIHRoZSBvYnNlcnZhYmxlIGFzIGEgcmVzdWx0LlxuICAgICAqL1xuICAgIGNsb3NlKHJlc3VsdD86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hZnRlckNsb3NlZC5uZXh0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzbWlzc2VzIHRoZSBub3RpZmljYXRpb24gYW5kIHBhc3NlcyB0aGUgYXJndW1lbnQgdG8gdGhlIGFmdGVyQ2xvc2VkIG9ic2VydmFibGUgYXMgYW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHJlYXNvbiBWYWx1ZSBwYXNzZWQgYmFjayB0byB0aGUgb2JzZXJ2YWJsZSBhcyBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBkaXNtaXNzKHJlYXNvbj86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hZnRlckNsb3NlZC5lcnJvcihyZWFzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgbm90aWZpY2F0aW9uIGdyb3VwIGFuZCBwYXNzZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBhZnRlckNsb3NlZCBvYnNlcnZhYmxlXG4gICAgICogYXMgYW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHJlYXNvbiBWYWx1ZSBwYXNzZWQgYmFjayB0byB0aGUgb2JzZXJ2YWJsZSBhcyBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBjbG9zZVdob2xlR3JvdXAocmVhc29uPzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkR3JvdXAubmV4dChyZWFzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc21pc3NlcyB0aGUgbm90aWZpY2F0aW9uIGdyb3VwIGFuZCBwYXNzZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBhZnRlckNsb3NlZCBvYnNlcnZhYmxlXG4gICAgICogYXMgYW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHJlYXNvbiBWYWx1ZSBwYXNzZWQgYmFjayB0byB0aGUgb2JzZXJ2YWJsZSBhcyBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBkaXNtaXNzV2hvbGVHcm91cChyZWFzb24/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYWZ0ZXJDbG9zZWRHcm91cC5lcnJvcihyZWFzb24pO1xuICAgIH1cbn1cbiJdfQ==