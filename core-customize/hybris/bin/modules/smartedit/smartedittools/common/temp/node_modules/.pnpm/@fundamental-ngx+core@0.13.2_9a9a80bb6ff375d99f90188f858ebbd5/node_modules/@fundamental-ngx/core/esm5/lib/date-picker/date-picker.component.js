/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-picker/date-picker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { CalendarComponent } from '../calendar/calendar.component';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { FdDate } from '../calendar/models/fd-date';
import { CalendarService } from '../calendar/calendar.service';
import { DateFormatParser } from './format/date-parser';
import { DatePipe } from '@angular/common';
/**
 * The datetime picker component is an opinionated composition of the fd-popover and
 * fd-calendar components to accomplish the UI pattern for picking a date.
 *
 * Supports Angular Forms.
 * ```html
 * <fd-date-picker [(ngModel)]="date"></fd-date-picker>
 * ```
 */
var DatePickerComponent = /** @class */ (function () {
    /** @hidden */
    function DatePickerComponent(dateAdapter, _changeDetectionRef, _datePipe) {
        this.dateAdapter = dateAdapter;
        this._changeDetectionRef = _changeDetectionRef;
        this._datePipe = _datePipe;
        /**
         * @hidden The value of the input
         */
        this.inputFieldDate = null;
        /**
         * @hidden Whether the date input is invalid
         */
        this.isInvalidDateInput = false;
        /**
         * @hidden Whether the date picker is open
         */
        this.isOpen = false;
        /**
         * The type of calendar, 'single' for single date selection or 'range' for a range of dates.
         */
        this.type = 'single';
        /**
         * Date picker input placeholder string
         */
        this.placeholder = 'mm/dd/yyyy';
        /**
         * Date Format displayed on input. See more options: https://angular.io/api/common/DatePipe
         */
        this.format = 'MM/dd/yyyy';
        /**
         * Whether this is the compact input date picker
         */
        this.compact = false;
        /**
         * The currently selected FdDates model start and end in range mode.
         */
        this.selectedRangeDate = { start: null, end: null };
        /**
         * The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on.
         */
        this.startingDayOfWeek = 1;
        /**
         * Whether to validate the date picker input.
         */
        this.useValidation = true;
        /**
         * Aria label for the datepicker input.
         */
        this.dateInputLabel = 'Date input';
        /**
         * Aria label for the button to show/hide the calendar.
         */
        this.displayCalendarToggleLabel = 'Display calendar toggle';
        /**
         * Whether a null input is considered valid.
         */
        this.allowNull = true;
        /**
         * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
         */
        this.activeView = 'day';
        /**
         *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
         *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
         */
        this.placement = 'bottom-start';
        /**
         * Whether AddOn Button should be focusable, set to true by default
         */
        this.buttonFocusable = true;
        /**
         * Fired when a new date is selected.
         */
        this.selectedDateChange = new EventEmitter();
        /**
         * Event thrown every time selected first or last date in range mode is changed
         */
        this.selectedRangeDateChange = new EventEmitter();
        /**
         * Event thrown every time calendar active view is changed
         */
        this.activeViewChange = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
        });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        /**
         * Function used to disable certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.disableFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.disableRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.disableRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.blockRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.blockRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.blockFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
    }
    /**
     * Method that handle calendar active view change and throws event.
     */
    /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    DatePickerComponent.prototype.handleCalendarActiveViewChange = /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    function (activeView) {
        this.activeViewChange.emit(activeView);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatePickerComponent.prototype.closeFromCalendar = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.type === 'single') {
            this.closeCalendar();
        }
    };
    /** Opens the calendar */
    /**
     * Opens the calendar
     * @return {?}
     */
    DatePickerComponent.prototype.openCalendar = /**
     * Opens the calendar
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.onTouched();
            this.isOpen = true;
        }
    };
    /** Toggles the calendar open or closed */
    /**
     * Toggles the calendar open or closed
     * @return {?}
     */
    DatePickerComponent.prototype.toggleCalendar = /**
     * Toggles the calendar open or closed
     * @return {?}
     */
    function () {
        this.onTouched();
        this.isOpen = !this.isOpen;
    };
    /** Closes the calendar if it is open */
    /**
     * Closes the calendar if it is open
     * @return {?}
     */
    DatePickerComponent.prototype.closeCalendar = /**
     * Closes the calendar if it is open
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.isOpen = false;
        }
    };
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected single date changed
     */
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected single date changed
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.handleSingleDateChange = /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected single date changed
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this.inputFieldDate = this._formatDate(date);
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.onChange(date);
            this.isInvalidDateInput = !this.isModelValid();
        }
    };
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected range date changed
     */
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected range date changed
     * @param {?} dates
     * @return {?}
     */
    DatePickerComponent.prototype.handleRangeDateChange = /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected range date changed
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        if (dates &&
            (!CalendarService.datesEqual(this.selectedRangeDate.start, dates.start) ||
                !CalendarService.datesEqual(this.selectedRangeDate.end, dates.end))) {
            this.inputFieldDate = this._formatDate(dates.start)
                + this.dateAdapter.rangeDelimiter
                + this._formatDate(dates.end);
            this.selectedRangeDate = { start: dates.start, end: dates.end };
            this.selectedRangeDateChange.emit(this.selectedRangeDate);
            this.onChange(this.selectedRangeDate);
            this.isInvalidDateInput = !this.isModelValid();
        }
    };
    /**
     * @hidden
     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur
     */
    /**
     * @hidden
     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur
     * @param {?} strDate
     * @return {?}
     */
    DatePickerComponent.prototype.handleInputChange = /**
     * @hidden
     * Method that is triggered when the text input is confirmed to ba changed, by clicking enter, or blur
     * @param {?} strDate
     * @return {?}
     */
    function (strDate) {
        this.dateStringUpdate(strDate);
    };
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     */
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    DatePickerComponent.prototype.validate = /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this.isModelValid() ? null : {
            dateValidation: {
                valid: false
            }
        };
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    DatePickerComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectionRef.detectChanges();
    };
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     */
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    DatePickerComponent.prototype.writeValue = /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        /** If written value is not defined, null, empty string */
        if (!selected) {
            this.inputFieldDate = '';
            return;
        }
        if (this.type === 'single') {
            /**
             * For single mode, if the date is invalid, model is changed, it refresh currently
             * input field text, but it does not refresh currently displayed day
             */
            selected = (/** @type {?} */ (selected));
            this.selectedDate = selected;
            if (this._isSingleModelValid(this.selectedDate)) {
                this.inputFieldDate = this._formatDate(selected);
                this._refreshCurrentlyDisplayedCalendarDate(selected);
            }
            else {
                this.inputFieldDate = '';
            }
        }
        else {
            /**
             * For range mode, if the date is invalid, model is changed, but it does not refresh currently
             * displayed day view, or input field text
             */
            selected = (/** @type {?} */ (selected));
            if (selected.start) {
                this.selectedRangeDate = { start: selected.start, end: selected.end };
                if (this._isRangeModelValid(this.selectedRangeDate)) {
                    this._refreshCurrentlyDisplayedCalendarDate(selected.start);
                    this.inputFieldDate = this._formatDate(selected.start) +
                        this.dateAdapter.rangeDelimiter + this._formatDate(selected.end);
                }
                else {
                    this.inputFieldDate = '';
                }
            }
            else {
                this.inputFieldDate = '';
            }
        }
        this._changeDetectionRef.detectChanges();
        this.isInvalidDateInput = !this.isModelValid();
    };
    /**
     * @hidden
     * Method, which is responsible for transforming string to date, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput
     */
    /**
     * @hidden
     * Method, which is responsible for transforming string to date, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.dateStringUpdate = /**
     * @hidden
     * Method, which is responsible for transforming string to date, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.inputFieldDate = date;
        /** Case when there is single mode */
        if (this.type === 'single') {
            /** @type {?} */
            var fdDate = this.dateAdapter.parse(date);
            /** Check if dates are equal, if so, there is no need to make any changes */
            if (!CalendarService.datesEqual(fdDate, this.selectedDate)) {
                this.isInvalidDateInput = !this._isSingleModelValid(fdDate);
                /** Check if date is valid, if it's not, there is no need to refresh calendar */
                if (!this.isInvalidDateInput && date) {
                    this._refreshCurrentlyDisplayedCalendarDate(fdDate);
                }
                else {
                    /** Whether string is invalid, by passed block or disable functions there is forced Invalid Object, */
                    fdDate = this._invalidDate();
                }
                /**
                 * Date in model is changed no matter if the parsed date from string is valid or not.
                 */
                this.selectedDate = fdDate;
                this.onChange(this.selectedDate);
                this.selectedDateChange.emit(this.selectedDate);
            }
            /** Case when there is range mode */
        }
        else {
            /** @type {?} */
            var currentDates = date.split(this.dateAdapter.rangeDelimiter);
            /** @type {?} */
            var firstDate = this.dateAdapter.parse(currentDates[0]);
            /** @type {?} */
            var secondDate = this.dateAdapter.parse(currentDates[1]);
            /**
             * Check if dates are equal, if dates are the same there is no need to make any changes
             * Date in model is changed no matter if the parsed dates from string are valid or not.
             */
            if (!CalendarService.datesEqual(firstDate, this.selectedRangeDate.start) ||
                !CalendarService.datesEqual(secondDate, this.selectedRangeDate.end)) {
                /** @type {?} */
                var selectedRangeDate = null;
                /** If the end date is before the start date, there is need to replace them  */
                if ((firstDate.getTimeStamp() > secondDate.getTimeStamp()) && secondDate.isDateValid()) {
                    selectedRangeDate = { start: secondDate, end: firstDate };
                }
                else {
                    selectedRangeDate = { start: firstDate, end: secondDate };
                }
                this.isInvalidDateInput = !this._isRangeModelValid(selectedRangeDate);
                /** If start date is invalid, because of format, block or disable function, there is invalidDate forced */
                if (!this._isStartDateValid(selectedRangeDate.start)) {
                    selectedRangeDate.start = this._invalidDate();
                }
                /** If end date is invalid, because of format, block or disable function, there is invalidDate forced */
                if (!this._isEndDateValid(selectedRangeDate.end)) {
                    selectedRangeDate.end = this._invalidDate();
                }
                /** Whole object is changed, even it's invalid */
                this.selectedRangeDate = selectedRangeDate;
                this.selectedRangeDateChange.emit(this.selectedRangeDate);
                this.onChange(this.selectedRangeDate);
                /** Check if start date is valid, if it's not, there is no need o refresh calendar */
                if (this._isStartDateValid(this.selectedRangeDate.start)) {
                    this._refreshCurrentlyDisplayedCalendarDate(this.selectedRangeDate.start);
                }
            }
        }
        if (!date && this.allowNull) {
            this.isInvalidDateInput = false;
        }
    };
    /** Method that provides information if model selected date/dates have properly types and are valid */
    /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    DatePickerComponent.prototype.isModelValid = /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    function () {
        if (this.type === 'single') {
            return this._isSingleModelValid(this.selectedDate);
        }
        else {
            return this._isRangeModelValid(this.selectedRangeDate);
        }
    };
    /** Method that returns info if single model given is valid */
    /**
     * Method that returns info if single model given is valid
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    DatePickerComponent.prototype._isSingleModelValid = /**
     * Method that returns info if single model given is valid
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    function (fdDate) {
        return (this._isFdDateValid(fdDate) &&
            !this.disableFunction(fdDate) &&
            !this.blockFunction(fdDate)) || (!this.inputFieldDate && this.allowNull);
    };
    /** Method that returns info if range date model given is valid */
    /**
     * Method that returns info if range date model given is valid
     * @private
     * @param {?} fdRangeDate
     * @return {?}
     */
    DatePickerComponent.prototype._isRangeModelValid = /**
     * Method that returns info if range date model given is valid
     * @private
     * @param {?} fdRangeDate
     * @return {?}
     */
    function (fdRangeDate) {
        return (fdRangeDate &&
            this._isStartDateValid(fdRangeDate.start) &&
            this._isEndDateValid(fdRangeDate.end)) || (!this.inputFieldDate && this.allowNull);
    };
    /** Method that returns info if end date model given is valid */
    /**
     * Method that returns info if end date model given is valid
     * @private
     * @param {?} endDate
     * @return {?}
     */
    DatePickerComponent.prototype._isEndDateValid = /**
     * Method that returns info if end date model given is valid
     * @private
     * @param {?} endDate
     * @return {?}
     */
    function (endDate) {
        return this._isFdDateValid(endDate) &&
            !this.disableRangeEndFunction(endDate) &&
            !this.blockRangeEndFunction(endDate);
    };
    /** Method that returns info if start date model given is valid */
    /**
     * Method that returns info if start date model given is valid
     * @private
     * @param {?} startDate
     * @return {?}
     */
    DatePickerComponent.prototype._isStartDateValid = /**
     * Method that returns info if start date model given is valid
     * @private
     * @param {?} startDate
     * @return {?}
     */
    function (startDate) {
        return this._isFdDateValid(startDate) &&
            !this.disableRangeStartFunction(startDate) &&
            !this.blockRangeStartFunction(startDate);
    };
    /** Method that returns info if end date model given is valid */
    /**
     * Method that returns info if end date model given is valid
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    DatePickerComponent.prototype._isFdDateValid = /**
     * Method that returns info if end date model given is valid
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    function (fdDate) {
        return fdDate &&
            fdDate instanceof FdDate &&
            fdDate.isDateValid();
    };
    /**
     * @private
     * @return {?}
     */
    DatePickerComponent.prototype._invalidDate = /**
     * @private
     * @return {?}
     */
    function () {
        return this.dateAdapter.parse('InVaLiDDaTe');
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype._refreshCurrentlyDisplayedCalendarDate = /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.calendarComponent) {
            this.calendarComponent.setCurrentlyDisplayed(date);
        }
    };
    /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     */
    /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    DatePickerComponent.prototype._formatDate = /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     * @private
     * @param {?} fdDate
     * @return {?}
     */
    function (fdDate) {
        /** @type {?} */
        var customFormattedDate = this.dateAdapter.format(fdDate);
        if (customFormattedDate) {
            return customFormattedDate;
        }
        else {
            return this._datePipe.transform(fdDate.toDate(), this.format, null, this.locale);
        }
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-date-picker',
                    template: "<fd-popover [(isOpen)]=\"isOpen\"\n            (isOpenChange)=\"handleInputChange(datePicker.value)\"\n            [triggers]=\"[]\"\n            [placement]=\"placement\"\n            [closeOnEscapeKey]=\"true\"\n            [disabled]=\"disabled\">\n    <fd-popover-control>\n        <fd-input-group [compact]=\"compact\" [state]=\"state\" [disabled]=\"disabled\">\n            <input #datePicker\n                   class=\"fd-input\"\n                   fd-input-group-input\n                   type=\"text\"\n                   [attr.aria-label]=\"dateInputLabel\"\n                   [value]=\"inputFieldDate\"\n                   [placeholder]=\"placeholder\"\n                   (keyup.enter)=\"handleInputChange(datePicker.value)\"\n                   (click)=\"openCalendar()\"\n                   [compact]=\"compact\"\n                   [ngClass]=\"{ 'is-invalid': isInvalidDateInput && useValidation }\">\n            <span fd-input-group-addon [button]=\"true\" [compact]=\"compact\">\n                <button fd-button\n                        [attr.tabindex]=\"buttonFocusable ? 0 : -1\"\n                        [glyph]=\"'calendar'\"\n                        [options]=\"'light'\"\n                        [compact]=\"compact\"\n                        (click)=\"toggleCalendar()\" [attr.aria-label]=\"displayCalendarToggleLabel\"\n                        [attr.aria-expanded]=\"isOpen\">\n                </button>\n            </span>\n        </fd-input-group>\n    </fd-popover-control>\n    <fd-popover-body\n        [style.display]=\"'block'\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-hidden]=\"!isOpen\">\n        <fd-calendar (closeCalendar)=\"closeFromCalendar()\"\n                     [activeView]=\"activeView\"\n                     (activeViewChange)=\"handleCalendarActiveViewChange($event)\"\n                     [calType]=\"type\"\n                     [disableFunction]=\"disableFunction ? disableFunction : null\"\n                     [blockFunction]=\"blockFunction ? blockFunction : null\"\n                     [disableRangeStartFunction]=\"disableRangeStartFunction ? disableRangeStartFunction : null\"\n                     [disableRangeEndFunction]=\"disableRangeEndFunction ? disableRangeEndFunction : null\"\n                     [blockRangeStartFunction]=\"blockRangeStartFunction ? blockRangeStartFunction : null\"\n                     [blockRangeEndFunction]=\"blockRangeEndFunction ? blockRangeEndFunction : null\"\n                     [selectedDate]=\"selectedDate\"\n                     [selectedRangeDate]=\"selectedRangeDate\"\n                     (selectedRangeDateChange)=\"handleRangeDateChange($event)\"\n                     (selectedDateChange)=\"handleSingleDateChange($event)\"\n                     [startingDayOfWeek]=\"startingDayOfWeek\"></fd-calendar>\n    </fd-popover-body>\n</fd-popover>\n",
                    host: {
                        '(blur)': 'onTouched()',
                        '[class.fd-date-picker]': 'true',
                        '[class.fd-date-picker-custom]': 'true'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatePickerComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatePickerComponent; })),
                            multi: true
                        },
                        DatePipe
                    ],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".fd-date-picker-custom{display:inline-block}.fd-date-picker-custom fd-popover{display:block}"]
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: DateFormatParser },
        { type: ChangeDetectorRef },
        { type: DatePipe, decorators: [{ type: Optional }] }
    ]; };
    DatePickerComponent.propDecorators = {
        calendarComponent: [{ type: ViewChild, args: [CalendarComponent, { static: false },] }],
        type: [{ type: Input }],
        placeholder: [{ type: Input }],
        format: [{ type: Input }],
        locale: [{ type: Input }],
        compact: [{ type: Input }],
        selectedDate: [{ type: Input }],
        selectedRangeDate: [{ type: Input }],
        startingDayOfWeek: [{ type: Input }],
        useValidation: [{ type: Input }],
        dateInputLabel: [{ type: Input }],
        displayCalendarToggleLabel: [{ type: Input }],
        allowNull: [{ type: Input }],
        activeView: [{ type: Input }],
        placement: [{ type: Input }],
        disabled: [{ type: Input }],
        state: [{ type: Input }],
        buttonFocusable: [{ type: Input }],
        selectedDateChange: [{ type: Output }],
        selectedRangeDateChange: [{ type: Output }],
        activeViewChange: [{ type: Output }],
        disableFunction: [{ type: Input }],
        disableRangeStartFunction: [{ type: Input }],
        disableRangeEndFunction: [{ type: Input }],
        blockRangeStartFunction: [{ type: Input }],
        blockRangeEndFunction: [{ type: Input }],
        blockFunction: [{ type: Input }]
    };
    return DatePickerComponent;
}());
export { DatePickerComponent };
if (false) {
    /**
     * @hidden The value of the input
     * @type {?}
     */
    DatePickerComponent.prototype.inputFieldDate;
    /**
     * @hidden Whether the date input is invalid
     * @type {?}
     */
    DatePickerComponent.prototype.isInvalidDateInput;
    /**
     * @hidden Whether the date picker is open
     * @type {?}
     */
    DatePickerComponent.prototype.isOpen;
    /**
     * @hidden
     * @type {?}
     */
    DatePickerComponent.prototype.calendarComponent;
    /**
     * The type of calendar, 'single' for single date selection or 'range' for a range of dates.
     * @type {?}
     */
    DatePickerComponent.prototype.type;
    /**
     * Date picker input placeholder string
     * @type {?}
     */
    DatePickerComponent.prototype.placeholder;
    /**
     * Date Format displayed on input. See more options: https://angular.io/api/common/DatePipe
     * @type {?}
     */
    DatePickerComponent.prototype.format;
    /**
     * Locale for date pipe. See more https://angular.io/guide/i18n
     * @type {?}
     */
    DatePickerComponent.prototype.locale;
    /**
     * Whether this is the compact input date picker
     * @type {?}
     */
    DatePickerComponent.prototype.compact;
    /**
     * The currently selected CalendarDay model
     * @type {?}
     */
    DatePickerComponent.prototype.selectedDate;
    /**
     * The currently selected FdDates model start and end in range mode.
     * @type {?}
     */
    DatePickerComponent.prototype.selectedRangeDate;
    /**
     * The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on.
     * @type {?}
     */
    DatePickerComponent.prototype.startingDayOfWeek;
    /**
     * Whether to validate the date picker input.
     * @type {?}
     */
    DatePickerComponent.prototype.useValidation;
    /**
     * Aria label for the datepicker input.
     * @type {?}
     */
    DatePickerComponent.prototype.dateInputLabel;
    /**
     * Aria label for the button to show/hide the calendar.
     * @type {?}
     */
    DatePickerComponent.prototype.displayCalendarToggleLabel;
    /**
     * Whether a null input is considered valid.
     * @type {?}
     */
    DatePickerComponent.prototype.allowNull;
    /**
     * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
     * @type {?}
     */
    DatePickerComponent.prototype.activeView;
    /**
     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    DatePickerComponent.prototype.placement;
    /**
     * Whether the date picker is disabled.
     * @type {?}
     */
    DatePickerComponent.prototype.disabled;
    /**
     *  The state of the form control - applies css classes.
     *  Can be `valid`, `invalid`, `warning`, `information` or blank for default.
     * @type {?}
     */
    DatePickerComponent.prototype.state;
    /**
     * Whether AddOn Button should be focusable, set to true by default
     * @type {?}
     */
    DatePickerComponent.prototype.buttonFocusable;
    /**
     * Fired when a new date is selected.
     * @type {?}
     */
    DatePickerComponent.prototype.selectedDateChange;
    /**
     * Event thrown every time selected first or last date in range mode is changed
     * @type {?}
     */
    DatePickerComponent.prototype.selectedRangeDateChange;
    /**
     * Event thrown every time calendar active view is changed
     * @type {?}
     */
    DatePickerComponent.prototype.activeViewChange;
    /**
     * @hidden
     * @type {?}
     */
    DatePickerComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    DatePickerComponent.prototype.onTouched;
    /**
     * Function used to disable certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.disableFunction;
    /**
     * Function used to disable certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.disableRangeStartFunction;
    /**
     * Function used to disable certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.disableRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.blockRangeStartFunction;
    /**
     * Function used to block certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.blockRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatePickerComponent.prototype.blockFunction;
    /** @type {?} */
    DatePickerComponent.prototype.dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DatePickerComponent.prototype._changeDetectionRef;
    /**
     * @type {?}
     * @private
     */
    DatePickerComponent.prototype._datePipe;
}
//# sourceMappingURL=data:application/json;base64,