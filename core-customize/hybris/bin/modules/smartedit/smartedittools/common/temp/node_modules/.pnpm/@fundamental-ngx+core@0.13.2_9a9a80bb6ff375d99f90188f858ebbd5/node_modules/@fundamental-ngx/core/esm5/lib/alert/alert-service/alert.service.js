/**
 * @fileoverview added by tsickle
 * Generated from: lib/alert/alert-service/alert.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AlertComponent } from '../alert.component';
import { AlertContainerComponent } from '../alert-utils/alert-container.component';
import { AlertConfig } from '../alert-utils/alert-config';
import { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';
import { AlertRef } from '../alert-utils/alert-ref';
/**
 * Service used to dynamically generate an alert as an overlay.
 */
var AlertService = /** @class */ (function () {
    /** @hidden */
    function AlertService(dynamicComponentService) {
        this.dynamicComponentService = dynamicComponentService;
        this.alerts = [];
    }
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     */
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    AlertService.prototype.hasOpenAlerts = /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    function () {
        return this.alerts && this.alerts.length > 0;
    };
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param content Content of the alert component.
     * @param alertConfig Configuration of the alert component.
     */
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    AlertService.prototype.open = /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    function (content, alertConfig) {
        var _this = this;
        if (alertConfig === void 0) { alertConfig = new AlertConfig(); }
        // Get default values from alert model
        alertConfig = Object.assign(new AlertConfig(), alertConfig);
        // Instantiate alert ref service
        /** @type {?} */
        var service = new AlertRef();
        service.data = alertConfig.data;
        // If empty or undefined alert array, create container
        if (!this.alerts || this.alerts.length === 0 || !this.alertContainerRef) {
            this.alertContainerRef = this.dynamicComponentService.createDynamicComponent(content, AlertContainerComponent, alertConfig);
        }
        // Define Container to put backdrop and component to container
        alertConfig.container = this.alertContainerRef.location.nativeElement;
        /** @type {?} */
        var component = this.dynamicComponentService.createDynamicComponent(content, AlertComponent, alertConfig, [service]);
        component.location.nativeElement.style.marginTop = '10px';
        // Subscription to close alert from ref
        /** @type {?} */
        var refSub = service.afterDismissed.subscribe((/**
         * @return {?}
         */
        function () {
            _this.destroyAlertComponent(component);
            refSub.unsubscribe();
        }));
        // Log new component
        this.alerts.push(component);
        return service;
    };
    /**
     * Dismisses all service-opened alerts.
     */
    /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    AlertService.prototype.dismissAll = /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    function () {
        var _this = this;
        this.alerts.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        function (ref) {
            _this.destroyAlertComponent(ref);
        }));
    };
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.destroyAlertComponent = /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        this.alerts[this.alerts.indexOf(alert)] = null;
        this.alerts = this.alerts.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item !== null && item !== undefined; }));
        this.dynamicComponentService.destroyComponent(alert);
        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {
            this.destroyAlertContainer();
        }
    };
    /**
     * @private
     * @return {?}
     */
    AlertService.prototype.destroyAlertContainer = /**
     * @private
     * @return {?}
     */
    function () {
        this.dynamicComponentService.destroyComponent(this.alertContainerRef);
        this.alertContainerRef = undefined;
    };
    AlertService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlertService.ctorParameters = function () { return [
        { type: DynamicComponentService }
    ]; };
    return AlertService;
}());
export { AlertService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alerts;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alertContainerRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.dynamicComponentService;
}
//# sourceMappingURL=data:application/json;base64,