/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list/nested-list.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, ElementRef, forwardRef, HostBinding, Input, QueryList } from '@angular/core';
import { NestedItemDirective } from '../nested-item/nested-item.directive';
import { NestedListStateService } from '../nested-list-state.service';
export class NestedListDirective {
    /**
     * @hidden
     * @param {?} nestedListStateService
     * @param {?} elementRef
     */
    constructor(nestedListStateService, elementRef) {
        this.nestedListStateService = nestedListStateService;
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this.fdNestedListItemClass = true;
        /**
         * In case the user wants to no use icons for items in this list
         */
        this.textOnly = false;
        /**
         * In case the user wants put compact mode in this list
         */
        this.compact = false;
        /**
         * @hidden
         */
        this.hidden = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        /** @type {?} */
        let nestedLevel = this.getNestedLevel();
        /** If there is condensed mode, maximum 2nd level class of nest can be added */
        if (this.nestedListStateService.condensed) {
            nestedLevel = Math.min(...[nestedLevel, 2]);
        }
        this.handleNestedLevel(nestedLevel);
    }
    /**
     * @hidden
     * @private
     * @param {?} level
     * @return {?}
     */
    handleNestedLevel(level) {
        /** Adding class with the nested level */
        this.elementRef.nativeElement.classList.add('level-' + level);
    }
    /**
     * @hidden
     * Method, that checks how deep is the list element
     * @private
     * @return {?}
     */
    getNestedLevel() {
        /** @type {?} */
        let element = this.elementRef.nativeElement;
        /** @type {?} */
        const parentElements = [];
        /** Method that gathers all of the parentNode elements of current NestedListDirective element */
        while (element.parentNode) {
            parentElements.unshift(element);
            element = element.parentNode;
        }
        /**
         * Filter only elements, that has `fd-nested-list` directive attribute
         * @type {?}
         */
        const filteredParentElements = parentElements.filter((/**
         * @param {?} _element
         * @return {?}
         */
        _element => _element.hasAttribute('fd-nested-list')));
        return filteredParentElements.length;
    }
}
NestedListDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdNestedList], [fd-nested-list]'
            },] }
];
/** @nocollapse */
NestedListDirective.ctorParameters = () => [
    { type: NestedListStateService },
    { type: ElementRef }
];
NestedListDirective.propDecorators = {
    fdNestedListItemClass: [{ type: HostBinding, args: ['class.fd-nested-list',] }],
    textOnly: [{ type: Input }, { type: HostBinding, args: ['class.fd-nested-list--text-only',] }],
    compact: [{ type: Input }, { type: HostBinding, args: ['class.fd-nested-list--compact',] }],
    nestedItems: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => NestedItemDirective)),] }],
    hidden: [{ type: HostBinding, args: ['attr.aria-hidden',] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedListDirective.prototype.fdNestedListItemClass;
    /**
     * In case the user wants to no use icons for items in this list
     * @type {?}
     */
    NestedListDirective.prototype.textOnly;
    /**
     * In case the user wants put compact mode in this list
     * @type {?}
     */
    NestedListDirective.prototype.compact;
    /**
     * @hidden
     * This variable is mostly to keep track of this list's children. There is not usage of it inside this directive,
     * but it's used by services and NestedItemDirective by itself,
     * @type {?}
     */
    NestedListDirective.prototype.nestedItems;
    /**
     * @hidden
     * @type {?}
     */
    NestedListDirective.prototype.hidden;
    /**
     * @type {?}
     * @private
     */
    NestedListDirective.prototype.nestedListStateService;
    /**
     * @type {?}
     * @private
     */
    NestedListDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkLWxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL25lc3RlZC1saXN0L25lc3RlZC1saXN0L25lc3RlZC1saXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFSCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLEtBQUssRUFDTCxTQUFTLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFM0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFLdEUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7O0lBNkI1QixZQUNZLHNCQUE4QyxFQUM5QyxVQUFzQjtRQUR0QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLGVBQVUsR0FBVixVQUFVLENBQVk7Ozs7UUEzQmxDLDBCQUFxQixHQUFZLElBQUksQ0FBQzs7OztRQUt0QyxhQUFRLEdBQVksS0FBSyxDQUFDOzs7O1FBSzFCLFlBQU8sR0FBWSxLQUFLLENBQUM7Ozs7UUFZbEIsV0FBTSxHQUFZLEtBQUssQ0FBQztJQU01QixDQUFDOzs7OztJQUdKLGtCQUFrQjs7WUFDVixXQUFXLEdBQVcsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUMvQywrRUFBK0U7UUFDL0UsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxFQUFFO1lBQ3ZDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7O0lBR08saUJBQWlCLENBQUMsS0FBYTtRQUNuQyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7Ozs7OztJQU1PLGNBQWM7O1lBQ2QsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTs7Y0FDckMsY0FBYyxHQUFHLEVBQUU7UUFFekIsZ0dBQWdHO1FBQ2hHLE9BQU8sT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN2QixjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1NBQ2hDOzs7OztjQUdLLHNCQUFzQixHQUFHLGNBQWMsQ0FBQyxNQUFNOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUM7UUFDekcsT0FBTyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7SUFDekMsQ0FBQzs7O1lBdEVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0NBQWtDO2FBQy9DOzs7O1lBSlEsc0JBQXNCO1lBUjNCLFVBQVU7OztvQ0FnQlQsV0FBVyxTQUFDLHNCQUFzQjt1QkFJbEMsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQ0FBaUM7c0JBSTdDLEtBQUssWUFDTCxXQUFXLFNBQUMsK0JBQStCOzBCQVEzQyxlQUFlLFNBQUMsVUFBVTs7O2dCQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFDO3FCQUlyRCxXQUFXLFNBQUMsa0JBQWtCOzs7Ozs7O0lBdEIvQixvREFDc0M7Ozs7O0lBR3RDLHVDQUUwQjs7Ozs7SUFHMUIsc0NBRXlCOzs7Ozs7O0lBT3pCLDBDQUM0Qzs7Ozs7SUFHNUMscUNBQytCOzs7OztJQUkzQixxREFBc0Q7Ozs7O0lBQ3RELHlDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbnB1dCxcbiAgICBRdWVyeUxpc3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZXN0ZWRJdGVtRGlyZWN0aXZlIH0gZnJvbSAnLi4vbmVzdGVkLWl0ZW0vbmVzdGVkLWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IE5lc3RlZExpc3RJbnRlcmZhY2UgfSBmcm9tICcuL25lc3RlZC1saXN0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBOZXN0ZWRMaXN0U3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vbmVzdGVkLWxpc3Qtc3RhdGUuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2ZkTmVzdGVkTGlzdF0sIFtmZC1uZXN0ZWQtbGlzdF0nXG59KVxuZXhwb3J0IGNsYXNzIE5lc3RlZExpc3REaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBOZXN0ZWRMaXN0SW50ZXJmYWNlIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1uZXN0ZWQtbGlzdCcpXG4gICAgZmROZXN0ZWRMaXN0SXRlbUNsYXNzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBJbiBjYXNlIHRoZSB1c2VyIHdhbnRzIHRvIG5vIHVzZSBpY29ucyBmb3IgaXRlbXMgaW4gdGhpcyBsaXN0ICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLW5lc3RlZC1saXN0LS10ZXh0LW9ubHknKVxuICAgIHRleHRPbmx5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogSW4gY2FzZSB0aGUgdXNlciB3YW50cyBwdXQgY29tcGFjdCBtb2RlIGluIHRoaXMgbGlzdCAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1uZXN0ZWQtbGlzdC0tY29tcGFjdCcpXG4gICAgY29tcGFjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFRoaXMgdmFyaWFibGUgaXMgbW9zdGx5IHRvIGtlZXAgdHJhY2sgb2YgdGhpcyBsaXN0J3MgY2hpbGRyZW4uIFRoZXJlIGlzIG5vdCB1c2FnZSBvZiBpdCBpbnNpZGUgdGhpcyBkaXJlY3RpdmUsXG4gICAgICogYnV0IGl0J3MgdXNlZCBieSBzZXJ2aWNlcyBhbmQgTmVzdGVkSXRlbURpcmVjdGl2ZSBieSBpdHNlbGYsXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IE5lc3RlZEl0ZW1EaXJlY3RpdmUpKVxuICAgIG5lc3RlZEl0ZW1zOiBRdWVyeUxpc3Q8TmVzdGVkSXRlbURpcmVjdGl2ZT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWhpZGRlbicpXG4gICAgcHVibGljIGhpZGRlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBuZXN0ZWRMaXN0U3RhdGVTZXJ2aWNlOiBOZXN0ZWRMaXN0U3RhdGVTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgICApIHt9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgbGV0IG5lc3RlZExldmVsOiBudW1iZXIgPSB0aGlzLmdldE5lc3RlZExldmVsKCk7XG4gICAgICAgIC8qKiBJZiB0aGVyZSBpcyBjb25kZW5zZWQgbW9kZSwgbWF4aW11bSAybmQgbGV2ZWwgY2xhc3Mgb2YgbmVzdCBjYW4gYmUgYWRkZWQgKi9cbiAgICAgICAgaWYgKHRoaXMubmVzdGVkTGlzdFN0YXRlU2VydmljZS5jb25kZW5zZWQpIHtcbiAgICAgICAgICAgIG5lc3RlZExldmVsID0gTWF0aC5taW4oLi4uW25lc3RlZExldmVsLCAyXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVOZXN0ZWRMZXZlbChuZXN0ZWRMZXZlbCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcml2YXRlIGhhbmRsZU5lc3RlZExldmVsKGxldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgLyoqIEFkZGluZyBjbGFzcyB3aXRoIHRoZSBuZXN0ZWQgbGV2ZWwgKi9cbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbGV2ZWwtJyArIGxldmVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogTWV0aG9kLCB0aGF0IGNoZWNrcyBob3cgZGVlcCBpcyB0aGUgbGlzdCBlbGVtZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXROZXN0ZWRMZXZlbCgpOiBudW1iZXIge1xuICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50cyA9IFtdO1xuXG4gICAgICAgIC8qKiBNZXRob2QgdGhhdCBnYXRoZXJzIGFsbCBvZiB0aGUgcGFyZW50Tm9kZSBlbGVtZW50cyBvZiBjdXJyZW50IE5lc3RlZExpc3REaXJlY3RpdmUgZWxlbWVudCAqL1xuICAgICAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50cy51bnNoaWZ0KGVsZW1lbnQpO1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBGaWx0ZXIgb25seSBlbGVtZW50cywgdGhhdCBoYXMgYGZkLW5lc3RlZC1saXN0YCBkaXJlY3RpdmUgYXR0cmlidXRlICovXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUGFyZW50RWxlbWVudHMgPSBwYXJlbnRFbGVtZW50cy5maWx0ZXIoX2VsZW1lbnQgPT4gX2VsZW1lbnQuaGFzQXR0cmlidXRlKCdmZC1uZXN0ZWQtbGlzdCcpKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkUGFyZW50RWxlbWVudHMubGVuZ3RoO1xuICAgIH1cbn1cbiJdfQ==