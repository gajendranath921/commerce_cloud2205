/**
 * @fileoverview added by tsickle
 * Generated from: lib/tabs/tab-utils/tab-directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * Directive used to identify the template which will populate the tab header.
 * Used to achieve complex headers that require more than a string.
 *
 * ```html
 * <fd-tab>
 *      <ng-template fd-tab-title>
 *          <fd-icon [glyph]="'delete'"></fd-icon>
 *          <span>Tab Label</span>
 *      </ng-template>
 * </fd-tab>
 * ```
 */
var TabTitleDirective = /** @class */ (function () {
    function TabTitleDirective() {
    }
    TabTitleDirective.decorators = [
        { type: Directive, args: [{
                    // TODO to be discussed
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-tab-title]'
                },] }
    ];
    return TabTitleDirective;
}());
export { TabTitleDirective };
/**
 * Not for external use. Portal to render the complex title template.
 */
var TabLoadTitleDirective = /** @class */ (function () {
    function TabLoadTitleDirective(viewRef) {
        this.viewRef = viewRef;
    }
    /**
     * @return {?}
     */
    TabLoadTitleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.viewRef.clear();
        this.contentRef = this.viewRef.createEmbeddedView(this.content);
    };
    TabLoadTitleDirective.decorators = [
        { type: Directive, args: [{
                    // TODO to be discussed
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-tab-load-title]'
                },] }
    ];
    /** @nocollapse */
    TabLoadTitleDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    TabLoadTitleDirective.propDecorators = {
        content: [{ type: Input, args: ['fd-tab-load-title',] }]
    };
    return TabLoadTitleDirective;
}());
export { TabLoadTitleDirective };
if (false) {
    /** @type {?} */
    TabLoadTitleDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    TabLoadTitleDirective.prototype.contentRef;
    /**
     * @type {?}
     * @private
     */
    TabLoadTitleDirective.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvdGFicy90YWItdXRpbHMvdGFiLWRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7OztBQWV6RztJQUFBO0lBTUEsQ0FBQzs7Z0JBTkEsU0FBUyxTQUFDOzs7b0JBR1AsUUFBUSxFQUFFLGdCQUFnQjtpQkFDN0I7O0lBRUQsd0JBQUM7Q0FBQSxBQU5ELElBTUM7U0FEWSxpQkFBaUI7Ozs7QUFNOUI7SUFXSSwrQkFBb0IsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFBRyxDQUFDOzs7O0lBRWpELHdDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxDQUFDOztnQkFoQkosU0FBUyxTQUFDOzs7b0JBR1AsUUFBUSxFQUFFLHFCQUFxQjtpQkFDbEM7Ozs7Z0JBOUJnRSxnQkFBZ0I7OzswQkFnQzVFLEtBQUssU0FBQyxtQkFBbUI7O0lBVzlCLDRCQUFDO0NBQUEsQUFqQkQsSUFpQkM7U0FaWSxxQkFBcUI7OztJQUM5Qix3Q0FDMEI7Ozs7O0lBRTFCLDJDQUF5Qzs7Ozs7SUFFN0Isd0NBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIHRlbXBsYXRlIHdoaWNoIHdpbGwgcG9wdWxhdGUgdGhlIHRhYiBoZWFkZXIuXG4gKiBVc2VkIHRvIGFjaGlldmUgY29tcGxleCBoZWFkZXJzIHRoYXQgcmVxdWlyZSBtb3JlIHRoYW4gYSBzdHJpbmcuXG4gKlxuICogYGBgaHRtbFxuICogPGZkLXRhYj5cbiAqICAgICAgPG5nLXRlbXBsYXRlIGZkLXRhYi10aXRsZT5cbiAqICAgICAgICAgIDxmZC1pY29uIFtnbHlwaF09XCInZGVsZXRlJ1wiPjwvZmQtaWNvbj5cbiAqICAgICAgICAgIDxzcGFuPlRhYiBMYWJlbDwvc3Bhbj5cbiAqICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqIDwvZmQtdGFiPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIFRPRE8gdG8gYmUgZGlzY3Vzc2VkXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLXRhYi10aXRsZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRhYlRpdGxlRGlyZWN0aXZlIHtcbn1cblxuLyoqXG4gKiBOb3QgZm9yIGV4dGVybmFsIHVzZS4gUG9ydGFsIHRvIHJlbmRlciB0aGUgY29tcGxleCB0aXRsZSB0ZW1wbGF0ZS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gVE9ETyB0byBiZSBkaXNjdXNzZWRcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtdGFiLWxvYWQtdGl0bGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUYWJMb2FkVGl0bGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgnZmQtdGFiLWxvYWQtdGl0bGUnKVxuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwcml2YXRlIGNvbnRlbnRSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7fVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmlld1JlZi5jbGVhcigpO1xuICAgICAgICB0aGlzLmNvbnRlbnRSZWYgPSB0aGlzLnZpZXdSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuY29udGVudCk7XG4gICAgfVxufVxuIl19