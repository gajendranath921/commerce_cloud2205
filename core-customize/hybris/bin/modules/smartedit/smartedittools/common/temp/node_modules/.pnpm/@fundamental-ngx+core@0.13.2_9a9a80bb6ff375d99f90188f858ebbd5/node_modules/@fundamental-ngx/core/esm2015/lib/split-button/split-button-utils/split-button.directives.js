/**
 * @fileoverview added by tsickle
 * Generated from: lib/split-button/split-button-utils/split-button.directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
/**
 * Directive used to identify the template which will populate the main action button.
 * Used to achieve complex buttons that require more than a string.
 * ```html
 *    <fd-button-split>
 *        <ng-template fd-button-split-action-title>
 *            <p>Paragraph 1</p>
 *            <p>Paragraph 2</p>
 *        </ng-template>
 *        <div fd-button-split-menu>
 *            <fd-menu>
 *                <ul fd-menu-list>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option</a>
 *                    </li>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option2</a>
 *                    </li>
 *                </ul>
 *            </fd-menu>
 *        </div>
 *    </fd-button-split>
 * </fd-button-split>
 * ```
 */
export class SplitButtonActionTitle {
}
SplitButtonActionTitle.decorators = [
    { type: Directive, args: [{
                // TODO to be discussed
                // tslint:disable-next-line:directive-selector
                selector: '[fd-split-button-action-title]'
            },] }
];
/**
 *   Directive used to specify menu list of items for dropdown.
 * ```html
 *    <fd-button-split>
 *        Action Button
 *        <div fd-button-split-menu>
 *            <fd-menu>
 *                <ul fd-menu-list>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option</a>
 *                    </li>
 *                    <li fd-menu-item>
 *                       <a [routerLink]="'/'">option2</a>
 *                    </li>
 *                </ul>
 *            </fd-menu>
 *        </div>
 *    </fd-button-split>
 * </fd-button-split>
 * ```
 */
export class SplitButtonMenuDirective {
}
SplitButtonMenuDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-split-button-menu]',
            },] }
];
/**
 * Not for external use. Portal to render the complex title template.
 */
export class SplitButtonLoadActionTitle {
    /**
     * @param {?} viewRef
     */
    constructor(viewRef) {
        this.viewRef = viewRef;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewRef.clear();
        this.contentRef = this.viewRef.createEmbeddedView(this.content);
    }
}
SplitButtonLoadActionTitle.decorators = [
    { type: Directive, args: [{
                // TODO to be discussed
                // tslint:disable-next-line:directive-selector
                selector: '[fd-split-button-load-action-title]'
            },] }
];
/** @nocollapse */
SplitButtonLoadActionTitle.ctorParameters = () => [
    { type: ViewContainerRef }
];
SplitButtonLoadActionTitle.propDecorators = {
    content: [{ type: Input, args: ['fd-split-button-load-action-title',] }]
};
if (false) {
    /** @type {?} */
    SplitButtonLoadActionTitle.prototype.content;
    /**
     * @type {?}
     * @private
     */
    SplitButtonLoadActionTitle.prototype.contentRef;
    /**
     * @type {?}
     * @private
     */
    SplitButtonLoadActionTitle.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtYnV0dG9uLmRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvc3BsaXQtYnV0dG9uL3NwbGl0LWJ1dHRvbi11dGlscy9zcGxpdC1idXR0b24uZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW1CLEtBQUssRUFBVSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0N6RyxNQUFNLE9BQU8sc0JBQXNCOzs7WUFMbEMsU0FBUyxTQUFDOzs7Z0JBR1AsUUFBUSxFQUFFLGdDQUFnQzthQUM3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2QkQsTUFBTSxPQUFPLHdCQUF3Qjs7O1lBSnBDLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLHdCQUF3QjthQUNyQzs7Ozs7QUFhRCxNQUFNLE9BQU8sMEJBQTBCOzs7O0lBTW5DLFlBQW9CLE9BQXlCO1FBQXpCLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBQUcsQ0FBQzs7OztJQUVqRCxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BFLENBQUM7OztZQWhCSixTQUFTLFNBQUM7OztnQkFHUCxRQUFRLEVBQUUscUNBQXFDO2FBQ2xEOzs7O1lBdkVnRSxnQkFBZ0I7OztzQkF5RTVFLEtBQUssU0FBQyxtQ0FBbUM7Ozs7SUFBMUMsNkNBQzBCOzs7OztJQUUxQixnREFBeUM7Ozs7O0lBRTdCLDZDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSB0ZW1wbGF0ZSB3aGljaCB3aWxsIHBvcHVsYXRlIHRoZSBtYWluIGFjdGlvbiBidXR0b24uXG4gKiBVc2VkIHRvIGFjaGlldmUgY29tcGxleCBidXR0b25zIHRoYXQgcmVxdWlyZSBtb3JlIHRoYW4gYSBzdHJpbmcuXG4gKmBgYGh0bWxcbiAqICAgIDxmZC1idXR0b24tc3BsaXQ+XG4gKiAgICAgICAgPG5nLXRlbXBsYXRlIGZkLWJ1dHRvbi1zcGxpdC1hY3Rpb24tdGl0bGU+XG4gKiAgICAgICAgICAgIDxwPlBhcmFncmFwaCAxPC9wPlxuICogICAgICAgICAgICA8cD5QYXJhZ3JhcGggMjwvcD5cbiAqICAgICAgICA8L25nLXRlbXBsYXRlPlxuICogICAgICAgIDxkaXYgZmQtYnV0dG9uLXNwbGl0LW1lbnU+XG4gKiAgICAgICAgICAgIDxmZC1tZW51PlxuICogICAgICAgICAgICAgICAgPHVsIGZkLW1lbnUtbGlzdD5cbiAqICAgICAgICAgICAgICAgICAgICA8bGkgZmQtbWVudS1pdGVtPlxuICogICAgICAgICAgICAgICAgICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cIicvJ1wiPm9wdGlvbjwvYT5cbiAqICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICogICAgICAgICAgICAgICAgICAgIDxsaSBmZC1tZW51LWl0ZW0+XG4gKiAgICAgICAgICAgICAgICAgICAgICAgPGEgW3JvdXRlckxpbmtdPVwiJy8nXCI+b3B0aW9uMjwvYT5cbiAqICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICogICAgICAgICAgICAgICAgPC91bD5cbiAqICAgICAgICAgICAgPC9mZC1tZW51PlxuICogICAgICAgIDwvZGl2PlxuICogICAgPC9mZC1idXR0b24tc3BsaXQ+XG4gKjwvZmQtYnV0dG9uLXNwbGl0PlxuICpgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gVE9ETyB0byBiZSBkaXNjdXNzZWRcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtc3BsaXQtYnV0dG9uLWFjdGlvbi10aXRsZV0nXG59KVxuZXhwb3J0IGNsYXNzIFNwbGl0QnV0dG9uQWN0aW9uVGl0bGUge31cblxuXG4vKipcbiAqICAgRGlyZWN0aXZlIHVzZWQgdG8gc3BlY2lmeSBtZW51IGxpc3Qgb2YgaXRlbXMgZm9yIGRyb3Bkb3duLlxuICpgYGBodG1sXG4gKiAgICA8ZmQtYnV0dG9uLXNwbGl0PlxuICogICAgICAgIEFjdGlvbiBCdXR0b25cbiAqICAgICAgICA8ZGl2IGZkLWJ1dHRvbi1zcGxpdC1tZW51PlxuICogICAgICAgICAgICA8ZmQtbWVudT5cbiAqICAgICAgICAgICAgICAgIDx1bCBmZC1tZW51LWxpc3Q+XG4gKiAgICAgICAgICAgICAgICAgICAgPGxpIGZkLW1lbnUtaXRlbT5cbiAqICAgICAgICAgICAgICAgICAgICAgICA8YSBbcm91dGVyTGlua109XCInLydcIj5vcHRpb248L2E+XG4gKiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAqICAgICAgICAgICAgICAgICAgICA8bGkgZmQtbWVudS1pdGVtPlxuICogICAgICAgICAgICAgICAgICAgICAgIDxhIFtyb3V0ZXJMaW5rXT1cIicvJ1wiPm9wdGlvbjI8L2E+XG4gKiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAqICAgICAgICAgICAgICAgIDwvdWw+XG4gKiAgICAgICAgICAgIDwvZmQtbWVudT5cbiAqICAgICAgICA8L2Rpdj5cbiAqICAgIDwvZmQtYnV0dG9uLXNwbGl0PlxuICo8L2ZkLWJ1dHRvbi1zcGxpdD5cbiAqYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1zcGxpdC1idXR0b24tbWVudV0nLFxufSlcbmV4cG9ydCBjbGFzcyBTcGxpdEJ1dHRvbk1lbnVEaXJlY3RpdmUge31cblxuXG5cbi8qKlxuICogTm90IGZvciBleHRlcm5hbCB1c2UuIFBvcnRhbCB0byByZW5kZXIgdGhlIGNvbXBsZXggdGl0bGUgdGVtcGxhdGUuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIFRPRE8gdG8gYmUgZGlzY3Vzc2VkXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLXNwbGl0LWJ1dHRvbi1sb2FkLWFjdGlvbi10aXRsZV0nXG59KVxuZXhwb3J0IGNsYXNzIFNwbGl0QnV0dG9uTG9hZEFjdGlvblRpdGxlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoJ2ZkLXNwbGl0LWJ1dHRvbi1sb2FkLWFjdGlvbi10aXRsZScpXG4gICAgY29udGVudDogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIHByaXZhdGUgY29udGVudFJlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdSZWY6IFZpZXdDb250YWluZXJSZWYpIHt9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3UmVmLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuY29udGVudFJlZiA9IHRoaXMudmlld1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5jb250ZW50KTtcbiAgICB9XG59XG4iXX0=