/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
var NestedListStateService = /** @class */ (function () {
    function NestedListStateService() {
        /**
         * @hidden
         * The condensed state is modified by the parent and read by nested lists.
         */
        this.condensed = false;
        /**
         * Event, that is thrown always, when the link's selected state is changed, triggers
         */
        this.refresh$ = new Subject();
    }
    /**
     * @hidden
     * Recursive method, that adds selected state to parents, when any of the children is selected
     */
    /**
     * @hidden
     * Recursive method, that adds selected state to parents, when any of the children is selected
     * @private
     * @param {?} item
     * @return {?}
     */
    NestedListStateService.prototype.selected = /**
     * @hidden
     * Recursive method, that adds selected state to parents, when any of the children is selected
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        item.allChildrenItems.forEach((/**
         * @param {?} _item
         * @return {?}
         */
        function (_item) { return _item.linkItem.controlSelected = _item.linkItem.selected; }));
        /** @type {?} */
        var hasChildSelected = !!item.allChildrenItems.find((/**
         * @param {?} _item
         * @return {?}
         */
        function (_item) { return (_item.linkItem && _item.linkItem.selected || _this.selected(_item)); }));
        if (hasChildSelected) {
            item.linkItem.controlSelected = hasChildSelected;
        }
        return hasChildSelected;
    };
    /**
     * @hidden
     * Recursive method, that removes all of controlSelected properties.
     */
    /**
     * @hidden
     * Recursive method, that removes all of controlSelected properties.
     * @private
     * @param {?} item
     * @return {?}
     */
    NestedListStateService.prototype.resetSelected = /**
     * @hidden
     * Recursive method, that removes all of controlSelected properties.
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item.linkItem) {
            item.linkItem.controlSelected = false;
        }
        item.allChildrenItems.forEach((/**
         * @param {?} _item
         * @return {?}
         */
        function (_item) {
            _this.resetSelected(_item);
        }));
    };
    /** Method that adds selected state to elements, depending on children from deeper level */
    /**
     * Method that adds selected state to elements, depending on children from deeper level
     * @param {?} list
     * @return {?}
     */
    NestedListStateService.prototype.propagateSelected = /**
     * Method that adds selected state to elements, depending on children from deeper level
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var _this = this;
        list.nestedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.resetSelected(item); }));
        list.nestedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.selected(item); }));
    };
    return NestedListStateService;
}());
export { NestedListStateService };
if (false) {
    /**
     * @hidden
     * The condensed state is modified by the parent and read by nested lists.
     * @type {?}
     */
    NestedListStateService.prototype.condensed;
    /**
     * Event, that is thrown always, when the link's selected state is changed, triggers
     * @type {?}
     */
    NestedListStateService.prototype.refresh$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkLWxpc3Qtc3RhdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZXN0ZWQtbGlzdC9uZXN0ZWQtbGlzdC1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQjtJQUFBOzs7OztRQU1JLGNBQVMsR0FBWSxLQUFLLENBQUM7Ozs7UUFLbEIsYUFBUSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0lBdUMzRCxDQUFDO0lBckNHOzs7T0FHRzs7Ozs7Ozs7SUFDSyx5Q0FBUTs7Ozs7OztJQUFoQixVQUFpQixJQUF5QjtRQUExQyxpQkFZQztRQVZHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBeEQsQ0FBd0QsRUFBQyxDQUFDOztZQUUzRixnQkFBZ0IsR0FBWSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUk7Ozs7UUFDMUQsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFuRSxDQUFtRSxFQUMvRTtRQUVELElBQUksZ0JBQWdCLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7U0FDcEQ7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7O0lBQ0ssOENBQWE7Ozs7Ozs7SUFBckIsVUFBc0IsSUFBeUI7UUFBL0MsaUJBT0M7UUFORyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsS0FBSztZQUMvQixLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLENBQUMsRUFBQyxDQUFBO0lBQ04sQ0FBQztJQUVELDJGQUEyRjs7Ozs7O0lBQ3BGLGtEQUFpQjs7Ozs7SUFBeEIsVUFBeUIsSUFBeUI7UUFBbEQsaUJBR0M7UUFGRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQXhCLENBQXdCLEVBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQW5CLENBQW1CLEVBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUwsNkJBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDOzs7Ozs7OztJQTVDRywyQ0FBMkI7Ozs7O0lBSzNCLDBDQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5lc3RlZExpc3RJbnRlcmZhY2UgfSBmcm9tICcuL25lc3RlZC1saXN0L25lc3RlZC1saXN0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBOZXN0ZWRJdGVtSW50ZXJmYWNlIH0gZnJvbSAnLi9uZXN0ZWQtaXRlbS9uZXN0ZWQtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgTmVzdGVkTGlzdFN0YXRlU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVGhlIGNvbmRlbnNlZCBzdGF0ZSBpcyBtb2RpZmllZCBieSB0aGUgcGFyZW50IGFuZCByZWFkIGJ5IG5lc3RlZCBsaXN0cy5cbiAgICAgKi9cbiAgICBjb25kZW5zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50LCB0aGF0IGlzIHRocm93biBhbHdheXMsIHdoZW4gdGhlIGxpbmsncyBzZWxlY3RlZCBzdGF0ZSBpcyBjaGFuZ2VkLCB0cmlnZ2Vyc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlZnJlc2gkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBSZWN1cnNpdmUgbWV0aG9kLCB0aGF0IGFkZHMgc2VsZWN0ZWQgc3RhdGUgdG8gcGFyZW50cywgd2hlbiBhbnkgb2YgdGhlIGNoaWxkcmVuIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3RlZChpdGVtOiBOZXN0ZWRJdGVtSW50ZXJmYWNlKTogYm9vbGVhbiB7XG5cbiAgICAgICAgaXRlbS5hbGxDaGlsZHJlbkl0ZW1zLmZvckVhY2goX2l0ZW0gPT4gX2l0ZW0ubGlua0l0ZW0uY29udHJvbFNlbGVjdGVkID0gX2l0ZW0ubGlua0l0ZW0uc2VsZWN0ZWQpO1xuXG4gICAgICAgIGNvbnN0IGhhc0NoaWxkU2VsZWN0ZWQ6IGJvb2xlYW4gPSAhIWl0ZW0uYWxsQ2hpbGRyZW5JdGVtcy5maW5kKFxuICAgICAgICAgICAgX2l0ZW0gPT4gKF9pdGVtLmxpbmtJdGVtICYmIF9pdGVtLmxpbmtJdGVtLnNlbGVjdGVkIHx8IHRoaXMuc2VsZWN0ZWQoX2l0ZW0pKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChoYXNDaGlsZFNlbGVjdGVkKSB7XG4gICAgICAgICAgICBpdGVtLmxpbmtJdGVtLmNvbnRyb2xTZWxlY3RlZCA9IGhhc0NoaWxkU2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc0NoaWxkU2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFJlY3Vyc2l2ZSBtZXRob2QsIHRoYXQgcmVtb3ZlcyBhbGwgb2YgY29udHJvbFNlbGVjdGVkIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNldFNlbGVjdGVkKGl0ZW06IE5lc3RlZEl0ZW1JbnRlcmZhY2UpOiB2b2lkIHtcbiAgICAgICAgaWYgKGl0ZW0ubGlua0l0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW0ubGlua0l0ZW0uY29udHJvbFNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5hbGxDaGlsZHJlbkl0ZW1zLmZvckVhY2goX2l0ZW0gPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGVkKF9pdGVtKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKiogTWV0aG9kIHRoYXQgYWRkcyBzZWxlY3RlZCBzdGF0ZSB0byBlbGVtZW50cywgZGVwZW5kaW5nIG9uIGNoaWxkcmVuIGZyb20gZGVlcGVyIGxldmVsICovXG4gICAgcHVibGljIHByb3BhZ2F0ZVNlbGVjdGVkKGxpc3Q6IE5lc3RlZExpc3RJbnRlcmZhY2UpOiB2b2lkIHtcbiAgICAgICAgbGlzdC5uZXN0ZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gdGhpcy5yZXNldFNlbGVjdGVkKGl0ZW0pKTtcbiAgICAgICAgbGlzdC5uZXN0ZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gdGhpcy5zZWxlY3RlZChpdGVtKSk7XG4gICAgfVxuXG59XG4iXX0=