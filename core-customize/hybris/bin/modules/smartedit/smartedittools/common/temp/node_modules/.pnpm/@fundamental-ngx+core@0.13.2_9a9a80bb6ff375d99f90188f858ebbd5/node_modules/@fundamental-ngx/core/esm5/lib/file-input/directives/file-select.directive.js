/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input/directives/file-select.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener, HostBinding } from '@angular/core';
/**
 * Directive tool to facilitate interacting with a native file input element.
 */
var FileSelectDirective = /** @class */ (function () {
    function FileSelectDirective() {
        /**
         * Whether the input should accept multiple file selections.
         */
        this.multiple = true;
        /**
         * Event emitted when files are selected.
         */
        this.onFileSelect = new EventEmitter();
    }
    Object.defineProperty(FileSelectDirective.prototype, "multipleBinding", {
        /** @hidden */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.multiple ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    FileSelectDirective.prototype.onChange = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target instanceof HTMLInputElement) {
            /** @type {?} */
            var elRef = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            var files = elRef.files;
            /** @type {?} */
            var fileArray = Array.from(files);
            if (files.length) {
                this.onFileSelect.emit(fileArray);
            }
        }
    };
    FileSelectDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdFileSelect]',
                },] }
    ];
    FileSelectDirective.propDecorators = {
        multiple: [{ type: Input }],
        onFileSelect: [{ type: Output }],
        multipleBinding: [{ type: HostBinding, args: ['attr.multiple',] }],
        onChange: [{ type: HostListener, args: ['change', ['$event'],] }]
    };
    return FileSelectDirective;
}());
export { FileSelectDirective };
if (false) {
    /**
     * Whether the input should accept multiple file selections.
     * @type {?}
     * @private
     */
    FileSelectDirective.prototype.multiple;
    /**
     * Event emitted when files are selected.
     * @type {?}
     */
    FileSelectDirective.prototype.onFileSelect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZWxlY3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtaW5wdXQvZGlyZWN0aXZlcy9maWxlLXNlbGVjdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSzFEO0lBQUE7Ozs7UUFPWSxhQUFRLEdBQVksSUFBSSxDQUFDOzs7O1FBSXhCLGlCQUFZLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFvQjdFLENBQUM7SUFqQkcsc0JBQ0ksZ0RBQWU7UUFGbkIsY0FBYzs7Ozs7UUFDZDtZQUVJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7SUFFRCxjQUFjOzs7Ozs7SUFFZCxzQ0FBUTs7Ozs7SUFEUixVQUNTLEtBQVk7UUFDakIsSUFBSSxLQUFLLENBQUMsTUFBTSxZQUFZLGdCQUFnQixFQUFFOztnQkFDcEMsS0FBSyxHQUFxQixDQUFDLG1CQUFrQixLQUFLLENBQUMsTUFBTSxFQUFBLENBQUM7O2dCQUMxRCxLQUFLLEdBQWEsS0FBSyxDQUFDLEtBQUs7O2dCQUM3QixTQUFTLEdBQVcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDM0MsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3JDO1NBQ0o7SUFDTCxDQUFDOztnQkE5QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzdCOzs7MkJBSUksS0FBSzsrQkFJTCxNQUFNO2tDQUlOLFdBQVcsU0FBQyxlQUFlOzJCQU0zQixZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOztJQVd0QywwQkFBQztDQUFBLEFBL0JELElBK0JDO1NBNUJZLG1CQUFtQjs7Ozs7OztJQUc1Qix1Q0FDaUM7Ozs7O0lBR2pDLDJDQUN5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRvb2wgdG8gZmFjaWxpdGF0ZSBpbnRlcmFjdGluZyB3aXRoIGEgbmF0aXZlIGZpbGUgaW5wdXQgZWxlbWVudC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZmRGaWxlU2VsZWN0XScsXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVTZWxlY3REaXJlY3RpdmUge1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGlucHV0IHNob3VsZCBhY2NlcHQgbXVsdGlwbGUgZmlsZSBzZWxlY3Rpb25zLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJpdmF0ZSBtdWx0aXBsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIGZpbGVzIGFyZSBzZWxlY3RlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBvbkZpbGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxGaWxlW10+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlW10+KCk7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5tdWx0aXBsZScpXG4gICAgZ2V0IG11bHRpcGxlQmluZGluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBsZSA/ICcnIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RMaXN0ZW5lcignY2hhbmdlJywgWyckZXZlbnQnXSlcbiAgICBvbkNoYW5nZShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsUmVmOiBIVE1MSW5wdXRFbGVtZW50ID0gKDxIVE1MSW5wdXRFbGVtZW50PmV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlczogRmlsZUxpc3QgPSBlbFJlZi5maWxlcztcbiAgICAgICAgICAgIGNvbnN0IGZpbGVBcnJheTogRmlsZVtdID0gQXJyYXkuZnJvbShmaWxlcyk7XG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkZpbGVTZWxlY3QuZW1pdChmaWxlQXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19