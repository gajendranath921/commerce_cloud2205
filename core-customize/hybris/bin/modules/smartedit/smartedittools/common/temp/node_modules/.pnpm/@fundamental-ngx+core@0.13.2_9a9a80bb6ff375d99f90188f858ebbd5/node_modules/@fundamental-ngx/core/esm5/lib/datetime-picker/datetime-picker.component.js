/**
 * @fileoverview added by tsickle
 * Generated from: lib/datetime-picker/datetime-picker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostListener, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { TimeComponent } from '../time/time.component';
import { DateTimeFormatParser } from './format/datetime-parser';
import { FdDate } from '../calendar/models/fd-date';
import { CalendarComponent } from '../calendar/calendar.component';
import { FdDatetime } from './models/fd-datetime';
import { DatePipe } from '@angular/common';
/**
 * The datetime picker component is an opinionated composition of the fd-popover,
 * fd-calendar and fd-time components to accomplish the UI pattern for picking a date and time.
 * Supports Angular Forms.
 * ```html
 * <fd-date-time-picker [(ngModel)]="dateTime"></fd-date-time-picker>
 * ```
 */
var DatetimePickerComponent = /** @class */ (function () {
    /** @hidden */
    function DatetimePickerComponent(_elRef, _changeDetRef, dateTimeAdapter, _datePipe) {
        this._elRef = _elRef;
        this._changeDetRef = _changeDetRef;
        this.dateTimeAdapter = dateTimeAdapter;
        this._datePipe = _datePipe;
        /**
         * @hidden Date of the input field. Internal use.
         * For programmatic selection, use two-way binding on the date input.
         */
        this.inputFieldDate = null;
        /**
         * @hidden The Time object which interacts with the inner Time component. Internal use.
         */
        this.isInvalidDateInput = false;
        /**
         * @hidden The Time object which interacts with the inner Time component. Internal use.
         */
        this.time = { hour: 0, minute: 0, second: 0 };
        /**
         * Placeholder for the inner input element.
         */
        this.placeholder = 'mm/dd/yyyy, hh:mm:ss am';
        /**
         * Whether the component should be in compact mode.
         */
        this.compact = false;
        /**
         *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
         *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
         */
        this.placement = 'bottom-start';
        /**
         * Whether the time component should be meridian (am/pm).
         */
        this.meridian = true;
        /**
         * Date Format displayed on input. See more options: https://angular.io/api/common/DatePipe
         */
        this.format = 'MM/dd/yyyy, HH:mm:ss';
        /**
         * Whether the time component shows spinners for changing the time.
         */
        this.spinners = true;
        /**
         * Whether the time component shows seconds.
         */
        this.displaySeconds = true;
        /**
         * Whether the time component shows minutes.
         */
        this.displayMinutes = true;
        /**
         * Whether the time component shows hours.
         */
        this.displayHours = true;
        /**
         * Whether to perform visual validation on the picker input.
         */
        this.useValidation = true;
        /**
         * Current selected date. Two-way binding is supported.
         */
        this.date = FdDatetime.getToday();
        /**
         * Whether the popover is open. Two-way binding is supported.
         */
        this.isOpen = false;
        /**
         * The disableFunction for the calendar.
         */
        this.startingDayOfWeek = 1;
        /**
         * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
         */
        this.activeView = 'day';
        /**
         * Aria label for the datetime picker input.
         */
        this.datetimeInputLabel = 'Datetime input';
        /**
         * Aria label for the button to show/hide the calendar.
         */
        this.displayDatetimeToggleLabel = 'Display calendar toggle';
        /**
         * Whether a null input is considered valid.
         */
        this.allowNull = true;
        /**
         * \@Input when set to true, time inputs won't allow to have 1 digit
         * for example 9 will become 09
         * but 12 will be kept as 12.
         */
        this.keepTwoDigitsTime = false;
        /**
         * Whether AddOn Button should be focusable, set to true by default
         */
        this.buttonFocusable = true;
        /**
         * Event thrown every time calendar active view is changed
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Event emitted when the date changes. This can be a time or day change.
         */
        this.dateChange = new EventEmitter();
        /**
         * Event emitted when the day changes from the calendar.
         */
        this.calendarChange = new EventEmitter();
        /**
         * Event emitted when the time changes from the time component.
         */
        this.timeChange = new EventEmitter();
        /**
         * Event emitted when popover closes.
         */
        this.onClose = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
        });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        /**
         * Function used to disable certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.disableFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.blockFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
    }
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     */
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    DatetimePickerComponent.prototype.validate = /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return (this.isCurrentModelValid() && !this.isInvalidDateInput) ? null : {
            dateValidation: {
                valid: false
            }
        };
    };
    /** Toggles the popover. */
    /**
     * Toggles the popover.
     * @return {?}
     */
    DatetimePickerComponent.prototype.togglePopover = /**
     * Toggles the popover.
     * @return {?}
     */
    function () {
        this.onTouched();
        if (this.isOpen) {
            this.closePopover();
        }
        else {
            this.openPopover();
        }
    };
    /**
     * Method that handle calendar active view change and throws event.
     */
    /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleCalendarActiveViewChange = /**
     * Method that handle calendar active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    function (activeView) {
        this.activeViewChange.emit(activeView);
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @return {?}
     */
    DatetimePickerComponent.prototype.openPopover = /**
     * Opens the popover.
     * @return {?}
     */
    function () {
        if (!this.isOpen && !this.disabled) {
            this.onTouched();
            this.isOpen = true;
        }
    };
    /** Closes the popover and refresh model */
    /**
     * Closes the popover and refresh model
     * @return {?}
     */
    DatetimePickerComponent.prototype.closePopover = /**
     * Closes the popover and refresh model
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.handleInputChange(this.inputFieldDate);
            this.onClose.emit();
            this.isOpen = false;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    DatetimePickerComponent.prototype.isInvalidDateInputHandler = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.isInvalidDateInput = e;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.onEscapeKeydownHandler = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.closePopover();
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    DatetimePickerComponent.prototype.onGlobalClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this._elRef.nativeElement.contains(event.target)) {
            this.closePopover();
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.date && this.inputFieldDate !== null) {
            this.selectedDate = this.date.date;
            this.time = this.date.time;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatetimePickerComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    DatetimePickerComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    DatetimePickerComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this._changeDetRef.detectChanges();
    };
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     */
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    DatetimePickerComponent.prototype.writeValue = /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        if (!selected || !(selected instanceof FdDatetime)) {
            return;
        }
        this.selectedDate = selected.date;
        this.time = selected.time;
        this.date = new FdDatetime(this.selectedDate, this.time);
        if (this.isCurrentModelValid()) {
            this._refreshCurrentlyDisplayedCalendarDate(this.date.date);
            this._setInput(this.date);
        }
        this._changeDetRef.detectChanges();
    };
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     */
    /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     * @param {?} date
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleDateChange = /**
     * @hidden
     * Method that is triggered by events from calendar component, when there is selected date changed.
     * If invalid time model is detected, it takes time model data from TimeComponent.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selectedDate = date;
        if (!this.date.isTimeValid()) {
            this.time = this.timeComponent.time;
        }
        this.date = new FdDatetime(this.selectedDate, this.time);
        this.isInvalidDateInput = !this.isCurrentModelValid();
        this._setInput(this.date);
        this.onChange(this.date);
    };
    /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     */
    /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     * @param {?} time
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleTimeChange = /**
     * @hidden
     * Method that is triggered by events from time component, when there is selected time changed
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.time = time;
        if (!this.selectedDate || !this.selectedDate.isDateValid()) {
            this.selectedDate = FdDate.getToday();
        }
        this.date = new FdDatetime(this.selectedDate, this.time);
        this.isInvalidDateInput = !this.isCurrentModelValid();
        this._setInput(this.date);
        this.onChange(this.date);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DatetimePickerComponent.prototype.focusArrowLeft = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow')) {
            this._elRef.nativeElement.querySelector('#' + this.calendarComponent.id + '-left-arrow').focus();
        }
    };
    /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     */
    /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     * @param {?} date
     * @return {?}
     */
    DatetimePickerComponent.prototype.handleInputChange = /**
     * @hidden
     * Method, which is responsible for transforming string to datetime, depending on type or
     * validation the results are different. It also changes to state of isInvalidDateInput.
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var fdTimeDate = this.dateTimeAdapter.parse(date);
        this.isInvalidDateInput = !this._isModelValid(fdTimeDate);
        if (!this.isInvalidDateInput) {
            this.selectedDate = fdTimeDate.date;
            this.time = fdTimeDate.time;
            this.date = new FdDatetime(this.selectedDate, this.time);
            this.onChange(fdTimeDate);
            this._refreshCurrentlyDisplayedCalendarDate(fdTimeDate.date);
        }
        else {
            this.onChange(this.date);
        }
        if (!date && this.allowNull) {
            this.isInvalidDateInput = false;
            this.date = FdDatetime.getToday();
            this.selectedDate = this.date.date;
            this.time = this.date.time;
            this._refreshCurrentlyDisplayedCalendarDate(this.date.date);
            this.onChange(null);
        }
        else if (!date && !this.allowNull) {
            this.isInvalidDateInput = true;
        }
    };
    /** Method that provides information if model selected date/dates have properly types and are valid */
    /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    DatetimePickerComponent.prototype.isCurrentModelValid = /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    function () {
        return this._isModelValid(this.date);
    };
    /** Method that provides information if FdDateTime passed as arg has properly types and is valid */
    /**
     * Method that provides information if FdDateTime passed as arg has properly types and is valid
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    DatetimePickerComponent.prototype._isModelValid = /**
     * Method that provides information if FdDateTime passed as arg has properly types and is valid
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    function (fdDateTime) {
        return fdDateTime &&
            fdDateTime instanceof FdDatetime &&
            this._isDateValid(fdDateTime) &&
            fdDateTime.isTimeValid();
    };
    /** Method that provides information if Date is valid */
    /**
     * Method that provides information if Date is valid
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    DatetimePickerComponent.prototype._isDateValid = /**
     * Method that provides information if Date is valid
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    function (fdDateTime) {
        return fdDateTime && fdDateTime.isDateValid() &&
            !this.disableFunction(fdDateTime.date) &&
            !this.blockFunction(fdDateTime.date);
    };
    /**
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    DatetimePickerComponent.prototype._setInput = /**
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    function (fdDateTime) {
        this.inputFieldDate = this._formatDateTime(fdDateTime);
        this._changeDetRef.detectChanges();
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    DatetimePickerComponent.prototype._refreshCurrentlyDisplayedCalendarDate = /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.calendarComponent) {
            this.calendarComponent.setCurrentlyDisplayed(date);
        }
    };
    /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     */
    /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    DatetimePickerComponent.prototype._formatDateTime = /**
     * @hidden
     * If there is any format function provided, it is used. Otherwise date format follows angular DatePipe functionality.
     * @private
     * @param {?} fdDateTime
     * @return {?}
     */
    function (fdDateTime) {
        /** @type {?} */
        var customFormattedDate = this.dateTimeAdapter.format(fdDateTime);
        if (customFormattedDate) {
            return customFormattedDate;
        }
        else {
            return this._datePipe.transform(fdDateTime.toDate(), this.format, null, this.locale);
        }
    };
    DatetimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-datetime-picker',
                    template: "<div class=\"fd-datetime\">\n    <fd-popover [(isOpen)]=\"isOpen\"\n                (isOpenChange)=\"handleInputChange(dateTimePicker.value)\"\n                [closeOnOutsideClick]=\"false\"\n                [closeOnEscapeKey]=\"false\"\n                [triggers]=\"[]\"\n                [disabled]=\"disabled\"\n                [placement]=\"placement\">\n        <fd-popover-control>\n            <fd-input-group [compact]=\"compact\" [state]=\"state\">\n                <input type=\"text\"\n                       class=\"fd-input\"\n                       fd-input-group-input\n                       #dateTimePicker\n                       [attr.aria-label]=\"datetimeInputLabel\"\n                       [(ngModel)]=\"inputFieldDate\"\n                       [placeholder]=\"placeholder\"\n                       (keyup.enter)=\"handleInputChange(dateTimePicker.value)\"\n                       (click)=\"openPopover()\"\n                       [compact]=\"compact\"\n                       [ngClass]=\"{ 'is-invalid': isInvalidDateInput && useValidation }\"\n                       [disabled]=\"disabled\">\n                <span fd-input-group-addon [state]=\"state\" [compact]=\"compact\" [button]=\"true\">\n                    <button [disabled]=\"disabled\" fd-button [glyph]=\"'date-time'\"\n                            [options]=\"'light'\"\n                            [compact]=\"compact\"\n                            [attr.tabindex]=\"buttonFocusable ? 0 : -1\"\n                            (click)=\"togglePopover()\" [attr.aria-label]=\"displayDatetimeToggleLabel\"\n                            [attr.aria-expanded]=\"isOpen\">\n                    </button>\n                </span>\n            </fd-input-group>\n        </fd-popover-control>\n        <fd-popover-body\n            [attr.aria-expanded]=\"isOpen\"\n            [attr.aria-hidden]=\"!isOpen\"\n            [style.display]=\"'block'\">\n            <div class=\"fd-datetime__container\">\n                <fd-calendar calType=\"single\"\n                             [activeView]=\"activeView\"\n                             (activeViewChange)=\"handleCalendarActiveViewChange($event)\"\n                             [disableFunction]=\"disableFunction ? disableFunction : null\"\n                             [blockFunction]=\"blockFunction ? blockFunction : null\"\n                             [selectedDate]=\"selectedDate\"\n                             (selectedDateChange)=\"handleDateChange($event)\"\n                             (isValidDateChange)=\"isInvalidDateInputHandler($event)\"\n                             [escapeFocusFunction]=\"null\"\n                             [startingDayOfWeek]=\"startingDayOfWeek\"></fd-calendar>\n                <div class=\"fd-datetime__separator\"></div>\n                <fd-time [disabled]=\"disabled\"\n                         [keepTwoDigits]=\"keepTwoDigitsTime\"\n                         [meridian]=\"meridian\"\n                         [ngModel]=\"time\"\n                         (ngModelChange)=\"handleTimeChange($event)\"\n                         [spinners]=\"spinners\"\n                         [displaySeconds]=\"displaySeconds\"\n                         [displayMinutes]=\"displayMinutes\"\n                         [displayHours]=\"displayHours\"\n                         (focusArrowLeft)=\"focusArrowLeft()\"></fd-time>\n            </div>\n        </fd-popover-body>\n    </fd-popover>\n</div>\n",
                    host: {
                        '(blur)': 'onTouched()',
                        '[class.fd-datetime-host]': 'true'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatetimePickerComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatetimePickerComponent; })),
                            multi: true
                        },
                        DatePipe
                    ],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".fd-datetime-host{display:inline-block;width:230px}.fd-datetime-host .fd-datetime{display:block}.fd-datetime-host .fd-datetime__container{display:flex;align-items:center;margin:0 16px}.fd-datetime-host .fd-datetime__separator{background-color:#d3d3d3;width:1px;margin:42px 28px;-ms-grid-row-align:stretch;align-self:stretch}.fd-datetime-host .fd-datetime fd-popover{display:block}.fd-datetime-host .fd-datetime fd-time{width:auto}"]
                }] }
    ];
    /** @nocollapse */
    DatetimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: DateTimeFormatParser },
        { type: DatePipe, decorators: [{ type: Optional }] }
    ]; };
    DatetimePickerComponent.propDecorators = {
        timeComponent: [{ type: ViewChild, args: [TimeComponent, { static: false },] }],
        calendarComponent: [{ type: ViewChild, args: [CalendarComponent, { static: false },] }],
        placeholder: [{ type: Input }],
        compact: [{ type: Input }],
        placement: [{ type: Input }],
        meridian: [{ type: Input }],
        format: [{ type: Input }],
        locale: [{ type: Input }],
        disabled: [{ type: Input }],
        spinners: [{ type: Input }],
        displaySeconds: [{ type: Input }],
        displayMinutes: [{ type: Input }],
        displayHours: [{ type: Input }],
        useValidation: [{ type: Input }],
        date: [{ type: Input }],
        isOpen: [{ type: Input }],
        startingDayOfWeek: [{ type: Input }],
        activeView: [{ type: Input }],
        datetimeInputLabel: [{ type: Input }],
        displayDatetimeToggleLabel: [{ type: Input }],
        allowNull: [{ type: Input }],
        keepTwoDigitsTime: [{ type: Input }],
        state: [{ type: Input }],
        buttonFocusable: [{ type: Input }],
        activeViewChange: [{ type: Output }],
        dateChange: [{ type: Output }],
        calendarChange: [{ type: Output }],
        timeChange: [{ type: Output }],
        onClose: [{ type: Output }],
        disableFunction: [{ type: Input }],
        blockFunction: [{ type: Input }],
        onEscapeKeydownHandler: [{ type: HostListener, args: ['document:keydown.escape', [],] }],
        onGlobalClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return DatetimePickerComponent;
}());
export { DatetimePickerComponent };
if (false) {
    /**
     * @hidden Reference to the inner time component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.timeComponent;
    /**
     * @hidden Reference to the inner calendar component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.calendarComponent;
    /**
     * @hidden Date of the input field. Internal use.
     * For programmatic selection, use two-way binding on the date input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.inputFieldDate;
    /**
     * @hidden The Time object which interacts with the inner Time component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.isInvalidDateInput;
    /**
     * @hidden The Time object which interacts with the inner Time component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.time;
    /**
     * @hidden The CalendarDay object which interacts with the inner Calendar component. Internal use.
     * @type {?}
     */
    DatetimePickerComponent.prototype.selectedDate;
    /**
     * Placeholder for the inner input element.
     * @type {?}
     */
    DatetimePickerComponent.prototype.placeholder;
    /**
     * Whether the component should be in compact mode.
     * @type {?}
     */
    DatetimePickerComponent.prototype.compact;
    /**
     *  The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    DatetimePickerComponent.prototype.placement;
    /**
     * Whether the time component should be meridian (am/pm).
     * @type {?}
     */
    DatetimePickerComponent.prototype.meridian;
    /**
     * Date Format displayed on input. See more options: https://angular.io/api/common/DatePipe
     * @type {?}
     */
    DatetimePickerComponent.prototype.format;
    /**
     * Locale for date pipe. See more https://angular.io/guide/i18n
     * @type {?}
     */
    DatetimePickerComponent.prototype.locale;
    /**
     * Whether the component is disabled.
     * @type {?}
     */
    DatetimePickerComponent.prototype.disabled;
    /**
     * Whether the time component shows spinners for changing the time.
     * @type {?}
     */
    DatetimePickerComponent.prototype.spinners;
    /**
     * Whether the time component shows seconds.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displaySeconds;
    /**
     * Whether the time component shows minutes.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayMinutes;
    /**
     * Whether the time component shows hours.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayHours;
    /**
     * Whether to perform visual validation on the picker input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.useValidation;
    /**
     * Current selected date. Two-way binding is supported.
     * @type {?}
     */
    DatetimePickerComponent.prototype.date;
    /**
     * Whether the popover is open. Two-way binding is supported.
     * @type {?}
     */
    DatetimePickerComponent.prototype.isOpen;
    /**
     * The disableFunction for the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.startingDayOfWeek;
    /**
     * Actually shown active view one of 'day' | 'month' | 'year' in calendar component
     * @type {?}
     */
    DatetimePickerComponent.prototype.activeView;
    /**
     * Aria label for the datetime picker input.
     * @type {?}
     */
    DatetimePickerComponent.prototype.datetimeInputLabel;
    /**
     * Aria label for the button to show/hide the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.displayDatetimeToggleLabel;
    /**
     * Whether a null input is considered valid.
     * @type {?}
     */
    DatetimePickerComponent.prototype.allowNull;
    /**
     * \@Input when set to true, time inputs won't allow to have 1 digit
     * for example 9 will become 09
     * but 12 will be kept as 12.
     * @type {?}
     */
    DatetimePickerComponent.prototype.keepTwoDigitsTime;
    /**
     *  The state of the form control - applies css classes.
     *  Can be `valid`, `invalid`, `warning`, `information` or blank for default.
     * @type {?}
     */
    DatetimePickerComponent.prototype.state;
    /**
     * Whether AddOn Button should be focusable, set to true by default
     * @type {?}
     */
    DatetimePickerComponent.prototype.buttonFocusable;
    /**
     * Event thrown every time calendar active view is changed
     * @type {?}
     */
    DatetimePickerComponent.prototype.activeViewChange;
    /**
     * Event emitted when the date changes. This can be a time or day change.
     * @type {?}
     */
    DatetimePickerComponent.prototype.dateChange;
    /**
     * Event emitted when the day changes from the calendar.
     * @type {?}
     */
    DatetimePickerComponent.prototype.calendarChange;
    /**
     * Event emitted when the time changes from the time component.
     * @type {?}
     */
    DatetimePickerComponent.prototype.timeChange;
    /**
     * Event emitted when popover closes.
     * @type {?}
     */
    DatetimePickerComponent.prototype.onClose;
    /**
     * @hidden
     * @type {?}
     */
    DatetimePickerComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    DatetimePickerComponent.prototype.onTouched;
    /**
     * Function used to disable certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.disableFunction;
    /**
     * Function used to block certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    DatetimePickerComponent.prototype.blockFunction;
    /**
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype._changeDetRef;
    /** @type {?} */
    DatetimePickerComponent.prototype.dateTimeAdapter;
    /**
     * @type {?}
     * @private
     */
    DatetimePickerComponent.prototype._datePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUtcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9kYXRldGltZS1waWNrZXIvZGF0ZXRpbWUtcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUdMLFFBQVEsRUFDUixNQUFNLEVBQ04sU0FBUyxFQUNULGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXlDLGFBQWEsRUFBRSxpQkFBaUIsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBR3BILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUE4QixNQUFNLGdDQUFnQyxDQUFDO0FBQy9GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7OztBQVUzQztJQTZRSSxjQUFjO0lBQ2QsaUNBQW9CLE1BQWtCLEVBQ2xCLGFBQWdDLEVBQ2pDLGVBQXFDLEVBQ3hCLFNBQW1CO1FBSC9CLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsa0JBQWEsR0FBYixhQUFhLENBQW1CO1FBQ2pDLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFVOzs7OztRQTNPbkQsbUJBQWMsR0FBVyxJQUFJLENBQUM7Ozs7UUFHOUIsdUJBQWtCLEdB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MkNBQ3lCOzs7OztJQUd6QixpREFDK0I7Ozs7O0lBRy9CLGlEQUMrQjs7Ozs7SUFHL0IsK0NBQzZCOzs7OztJQUc3QixnREFDOEI7Ozs7O0lBRzlCLHVDQUN5Qzs7Ozs7SUFHekMseUNBQ3dCOzs7OztJQUd4QixvREFDa0M7Ozs7O0lBR2xDLDZDQUMwQzs7Ozs7SUFHMUMscURBQzhDOzs7OztJQUc5Qyw2REFDK0Q7Ozs7O0lBRy9ELDRDQUMwQjs7Ozs7OztJQU8xQixvREFBNEM7Ozs7OztJQU01Qyx3Q0FDa0I7Ozs7O0lBS2xCLGtEQUNnQzs7Ozs7SUFHaEMsbURBQ29HOzs7OztJQUdwRyw2Q0FDK0U7Ozs7O0lBRy9FLGlEQUNtRjs7Ozs7SUFHbkYsNkNBQytFOzs7OztJQUcvRSwwQ0FDZ0U7Ozs7O0lBR2hFLDJDQUNFOzs7OztJQUdGLDRDQUNFOzs7Ozs7SUFNRixrREFHRTs7Ozs7O0lBTUYsZ0RBR0U7Ozs7O0lBOEVVLHlDQUEwQjs7Ozs7SUFDMUIsZ0RBQXdDOztJQUN4QyxrREFBNEM7Ozs7O0lBQzVDLDRDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0LFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTElEQVRPUlMsIE5HX1ZBTFVFX0FDQ0VTU09SLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRpbWVPYmplY3QgfSBmcm9tICcuLi90aW1lL3RpbWUtb2JqZWN0JztcbmltcG9ydCB7IFRpbWVDb21wb25lbnQgfSBmcm9tICcuLi90aW1lL3RpbWUuY29tcG9uZW50JztcbmltcG9ydCB7IFBsYWNlbWVudCB9IGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQgeyBEYXRlVGltZUZvcm1hdFBhcnNlciB9IGZyb20gJy4vZm9ybWF0L2RhdGV0aW1lLXBhcnNlcic7XG5pbXBvcnQgeyBGZERhdGUgfSBmcm9tICcuLi9jYWxlbmRhci9tb2RlbHMvZmQtZGF0ZSc7XG5pbXBvcnQgeyBDYWxlbmRhckNvbXBvbmVudCwgRGF5c09mV2VlaywgRmRDYWxlbmRhclZpZXcgfSBmcm9tICcuLi9jYWxlbmRhci9jYWxlbmRhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmREYXRldGltZSB9IGZyb20gJy4vbW9kZWxzL2ZkLWRhdGV0aW1lJztcbmltcG9ydCB7IEZvcm1TdGF0ZXMgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udHJvbC9mb3JtLXN0YXRlcyc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogVGhlIGRhdGV0aW1lIHBpY2tlciBjb21wb25lbnQgaXMgYW4gb3BpbmlvbmF0ZWQgY29tcG9zaXRpb24gb2YgdGhlIGZkLXBvcG92ZXIsXG4gKiBmZC1jYWxlbmRhciBhbmQgZmQtdGltZSBjb21wb25lbnRzIHRvIGFjY29tcGxpc2ggdGhlIFVJIHBhdHRlcm4gZm9yIHBpY2tpbmcgYSBkYXRlIGFuZCB0aW1lLlxuICogU3VwcG9ydHMgQW5ndWxhciBGb3Jtcy5cbiAqIGBgYGh0bWxcbiAqIDxmZC1kYXRlLXRpbWUtcGlja2VyIFsobmdNb2RlbCldPVwiZGF0ZVRpbWVcIj48L2ZkLWRhdGUtdGltZS1waWNrZXI+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdmZC1kYXRldGltZS1waWNrZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kYXRldGltZS1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2RhdGV0aW1lLXBpY2tlci5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJyhibHVyKSc6ICdvblRvdWNoZWQoKScsXG4gICAgICAgICdbY2xhc3MuZmQtZGF0ZXRpbWUtaG9zdF0nOiAndHJ1ZSdcbiAgICB9LFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IERhdGV0aW1lUGlja2VyQ29tcG9uZW50KSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBEYXRldGltZVBpY2tlckNvbXBvbmVudCksXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBEYXRlUGlwZVxuICAgIF0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBEYXRldGltZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG5cbiAgICAvKiogQGhpZGRlbiBSZWZlcmVuY2UgdG8gdGhlIGlubmVyIHRpbWUgY29tcG9uZW50LiAqL1xuICAgIEBWaWV3Q2hpbGQoVGltZUNvbXBvbmVudCwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gICAgdGltZUNvbXBvbmVudDogVGltZUNvbXBvbmVudDtcblxuICAgIC8qKiBAaGlkZGVuIFJlZmVyZW5jZSB0byB0aGUgaW5uZXIgY2FsZW5kYXIgY29tcG9uZW50LiAqL1xuICAgIEBWaWV3Q2hpbGQoQ2FsZW5kYXJDb21wb25lbnQsIHsgc3RhdGljOiBmYWxzZSB9KVxuICAgIGNhbGVuZGFyQ29tcG9uZW50OiBDYWxlbmRhckNvbXBvbmVudDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gRGF0ZSBvZiB0aGUgaW5wdXQgZmllbGQuIEludGVybmFsIHVzZS5cbiAgICAgKiBGb3IgcHJvZ3JhbW1hdGljIHNlbGVjdGlvbiwgdXNlIHR3by13YXkgYmluZGluZyBvbiB0aGUgZGF0ZSBpbnB1dC5cbiAgICAgKi9cbiAgICBpbnB1dEZpZWxkRGF0ZTogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBAaGlkZGVuIFRoZSBUaW1lIG9iamVjdCB3aGljaCBpbnRlcmFjdHMgd2l0aCB0aGUgaW5uZXIgVGltZSBjb21wb25lbnQuIEludGVybmFsIHVzZS4gKi9cbiAgICBpc0ludmFsaWREYXRlSW5wdXQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuIFRoZSBUaW1lIG9iamVjdCB3aGljaCBpbnRlcmFjdHMgd2l0aCB0aGUgaW5uZXIgVGltZSBjb21wb25lbnQuIEludGVybmFsIHVzZS4gKi9cbiAgICB0aW1lOiBUaW1lT2JqZWN0ID0geyBob3VyOiAwLCBtaW51dGU6IDAsIHNlY29uZDogMCB9O1xuXG4gICAgLyoqIEBoaWRkZW4gVGhlIENhbGVuZGFyRGF5IG9iamVjdCB3aGljaCBpbnRlcmFjdHMgd2l0aCB0aGUgaW5uZXIgQ2FsZW5kYXIgY29tcG9uZW50LiBJbnRlcm5hbCB1c2UuICovXG4gICAgc2VsZWN0ZWREYXRlOiBGZERhdGU7XG5cbiAgICAvKiogUGxhY2Vob2xkZXIgZm9yIHRoZSBpbm5lciBpbnB1dCBlbGVtZW50LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyA9ICdtbS9kZC95eXl5LCBoaDptbTpzcyBhbSc7XG5cbiAgICAvKiogV2hldGhlciB0aGUgY29tcG9uZW50IHNob3VsZCBiZSBpbiBjb21wYWN0IG1vZGUuICovXG4gICAgQElucHV0KClcbiAgICBjb21wYWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiAgVGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wb3Zlci4gSXQgY2FuIGJlIG9uZSBvZjogdG9wLCB0b3Atc3RhcnQsIHRvcC1lbmQsIGJvdHRvbSxcbiAgICAgKiAgYm90dG9tLXN0YXJ0LCBib3R0b20tZW5kLCByaWdodCwgcmlnaHQtc3RhcnQsIHJpZ2h0LWVuZCwgbGVmdCwgbGVmdC1zdGFydCwgbGVmdC1lbmQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudCA9ICdib3R0b20tc3RhcnQnO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIHRpbWUgY29tcG9uZW50IHNob3VsZCBiZSBtZXJpZGlhbiAoYW0vcG0pLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbWVyaWRpYW46IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIERhdGUgRm9ybWF0IGRpc3BsYXllZCBvbiBpbnB1dC4gU2VlIG1vcmUgb3B0aW9uczogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vRGF0ZVBpcGUgKi9cbiAgICBASW5wdXQoKVxuICAgIGZvcm1hdDogc3RyaW5nID0gJ01NL2RkL3l5eXksIEhIOm1tOnNzJztcblxuICAgIC8qKiBMb2NhbGUgZm9yIGRhdGUgcGlwZS4gU2VlIG1vcmUgaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL2kxOG4gKi9cbiAgICBASW5wdXQoKVxuICAgIGxvY2FsZTogc3RyaW5nO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkOiBib29sZWFuO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIHRpbWUgY29tcG9uZW50IHNob3dzIHNwaW5uZXJzIGZvciBjaGFuZ2luZyB0aGUgdGltZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNwaW5uZXJzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSB0aW1lIGNvbXBvbmVudCBzaG93cyBzZWNvbmRzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheVNlY29uZHM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIHRpbWUgY29tcG9uZW50IHNob3dzIG1pbnV0ZXMuICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5TWludXRlczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogV2hldGhlciB0aGUgdGltZSBjb21wb25lbnQgc2hvd3MgaG91cnMuICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5SG91cnM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFdoZXRoZXIgdG8gcGVyZm9ybSB2aXN1YWwgdmFsaWRhdGlvbiBvbiB0aGUgcGlja2VyIGlucHV0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdXNlVmFsaWRhdGlvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQ3VycmVudCBzZWxlY3RlZCBkYXRlLiBUd28td2F5IGJpbmRpbmcgaXMgc3VwcG9ydGVkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGF0ZTogRmREYXRldGltZSA9IEZkRGF0ZXRpbWUuZ2V0VG9kYXkoKTtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBwb3BvdmVyIGlzIG9wZW4uIFR3by13YXkgYmluZGluZyBpcyBzdXBwb3J0ZWQuICovXG4gICAgQElucHV0KClcbiAgICBpc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBUaGUgZGlzYWJsZUZ1bmN0aW9uIGZvciB0aGUgY2FsZW5kYXIuICovXG4gICAgQElucHV0KClcbiAgICBzdGFydGluZ0RheU9mV2VlazogRGF5c09mV2VlayA9IDE7XG5cbiAgICAvKiogQWN0dWFsbHkgc2hvd24gYWN0aXZlIHZpZXcgb25lIG9mICdkYXknIHwgJ21vbnRoJyB8ICd5ZWFyJyBpbiBjYWxlbmRhciBjb21wb25lbnQqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGFjdGl2ZVZpZXc6IEZkQ2FsZW5kYXJWaWV3ID0gJ2RheSc7XG5cbiAgICAvKiogQXJpYSBsYWJlbCBmb3IgdGhlIGRhdGV0aW1lIHBpY2tlciBpbnB1dC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRhdGV0aW1lSW5wdXRMYWJlbDogc3RyaW5nID0gJ0RhdGV0aW1lIGlucHV0JztcblxuICAgIC8qKiBBcmlhIGxhYmVsIGZvciB0aGUgYnV0dG9uIHRvIHNob3cvaGlkZSB0aGUgY2FsZW5kYXIuICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RGF0ZXRpbWVUb2dnbGVMYWJlbDogc3RyaW5nID0gJ0Rpc3BsYXkgY2FsZW5kYXIgdG9nZ2xlJztcblxuICAgIC8qKiBXaGV0aGVyIGEgbnVsbCBpbnB1dCBpcyBjb25zaWRlcmVkIHZhbGlkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWxsb3dOdWxsOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEBJbnB1dCB3aGVuIHNldCB0byB0cnVlLCB0aW1lIGlucHV0cyB3b24ndCBhbGxvdyB0byBoYXZlIDEgZGlnaXRcbiAgICAgKiBmb3IgZXhhbXBsZSA5IHdpbGwgYmVjb21lIDA5XG4gICAgICogYnV0IDEyIHdpbGwgYmUga2VwdCBhcyAxMi5cbiAgICAgKi9cbiAgICBASW5wdXQoKSBrZWVwVHdvRGlnaXRzVGltZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogIFRoZSBzdGF0ZSBvZiB0aGUgZm9ybSBjb250cm9sIC0gYXBwbGllcyBjc3MgY2xhc3Nlcy5cbiAgICAgKiAgQ2FuIGJlIGB2YWxpZGAsIGBpbnZhbGlkYCwgYHdhcm5pbmdgLCBgaW5mb3JtYXRpb25gIG9yIGJsYW5rIGZvciBkZWZhdWx0LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhdGU6IEZvcm1TdGF0ZXM7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIEFkZE9uIEJ1dHRvbiBzaG91bGQgYmUgZm9jdXNhYmxlLCBzZXQgdG8gdHJ1ZSBieSBkZWZhdWx0XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBidXR0b25Gb2N1c2FibGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEV2ZW50IHRocm93biBldmVyeSB0aW1lIGNhbGVuZGFyIGFjdGl2ZSB2aWV3IGlzIGNoYW5nZWQgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVhZG9ubHkgYWN0aXZlVmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPEZkQ2FsZW5kYXJWaWV3PiA9IG5ldyBFdmVudEVtaXR0ZXI8RmRDYWxlbmRhclZpZXc+KCk7XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBkYXRlIGNoYW5nZXMuIFRoaXMgY2FuIGJlIGEgdGltZSBvciBkYXkgY2hhbmdlLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IGRhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxGZERhdGV0aW1lPiA9IG5ldyBFdmVudEVtaXR0ZXI8RmREYXRldGltZT4oKTtcblxuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIGRheSBjaGFuZ2VzIGZyb20gdGhlIGNhbGVuZGFyLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IGNhbGVuZGFyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RmREYXRldGltZT4gPSBuZXcgRXZlbnRFbWl0dGVyPEZkRGF0ZXRpbWU+KCk7XG5cbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSB0aW1lIGNoYW5nZXMgZnJvbSB0aGUgdGltZSBjb21wb25lbnQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdGltZUNoYW5nZTogRXZlbnRFbWl0dGVyPEZkRGF0ZXRpbWU+ID0gbmV3IEV2ZW50RW1pdHRlcjxGZERhdGV0aW1lPigpO1xuXG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiBwb3BvdmVyIGNsb3Nlcy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uQ2hhbmdlOiBhbnkgPSAoc2VsZWN0ZWQ6IGFueSkgPT4ge1xuICAgIH07XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uVG91Y2hlZDogYW55ID0gKCkgPT4ge1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIGRpc2FibGUgY2VydGFpbiBkYXRlcyBpbiB0aGUgY2FsZW5kYXIuXG4gICAgICogQHBhcmFtIGZkRGF0ZSBGZERhdGVcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVGdW5jdGlvbiA9IGZ1bmN0aW9uKGZkRGF0ZTogRmREYXRlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBibG9jayBjZXJ0YWluIGRhdGVzIGluIHRoZSBjYWxlbmRhci5cbiAgICAgKiBAcGFyYW0gZmREYXRlIEZkRGF0ZVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYmxvY2tGdW5jdGlvbiA9IGZ1bmN0aW9uKGZkRGF0ZTogRmREYXRlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEZ1bmN0aW9uIHRoYXQgaW1wbGVtZW50cyBWYWxpZGF0b3IgSW50ZXJmYWNlLCBhZGRzIHZhbGlkYXRpb24gc3VwcG9ydCBmb3IgZm9ybXNcbiAgICAgKi9cbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueVxuICAgIH0ge1xuICAgICAgICByZXR1cm4gKCB0aGlzLmlzQ3VycmVudE1vZGVsVmFsaWQoKSAmJiAhdGhpcy5pc0ludmFsaWREYXRlSW5wdXQgKSA/IG51bGwgOiB7XG4gICAgICAgICAgICBkYXRlVmFsaWRhdGlvbjoge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKiBUb2dnbGVzIHRoZSBwb3BvdmVyLiAqL1xuICAgIHRvZ2dsZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlblBvcG92ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGhhbmRsZSBjYWxlbmRhciBhY3RpdmUgdmlldyBjaGFuZ2UgYW5kIHRocm93cyBldmVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFuZGxlQ2FsZW5kYXJBY3RpdmVWaWV3Q2hhbmdlKGFjdGl2ZVZpZXc6IEZkQ2FsZW5kYXJWaWV3KTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aXZlVmlld0NoYW5nZS5lbWl0KGFjdGl2ZVZpZXcpO1xuICAgIH1cblxuICAgIC8qKiBPcGVucyB0aGUgcG9wb3Zlci4gKi9cbiAgICBvcGVuUG9wb3ZlcigpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzT3BlbiAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBDbG9zZXMgdGhlIHBvcG92ZXIgYW5kIHJlZnJlc2ggbW9kZWwgKi9cbiAgICBjbG9zZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZSh0aGlzLmlucHV0RmllbGREYXRlKTtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBpc0ludmFsaWREYXRlSW5wdXRIYW5kbGVyKGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc0ludmFsaWREYXRlSW5wdXQgPSBlO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5ZG93bi5lc2NhcGUnLCBbXSlcbiAgICBvbkVzY2FwZUtleWRvd25IYW5kbGVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcigpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbkdsb2JhbENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSAmJiB0aGlzLmlucHV0RmllbGREYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IHRoaXMuZGF0ZS5kYXRlO1xuICAgICAgICAgICAgdGhpcy50aW1lID0gdGhpcy5kYXRlLnRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgX2NoYW5nZURldFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICAgICAgcHVibGljIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVGb3JtYXRQYXJzZXIsXG4gICAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfZGF0ZVBpcGU6IERhdGVQaXBlXG4gICAgKSB7fVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoc2VsZWN0ZWQ6IGFueSkgPT4geyB2b2lkIH0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgICAgICB0aGlzLl9jaGFuZ2VEZXRSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IHByb3ZpZGVzIHN1cHBvcnQgZm9yIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHRoYXQgYWxsb3dzIHRvIHVzZSBbKG5nTW9kZWwpXSBvciBmb3Jtc1xuICAgICAqL1xuICAgIHdyaXRlVmFsdWUoc2VsZWN0ZWQ6IEZkRGF0ZXRpbWUpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFzZWxlY3RlZCB8fCAhKHNlbGVjdGVkIGluc3RhbmNlb2YgRmREYXRldGltZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IHNlbGVjdGVkLmRhdGU7XG4gICAgICAgIHRoaXMudGltZSA9IHNlbGVjdGVkLnRpbWU7XG4gICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBGZERhdGV0aW1lKHRoaXMuc2VsZWN0ZWREYXRlLCB0aGlzLnRpbWUpO1xuICAgICAgICBpZiAodGhpcy5pc0N1cnJlbnRNb2RlbFZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hDdXJyZW50bHlEaXNwbGF5ZWRDYWxlbmRhckRhdGUodGhpcy5kYXRlLmRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fc2V0SW5wdXQodGhpcy5kYXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGFuZ2VEZXRSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBNZXRob2QgdGhhdCBpcyB0cmlnZ2VyZWQgYnkgZXZlbnRzIGZyb20gY2FsZW5kYXIgY29tcG9uZW50LCB3aGVuIHRoZXJlIGlzIHNlbGVjdGVkIGRhdGUgY2hhbmdlZC5cbiAgICAgKiBJZiBpbnZhbGlkIHRpbWUgbW9kZWwgaXMgZGV0ZWN0ZWQsIGl0IHRha2VzIHRpbWUgbW9kZWwgZGF0YSBmcm9tIFRpbWVDb21wb25lbnQuXG4gICAgICovXG4gICAgaGFuZGxlRGF0ZUNoYW5nZShkYXRlOiBGZERhdGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAoIXRoaXMuZGF0ZS5pc1RpbWVWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWUgPSB0aGlzLnRpbWVDb21wb25lbnQudGltZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRmREYXRldGltZSh0aGlzLnNlbGVjdGVkRGF0ZSwgdGhpcy50aW1lKTtcbiAgICAgICAgdGhpcy5pc0ludmFsaWREYXRlSW5wdXQgPSAhdGhpcy5pc0N1cnJlbnRNb2RlbFZhbGlkKCk7XG4gICAgICAgIHRoaXMuX3NldElucHV0KHRoaXMuZGF0ZSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5kYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogTWV0aG9kIHRoYXQgaXMgdHJpZ2dlcmVkIGJ5IGV2ZW50cyBmcm9tIHRpbWUgY29tcG9uZW50LCB3aGVuIHRoZXJlIGlzIHNlbGVjdGVkIHRpbWUgY2hhbmdlZFxuICAgICAqL1xuICAgIGhhbmRsZVRpbWVDaGFuZ2UodGltZTogVGltZU9iamVjdCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWREYXRlIHx8ICF0aGlzLnNlbGVjdGVkRGF0ZS5pc0RhdGVWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IEZkRGF0ZS5nZXRUb2RheSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBGZERhdGV0aW1lKHRoaXMuc2VsZWN0ZWREYXRlLCB0aGlzLnRpbWUpO1xuICAgICAgICB0aGlzLmlzSW52YWxpZERhdGVJbnB1dCA9ICF0aGlzLmlzQ3VycmVudE1vZGVsVmFsaWQoKTtcbiAgICAgICAgdGhpcy5fc2V0SW5wdXQodGhpcy5kYXRlKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmRhdGUpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgZm9jdXNBcnJvd0xlZnQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5jYWxlbmRhckNvbXBvbmVudC5pZCArICctbGVmdC1hcnJvdycpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5jYWxlbmRhckNvbXBvbmVudC5pZCArICctbGVmdC1hcnJvdycpLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogTWV0aG9kLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdHJhbnNmb3JtaW5nIHN0cmluZyB0byBkYXRldGltZSwgZGVwZW5kaW5nIG9uIHR5cGUgb3JcbiAgICAgKiB2YWxpZGF0aW9uIHRoZSByZXN1bHRzIGFyZSBkaWZmZXJlbnQuIEl0IGFsc28gY2hhbmdlcyB0byBzdGF0ZSBvZiBpc0ludmFsaWREYXRlSW5wdXQuXG4gICAgICovXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UoZGF0ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZkVGltZURhdGUgPSB0aGlzLmRhdGVUaW1lQWRhcHRlci5wYXJzZShkYXRlKTtcbiAgICAgICAgdGhpcy5pc0ludmFsaWREYXRlSW5wdXQgPSAhdGhpcy5faXNNb2RlbFZhbGlkKGZkVGltZURhdGUpO1xuICAgICAgICBpZiAoIXRoaXMuaXNJbnZhbGlkRGF0ZUlucHV0KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IGZkVGltZURhdGUuZGF0ZTtcbiAgICAgICAgICAgIHRoaXMudGltZSA9IGZkVGltZURhdGUudGltZTtcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBGZERhdGV0aW1lKHRoaXMuc2VsZWN0ZWREYXRlLCB0aGlzLnRpbWUpO1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShmZFRpbWVEYXRlKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hDdXJyZW50bHlEaXNwbGF5ZWRDYWxlbmRhckRhdGUoZmRUaW1lRGF0ZS5kYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5kYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGUgJiYgdGhpcy5hbGxvd051bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbnZhbGlkRGF0ZUlucHV0ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBGZERhdGV0aW1lLmdldFRvZGF5KCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IHRoaXMuZGF0ZS5kYXRlO1xuICAgICAgICAgICAgdGhpcy50aW1lID0gdGhpcy5kYXRlLnRpbWU7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoQ3VycmVudGx5RGlzcGxheWVkQ2FsZW5kYXJEYXRlKHRoaXMuZGF0ZS5kYXRlKTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UobnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWRhdGUgJiYgIXRoaXMuYWxsb3dOdWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW52YWxpZERhdGVJbnB1dCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogTWV0aG9kIHRoYXQgcHJvdmlkZXMgaW5mb3JtYXRpb24gaWYgbW9kZWwgc2VsZWN0ZWQgZGF0ZS9kYXRlcyBoYXZlIHByb3Blcmx5IHR5cGVzIGFuZCBhcmUgdmFsaWQgKi9cbiAgICBwdWJsaWMgaXNDdXJyZW50TW9kZWxWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzTW9kZWxWYWxpZCh0aGlzLmRhdGUpO1xuICAgIH1cblxuICAgIC8qKiBNZXRob2QgdGhhdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBpZiBGZERhdGVUaW1lIHBhc3NlZCBhcyBhcmcgaGFzIHByb3Blcmx5IHR5cGVzIGFuZCBpcyB2YWxpZCAqL1xuICAgIHByaXZhdGUgX2lzTW9kZWxWYWxpZChmZERhdGVUaW1lOiBGZERhdGV0aW1lKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmZERhdGVUaW1lICYmXG4gICAgICAgICAgICBmZERhdGVUaW1lIGluc3RhbmNlb2YgRmREYXRldGltZSAmJlxuICAgICAgICAgICAgdGhpcy5faXNEYXRlVmFsaWQoZmREYXRlVGltZSkgJiZcbiAgICAgICAgICAgIGZkRGF0ZVRpbWUuaXNUaW1lVmFsaWQoKVxuICAgICAgICA7XG4gICAgfVxuXG4gICAgLyoqIE1ldGhvZCB0aGF0IHByb3ZpZGVzIGluZm9ybWF0aW9uIGlmIERhdGUgaXMgdmFsaWQgKi9cbiAgICBwcml2YXRlIF9pc0RhdGVWYWxpZChmZERhdGVUaW1lOiBGZERhdGV0aW1lKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmZERhdGVUaW1lICYmIGZkRGF0ZVRpbWUuaXNEYXRlVmFsaWQoKSAmJlxuICAgICAgICAgICAgIXRoaXMuZGlzYWJsZUZ1bmN0aW9uKGZkRGF0ZVRpbWUuZGF0ZSkgJiZcbiAgICAgICAgICAgICF0aGlzLmJsb2NrRnVuY3Rpb24oZmREYXRlVGltZS5kYXRlKVxuICAgICAgICA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2V0SW5wdXQoZmREYXRlVGltZTogRmREYXRldGltZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmlucHV0RmllbGREYXRlID0gdGhpcy5fZm9ybWF0RGF0ZVRpbWUoZmREYXRlVGltZSk7XG4gICAgICAgIHRoaXMuX2NoYW5nZURldFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcml2YXRlIF9yZWZyZXNoQ3VycmVudGx5RGlzcGxheWVkQ2FsZW5kYXJEYXRlKGRhdGU6IEZkRGF0ZSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jYWxlbmRhckNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhckNvbXBvbmVudC5zZXRDdXJyZW50bHlEaXNwbGF5ZWQoZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogSWYgdGhlcmUgaXMgYW55IGZvcm1hdCBmdW5jdGlvbiBwcm92aWRlZCwgaXQgaXMgdXNlZC4gT3RoZXJ3aXNlIGRhdGUgZm9ybWF0IGZvbGxvd3MgYW5ndWxhciBEYXRlUGlwZSBmdW5jdGlvbmFsaXR5LlxuICAgICAqL1xuICAgIHByaXZhdGUgX2Zvcm1hdERhdGVUaW1lKGZkRGF0ZVRpbWU6IEZkRGF0ZXRpbWUpOiBzdHJpbmcge1xuXG4gICAgICAgIGNvbnN0IGN1c3RvbUZvcm1hdHRlZERhdGU6IHN0cmluZyA9IHRoaXMuZGF0ZVRpbWVBZGFwdGVyLmZvcm1hdChmZERhdGVUaW1lKTtcblxuICAgICAgICBpZiAoY3VzdG9tRm9ybWF0dGVkRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUZvcm1hdHRlZERhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0ZVBpcGUudHJhbnNmb3JtKGZkRGF0ZVRpbWUudG9EYXRlKCksIHRoaXMuZm9ybWF0LCBudWxsLCB0aGlzLmxvY2FsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==