import { ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FdCheckboxValues } from './fd-checkbox-values.interface';
export declare class CheckboxComponent implements ControlValueAccessor {
    private _changeDetectorRef;
    /** Sets [id] property of input, binds input with input label using [for] property. */
    inputId: string;
    /** State of control, changes visual appearance of control. */
    state: 'valid' | 'invalid' | 'info' | 'warning';
    /** Sets [name] property of input. */
    name: string;
    /** Sets text of control label. */
    label: string;
    /** Allows to disable/enable control. */
    disabled: boolean;
    /** Allows to minimize control to compact mode. */
    compact: boolean;
    /** Enables controls third state. */
    tristate: boolean;
    /** Allows to prevent user from manually selecting controls third state. */
    tristateSelectable: boolean;
    /** Sets values returned by control. */
    _values: FdCheckboxValues;
    /** @hidden */
    readonly position = "relative";
    /** Values returned by control. */
    values: FdCheckboxValues;
    /** Stores current checkbox value. */
    checkboxValue: any;
    /** Stores current checkbox state. */
    checkboxState: 'checked' | 'unchecked' | 'indeterminate';
    /** @hidden Reference to callback provided by FormControl.*/
    onTouched: () => void;
    /** @hidden Reference to callback provided by FormControl.*/
    onValueChange: (newValue: any) => void;
    constructor(_changeDetectorRef: ChangeDetectorRef);
    /** @hidden Used to define if control is in 'checked' / 'unchecked' state.*/
    readonly isChecked: boolean;
    /** @hidden Used to define if control is in 'indeterminate' state.*/
    readonly isIndeterminate: boolean;
    /** @hidden ControlValueAccessor interface
     * - sets new control value
     * - updates control state
     * */
    writeValue(value: any): void;
    /** @hidden ControlValueAccessor interface method - sets onValueChange callback.*/
    registerOnChange(fn: any): void;
    /** @hidden ControlValueAccessor interface method - sets onTouched callback.*/
    registerOnTouched(fn: any): void;
    /** @hidden Called by FormControl - used to disable / enable control.*/
    setDisabledState(disabled: boolean): void;
    /** @hidden Based on current control state:
     * - sets next control value
     * - emits new control value
     * - updates control state based on new control value
     * */
    nextValue(): void;
    /** @hidden Updates checkbox state on mouse click
     * and prevents from double check update from label-input binding */
    checkByClick(event: Event): void;
    /** @hidden Updates checkbox state on spacebar key
     * and prevents from double check update from label-input binding */
    checkByKey(event: KeyboardEvent): void;
    /** @hidden Prevents from checkbox update based on label-input binding */
    muteKey(event: KeyboardEvent): void;
    /** @hidden Determines event source based on key code */
    private _isSpaceBarEvent;
    /** @hidden Based on current control value sets new control state. */
    private _setState;
    /** @hidden Compares values */
    private _compare;
}
