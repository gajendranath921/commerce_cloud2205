/**
 * @fileoverview added by tsickle
 * Generated from: lib/alert/alert-utils/alert-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * Reference to an alert component generated via the AlertService.
 * It can be injected into the content component in the same way a service would be injected.
 * For a template, add let-alert to your ng-template tag. Now using *alert* in the template refers to this class.
 */
var /**
 * Reference to an alert component generated via the AlertService.
 * It can be injected into the content component in the same way a service would be injected.
 * For a template, add let-alert to your ng-template tag. Now using *alert* in the template refers to this class.
 */
AlertRef = /** @class */ (function () {
    function AlertRef() {
        this._afterDismissed = new Subject();
        /**
         * Observable that is triggered when the alert is dismissed.
         */
        this.afterDismissed = this._afterDismissed.asObservable();
    }
    /**
     * Dismisses the alert.
     *
     * @param reason Data passed back to the calling component through the AfterDismissed observable.
     */
    /**
     * Dismisses the alert.
     *
     * @param {?=} reason Data passed back to the calling component through the AfterDismissed observable.
     * @return {?}
     */
    AlertRef.prototype.dismiss = /**
     * Dismisses the alert.
     *
     * @param {?=} reason Data passed back to the calling component through the AfterDismissed observable.
     * @return {?}
     */
    function (reason) {
        this._afterDismissed.next(reason);
    };
    return AlertRef;
}());
/**
 * Reference to an alert component generated via the AlertService.
 * It can be injected into the content component in the same way a service would be injected.
 * For a template, add let-alert to your ng-template tag. Now using *alert* in the template refers to this class.
 */
export { AlertRef };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertRef.prototype._afterDismissed;
    /**
     * Observable that is triggered when the alert is dismissed.
     * @type {?}
     */
    AlertRef.prototype.afterDismissed;
    /**
     * Data passed from the service open method.
     * @type {?}
     */
    AlertRef.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtcmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2FsZXJ0L2FsZXJ0LXV0aWxzL2FsZXJ0LXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQU8zQzs7Ozs7O0lBQUE7UUFFcUIsb0JBQWUsR0FBaUIsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7OztRQUc3RCxtQkFBYyxHQUFvQixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBYWpGLENBQUM7SUFSRzs7OztPQUlHOzs7Ozs7O0lBQ0gsMEJBQU87Ozs7OztJQUFQLFVBQVEsTUFBWTtRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0wsZUFBQztBQUFELENBQUMsQUFsQkQsSUFrQkM7Ozs7Ozs7Ozs7OztJQWhCRyxtQ0FBb0U7Ozs7O0lBR3BFLGtDQUE2RTs7Ozs7SUFHN0Usd0JBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byBhbiBhbGVydCBjb21wb25lbnQgZ2VuZXJhdGVkIHZpYSB0aGUgQWxlcnRTZXJ2aWNlLlxuICogSXQgY2FuIGJlIGluamVjdGVkIGludG8gdGhlIGNvbnRlbnQgY29tcG9uZW50IGluIHRoZSBzYW1lIHdheSBhIHNlcnZpY2Ugd291bGQgYmUgaW5qZWN0ZWQuXG4gKiBGb3IgYSB0ZW1wbGF0ZSwgYWRkIGxldC1hbGVydCB0byB5b3VyIG5nLXRlbXBsYXRlIHRhZy4gTm93IHVzaW5nICphbGVydCogaW4gdGhlIHRlbXBsYXRlIHJlZmVycyB0byB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgQWxlcnRSZWYge1xuICAgIFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2FmdGVyRGlzbWlzc2VkOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICAvKiogT2JzZXJ2YWJsZSB0aGF0IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBhbGVydCBpcyBkaXNtaXNzZWQuICovXG4gICAgcHVibGljIGFmdGVyRGlzbWlzc2VkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLl9hZnRlckRpc21pc3NlZC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKiBEYXRhIHBhc3NlZCBmcm9tIHRoZSBzZXJ2aWNlIG9wZW4gbWV0aG9kLiAqL1xuICAgIHB1YmxpYyBkYXRhOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNtaXNzZXMgdGhlIGFsZXJ0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYXNvbiBEYXRhIHBhc3NlZCBiYWNrIHRvIHRoZSBjYWxsaW5nIGNvbXBvbmVudCB0aHJvdWdoIHRoZSBBZnRlckRpc21pc3NlZCBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIGRpc21pc3MocmVhc29uPzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyRGlzbWlzc2VkLm5leHQocmVhc29uKTtcbiAgICB9XG59XG4iXX0=