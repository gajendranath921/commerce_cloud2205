/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-item/nested-item.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output } from '@angular/core';
import { NestedLinkDirective } from '../nested-link/nested-link.directive';
import { NestedListKeyboardService } from '../nested-list-keyboard.service';
import { NestedListPopoverComponent } from '../nested-list-popover/nested-list-popover.component';
import { NestedListDirective } from '../nested-list/nested-list.directive';
import { PreparedNestedListComponent } from '../prepared-nested-list/prepared-nested-list.component';
export class NestedItemDirective {
    /**
     * @hidden
     * @param {?} elementRef
     * @param {?} keyboardService
     */
    constructor(elementRef, keyboardService) {
        this.elementRef = elementRef;
        this.keyboardService = keyboardService;
        /**
         * @hidden
         */
        this.fdNestedListItemClass = true;
        /**
         * @hidden
         */
        this._expanded = false;
        /**
         * Event thrown, when expanded state is changed
         */
        this.expandedChange = new EventEmitter();
        /**
         * Event thrown, when any keyboard event is dispatched on this, or link element
         */
        this.keyboardTriggered = new EventEmitter();
    }
    /**
     * Check if the item element has any child
     * @return {?}
     */
    get hasChildren() {
        return !!(this.nestedListItem || this.popoverItem || this.nestedListFromPreparedComponent);
    }
    /**
     * Get all of the children item elements
     * @return {?}
     */
    get allChildrenItems() {
        if (this.nestedListItem && this.nestedListItem.nestedItems) {
            /** Get elements from child list */
            return this.nestedListItem.nestedItems.toArray();
        }
        else if (this.nestedListFromPreparedComponent && this.nestedListFromPreparedComponent.nestedItems) {
            /** Get elements from child prepared list  component */
            return this.nestedListFromPreparedComponent.nestedItems.toArray();
        }
        else {
            return [];
        }
    }
    /**
     * Whether item should be expanded
     * @param {?} expanded
     * @return {?}
     */
    set expanded(expanded) {
        this.propagateOpenChange(expanded);
    }
    /**
     * @hidden
     * @return {?}
     */
    get expanded() {
        return this._expanded;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        /** Propagate hasChildren property */
        if (this.hasChildren && this.linkItem) {
            this.linkItem.hasChildren = true;
            this.linkItem.changeDetRef.detectChanges();
        }
        if (this.linkItem) {
            /** Subscribe to mouse click event, thrown by link item */
            this.linkItem.clicked.subscribe((/**
             * @return {?}
             */
            () => this.toggle()));
            /** Subscribe to keyboard event and throw it farther */
            this.linkItem.keyboardTriggered.subscribe((/**
             * @param {?} keyboardEvent
             * @return {?}
             */
            keyboardEvent => this.keyboardTriggered.emit(keyboardEvent)));
        }
        /** Pass this element to popover child item, to allow control `expanded` value */
        if (this.popoverItem) {
            this.popoverItem.parentItemElement = this;
        }
        /** Propagate initial open state to children */
        this.propagateOpenChange(this._expanded);
    }
    /**
     * Method that expand the item and propagate it to children
     * @return {?}
     */
    triggerOpen() {
        if (!this.expanded) {
            /** Propagate initial open state to children */
            this.propagateOpenChange(true);
        }
    }
    /**
     * Method that close the item and propagate it to children
     * @return {?}
     */
    triggerClose() {
        if (this.expanded) {
            /** Propagate initial open state to children */
            this.propagateOpenChange(false);
        }
    }
    /**
     * Method that toggle the item and propagate it to children
     * @return {?}
     */
    toggle() {
        /** Propagate initial open state to children */
        this.propagateOpenChange(!this._expanded);
    }
    /**
     * Method that dispatches `click` event on link item
     * @return {?}
     */
    click() {
        if (this.linkItem) {
            this.linkItem.click();
        }
    }
    /**
     * Method that focuses link item
     * @return {?}
     */
    focus() {
        if (this.linkItem) {
            this.linkItem.focus();
        }
    }
    /**
     * @hidden
     * Propagate open state to all of the children
     * @private
     * @param {?} open
     * @return {?}
     */
    propagateOpenChange(open) {
        this._expanded = open;
        if (this.linkItem) {
            this.linkItem.expanded = open;
        }
        if (this.nestedListItem) {
            this.nestedListItem.hidden = !open;
        }
        if (this.nestedListFromPreparedComponent) {
            this.nestedListFromPreparedComponent.hidden = !open;
        }
        if (this.popoverItem) {
            this.popoverItem.open = open;
        }
        /** Trigger event to provide keyboard support to new list of opened item element. */
        this.keyboardService.refresh$.next();
        this.expandedChange.emit(open);
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get nestedListFromPreparedComponent() {
        return this.preparedListComponent && this.preparedListComponent.nestedListDirective;
    }
}
NestedItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fdNestedItem], [fd-nested-list-item]'
            },] }
];
/** @nocollapse */
NestedItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NestedListKeyboardService }
];
NestedItemDirective.propDecorators = {
    fdNestedListItemClass: [{ type: HostBinding, args: ['class.fd-nested-list__item',] }],
    linkItem: [{ type: ContentChild, args: [NestedLinkDirective, { static: false },] }],
    popoverItem: [{ type: ContentChild, args: [NestedListPopoverComponent, { static: false },] }],
    nestedListItem: [{ type: ContentChild, args: [forwardRef((/**
                 * @return {?}
                 */
                () => NestedListDirective)), { static: false },] }],
    preparedListComponent: [{ type: ContentChild, args: [forwardRef((/**
                 * @return {?}
                 */
                () => PreparedNestedListComponent)), { static: false },] }],
    expanded: [{ type: Input }],
    expandedChange: [{ type: Output }],
    keyboardTriggered: [{ type: Output }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedItemDirective.prototype.fdNestedListItemClass;
    /**
     * @hidden
     * Reference to the link directive, to allow manipulating the properties of this element.
     * @type {?}
     */
    NestedItemDirective.prototype.linkItem;
    /**
     * @hidden
     * @type {?}
     */
    NestedItemDirective.prototype.popoverItem;
    /**
     * @hidden
     * @type {?}
     */
    NestedItemDirective.prototype.nestedListItem;
    /**
     * @hidden
     * @type {?}
     */
    NestedItemDirective.prototype.preparedListComponent;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    NestedItemDirective.prototype._expanded;
    /**
     * Event thrown, when expanded state is changed
     * @type {?}
     */
    NestedItemDirective.prototype.expandedChange;
    /**
     * Event thrown, when any keyboard event is dispatched on this, or link element
     * @type {?}
     */
    NestedItemDirective.prototype.keyboardTriggered;
    /**
     * @type {?}
     * @private
     */
    NestedItemDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NestedItemDirective.prototype.keyboardService;
}
//# sourceMappingURL=data:application/json;base64,