/**
 * @fileoverview added by tsickle
 * Generated from: lib/button-group/button-grouped.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
/**
 * Directive to be applied to buttons that are members of a button group.
 *
 * ```html
 * <button fd-button-grouped>Button</button>
 * ```
 */
var ButtonGroupedDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonGroupedDirective, _super);
    /** @hidden */
    function ButtonGroupedDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        /**
         * Defines if there will be added fd-button class. Enabled by default.
         */
        _this.fdButtonClass = true;
        /**
         * Whether the button should be in compact form.
         */
        _this.compact = false;
        /**
         * @hidden
         */
        _this.fdButtonGroupedClass = true;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    ButtonGroupedDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._addClassToElement('fd-button--grouped');
        if (this.fdButtonClass) {
            this._addClassToElement('fd-button');
        }
        if (this.size) {
            this._addClassToElement('fd-button--' + this.size);
        }
        if (this.glyph) {
            this._addClassToElement('sap-icon--' + this.glyph);
        }
        if (this.state) {
            this._addClassToElement('is-' + this.state);
        }
    };
    ButtonGroupedDirective.decorators = [
        { type: Directive, args: [{
                    // TODO to be discussed
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-button-grouped]'
                },] }
    ];
    /** @nocollapse */
    ButtonGroupedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ButtonGroupedDirective.propDecorators = {
        size: [{ type: Input }],
        fdButtonClass: [{ type: Input }],
        glyph: [{ type: Input }],
        state: [{ type: Input }],
        compact: [{ type: Input }, { type: HostBinding, args: ['class.fd-button--compact',] }],
        fdButtonGroupedClass: [{ type: HostBinding, args: ['class.fd-button--grouped',] }]
    };
    return ButtonGroupedDirective;
}(AbstractFdNgxClass));
export { ButtonGroupedDirective };
if (false) {
    /**
     * @deprecated
     * Will be removed in 0.13.0
     * @type {?}
     */
    ButtonGroupedDirective.prototype.size;
    /**
     * Defines if there will be added fd-button class. Enabled by default.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.fdButtonClass;
    /**
     * Glyph (icon) of the button.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.glyph;
    /**
     * State of the button. Can be `selected` or `disabled`.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.state;
    /**
     * Whether the button should be in compact form.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.compact;
    /**
     * @hidden
     * @type {?}
     */
    ButtonGroupedDirective.prototype.fdButtonGroupedClass;
    /**
     * @type {?}
     * @private
     */
    ButtonGroupedDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2J1dHRvbi1ncm91cC9idXR0b24tZ3JvdXBlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7Ozs7Ozs7QUFTcEU7SUFLNEMsa0RBQWtCO0lBNkIxRCxjQUFjO0lBQ2QsZ0NBQW9CLFVBQXNCO1FBQTFDLFlBQ0ksa0JBQU0sVUFBVSxDQUFDLFNBQ3BCO1FBRm1CLGdCQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBcEJqQyxtQkFBYSxHQUFZLElBQUksQ0FBQzs7OztRQWF2QyxhQUFPLEdBQVksS0FBSyxDQUFDOzs7O1FBSXpCLDBCQUFvQixHQUFZLElBQUksQ0FBQzs7SUFLckMsQ0FBQztJQUVELGNBQWM7Ozs7O0lBQ2QsK0NBQWM7Ozs7SUFBZDtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzlDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEM7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RDtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOztnQkF0REosU0FBUyxTQUFDOzs7b0JBR1AsUUFBUSxFQUFFLHFCQUFxQjtpQkFDbEM7Ozs7Z0JBZG1CLFVBQVU7Ozt1QkFxQnpCLEtBQUs7Z0NBSUwsS0FBSzt3QkFHTCxLQUFLO3dCQUlMLEtBQUs7MEJBSUwsS0FBSyxZQUNMLFdBQVcsU0FBQywwQkFBMEI7dUNBSXRDLFdBQVcsU0FBQywwQkFBMEI7O0lBd0IzQyw2QkFBQztDQUFBLEFBdkRELENBSzRDLGtCQUFrQixHQWtEN0Q7U0FsRFksc0JBQXNCOzs7Ozs7O0lBTS9CLHNDQUNhOzs7OztJQUdiLCtDQUF1Qzs7Ozs7SUFHdkMsdUNBQ2M7Ozs7O0lBR2QsdUNBQ2M7Ozs7O0lBR2QseUNBRXlCOzs7OztJQUd6QixzREFDcUM7Ozs7O0lBR3pCLDRDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZkTmd4Q2xhc3MgfSBmcm9tICcuLi91dGlscy9hYnN0cmFjdC1mZC1uZ3gtY2xhc3MnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0byBiZSBhcHBsaWVkIHRvIGJ1dHRvbnMgdGhhdCBhcmUgbWVtYmVycyBvZiBhIGJ1dHRvbiBncm91cC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIGZkLWJ1dHRvbi1ncm91cGVkPkJ1dHRvbjwvYnV0dG9uPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIFRPRE8gdG8gYmUgZGlzY3Vzc2VkXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWJ1dHRvbi1ncm91cGVkXSdcbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXBlZERpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RmROZ3hDbGFzcyB7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjEzLjBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNpemU6IHN0cmluZztcblxuICAgIC8qKiBEZWZpbmVzIGlmIHRoZXJlIHdpbGwgYmUgYWRkZWQgZmQtYnV0dG9uIGNsYXNzLiBFbmFibGVkIGJ5IGRlZmF1bHQuICovXG4gICAgQElucHV0KCkgZmRCdXR0b25DbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogR2x5cGggKGljb24pIG9mIHRoZSBidXR0b24uICovXG4gICAgQElucHV0KClcbiAgICBnbHlwaDogc3RyaW5nO1xuXG4gICAgLyoqIFN0YXRlIG9mIHRoZSBidXR0b24uIENhbiBiZSBgc2VsZWN0ZWRgIG9yIGBkaXNhYmxlZGAuICovXG4gICAgQElucHV0KClcbiAgICBzdGF0ZTogc3RyaW5nO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGJ1dHRvbiBzaG91bGQgYmUgaW4gY29tcGFjdCBmb3JtLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1idXR0b24tLWNvbXBhY3QnKVxuICAgIGNvbXBhY3Q6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1idXR0b24tLWdyb3VwZWQnKVxuICAgIGZkQnV0dG9uR3JvdXBlZENsYXNzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX3NldFByb3BlcnRpZXMoKSB7XG4gICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1idXR0b24tLWdyb3VwZWQnKTtcbiAgICAgICAgaWYgKHRoaXMuZmRCdXR0b25DbGFzcykge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWJ1dHRvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1idXR0b24tLScgKyB0aGlzLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdseXBoKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnc2FwLWljb24tLScgKyB0aGlzLmdseXBoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2lzLScgKyB0aGlzLnN0YXRlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==