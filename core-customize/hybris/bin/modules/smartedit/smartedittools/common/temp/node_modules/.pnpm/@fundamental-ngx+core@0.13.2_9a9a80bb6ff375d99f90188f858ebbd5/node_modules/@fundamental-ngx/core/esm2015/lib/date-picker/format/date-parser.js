/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-picker/format/date-parser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FdDate } from '../../calendar/models/fd-date';
import * as i0 from "@angular/core";
/**
 * @return {?}
 */
export function DATE_FORMAT_FACTORY() {
    return new DateFormatParserDefault();
}
/**
 * Abstract class which defines the behaviour of the date format and parser.
 * @abstract
 */
export class DateFormatParser {
    constructor() {
        /**
         * Delimiter for the range. This should not show up in the string representation of the dates.
         */
        this.rangeDelimiter = ' - ';
    }
}
DateFormatParser.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useFactory: DATE_FORMAT_FACTORY
            },] }
];
/** @nocollapse */ DateFormatParser.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: DATE_FORMAT_FACTORY, token: DateFormatParser, providedIn: "root" });
if (false) {
    /**
     * Delimiter for the range. This should not show up in the string representation of the dates.
     * @type {?}
     */
    DateFormatParser.prototype.rangeDelimiter;
    /**
     * Should take in a string value and return a FdDate model object.
     * @abstract
     * @param {?} value String to concert to a FdDate model object.
     * @return {?}
     */
    DateFormatParser.prototype.parse = function (value) { };
    /**
     * Should take in a FdDate model object and return a string representation.
     * @abstract
     * @param {?} date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     * @return {?}
     */
    DateFormatParser.prototype.format = function (date) { };
}
/**
 * Default implementation of the DateFormatParser service.
 */
export class DateFormatParserDefault extends DateFormatParser {
    /**
     * Takes in a string value and return a FdDate model object.
     * @param {?} value String to concert to a FdDate model object.
     * @return {?}
     */
    parse(value) {
        if (value) {
            /** @type {?} */
            const date = new Date(value);
            return new FdDate(date.getFullYear(), date.getMonth() + 1, date.getDate());
        }
        else {
            return new FdDate(null, null, null);
        }
    }
    /**
     * Takes in a FdDate model object and return a string representation.
     * @param {?} date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     * @return {?}
     */
    format(date) {
        return null;
    }
}
DateFormatParserDefault.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1waWNrZXIvZm9ybWF0L2RhdGUtcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7O0FBR3ZELE1BQU0sVUFBVSxtQkFBbUI7SUFDL0IsT0FBTyxJQUFJLHVCQUF1QixFQUFFLENBQUM7QUFDekMsQ0FBQzs7Ozs7QUFTRCxNQUFNLE9BQWdCLGdCQUFnQjtJQUp0Qzs7OztRQVNJLG1CQUFjLEdBQVcsS0FBSyxDQUFDO0tBY2xDOzs7WUF2QkEsVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixVQUFVLEVBQUUsbUJBQW1CO2FBQ2xDOzs7Ozs7OztJQU1HLDBDQUErQjs7Ozs7OztJQU0vQix3REFBc0M7Ozs7Ozs7O0lBT3RDLHdEQUFzQzs7Ozs7QUFPMUMsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGdCQUFnQjs7Ozs7O0lBTWxELEtBQUssQ0FBQyxLQUFhO1FBQ3RCLElBQUksS0FBSyxFQUFFOztrQkFDRCxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2xDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDOUU7YUFBTTtZQUNILE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN2QztJQUNMLENBQUM7Ozs7Ozs7SUFPTSxNQUFNLENBQUMsSUFBWTtRQUN0QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7WUF2QkosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZkRGF0ZSB9IGZyb20gJy4uLy4uL2NhbGVuZGFyL21vZGVscy9mZC1kYXRlJztcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIERBVEVfRk9STUFUX0ZBQ1RPUlkoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlRm9ybWF0UGFyc2VyRGVmYXVsdCgpO1xufVxuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHdoaWNoIGRlZmluZXMgdGhlIGJlaGF2aW91ciBvZiB0aGUgZGF0ZSBmb3JtYXQgYW5kIHBhcnNlci5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICB1c2VGYWN0b3J5OiBEQVRFX0ZPUk1BVF9GQUNUT1JZXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGVGb3JtYXRQYXJzZXIge1xuXG4gICAgLyoqXG4gICAgICogRGVsaW1pdGVyIGZvciB0aGUgcmFuZ2UuIFRoaXMgc2hvdWxkIG5vdCBzaG93IHVwIGluIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGVzLlxuICAgICAqL1xuICAgIHJhbmdlRGVsaW1pdGVyOiBzdHJpbmcgPSAnIC0gJztcblxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0YWtlIGluIGEgc3RyaW5nIHZhbHVlIGFuZCByZXR1cm4gYSBGZERhdGUgbW9kZWwgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBTdHJpbmcgdG8gY29uY2VydCB0byBhIEZkRGF0ZSBtb2RlbCBvYmplY3QuXG4gICAgICovXG4gICAgYWJzdHJhY3QgcGFyc2UodmFsdWU6IHN0cmluZyk6IEZkRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIFNob3VsZCB0YWtlIGluIGEgRmREYXRlIG1vZGVsIG9iamVjdCBhbmQgcmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBwYXJhbSBkYXRlIEZkRGF0ZSB0byBmb3JtYXQgdG8gc3RyaW5nIHZhbHVlLlxuICAgICAqIFJldHVybiBudWxsLCB0byBrZWVwIGRlZmF1bHQgYW5ndWxhciBEYXRlUGlwZSBhcyBhIGZvcm1hdHRlci5cbiAgICAgKi9cbiAgICBhYnN0cmFjdCBmb3JtYXQoZGF0ZTogRmREYXRlKTogc3RyaW5nO1xufVxuXG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIERhdGVGb3JtYXRQYXJzZXIgc2VydmljZS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERhdGVGb3JtYXRQYXJzZXJEZWZhdWx0IGV4dGVuZHMgRGF0ZUZvcm1hdFBhcnNlciB7XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBpbiBhIHN0cmluZyB2YWx1ZSBhbmQgcmV0dXJuIGEgRmREYXRlIG1vZGVsIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgU3RyaW5nIHRvIGNvbmNlcnQgdG8gYSBGZERhdGUgbW9kZWwgb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBwYXJzZSh2YWx1ZTogc3RyaW5nKTogRmREYXRlIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlOiBEYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGZERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCBkYXRlLmdldERhdGUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZkRGF0ZShudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2VzIGluIGEgRmREYXRlIG1vZGVsIG9iamVjdCBhbmQgcmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEBwYXJhbSBkYXRlIEZkRGF0ZSB0byBmb3JtYXQgdG8gc3RyaW5nIHZhbHVlLlxuICAgICAqIFJldHVybiBudWxsLCB0byBrZWVwIGRlZmF1bHQgYW5ndWxhciBEYXRlUGlwZSBhcyBhIGZvcm1hdHRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0KGRhdGU6IEZkRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==