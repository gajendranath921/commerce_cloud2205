/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/calendar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { CalendarI18n } from './i18n/calendar-i18n';
import { FdDate } from './models/fd-date';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { CalendarDayViewComponent } from './calendar-views/calendar-day-view/calendar-day-view.component';
import { CalendarYearViewComponent } from './calendar-views/calendar-year-view/calendar-year-view.component';
/** @type {?} */
var calendarUniqueId = 0;
/**
 * Months: 1 = January, 12 = december.
 * Days: 1 = Sunday, 7 = Saturday
 *
 * Calendar component used for selecting dates, typically used by the DatePicker and DateTimePicker components.
 * Supports the Angular forms module, enabling form validity, ngModel, etc.
 * ```html
 * <fd-calendar></fd-calendar>
 * ```
 */
var CalendarComponent = /** @class */ (function () {
    /** @hidden */
    function CalendarComponent(calendarI18n, changeDetectorRef) {
        var _this = this;
        this.calendarI18n = calendarI18n;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * @hidden
         */
        this.fdCalendarClass = true;
        /**
         * @hidden
         */
        this.fdHasDisplayBlockClass = true;
        /**
         * The currently selected FdDate model in single mode.
         */
        this.selectedDate = FdDate.getToday();
        /**
         * Actually shown active view one of 'day' | 'month' | 'year'
         */
        this.activeView = 'day';
        /**
         * The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on.
         */
        this.startingDayOfWeek = 1;
        /**
         * The type of calendar, 'single' for single date selection or 'range' for a range of dates.
         */
        this.calType = 'single';
        /**
         * Id of the calendar. If none is provided, one will be generated.
         */
        this.id = 'fd-calendar-' + calendarUniqueId++;
        /**
         * Event thrown every time active view is changed
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Event thrown every time selected date in single mode is changed
         */
        this.selectedDateChange = new EventEmitter();
        /**
         * Event thrown every time selected first or last date in range mode is changed
         */
        this.selectedRangeDateChange = new EventEmitter();
        /**
         * Event thrown every time when value is overwritten from outside and throw back isValid
         */
        this.isValidDateChange = new EventEmitter();
        /**
         * Event thrown every time when calendar should be closed
         */
        this.closeCalendar = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        function () {
        });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        /**
         * Function used to disable certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.disableFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.disableRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to disable certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.disableRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range start selection.
         * @param fdDate FdDate
         */
        this.blockRangeStartFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar for the range end selection.
         * @param fdDate FdDate
         */
        this.blockRangeEndFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * Function used to block certain dates in the calendar.
         * @param fdDate FdDate
         */
        this.blockFunction = (/**
         * @param {?} fdDate
         * @return {?}
         */
        function (fdDate) {
            return false;
        });
        /**
         * That allows to define function that should happen, when focus should normally escape of component
         */
        this.escapeFocusFunction = (/**
         * @return {?}
         */
        function () {
            if (document.getElementById(_this.id + '-left-arrow')) {
                document.getElementById(_this.id + '-left-arrow').focus();
            }
        });
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.prepareDisplayedView();
    };
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.
     */
    /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.
     * @param {?} selected
     * @return {?}
     */
    CalendarComponent.prototype.writeValue = /**
     * @hidden
     * Function that provides support for ControlValueAccessor that allows to use [(ngModel)] or forms.
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        /** @type {?} */
        var valid = true;
        if (selected) {
            if (this.calType === 'single') {
                selected = (/** @type {?} */ (selected));
                valid = selected.isDateValid();
                this.selectedDate = selected;
                if (selected.isDateValid()) {
                    this.prepareDisplayedView();
                }
            }
            else if (this.calType === 'range') {
                selected = (/** @type {?} */ (selected));
                if (!selected.start || !selected.end) {
                    valid = false;
                }
                if (selected.start && !selected.start.isDateValid()) {
                    valid = false;
                }
                if (selected.end && !selected.end.isDateValid()) {
                    valid = false;
                }
                this.selectedRangeDate = { start: selected.start, end: selected.end };
                if (valid) {
                    this.prepareDisplayedView();
                }
            }
        }
        this.changeDetectorRef.detectChanges();
        this.isValidDateChange.emit(valid);
    };
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     */
    /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    CalendarComponent.prototype.validate = /**
     * @hidden
     * Function that implements Validator Interface, adds validation support for forms
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this.isModelValid() ? null : {
            dateValidation: {
                valid: false
            }
        };
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    CalendarComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    CalendarComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    CalendarComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        // Not needed
    };
    /**
     * Method that handle active view change and throws event.
     */
    /**
     * Method that handle active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    CalendarComponent.prototype.handleActiveViewChange = /**
     * Method that handle active view change and throws event.
     * @param {?} activeView
     * @return {?}
     */
    function (activeView) {
        this.activeView = activeView;
        this.activeViewChange.emit(activeView);
    };
    /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected single date changed
     */
    /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected single date changed
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.selectedDateChanged = /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected single date changed
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.selectedDate = date;
        this.onChange(date);
        this.onTouched();
        this.selectedDateChange.emit(date);
        this.closeCalendar.emit();
    };
    /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected range date changed
     */
    /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected range date changed
     * @param {?} dates
     * @return {?}
     */
    CalendarComponent.prototype.selectedRangeDateChanged = /**
     * @hidden
     * Method that is triggered by events from day view component, when there is selected range date changed
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        if (dates) {
            this.selectedRangeDate = { start: dates.start, end: dates.end ? dates.end : dates.start };
            this.selectedRangeDateChange.emit(this.selectedRangeDate);
            this.onChange(this.selectedRangeDate);
            this.onTouched();
            this.closeCalendar.emit();
        }
    };
    /** Function that handles next arrow icon click, depending on current view it changes month, year or list of years */
    /**
     * Function that handles next arrow icon click, depending on current view it changes month, year or list of years
     * @return {?}
     */
    CalendarComponent.prototype.handleNextArrowClick = /**
     * Function that handles next arrow icon click, depending on current view it changes month, year or list of years
     * @return {?}
     */
    function () {
        switch (this.activeView) {
            case 'day':
                this.displayNextMonth();
                break;
            case 'month':
                this.displayNextYear();
                break;
            case 'year':
                this.displayNextYearList();
                break;
        }
        this.onTouched();
    };
    /** Function that handles previous arrow icon click, depending on current view it changes month, year or list of years */
    /**
     * Function that handles previous arrow icon click, depending on current view it changes month, year or list of years
     * @return {?}
     */
    CalendarComponent.prototype.handlePreviousArrowClick = /**
     * Function that handles previous arrow icon click, depending on current view it changes month, year or list of years
     * @return {?}
     */
    function () {
        switch (this.activeView) {
            case 'day':
                this.displayPreviousMonth();
                break;
            case 'month':
                this.displayPreviousYear();
                break;
            case 'year':
                this.displayPreviousYearList();
                break;
        }
        this.onTouched();
    };
    /** Function that allows to switch actual view to next month */
    /**
     * Function that allows to switch actual view to next month
     * @return {?}
     */
    CalendarComponent.prototype.displayNextMonth = /**
     * Function that allows to switch actual view to next month
     * @return {?}
     */
    function () {
        if (this.currentlyDisplayed.month === 12) {
            this.currentlyDisplayed = { year: this.currentlyDisplayed.year + 1, month: 1 };
        }
        else {
            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month + 1 };
        }
    };
    /** Function that allows to switch actual view to previous month */
    /**
     * Function that allows to switch actual view to previous month
     * @return {?}
     */
    CalendarComponent.prototype.displayPreviousMonth = /**
     * Function that allows to switch actual view to previous month
     * @return {?}
     */
    function () {
        if (this.currentlyDisplayed.month <= 1) {
            this.currentlyDisplayed = { year: this.currentlyDisplayed.year - 1, month: 12 };
        }
        else {
            this.currentlyDisplayed = { year: this.currentlyDisplayed.year, month: this.currentlyDisplayed.month - 1 };
        }
    };
    /** Function that allows to switch actual view to next year */
    /**
     * Function that allows to switch actual view to next year
     * @return {?}
     */
    CalendarComponent.prototype.displayNextYear = /**
     * Function that allows to switch actual view to next year
     * @return {?}
     */
    function () {
        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year + 1 };
    };
    /** Function that allows to switch actual view to previous year */
    /**
     * Function that allows to switch actual view to previous year
     * @return {?}
     */
    CalendarComponent.prototype.displayPreviousYear = /**
     * Function that allows to switch actual view to previous year
     * @return {?}
     */
    function () {
        this.currentlyDisplayed = { month: this.currentlyDisplayed.month, year: this.currentlyDisplayed.year - 1 };
    };
    /** Function that allows to switch actually displayed list of year to next year list*/
    /**
     * Function that allows to switch actually displayed list of year to next year list
     * @return {?}
     */
    CalendarComponent.prototype.displayNextYearList = /**
     * Function that allows to switch actually displayed list of year to next year list
     * @return {?}
     */
    function () {
        this.yearViewComponent.loadNextYearList();
    };
    /** Function that allows to switch actually displayed list of year to previous year list*/
    /**
     * Function that allows to switch actually displayed list of year to previous year list
     * @return {?}
     */
    CalendarComponent.prototype.displayPreviousYearList = /**
     * Function that allows to switch actually displayed list of year to previous year list
     * @return {?}
     */
    function () {
        this.yearViewComponent.loadPreviousYearList();
    };
    /** Function that allows to change currently displayed month/year configuration,
     * which are connected to days displayed
     */
    /**
     * Function that allows to change currently displayed month/year configuration,
     * which are connected to days displayed
     * @param {?} fdDate
     * @return {?}
     */
    CalendarComponent.prototype.setCurrentlyDisplayed = /**
     * Function that allows to change currently displayed month/year configuration,
     * which are connected to days displayed
     * @param {?} fdDate
     * @return {?}
     */
    function (fdDate) {
        this.currentlyDisplayed = { month: fdDate.month, year: fdDate.year };
    };
    /**
     * @hidden
     * Function that handles changes from month view child component, changes actual view and changes currently displayed month
     */
    /**
     * @hidden
     * Function that handles changes from month view child component, changes actual view and changes currently displayed month
     * @param {?} month
     * @return {?}
     */
    CalendarComponent.prototype.handleMonthViewChange = /**
     * @hidden
     * Function that handles changes from month view child component, changes actual view and changes currently displayed month
     * @param {?} month
     * @return {?}
     */
    function (month) {
        this.currentlyDisplayed = { month: month, year: this.currentlyDisplayed.year };
        this.activeView = 'day';
        this.activeViewChange.emit(this.activeView);
        this.changeDetectorRef.detectChanges();
        this.dayViewComponent.focusActiveDay();
    };
    /**
     * @param {?} yearSelected
     * @return {?}
     */
    CalendarComponent.prototype.selectedYear = /**
     * @param {?} yearSelected
     * @return {?}
     */
    function (yearSelected) {
        this.activeView = 'day';
        this.currentlyDisplayed.year = yearSelected;
        this.changeDetectorRef.detectChanges();
        this.dayViewComponent.focusActiveDay();
    };
    /** Method that provides information if model selected date/dates have properly types and are valid */
    /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    CalendarComponent.prototype.isModelValid = /**
     * Method that provides information if model selected date/dates have properly types and are valid
     * @return {?}
     */
    function () {
        if (this.calType === 'single') {
            return this.selectedDate &&
                this.selectedDate instanceof FdDate &&
                this.selectedDate.isDateValid();
        }
        else {
            return this.selectedRangeDate &&
                (this.selectedRangeDate.start &&
                    this.selectedRangeDate.start instanceof FdDate &&
                    this.selectedRangeDate.start.isDateValid()) && (this.selectedRangeDate.end &&
                this.selectedRangeDate.end instanceof FdDate &&
                this.selectedRangeDate.start.isDateValid());
        }
    };
    /**
     * @hidden
     * Method that sets up the currently displayed variables, like shown month and year.
     * Day grid is based on currently displayed month and year
     */
    /**
     * @hidden
     * Method that sets up the currently displayed variables, like shown month and year.
     * Day grid is based on currently displayed month and year
     * @private
     * @return {?}
     */
    CalendarComponent.prototype.prepareDisplayedView = /**
     * @hidden
     * Method that sets up the currently displayed variables, like shown month and year.
     * Day grid is based on currently displayed month and year
     * @private
     * @return {?}
     */
    function () {
        if (this.calType === 'single' && this.selectedDate && this.selectedDate.month && this.selectedDate.year) {
            this.currentlyDisplayed = { month: this.selectedDate.month, year: this.selectedDate.year };
        }
        else if (this.selectedRangeDate && this.selectedRangeDate.start) {
            this.currentlyDisplayed = {
                month: this.selectedRangeDate.start.month,
                year: this.selectedRangeDate.start.year
            };
        }
        else if (this.selectedRangeDate && this.selectedRangeDate.end) {
            this.currentlyDisplayed = {
                month: this.selectedRangeDate.end.month,
                year: this.selectedRangeDate.end.year
            };
        }
        else {
            /** @type {?} */
            var tempDate = FdDate.getToday();
            this.currentlyDisplayed = { month: tempDate.month, year: tempDate.year };
        }
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-calendar',
                    template: "<fd-calendar-header [currentlyDisplayed]=\"currentlyDisplayed\"\n                    [activeView]=\"activeView\"\n                    (activeViewChange)=\"handleActiveViewChange($event)\"\n                    [id]=\"id\"\n                    (nextClicked)=\"handleNextArrowClick()\"\n                    (previousClicked)=\"handlePreviousArrowClick()\"\n></fd-calendar-header>\n<ng-container [ngSwitch]=\"activeView\">\n    <div class=\"fd-calendar__content\">\n        <fd-calendar-day-view *ngSwitchCase=\"'day'\"\n                              [selectedDate]=\"selectedDate\"\n                              (selectedDateChange)=\"selectedDateChanged($event)\"\n                              [selectedRangeDate]=\"selectedRangeDate\"\n                              (selectedRangeDateChange)=\"selectedRangeDateChanged($event)\"\n                              [currentlyDisplayed]=\"currentlyDisplayed\"\n                              [startingDayOfWeek]=\"startingDayOfWeek\"\n                              [blockFunction]=\"blockFunction\"\n                              [disableFunction]=\"disableFunction\"\n                              [disableRangeEndFunction]=\"disableRangeEndFunction\"\n                              [blockRangeEndFunction]=\"blockRangeEndFunction\"\n                              [disableRangeStartFunction]=\"disableRangeStartFunction\"\n                              [blockRangeStartFunction]=\"blockRangeStartFunction\"\n                              [calType]=\"calType\"\n                              [id]=\"id\"\n                              [focusEscapeFunction]=\"escapeFocusFunction\"\n                              (nextMonthSelect)=\"displayNextMonth()\"\n                              (previousMonthSelect)=\"displayPreviousMonth()\"\n        ></fd-calendar-day-view>\n        <fd-calendar-month-view *ngSwitchCase=\"'month'\"\n                                [monthSelected]=\"currentlyDisplayed?.month\"\n                                [id]=\"id\"\n                                [focusEscapeFunction]=\"escapeFocusFunction\"\n                                (monthClicked)=\"handleMonthViewChange($event)\"\n        ></fd-calendar-month-view>\n        <fd-calendar-year-view *ngSwitchCase=\"'year'\"\n                               (yearClicked)=\"selectedYear($event)\"\n                               [yearSelected]=\"currentlyDisplayed.year\"\n                               [id]=\"id\"\n                               [focusEscapeFunction]=\"escapeFocusFunction\">\n        </fd-calendar-year-view>\n    </div>\n</ng-container>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CalendarComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CalendarComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        '(blur)': 'onTouched()',
                        '[attr.id]': 'id'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-calendar+()\n    .fd-calendar__header\n      .fd-calendar__navigation\n        .fd-calendar__action\n    .fd-calendar__content\n      .fd-calendar__dates(+[aria-hidden])\n      .fd-calendar__months(+[aria-hidden])\n      .fd-calendar__years(+[aria-hidden])\n        .fd-calendar__table\n          .fd-calendar__item(+[--other-month,--current,--disabled,--blocked],[is-selected,is-selected-range, is-selected-range-first,is-selected-range-last])\n            .fd-calendar__text\n*/.fd-calendar .fd-calendar__column-header,.fd-calendar .fd-calendar__item{font-size:var(--sapFontSize,.875rem);color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);-webkit-font-smoothing:antialiased;box-sizing:border-box;border:0;font-size:12px;line-height:1.33333;font-weight:400;color:#0254a7;color:var(--fd-color-action-selected,#0254a7);background-color:#fff;background-color:var(--fd-color-background-2,#fff);height:36px;min-width:36px;padding:0;margin:0;text-align:center;border-radius:4px;display:flex;align-items:center;justify-content:center}.fd-calendar .fd-calendar__column-header:after,.fd-calendar .fd-calendar__column-header:before,.fd-calendar .fd-calendar__item:after,.fd-calendar .fd-calendar__item:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__column-header:hover,.fd-calendar .fd-calendar__item:hover{cursor:pointer;background-color:#d9d9d9;background-color:var(--fd-color-neutral-3,#d9d9d9)}.fd-calendar .fd-calendar__item--other-month{color:#32363a;color:var(--fd-color-text-1,#32363a);opacity:.4}.fd-calendar .fd-calendar__item--disabled,.fd-calendar .fd-calendar__item.is-disabled{color:var(--fd-color-action-disabled,rgba(10,110,209,.4))}.fd-calendar .fd-calendar__item--disabled:hover,.fd-calendar .fd-calendar__item.is-disabled:hover{cursor:not-allowed;background-color:#fff;background-color:var(--fd-color-background-2,#fff)}.fd-calendar .fd-calendar__item--current{position:relative;color:#0254a7;color:var(--fd-color-action-selected,#0254a7)}.fd-calendar .fd-calendar__item--current:after{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;border-color:var(--fd-color-action,#0a6ed1);border-radius:4px;border:2px solid #0a6ed1}.fd-calendar .fd-calendar__item--blocked,.fd-calendar .fd-calendar__item.is-blocked{text-decoration:line-through;color:#32363a;color:var(--fd-color-text-1,#32363a)}.fd-calendar .fd-calendar__item--blocked:hover,.fd-calendar .fd-calendar__item.is-blocked:hover{cursor:not-allowed;background-color:#fff}.fd-calendar .fd-calendar__item.is-selected{background-color:#0254a7;background-color:var(--fd-color-action-selected,#0254a7);color:#fff;color:var(--fd-color-text-5,#fff)}.fd-calendar .fd-calendar__item.is-selected-range{background-color:var(--fd-color-background-selected,rgba(10,110,209,.07));border-radius:0}.fd-calendar .fd-calendar__item.is-selected-range-first{border-radius:4px 0 0 4px}.fd-calendar .fd-calendar__item.is-selected-range-last{border-radius:0 4px 4px 0}.fd-calendar .is-hidden.fd-calendar__dates,.fd-calendar .is-hidden.fd-calendar__months,.fd-calendar .is-hidden.fd-calendar__years{display:none}.fd-calendar{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;width:252px}.fd-calendar:after,.fd-calendar:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__dates{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-calendar .fd-calendar__dates:after,.fd-calendar .fd-calendar__dates:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__months{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-calendar .fd-calendar__months:after,.fd-calendar .fd-calendar__months:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__years{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-calendar .fd-calendar__years:after,.fd-calendar .fd-calendar__years:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__header{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;box-shadow:inset 0 -1px 0 0 #eeeeef;box-shadow:inset 0 -1px 0 0 var(--fd-color-neutral-2,#eeeeef);height:52px;display:flex;align-items:center}.fd-calendar .fd-calendar__header:after,.fd-calendar .fd-calendar__header:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__action{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0}.fd-calendar .fd-calendar__action:after,.fd-calendar .fd-calendar__action:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__action>:nth-child(n+1){margin:0}.fd-calendar .fd-calendar__action [class*=sap-icon][dir=rtl],[dir=rtl] .fd-calendar .fd-calendar__action [class*=sap-icon]{transform:scaleX(-1)}.fd-calendar .fd-calendar__content{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:12px 0;margin:0;border:0;background-color:#fff;background-color:var(--fd-color-background-2,#fff)}.fd-calendar .fd-calendar__content:after,.fd-calendar .fd-calendar__content:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__navigation{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;display:flex;flex:1;justify-content:space-between;align-items:center}.fd-calendar .fd-calendar__navigation:after,.fd-calendar .fd-calendar__navigation:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__table{display:table;border-collapse:collapse;width:100%}.fd-calendar .fd-calendar__table .fd-calendar__item{display:table-cell}.fd-calendar .fd-calendar__group{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;display:table-row-group}.fd-calendar .fd-calendar__group:after,.fd-calendar .fd-calendar__group:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__row{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;box-sizing:border-box;padding:0;margin:0;border:0;display:table-row}.fd-calendar .fd-calendar__row:after,.fd-calendar .fd-calendar__row:before{box-sizing:inherit;font-size:inherit}.fd-calendar .fd-calendar__column-header{display:table-cell;vertical-align:middle}.fd-calendar .fd-calendar__column-header:hover{cursor:default;background-color:#fff;background-color:var(--fd-color-background-2,#fff)}.fd-calendar .fd-calendar__day-of-week{font-size:12px;line-height:1.33333;font-weight:400;color:#6a6d70;color:var(--fd-color-text-1,#6a6d70)}.fd-calendar .fd-calendar__text{padding:0;margin:0;display:flex;align-items:center;justify-content:center;height:100%;width:100%;font-size:12px;border:none;border-radius:4px}.fd-calendar .fd-calendar__text:focus{background-color:#d9d9d9;background-color:var(--fd-color-neutral-3,#d9d9d9);outline:0}.fd-calendar__content{min-height:276px;background:#fff}.fd-calendar__content li:focus,.fd-calendar__content td:focus{outline:0;box-shadow:inset 0 0 2px 2px #d9d9d9}.fd-calendar__content li:focus:after,.fd-calendar__content td:focus:after{display:none}.fd-has-display-block{display:block}"]
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: CalendarI18n },
        { type: ChangeDetectorRef }
    ]; };
    CalendarComponent.propDecorators = {
        dayViewComponent: [{ type: ViewChild, args: [CalendarDayViewComponent, { static: false },] }],
        yearViewComponent: [{ type: ViewChild, args: [CalendarYearViewComponent, { static: false },] }],
        fdCalendarClass: [{ type: HostBinding, args: ['class.fd-calendar',] }],
        fdHasDisplayBlockClass: [{ type: HostBinding, args: ['class.fd-has-display-block',] }],
        selectedDate: [{ type: Input }],
        selectedRangeDate: [{ type: Input }],
        activeView: [{ type: Input }],
        startingDayOfWeek: [{ type: Input }],
        calType: [{ type: Input }],
        id: [{ type: Input }],
        activeViewChange: [{ type: Output }],
        selectedDateChange: [{ type: Output }],
        selectedRangeDateChange: [{ type: Output }],
        isValidDateChange: [{ type: Output }],
        closeCalendar: [{ type: Output }],
        disableFunction: [{ type: Input }],
        disableRangeStartFunction: [{ type: Input }],
        disableRangeEndFunction: [{ type: Input }],
        blockRangeStartFunction: [{ type: Input }],
        blockRangeEndFunction: [{ type: Input }],
        blockFunction: [{ type: Input }],
        escapeFocusFunction: [{ type: Input }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.dayViewComponent;
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.yearViewComponent;
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.fdCalendarClass;
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.fdHasDisplayBlockClass;
    /**
     * Currently displayed days depending on month and year
     * @type {?}
     */
    CalendarComponent.prototype.currentlyDisplayed;
    /**
     * The currently selected FdDate model in single mode.
     * @type {?}
     */
    CalendarComponent.prototype.selectedDate;
    /**
     * The currently selected FdDates model start and end in range mode.
     * @type {?}
     */
    CalendarComponent.prototype.selectedRangeDate;
    /**
     * Actually shown active view one of 'day' | 'month' | 'year'
     * @type {?}
     */
    CalendarComponent.prototype.activeView;
    /**
     * The day of the week the calendar should start on. 1 represents Sunday, 2 is Monday, 3 is Tuesday, and so on.
     * @type {?}
     */
    CalendarComponent.prototype.startingDayOfWeek;
    /**
     * The type of calendar, 'single' for single date selection or 'range' for a range of dates.
     * @type {?}
     */
    CalendarComponent.prototype.calType;
    /**
     * Id of the calendar. If none is provided, one will be generated.
     * @type {?}
     */
    CalendarComponent.prototype.id;
    /**
     * Event thrown every time active view is changed
     * @type {?}
     */
    CalendarComponent.prototype.activeViewChange;
    /**
     * Event thrown every time selected date in single mode is changed
     * @type {?}
     */
    CalendarComponent.prototype.selectedDateChange;
    /**
     * Event thrown every time selected first or last date in range mode is changed
     * @type {?}
     */
    CalendarComponent.prototype.selectedRangeDateChange;
    /**
     * Event thrown every time when value is overwritten from outside and throw back isValid
     * @type {?}
     */
    CalendarComponent.prototype.isValidDateChange;
    /**
     * Event thrown every time when calendar should be closed
     * @type {?}
     */
    CalendarComponent.prototype.closeCalendar;
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    CalendarComponent.prototype.onTouched;
    /**
     * Function used to disable certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.disableFunction;
    /**
     * Function used to disable certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.disableRangeStartFunction;
    /**
     * Function used to disable certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.disableRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar for the range start selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.blockRangeStartFunction;
    /**
     * Function used to block certain dates in the calendar for the range end selection.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.blockRangeEndFunction;
    /**
     * Function used to block certain dates in the calendar.
     * \@param fdDate FdDate
     * @type {?}
     */
    CalendarComponent.prototype.blockFunction;
    /**
     * That allows to define function that should happen, when focus should normally escape of component
     * @type {?}
     */
    CalendarComponent.prototype.escapeFocusFunction;
    /** @type {?} */
    CalendarComponent.prototype.calendarI18n;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,