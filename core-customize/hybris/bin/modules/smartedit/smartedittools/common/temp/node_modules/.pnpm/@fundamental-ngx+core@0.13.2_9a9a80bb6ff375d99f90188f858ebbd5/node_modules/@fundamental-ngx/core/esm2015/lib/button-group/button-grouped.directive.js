/**
 * @fileoverview added by tsickle
 * Generated from: lib/button-group/button-grouped.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
/**
 * Directive to be applied to buttons that are members of a button group.
 *
 * ```html
 * <button fd-button-grouped>Button</button>
 * ```
 */
export class ButtonGroupedDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
        /**
         * Defines if there will be added fd-button class. Enabled by default.
         */
        this.fdButtonClass = true;
        /**
         * Whether the button should be in compact form.
         */
        this.compact = false;
        /**
         * @hidden
         */
        this.fdButtonGroupedClass = true;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-button--grouped');
        if (this.fdButtonClass) {
            this._addClassToElement('fd-button');
        }
        if (this.size) {
            this._addClassToElement('fd-button--' + this.size);
        }
        if (this.glyph) {
            this._addClassToElement('sap-icon--' + this.glyph);
        }
        if (this.state) {
            this._addClassToElement('is-' + this.state);
        }
    }
}
ButtonGroupedDirective.decorators = [
    { type: Directive, args: [{
                // TODO to be discussed
                // tslint:disable-next-line:directive-selector
                selector: '[fd-button-grouped]'
            },] }
];
/** @nocollapse */
ButtonGroupedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ButtonGroupedDirective.propDecorators = {
    size: [{ type: Input }],
    fdButtonClass: [{ type: Input }],
    glyph: [{ type: Input }],
    state: [{ type: Input }],
    compact: [{ type: Input }, { type: HostBinding, args: ['class.fd-button--compact',] }],
    fdButtonGroupedClass: [{ type: HostBinding, args: ['class.fd-button--grouped',] }]
};
if (false) {
    /**
     * @deprecated
     * Will be removed in 0.13.0
     * @type {?}
     */
    ButtonGroupedDirective.prototype.size;
    /**
     * Defines if there will be added fd-button class. Enabled by default.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.fdButtonClass;
    /**
     * Glyph (icon) of the button.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.glyph;
    /**
     * State of the button. Can be `selected` or `disabled`.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.state;
    /**
     * Whether the button should be in compact form.
     * @type {?}
     */
    ButtonGroupedDirective.prototype.compact;
    /**
     * @hidden
     * @type {?}
     */
    ButtonGroupedDirective.prototype.fdButtonGroupedClass;
    /**
     * @type {?}
     * @private
     */
    ButtonGroupedDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL2J1dHRvbi1ncm91cC9idXR0b24tZ3JvdXBlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7OztBQWNwRSxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsa0JBQWtCOzs7OztJQThCMUQsWUFBb0IsVUFBc0I7UUFDdEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBREYsZUFBVSxHQUFWLFVBQVUsQ0FBWTs7OztRQXBCakMsa0JBQWEsR0FBWSxJQUFJLENBQUM7Ozs7UUFhdkMsWUFBTyxHQUFZLEtBQUssQ0FBQzs7OztRQUl6Qix5QkFBb0IsR0FBWSxJQUFJLENBQUM7SUFLckMsQ0FBQzs7Ozs7SUFHRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN4QztRQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7OztZQXRESixTQUFTLFNBQUM7OztnQkFHUCxRQUFRLEVBQUUscUJBQXFCO2FBQ2xDOzs7O1lBZG1CLFVBQVU7OzttQkFxQnpCLEtBQUs7NEJBSUwsS0FBSztvQkFHTCxLQUFLO29CQUlMLEtBQUs7c0JBSUwsS0FBSyxZQUNMLFdBQVcsU0FBQywwQkFBMEI7bUNBSXRDLFdBQVcsU0FBQywwQkFBMEI7Ozs7Ozs7O0lBcEJ2QyxzQ0FDYTs7Ozs7SUFHYiwrQ0FBdUM7Ozs7O0lBR3ZDLHVDQUNjOzs7OztJQUdkLHVDQUNjOzs7OztJQUdkLHlDQUV5Qjs7Ozs7SUFHekIsc0RBQ3FDOzs7OztJQUd6Qiw0Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RGZE5neENsYXNzIH0gZnJvbSAnLi4vdXRpbHMvYWJzdHJhY3QtZmQtbmd4LWNsYXNzJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdG8gYmUgYXBwbGllZCB0byBidXR0b25zIHRoYXQgYXJlIG1lbWJlcnMgb2YgYSBidXR0b24gZ3JvdXAuXG4gKlxuICogYGBgaHRtbFxuICogPGJ1dHRvbiBmZC1idXR0b24tZ3JvdXBlZD5CdXR0b248L2J1dHRvbj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICAvLyBUT0RPIHRvIGJlIGRpc2N1c3NlZFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1idXR0b24tZ3JvdXBlZF0nXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvbkdyb3VwZWREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdEZkTmd4Q2xhc3Mge1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBXaWxsIGJlIHJlbW92ZWQgaW4gMC4xMy4wXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzaXplOiBzdHJpbmc7XG5cbiAgICAvKiogRGVmaW5lcyBpZiB0aGVyZSB3aWxsIGJlIGFkZGVkIGZkLWJ1dHRvbiBjbGFzcy4gRW5hYmxlZCBieSBkZWZhdWx0LiAqL1xuICAgIEBJbnB1dCgpIGZkQnV0dG9uQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEdseXBoIChpY29uKSBvZiB0aGUgYnV0dG9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2x5cGg6IHN0cmluZztcblxuICAgIC8qKiBTdGF0ZSBvZiB0aGUgYnV0dG9uLiBDYW4gYmUgYHNlbGVjdGVkYCBvciBgZGlzYWJsZWRgLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhdGU6IHN0cmluZztcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBidXR0b24gc2hvdWxkIGJlIGluIGNvbXBhY3QgZm9ybS4gKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtYnV0dG9uLS1jb21wYWN0JylcbiAgICBjb21wYWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtYnV0dG9uLS1ncm91cGVkJylcbiAgICBmZEJ1dHRvbkdyb3VwZWRDbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9zZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtYnV0dG9uLS1ncm91cGVkJyk7XG4gICAgICAgIGlmICh0aGlzLmZkQnV0dG9uQ2xhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1idXR0b24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtYnV0dG9uLS0nICsgdGhpcy5zaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nbHlwaCkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ3NhcC1pY29uLS0nICsgdGhpcy5nbHlwaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdpcy0nICsgdGhpcy5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=