/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/i18n/calendar-i18n.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';
import { FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth } from '@angular/common';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @param {?} locale
 * @return {?}
 */
export function CALENDAR_I18N_FACTORY(locale) {
    return new CalendarI18nDefault(locale);
}
/**
 * Abstract class which defines the behaviour calendar internationalization. See calendar examples for usage details.
 * @abstract
 */
var CalendarI18n = /** @class */ (function () {
    function CalendarI18n() {
        /**
         * This is event that should be called, when any property is changed, to let component detect an changes.
         */
        this.i18nChange = new Subject();
    }
    CalendarI18n.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                    useFactory: CALENDAR_I18N_FACTORY,
                    deps: [LOCALE_ID]
                },] }
    ];
    /** @nocollapse */ CalendarI18n.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CalendarI18n_Factory() { return CALENDAR_I18N_FACTORY(i0.ɵɵinject(i0.LOCALE_ID)); }, token: CalendarI18n, providedIn: "root" });
    return CalendarI18n;
}());
export { CalendarI18n };
if (false) {
    /**
     * This is event that should be called, when any property is changed, to let component detect an changes.
     * @type {?}
     */
    CalendarI18n.prototype.i18nChange;
    /**
     * Aria label for a specific date.
     * @abstract
     * @param {?} date Native date object to use for the label.
     * @return {?}
     */
    CalendarI18n.prototype.getDayAriaLabel = function (date) { };
    /**
     * Get all short week day names, such as Mo for Monday.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllShortWeekdays = function () { };
    /**
     * Get all short month names, such as Nov for November.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllShortMonthNames = function () { };
    /**
     * Get all full month names.
     * @abstract
     * @return {?}
     */
    CalendarI18n.prototype.getAllFullMonthNames = function () { };
}
/**
 * Default implementation of the CalendarI18n service. It will get dates from the application locale if it is present.
 */
var CalendarI18nDefault = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarI18nDefault, _super);
    /** Constructor takes in a locale_id and gets the appropriate data from Angular. */
    function CalendarI18nDefault(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.weekdaysFallback = [
            'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
        ];
        _this.monthsFullFallback = [
            'January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'
        ];
        _this.monthsShortFallback = [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
            'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ];
        if (locale) {
            /** @type {?} */
            var sundayStartWeekdays_1 = getLocaleDayNames(locale, FormStyle.Standalone, TranslationWidth.Short);
            _this.weekdaysShort = sundayStartWeekdays_1.map((/**
             * @param {?} day
             * @param {?} index
             * @return {?}
             */
            function (day, index) { return sundayStartWeekdays_1[index % 7]; }));
            _this.monthsShort = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
            _this.monthsFull = getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Wide);
        }
        _this.checkForFallback();
        return _this;
    }
    /**
     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.
     *
     * @param date Native date object to use for the label.
     */
    /**
     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.
     *
     * @param {?} date Native date object to use for the label.
     * @return {?}
     */
    CalendarI18nDefault.prototype.getDayAriaLabel = /**
     * Aria label for a specific date. Default implementation produces the label: {Date} {Month} {Year}.
     *
     * @param {?} date Native date object to use for the label.
     * @return {?}
     */
    function (date) {
        return date.getDate() + ' ' + this.monthsFull[date.getMonth()] + ' ' + date.getFullYear();
    };
    /** Get all full month names. */
    /**
     * Get all full month names.
     * @return {?}
     */
    CalendarI18nDefault.prototype.getAllFullMonthNames = /**
     * Get all full month names.
     * @return {?}
     */
    function () {
        return this.monthsFull;
    };
    /** Get all short month names, such as Nov for November. */
    /**
     * Get all short month names, such as Nov for November.
     * @return {?}
     */
    CalendarI18nDefault.prototype.getAllShortMonthNames = /**
     * Get all short month names, such as Nov for November.
     * @return {?}
     */
    function () {
        return this.monthsShort;
    };
    /** Get all short week day names, such as Mo for Monday. */
    /**
     * Get all short week day names, such as Mo for Monday.
     * @return {?}
     */
    CalendarI18nDefault.prototype.getAllShortWeekdays = /**
     * Get all short week day names, such as Mo for Monday.
     * @return {?}
     */
    function () {
        return this.weekdaysShort;
    };
    /** Checks if a fallback is needed. Older versions of Angular may need this. */
    /**
     * Checks if a fallback is needed. Older versions of Angular may need this.
     * @private
     * @return {?}
     */
    CalendarI18nDefault.prototype.checkForFallback = /**
     * Checks if a fallback is needed. Older versions of Angular may need this.
     * @private
     * @return {?}
     */
    function () {
        if (!this.weekdaysShort || this.weekdaysShort.length === 0) {
            this.weekdaysShort = this.weekdaysFallback;
        }
        if (!this.monthsShort || this.monthsShort.length === 0) {
            this.monthsShort = this.monthsShortFallback;
        }
        if (!this.monthsFull || this.monthsFull.length === 0) {
            this.monthsFull = this.monthsFullFallback;
        }
    };
    CalendarI18nDefault.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CalendarI18nDefault.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return CalendarI18nDefault;
}(CalendarI18n));
export { CalendarI18nDefault };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.weekdaysShort;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsShort;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsFull;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.weekdaysFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsFullFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.monthsShortFallback;
    /**
     * @type {?}
     * @private
     */
    CalendarI18nDefault.prototype.locale;
}
//# sourceMappingURL=data:application/json;base64,