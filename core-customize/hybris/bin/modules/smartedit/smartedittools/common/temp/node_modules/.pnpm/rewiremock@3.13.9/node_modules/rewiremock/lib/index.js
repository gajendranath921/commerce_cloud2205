'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveExtensions = exports.plugins = exports.removePlugin = exports.addPlugin = exports.overrideEntryPoint = exports.cleanup = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _wipeCache = require('./wipeCache');

var _plugins = require('./plugins');

var _index = require('./plugins/index');

var _index2 = _interopRequireDefault(_index);

var _module = require('./module');

var _constants = require('./constants');

var _mockModule = require('./mockModule');

var API = _interopRequireWildcard(_mockModule);

var _defaultConfig = require('./plugins/defaultConfig');

var _defaultConfig2 = _interopRequireDefault(_defaultConfig);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var moduleName = (0, _module.getModuleName)(module);
if (!moduleName) {
  throw new Error('Rewiremock: there is no "module name". If you are using Jest - disable automocking.');
}

if (!(0, _module.getModuleParent)(module)) {
  throw new Error('Rewiremock: there is no "parent module". Is there two HotModuleReplacementPlugins?');
}

delete require.cache[_path2.default.join(_path2.default.dirname(__filename), './mockModule.js')];
delete require.cache[moduleName.replace('index.js', 'mockModule.js')];

var cleanup = exports.cleanup = function cleanup() {
  var wipeAll = function wipeAll(stubs, moduleName) {
    return moduleName.indexOf(stubs) === 0;
  };
  (0, _wipeCache.wipe)(_path2.default.dirname(__filename), wipeAll);
};

var overrideEntryPoint = exports.overrideEntryPoint = function overrideEntryPoint(module) {
  delete require.cache[(0, _module.getModuleName)(module)];
  API.mockModule.overrideEntryPoint((0, _module.getModuleParent)(module));
  //API.cleanup();
};

overrideEntryPoint(module);

// instance must be clean
API.mockModule.clear();
(0, _plugins._clearPlugins)();

var addPlugin = API.addPlugin;
var removePlugin = API.removePlugin;

//addPlugin(plugins.nodejs);

addPlugin(_index2.default.toBeUsed);
addPlugin(_index2.default.directChild);

addPlugin(_index2.default.__mock__);

if (typeof __webpack_require__ !== "undefined") {
  addPlugin(_index2.default.nodeLibBrowser);
}

(0, _defaultConfig2.default)(API.mockModule);

if (global['_REWIREMOCK_HOISTED_']) {
  global['_REWIREMOCK_HOISTED_'].forEach(function (cb) {
    cb(API.mockModule, { plugins: _index2.default, overrideEntryPoint: overrideEntryPoint });
  });
  global['_REWIREMOCK_HOISTED_'] = [];
}

exports.addPlugin = addPlugin;
exports.removePlugin = removePlugin;
exports.plugins = _index2.default;
exports.resolveExtensions = _constants.setExtensions;
exports.default = API.mockModule;