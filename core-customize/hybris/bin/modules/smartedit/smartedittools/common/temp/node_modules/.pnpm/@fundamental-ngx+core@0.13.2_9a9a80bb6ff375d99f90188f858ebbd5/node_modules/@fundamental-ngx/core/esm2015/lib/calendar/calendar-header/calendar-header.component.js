/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/calendar-header/calendar-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { CalendarI18nLabels } from '../i18n/calendar-i18n-labels';
import { CalendarI18n } from '../i18n/calendar-i18n';
import { takeUntil } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
/**
 * Internal use only.
 * Header of the calendar component.
 */
export class CalendarHeaderComponent {
    /**
     * @param {?} calendarI18nLabels
     * @param {?} calendarI18n
     * @param {?} changeDetRef
     */
    constructor(calendarI18nLabels, calendarI18n, changeDetRef) {
        this.calendarI18nLabels = calendarI18nLabels;
        this.calendarI18n = calendarI18n;
        this.changeDetRef = changeDetRef;
        /**
         * Event emitted when the active view should change.
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Event emitted when the previous button is clicked.
         */
        this.previousClicked = new EventEmitter();
        /**
         * Event emitted when the next button is clicked.
         */
        this.nextClicked = new EventEmitter();
        /**
         * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * Merging 18n observables
         * @type {?}
         */
        const i18nObservables = merge(this.calendarI18n.i18nChange, this.calendarI18nLabels.labelsChange);
        /** Called to trigger change detection */
        i18nObservables.pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        () => this.changeDetRef.markForCheck()));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    /**
     * Get the aria label for the previous button. Depends on the active view.
     * @return {?}
     */
    get previousLabel() {
        return this.activeView !== 'year' ? this.calendarI18nLabels.previousMonthLabel
            : this.calendarI18nLabels.previousYearLabel;
    }
    /**
     * Get the aria label for the next button. Depends on the active view.
     * @return {?}
     */
    get nextLabel() {
        return this.activeView !== 'year' ? this.calendarI18nLabels.nextMonthLabel
            : this.calendarI18nLabels.nextMonthLabel;
    }
    /**
     * Get aria label for the month shown.
     * @return {?}
     */
    get monthLabel() {
        return this.calendarI18n.getAllFullMonthNames()[this.currentlyDisplayed.month - 1];
    }
    /**
     * @return {?}
     */
    isOnMonthView() {
        return this.activeView === 'month';
    }
    /**
     * @return {?}
     */
    isOnYearView() {
        return this.activeView === 'year';
    }
    /**
     * @param {?} type
     * @return {?}
     */
    processViewChange(type) {
        if (type === this.activeView) {
            this.activeView = 'day';
        }
        else {
            this.activeView = type;
        }
        this.activeViewChange.emit(this.activeView);
    }
}
CalendarHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-calendar-header',
                template: "<header class=\"fd-calendar__header\" aria-live=\"polite\">\n    <div class=\"fd-calendar__navigation\">\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [fdType]=\"'standard'\"\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [glyph]=\"'slim-arrow-left'\"\n                    [attr.id]=\"id + '-left-arrow'\"\n                    [attr.aria-label]=\"previousLabel\"\n                    [attr.aria-disabled]=\"false\"\n                    type=\"button\"\n                    (click)=\"previousClicked.emit()\">\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [attr.aria-label]=\"calendarI18nLabels.monthSelectionLabel + ' ' + monthLabel\"\n                    [attr.aria-selected]=\"isOnMonthView()\"\n                    (click)=\"processViewChange('month')\"\n                    type=\"button\">\n                {{monthLabel}}\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [attr.aria-label]=\"calendarI18nLabels.yearSelectionLabel + ' ' + currentlyDisplayed.year\"\n                    [attr.aria-selected]=\"isOnYearView()\"\n                    (click)=\"processViewChange('year')\"\n                    type=\"button\">\n                {{currentlyDisplayed.year}}\n            </button>\n        </div>\n        <div class=\"fd-calendar__action\">\n            <button fd-button\n                    [fdType]=\"'standard'\"\n                    [compact]=\"true\"\n                    [options]=\"'light'\"\n                    [glyph]=\"'slim-arrow-right'\"\n                    [attr.id]=\"id + '-right-arrow'\"\n                    [attr.aria-label]=\"nextLabel\"\n                    [attr.aria-disabled]=\"false\"\n                    (click)=\"nextClicked.emit()\"\n                    type=\"button\">\n            </button>\n        </div>\n    </div>\n</header>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[attr.id]': 'id + "-header"'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
CalendarHeaderComponent.ctorParameters = () => [
    { type: CalendarI18nLabels },
    { type: CalendarI18n },
    { type: ChangeDetectorRef }
];
CalendarHeaderComponent.propDecorators = {
    activeView: [{ type: Input }],
    currentlyDisplayed: [{ type: Input }],
    id: [{ type: Input }],
    activeViewChange: [{ type: Output }],
    previousClicked: [{ type: Output }],
    nextClicked: [{ type: Output }]
};
if (false) {
    /**
     * Currently active view. Needed for a11y labels.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.activeView;
    /**
     * Currently displayed date on the calendar.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.currentlyDisplayed;
    /**
     * Id
     * @type {?}
     */
    CalendarHeaderComponent.prototype.id;
    /**
     * Event emitted when the active view should change.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.activeViewChange;
    /**
     * Event emitted when the previous button is clicked.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.previousClicked;
    /**
     * Event emitted when the next button is clicked.
     * @type {?}
     */
    CalendarHeaderComponent.prototype.nextClicked;
    /**
     * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype.onDestroy$;
    /** @type {?} */
    CalendarHeaderComponent.prototype.calendarI18nLabels;
    /** @type {?} */
    CalendarHeaderComponent.prototype.calendarI18n;
    /**
     * @type {?}
     * @private
     */
    CalendarHeaderComponent.prototype.changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,