/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list/nested-list.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ContentChildren, Directive, ElementRef, forwardRef, HostBinding, Input, QueryList } from '@angular/core';
import { NestedItemDirective } from '../nested-item/nested-item.directive';
import { NestedListStateService } from '../nested-list-state.service';
var NestedListDirective = /** @class */ (function () {
    /** @hidden */
    function NestedListDirective(nestedListStateService, elementRef) {
        this.nestedListStateService = nestedListStateService;
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this.fdNestedListItemClass = true;
        /**
         * In case the user wants to no use icons for items in this list
         */
        this.textOnly = false;
        /**
         * In case the user wants put compact mode in this list
         */
        this.compact = false;
        /**
         * @hidden
         */
        this.hidden = false;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    NestedListDirective.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nestedLevel = this.getNestedLevel();
        /** If there is condensed mode, maximum 2nd level class of nest can be added */
        if (this.nestedListStateService.condensed) {
            nestedLevel = Math.min.apply(Math, tslib_1.__spread([nestedLevel, 2]));
        }
        this.handleNestedLevel(nestedLevel);
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @param {?} level
     * @return {?}
     */
    NestedListDirective.prototype.handleNestedLevel = /**
     * @hidden
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** Adding class with the nested level */
        this.elementRef.nativeElement.classList.add('level-' + level);
    };
    /**
     * @hidden
     * Method, that checks how deep is the list element
     */
    /**
     * @hidden
     * Method, that checks how deep is the list element
     * @private
     * @return {?}
     */
    NestedListDirective.prototype.getNestedLevel = /**
     * @hidden
     * Method, that checks how deep is the list element
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.elementRef.nativeElement;
        /** @type {?} */
        var parentElements = [];
        /** Method that gathers all of the parentNode elements of current NestedListDirective element */
        while (element.parentNode) {
            parentElements.unshift(element);
            element = element.parentNode;
        }
        /**
         * Filter only elements, that has `fd-nested-list` directive attribute
         * @type {?}
         */
        var filteredParentElements = parentElements.filter((/**
         * @param {?} _element
         * @return {?}
         */
        function (_element) { return _element.hasAttribute('fd-nested-list'); }));
        return filteredParentElements.length;
    };
    NestedListDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdNestedList], [fd-nested-list]'
                },] }
    ];
    /** @nocollapse */
    NestedListDirective.ctorParameters = function () { return [
        { type: NestedListStateService },
        { type: ElementRef }
    ]; };
    NestedListDirective.propDecorators = {
        fdNestedListItemClass: [{ type: HostBinding, args: ['class.fd-nested-list',] }],
        textOnly: [{ type: Input }, { type: HostBinding, args: ['class.fd-nested-list--text-only',] }],
        compact: [{ type: Input }, { type: HostBinding, args: ['class.fd-nested-list--compact',] }],
        nestedItems: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NestedItemDirective; })),] }],
        hidden: [{ type: HostBinding, args: ['attr.aria-hidden',] }]
    };
    return NestedListDirective;
}());
export { NestedListDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedListDirective.prototype.fdNestedListItemClass;
    /**
     * In case the user wants to no use icons for items in this list
     * @type {?}
     */
    NestedListDirective.prototype.textOnly;
    /**
     * In case the user wants put compact mode in this list
     * @type {?}
     */
    NestedListDirective.prototype.compact;
    /**
     * @hidden
     * This variable is mostly to keep track of this list's children. There is not usage of it inside this directive,
     * but it's used by services and NestedItemDirective by itself,
     * @type {?}
     */
    NestedListDirective.prototype.nestedItems;
    /**
     * @hidden
     * @type {?}
     */
    NestedListDirective.prototype.hidden;
    /**
     * @type {?}
     * @private
     */
    NestedListDirective.prototype.nestedListStateService;
    /**
     * @type {?}
     * @private
     */
    NestedListDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkLWxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL25lc3RlZC1saXN0L25lc3RlZC1saXN0L25lc3RlZC1saXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBRUgsZUFBZSxFQUNmLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBQ0wsU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXRFO0lBK0JJLGNBQWM7SUFDZCw2QkFDWSxzQkFBOEMsRUFDOUMsVUFBc0I7UUFEdEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBM0JsQywwQkFBcUIsR0FBWSxJQUFJLENBQUM7Ozs7UUFLdEMsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUsxQixZQUFPLEdBQVksS0FBSyxDQUFDOzs7O1FBWWxCLFdBQU0sR0FBWSxLQUFLLENBQUM7SUFNNUIsQ0FBQztJQUVKLGNBQWM7Ozs7O0lBQ2QsZ0RBQWtCOzs7O0lBQWxCOztZQUNRLFdBQVcsR0FBVyxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQy9DLCtFQUErRTtRQUMvRSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUU7WUFDdkMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLE9BQVIsSUFBSSxtQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxjQUFjOzs7Ozs7O0lBQ04sK0NBQWlCOzs7Ozs7SUFBekIsVUFBMEIsS0FBYTtRQUNuQyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNLLDRDQUFjOzs7Ozs7SUFBdEI7O1lBQ1EsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTs7WUFDckMsY0FBYyxHQUFHLEVBQUU7UUFFekIsZ0dBQWdHO1FBQ2hHLE9BQU8sT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN2QixjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1NBQ2hDOzs7OztZQUdLLHNCQUFzQixHQUFHLGNBQWMsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQXZDLENBQXVDLEVBQUM7UUFDekcsT0FBTyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7SUFDekMsQ0FBQzs7Z0JBdEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0NBQWtDO2lCQUMvQzs7OztnQkFKUSxzQkFBc0I7Z0JBUjNCLFVBQVU7Ozt3Q0FnQlQsV0FBVyxTQUFDLHNCQUFzQjsyQkFJbEMsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQ0FBaUM7MEJBSTdDLEtBQUssWUFDTCxXQUFXLFNBQUMsK0JBQStCOzhCQVEzQyxlQUFlLFNBQUMsVUFBVTs7O29CQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsRUFBQzt5QkFJckQsV0FBVyxTQUFDLGtCQUFrQjs7SUEyQ25DLDBCQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0FwRVksbUJBQW1COzs7Ozs7SUFHNUIsb0RBQ3NDOzs7OztJQUd0Qyx1Q0FFMEI7Ozs7O0lBRzFCLHNDQUV5Qjs7Ozs7OztJQU96QiwwQ0FDNEM7Ozs7O0lBRzVDLHFDQUMrQjs7Ozs7SUFJM0IscURBQXNEOzs7OztJQUN0RCx5Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgUXVlcnlMaXN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmVzdGVkSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4uL25lc3RlZC1pdGVtL25lc3RlZC1pdGVtLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZXN0ZWRMaXN0SW50ZXJmYWNlIH0gZnJvbSAnLi9uZXN0ZWQtbGlzdC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTmVzdGVkTGlzdFN0YXRlU2VydmljZSB9IGZyb20gJy4uL25lc3RlZC1saXN0LXN0YXRlLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmZE5lc3RlZExpc3RdLCBbZmQtbmVzdGVkLWxpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZXN0ZWRMaXN0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgTmVzdGVkTGlzdEludGVyZmFjZSB7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtbmVzdGVkLWxpc3QnKVxuICAgIGZkTmVzdGVkTGlzdEl0ZW1DbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogSW4gY2FzZSB0aGUgdXNlciB3YW50cyB0byBubyB1c2UgaWNvbnMgZm9yIGl0ZW1zIGluIHRoaXMgbGlzdCAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1uZXN0ZWQtbGlzdC0tdGV4dC1vbmx5JylcbiAgICB0ZXh0T25seTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEluIGNhc2UgdGhlIHVzZXIgd2FudHMgcHV0IGNvbXBhY3QgbW9kZSBpbiB0aGlzIGxpc3QgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmQtbmVzdGVkLWxpc3QtLWNvbXBhY3QnKVxuICAgIGNvbXBhY3Q6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBUaGlzIHZhcmlhYmxlIGlzIG1vc3RseSB0byBrZWVwIHRyYWNrIG9mIHRoaXMgbGlzdCdzIGNoaWxkcmVuLiBUaGVyZSBpcyBub3QgdXNhZ2Ugb2YgaXQgaW5zaWRlIHRoaXMgZGlyZWN0aXZlLFxuICAgICAqIGJ1dCBpdCdzIHVzZWQgYnkgc2VydmljZXMgYW5kIE5lc3RlZEl0ZW1EaXJlY3RpdmUgYnkgaXRzZWxmLFxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBOZXN0ZWRJdGVtRGlyZWN0aXZlKSlcbiAgICBuZXN0ZWRJdGVtczogUXVlcnlMaXN0PE5lc3RlZEl0ZW1EaXJlY3RpdmU+O1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1oaWRkZW4nKVxuICAgIHB1YmxpYyBoaWRkZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgbmVzdGVkTGlzdFN0YXRlU2VydmljZTogTmVzdGVkTGlzdFN0YXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmXG4gICAgKSB7fVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIGxldCBuZXN0ZWRMZXZlbDogbnVtYmVyID0gdGhpcy5nZXROZXN0ZWRMZXZlbCgpO1xuICAgICAgICAvKiogSWYgdGhlcmUgaXMgY29uZGVuc2VkIG1vZGUsIG1heGltdW0gMm5kIGxldmVsIGNsYXNzIG9mIG5lc3QgY2FuIGJlIGFkZGVkICovXG4gICAgICAgIGlmICh0aGlzLm5lc3RlZExpc3RTdGF0ZVNlcnZpY2UuY29uZGVuc2VkKSB7XG4gICAgICAgICAgICBuZXN0ZWRMZXZlbCA9IE1hdGgubWluKC4uLltuZXN0ZWRMZXZlbCwgMl0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFuZGxlTmVzdGVkTGV2ZWwobmVzdGVkTGV2ZWwpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJpdmF0ZSBoYW5kbGVOZXN0ZWRMZXZlbChsZXZlbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIC8qKiBBZGRpbmcgY2xhc3Mgd2l0aCB0aGUgbmVzdGVkIGxldmVsICovXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xldmVsLScgKyBsZXZlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIE1ldGhvZCwgdGhhdCBjaGVja3MgaG93IGRlZXAgaXMgdGhlIGxpc3QgZWxlbWVudFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0TmVzdGVkTGV2ZWwoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudHMgPSBbXTtcblxuICAgICAgICAvKiogTWV0aG9kIHRoYXQgZ2F0aGVycyBhbGwgb2YgdGhlIHBhcmVudE5vZGUgZWxlbWVudHMgb2YgY3VycmVudCBOZXN0ZWRMaXN0RGlyZWN0aXZlIGVsZW1lbnQgKi9cbiAgICAgICAgd2hpbGUgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgcGFyZW50RWxlbWVudHMudW5zaGlmdChlbGVtZW50KTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogRmlsdGVyIG9ubHkgZWxlbWVudHMsIHRoYXQgaGFzIGBmZC1uZXN0ZWQtbGlzdGAgZGlyZWN0aXZlIGF0dHJpYnV0ZSAqL1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFBhcmVudEVsZW1lbnRzID0gcGFyZW50RWxlbWVudHMuZmlsdGVyKF9lbGVtZW50ID0+IF9lbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZmQtbmVzdGVkLWxpc3QnKSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFBhcmVudEVsZW1lbnRzLmxlbmd0aDtcbiAgICB9XG59XG4iXX0=