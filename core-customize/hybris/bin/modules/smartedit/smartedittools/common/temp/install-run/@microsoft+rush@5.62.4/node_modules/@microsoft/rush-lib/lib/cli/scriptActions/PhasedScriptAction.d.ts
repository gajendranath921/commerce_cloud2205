import { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';
import type { IPhase, IPhasedCommand } from '../../api/CommandLineConfiguration';
/**
 * Constructor parameters for BulkScriptAction.
 */
export interface IPhasedScriptActionOptions extends IBaseScriptActionOptions<IPhasedCommand> {
    enableParallelism: boolean;
    incremental: boolean;
    disableBuildCache: boolean;
    initialPhases: Set<IPhase>;
    watchPhases: Set<IPhase>;
    phases: Map<string, IPhase>;
    alwaysWatch: boolean;
}
/**
 * This class implements phased commands which are run individually for each project in the repo,
 * possibly in parallel, and which may define multiple phases.
 *
 * @remarks
 * Phased commands can be defined via common/config/command-line.json.  Rush's predefined "build"
 * and "rebuild" commands are also modeled as phased commands with a single phase that invokes the npm
 * "build" script for each project.
 */
export declare class PhasedScriptAction extends BaseScriptAction<IPhasedCommand> {
    private readonly _enableParallelism;
    private readonly _isIncrementalBuildAllowed;
    private readonly _disableBuildCache;
    private readonly _repoCommandLineConfiguration;
    private readonly _initialPhases;
    private readonly _watchPhases;
    private readonly _alwaysWatch;
    private _changedProjectsOnly;
    private _selectionParameters;
    private _verboseParameter;
    private _parallelismParameter;
    private _ignoreHooksParameter;
    private _watchParameter;
    constructor(options: IPhasedScriptActionOptions);
    runAsync(): Promise<void>;
    /**
     * Runs the command in watch mode. Fundamentally is a simple loop:
     * 1) Wait for a change to one or more projects in the selection
     * 2) Invoke the command on the changed projects, and, if applicable, impacted projects
     *    Uses the same algorithm as --impacted-by
     * 3) Goto (1)
     */
    private _runWatch;
    protected onDefineParameters(): void;
    /**
     * Runs a single invocation of the command
     */
    private _runOnce;
    private _doBeforeTask;
    private _doAfterTask;
    private _collectTelemetry;
}
//# sourceMappingURL=PhasedScriptAction.d.ts.map