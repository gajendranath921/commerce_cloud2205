/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-list-keyboard.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { MenuKeyboardService } from '../menu/menu-keyboard.service';
import { Inject, Injectable } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
/**
 * Nested list keyboard service, which uses MenuKeyboardService, to deal with ArrowUp, ArrowDown, Space, Enter.
 * Also has own handling of ArrowLeft and ArrowRight, to open/close the menu if it has any children.
 */
var NestedListKeyboardService = /** @class */ (function () {
    function NestedListKeyboardService(keyboardService) {
        this.keyboardService = keyboardService;
        /**
         * Event, that is thrown always, when the open/close i being called on item components.
         * Also triggers changing of elements, to remove closed/hidden elements
         */
        this.refresh$ = new Subject();
    }
    /** Recursive function to get all of the NestedItem elements in correct order. */
    /**
     * Recursive function to get all of the NestedItem elements in correct order.
     * @private
     * @param {?} item
     * @return {?}
     */
    NestedListKeyboardService.prototype.getItems = /**
     * Recursive function to get all of the NestedItem elements in correct order.
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var childrenItems = item.expanded ? item.allChildrenItems : [];
        return childrenItems.reduce((/**
         * @param {?} actualArray
         * @param {?} nextItem
         * @return {?}
         */
        function (actualArray, nextItem) {
            return tslib_1.__spread(actualArray, _this.getItems(nextItem));
        }), [item]);
    };
    /**
     * Function called after refresh$ event is triggered.
     * Refresh the list of NestedItems, that the keyboard support should be provided for
     */
    /**
     * Function called after refresh$ event is triggered.
     * Refresh the list of NestedItems, that the keyboard support should be provided for
     * @param {?} lists
     * @return {?}
     */
    NestedListKeyboardService.prototype.refreshItems = /**
     * Function called after refresh$ event is triggered.
     * Refresh the list of NestedItems, that the keyboard support should be provided for
     * @param {?} lists
     * @return {?}
     */
    function (lists) {
        var _this = this;
        /** @type {?} */
        var items = [];
        /** Gathering all of the items */
        lists.forEach((/**
         * @param {?} list
         * @return {?}
         */
        function (list) { return items.push.apply(items, tslib_1.__spread(_this.getAllListItems(list))); }));
        /** Putting the keyboard support function to each of the items */
        items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.keyboardTriggered
                .pipe(takeUntil(_this.refresh$))
                .subscribe((/**
             * @param {?} keyboardEvent
             * @return {?}
             */
            function (keyboardEvent) {
                return _this.handleKeyDown(keyboardEvent, index, items);
            }));
        }));
    };
    /** Method that calls the recursive function, getItems() and gathers all of the items in the NestedList */
    /**
     * Method that calls the recursive function, getItems() and gathers all of the items in the NestedList
     * @private
     * @param {?} list
     * @return {?}
     */
    NestedListKeyboardService.prototype.getAllListItems = /**
     * Method that calls the recursive function, getItems() and gathers all of the items in the NestedList
     * @private
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var _this = this;
        /** @type {?} */
        var _items = [];
        if (list && list.nestedItems) {
            list.nestedItems.toArray().forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                _items.push.apply(_items, tslib_1.__spread(_this.getItems(item)));
            }));
        }
        return _items;
    };
    /**
     * Keyboard handle function. Uses keyboard support service from MenuComponent, to deal with ArrowUp, ArrowDown, Space, Enter.
     * For ArrowRight, if item is not expanded and has children (list or popup), the open function is triggered.
     * Otherwise it follows ArrowDown functionality.
     * For ArrowLeft, if item is expanded and has children (list or popup), the close function is triggered.
     * Otherwise it follows ArrowUp functionality
     */
    /**
     * Keyboard handle function. Uses keyboard support service from MenuComponent, to deal with ArrowUp, ArrowDown, Space, Enter.
     * For ArrowRight, if item is not expanded and has children (list or popup), the open function is triggered.
     * Otherwise it follows ArrowDown functionality.
     * For ArrowLeft, if item is expanded and has children (list or popup), the close function is triggered.
     * Otherwise it follows ArrowUp functionality
     * @private
     * @param {?} keyboardEvent
     * @param {?} index
     * @param {?} items
     * @return {?}
     */
    NestedListKeyboardService.prototype.handleKeyDown = /**
     * Keyboard handle function. Uses keyboard support service from MenuComponent, to deal with ArrowUp, ArrowDown, Space, Enter.
     * For ArrowRight, if item is not expanded and has children (list or popup), the open function is triggered.
     * Otherwise it follows ArrowDown functionality.
     * For ArrowLeft, if item is expanded and has children (list or popup), the close function is triggered.
     * Otherwise it follows ArrowUp functionality
     * @private
     * @param {?} keyboardEvent
     * @param {?} index
     * @param {?} items
     * @return {?}
     */
    function (keyboardEvent, index, items) {
        /** @type {?} */
        var item = items[index];
        switch (keyboardEvent.key) {
            case ('ArrowRight'): {
                if (!item.expanded && item.hasChildren) {
                    item.triggerOpen();
                }
                else {
                    if (items.length > index + 1) {
                        items[index + 1].focus();
                    }
                    else {
                        items[0].focus();
                    }
                    keyboardEvent.preventDefault();
                }
                break;
            }
            case ('ArrowLeft'): {
                if (item.expanded && item.hasChildren) {
                    item.triggerClose();
                }
                else {
                    if (index > 0) {
                        items[index - 1].focus();
                    }
                    else {
                        items[items.length - 1].focus();
                    }
                    keyboardEvent.preventDefault();
                }
                break;
            }
            default: {
                this.keyboardService.keyDownHandler(keyboardEvent, index, items);
            }
        }
    };
    NestedListKeyboardService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NestedListKeyboardService.ctorParameters = function () { return [
        { type: MenuKeyboardService, decorators: [{ type: Inject, args: [MenuKeyboardService,] }] }
    ]; };
    return NestedListKeyboardService;
}());
export { NestedListKeyboardService };
if (false) {
    /**
     * Event, that is thrown always, when the open/close i being called on item components.
     * Also triggers changing of elements, to remove closed/hidden elements
     * @type {?}
     */
    NestedListKeyboardService.prototype.refresh$;
    /**
     * @type {?}
     * @private
     */
    NestedListKeyboardService.prototype.keyboardService;
}
//# sourceMappingURL=data:application/json;base64,