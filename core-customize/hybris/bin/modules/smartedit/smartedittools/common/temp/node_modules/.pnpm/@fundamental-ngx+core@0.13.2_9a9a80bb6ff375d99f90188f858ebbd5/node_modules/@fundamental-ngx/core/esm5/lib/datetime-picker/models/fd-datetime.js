/**
 * @fileoverview added by tsickle
 * Generated from: lib/datetime-picker/models/fd-datetime.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Default date with time model used by the fundamental components.
 */
import { FdDate } from '../../calendar/models/fd-date';
var FdDatetime = /** @class */ (function () {
    /**
     * Constructor to build a FdDateTime object from a FdDate and TimeObject.
     * @param date the FdDate object.
     * @param time the TimeObject object.
     */
    function FdDatetime(date, time) {
        this.date = date;
        this.time = time;
    }
    /**
     * Static function to get the current date in FdDateTime form.
     */
    /**
     * Static function to get the current date in FdDateTime form.
     * @return {?}
     */
    FdDatetime.getToday = /**
     * Static function to get the current date in FdDateTime form.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var time = { hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds() };
        return new FdDatetime(FdDate.getToday(), time);
    };
    /**
     * Get Luxon date object converted to string from FdDate.
     */
    /**
     * Get Luxon date object converted to string from FdDate.
     * @return {?}
     */
    FdDatetime.prototype.toLocaleDateString = /**
     * Get Luxon date object converted to string from FdDate.
     * @return {?}
     */
    function () {
        if (this.toDate() && this.isTimeValid() && this.isDateValid()) {
            return this.toDate().toLocaleString();
        }
        else {
            return null;
        }
    };
    /**
     * Method that checks validity of time on FdDateTime object.
     */
    /**
     * Method that checks validity of time on FdDateTime object.
     * @return {?}
     */
    FdDatetime.prototype.isTimeValid = /**
     * Method that checks validity of time on FdDateTime object.
     * @return {?}
     */
    function () {
        if (!this.time ||
            this.hour === undefined ||
            this.minute === undefined ||
            this.second === undefined ||
            isNaN(this.hour) ||
            isNaN(this.minute) ||
            isNaN(this.second)) {
            return false;
        }
        if (this.hour > 23 || this.hour < 0) {
            return false;
        }
        if (this.minute > 59 || this.minute < 0) {
            return false;
        }
        if (this.second > 59 || this.second < 0) {
            return false;
        }
        return true;
    };
    /**
     * Method that checks validity of date on FdDateTime object.
     */
    /**
     * Method that checks validity of date on FdDateTime object.
     * @return {?}
     */
    FdDatetime.prototype.isDateValid = /**
     * Method that checks validity of date on FdDateTime object.
     * @return {?}
     */
    function () {
        return this.date && this.date.isDateValid();
    };
    Object.defineProperty(FdDatetime.prototype, "year", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.date) {
                return this.date.year;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FdDatetime.prototype, "month", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.date) {
                return this.date.month;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FdDatetime.prototype, "day", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.date) {
                return this.date.day;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FdDatetime.prototype, "hour", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.time) {
                return this.time.hour;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FdDatetime.prototype, "minute", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.time) {
                return this.time.minute;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FdDatetime.prototype, "second", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.time) {
                return this.time.second;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get native date object from FdDate.
     */
    /**
     * Get native date object from FdDate.
     * @return {?}
     */
    FdDatetime.prototype.toDate = /**
     * Get native date object from FdDate.
     * @return {?}
     */
    function () {
        return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second);
    };
    return FdDatetime;
}());
export { FdDatetime };
if (false) {
    /** @type {?} */
    FdDatetime.prototype.date;
    /** @type {?} */
    FdDatetime.prototype.time;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmQtZGF0ZXRpbWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZXRpbWUtcGlja2VyL21vZGVscy9mZC1kYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUd2RDtJQWNJOzs7O09BSUc7SUFDSCxvQkFDSSxJQUFZLEVBQ1osSUFBZ0I7UUFFaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQXBCRDs7T0FFRzs7Ozs7SUFDSSxtQkFBUTs7OztJQUFmOztZQUNVLElBQUksR0FBUyxJQUFJLElBQUksRUFBRTs7WUFDdkIsSUFBSSxHQUFlLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUM7UUFDdEcsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQWVEOztPQUVHOzs7OztJQUNJLHVDQUFrQjs7OztJQUF6QjtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDekM7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0ksZ0NBQVc7Ozs7SUFBbEI7UUFFSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDVixJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTO1lBQ3pCLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUztZQUN6QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUNwQjtZQUNFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNqQyxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNJLGdDQUFXOzs7O0lBQWxCO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELHNCQUFXLDRCQUFJOzs7O1FBQWY7WUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUN6QjtRQUNMLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsNkJBQUs7Ozs7UUFBaEI7WUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUMxQjtRQUNMLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsMkJBQUc7Ozs7UUFBZDtZQUNJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ3hCO1FBQ0wsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyw0QkFBSTs7OztRQUFmO1lBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDekI7UUFDTCxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDhCQUFNOzs7O1FBQWpCO1lBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDM0I7UUFDTCxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDhCQUFNOzs7O1FBQWpCO1lBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDM0I7UUFDTCxDQUFDOzs7T0FBQTtJQUVEOztPQUVHOzs7OztJQUNJLDJCQUFNOzs7O0lBQWI7UUFDSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUF0SEQsSUFzSEM7Ozs7SUFwSEcsMEJBQWE7O0lBQ2IsMEJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWZhdWx0IGRhdGUgd2l0aCB0aW1lIG1vZGVsIHVzZWQgYnkgdGhlIGZ1bmRhbWVudGFsIGNvbXBvbmVudHMuXG4gKi9cblxuaW1wb3J0IHsgRmREYXRlIH0gZnJvbSAnLi4vLi4vY2FsZW5kYXIvbW9kZWxzL2ZkLWRhdGUnO1xuaW1wb3J0IHsgVGltZU9iamVjdCB9IGZyb20gJy4uLy4uL3RpbWUvdGltZS1vYmplY3QnO1xuXG5leHBvcnQgY2xhc3MgRmREYXRldGltZSB7XG5cbiAgICBkYXRlOiBGZERhdGU7XG4gICAgdGltZTogVGltZU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBmdW5jdGlvbiB0byBnZXQgdGhlIGN1cnJlbnQgZGF0ZSBpbiBGZERhdGVUaW1lIGZvcm0uXG4gICAgICovXG4gICAgc3RhdGljIGdldFRvZGF5KCk6IEZkRGF0ZXRpbWUge1xuICAgICAgICBjb25zdCBkYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgdGltZTogVGltZU9iamVjdCA9IHtob3VyOiBkYXRlLmdldEhvdXJzKCksIG1pbnV0ZTogZGF0ZS5nZXRNaW51dGVzKCksIHNlY29uZDogZGF0ZS5nZXRTZWNvbmRzKCl9O1xuICAgICAgICByZXR1cm4gbmV3IEZkRGF0ZXRpbWUoRmREYXRlLmdldFRvZGF5KCksIHRpbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIHRvIGJ1aWxkIGEgRmREYXRlVGltZSBvYmplY3QgZnJvbSBhIEZkRGF0ZSBhbmQgVGltZU9iamVjdC5cbiAgICAgKiBAcGFyYW0gZGF0ZSB0aGUgRmREYXRlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdGltZSB0aGUgVGltZU9iamVjdCBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRhdGU6IEZkRGF0ZSxcbiAgICAgICAgdGltZTogVGltZU9iamVjdFxuICAgICkge1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBMdXhvbiBkYXRlIG9iamVjdCBjb252ZXJ0ZWQgdG8gc3RyaW5nIGZyb20gRmREYXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyB0b0xvY2FsZURhdGVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudG9EYXRlKCkgJiYgdGhpcy5pc1RpbWVWYWxpZCgpICYmIHRoaXMuaXNEYXRlVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgY2hlY2tzIHZhbGlkaXR5IG9mIHRpbWUgb24gRmREYXRlVGltZSBvYmplY3QuXG4gICAgICovXG4gICAgcHVibGljIGlzVGltZVZhbGlkKCk6IGJvb2xlYW4ge1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lIHx8XG4gICAgICAgICAgICB0aGlzLmhvdXIgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdGhpcy5taW51dGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdGhpcy5zZWNvbmQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgaXNOYU4odGhpcy5ob3VyKSB8fFxuICAgICAgICAgICAgaXNOYU4odGhpcy5taW51dGUpIHx8XG4gICAgICAgICAgICBpc05hTih0aGlzLnNlY29uZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ob3VyID4gMjMgfHwgdGhpcy5ob3VyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWludXRlID4gNTkgfHwgdGhpcy5taW51dGUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZWNvbmQgPiA1OSB8fCB0aGlzLnNlY29uZCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGNoZWNrcyB2YWxpZGl0eSBvZiBkYXRlIG9uIEZkRGF0ZVRpbWUgb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBpc0RhdGVWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUuaXNEYXRlVmFsaWQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHllYXIoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS55ZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtb250aCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlLm1vbnRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkYXkoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5kYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhvdXIoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZS5ob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW51dGUoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZS5taW51dGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNlY29uZCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lLnNlY29uZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBuYXRpdmUgZGF0ZSBvYmplY3QgZnJvbSBGZERhdGUuXG4gICAgICovXG4gICAgcHVibGljIHRvRGF0ZSgpOiBEYXRlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMueWVhciwgdGhpcy5tb250aCAtIDEsIHRoaXMuZGF5LCB0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCk7XG4gICAgfVxufVxuIl19