/**
 * @fileoverview added by tsickle
 * Generated from: lib/nested-list/nested-link/nested-link.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ContentChild, Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2 } from '@angular/core';
import { NestedListTitleDirective } from '../nested-list-directives';
import { NestedListStateService } from '../nested-list-state.service';
var NestedLinkDirective = /** @class */ (function () {
    /** @hidden */
    function NestedLinkDirective(renderer, elementRef, nestedListStateService, changeDetRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.nestedListStateService = nestedListStateService;
        this.changeDetRef = changeDetRef;
        /**
         * @hidden
         */
        this.fdNestedListItemClass = true;
        /**
         * Event that is thrown, when any keyboard event is dispatched on this element
         */
        this.keyboardTriggered = new EventEmitter();
        /**
         * Event that is thrown, when this element is clicked
         */
        this.clicked = new EventEmitter();
        /**
         *
         */
        this.controlSelected = this._selected;
        /**
         * @hidden
         * Attribute controlled by the parent `NestedItemDirective`
         */
        this.expanded = false;
        /**
         * @hidden
         * Attribute controlled by the parent `NestedItemDirective`
         */
        this.hasChildren = false;
    }
    Object.defineProperty(NestedLinkDirective.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /** Whether this element is selected, the `selected` state is propagated to all of parent elements */
        set: /**
         * Whether this element is selected, the `selected` state is propagated to all of parent elements
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
            if (this._selected !== selected) {
                this._selected = selected;
                this.controlSelected = selected;
                this.nestedListStateService.refresh$.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Set focus on the element. */
    /**
     * Set focus on the element.
     * @return {?}
     */
    NestedLinkDirective.prototype.focus = /**
     * Set focus on the element.
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.focus();
    };
    /** Dispatches the click event on the element */
    /**
     * Dispatches the click event on the element
     * @return {?}
     */
    NestedLinkDirective.prototype.click = /**
     * Dispatches the click event on the element
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.click();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    NestedLinkDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** Add event listeners on the element */
        var _this = this;
        /** Keyboard */
        this.renderer.listen(this.elementRef.nativeElement, 'keydown', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return _this.keyboardTriggered.emit(event);
        }));
        /** Mouse Click */
        this.renderer.listen(this.elementRef.nativeElement, 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.onClickCallback) {
                _this.onClickCallback();
            }
            _this.clicked.emit(event);
        }));
    };
    /** Returns the title value of the title directive */
    /**
     * Returns the title value of the title directive
     * @return {?}
     */
    NestedLinkDirective.prototype.getTitle = /**
     * Returns the title value of the title directive
     * @return {?}
     */
    function () {
        return this.title && this.title.getInnerText();
    };
    NestedLinkDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdNestedLink], [fd-nested-list-link]',
                    host: {
                        'tabindex': '0',
                    }
                },] }
    ];
    /** @nocollapse */
    NestedLinkDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NestedListStateService },
        { type: ChangeDetectorRef }
    ]; };
    NestedLinkDirective.propDecorators = {
        fdNestedListItemClass: [{ type: HostBinding, args: ['class.fd-nested-list__link',] }],
        title: [{ type: ContentChild, args: [NestedListTitleDirective, { static: false },] }],
        keyboardTriggered: [{ type: Output }],
        clicked: [{ type: Output }],
        selected: [{ type: Input }],
        onClickCallback: [{ type: Input }],
        controlSelected: [{ type: HostBinding, args: ['class.is-selected',] }],
        expanded: [{ type: HostBinding, args: ['class.is-expanded',] }, { type: HostBinding, args: ['attr.aria-expanded',] }],
        hasChildren: [{ type: HostBinding, args: ['class.has-child',] }, { type: HostBinding, args: ['attr.aria-haspopup',] }]
    };
    return NestedLinkDirective;
}());
export { NestedLinkDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    NestedLinkDirective.prototype.fdNestedListItemClass;
    /**
     * @hidden
     *  Reference to title element, it is used, to get title for condensed mode.
     * @type {?}
     */
    NestedLinkDirective.prototype.title;
    /**
     * Event that is thrown, when any keyboard event is dispatched on this element
     * @type {?}
     */
    NestedLinkDirective.prototype.keyboardTriggered;
    /**
     * Event that is thrown, when this element is clicked
     * @type {?}
     */
    NestedLinkDirective.prototype.clicked;
    /** @type {?} */
    NestedLinkDirective.prototype._selected;
    /**
     * Function that is called on click event dispatch on this element.
     * @type {?}
     */
    NestedLinkDirective.prototype.onClickCallback;
    /**
     *
     * @type {?}
     */
    NestedLinkDirective.prototype.controlSelected;
    /**
     * @hidden
     * Attribute controlled by the parent `NestedItemDirective`
     * @type {?}
     */
    NestedLinkDirective.prototype.expanded;
    /**
     * @hidden
     * Attribute controlled by the parent `NestedItemDirective`
     * @type {?}
     */
    NestedLinkDirective.prototype.hasChildren;
    /**
     * @type {?}
     * @private
     */
    NestedLinkDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NestedLinkDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NestedLinkDirective.prototype.nestedListStateService;
    /** @type {?} */
    NestedLinkDirective.prototype.changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,