/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/drag-and-drop/dnd-container/dnd-container.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { CdkDrag } from '@angular/cdk/drag-drop';
var DndContainerDirective = /** @class */ (function () {
    function DndContainerDirective(element) {
        this.element = element;
        /**
         * Class added to element, when it's dragged.
         */
        this.CLASS_WHEN_ELEMENT_DRAGGED = 'fd-dnd-on-drag';
        /**
         * Event thrown when the element is moved by 1px
         */
        this.moved = new EventEmitter();
        /**
         * Event thrown when the element is released
         */
        this.released = new EventEmitter();
        /**
         * Event thrown when the element is started to be dragged
         */
        this.started = new EventEmitter();
        /**
         * Whether this element should stick in one place, without changing position
         */
        this.stickInPlace = false;
    }
    /** @hidden */
    /**
     * @hidden
     * @param {?} isBefore
     * @param {?} listMode
     * @return {?}
     */
    DndContainerDirective.prototype.getElementChord = /**
     * @hidden
     * @param {?} isBefore
     * @param {?} listMode
     * @return {?}
     */
    function (isBefore, listMode) {
        /**
         * Takes distance from the beginning of window page
         * @type {?}
         */
        var rect = (/** @type {?} */ (this.element.nativeElement.getBoundingClientRect()));
        /** @type {?} */
        var position = isBefore ? 'before' : 'after';
        /**
         * Depending on the position, gets the left or right side of element
         * @type {?}
         */
        var x = rect.x + (isBefore || listMode ? 0 : this.element.nativeElement.offsetWidth);
        /** Vertically distance is counted by distance from top of the side + half of the element height */
        return {
            x: x,
            position: position,
            y: rect.y + (this.element.nativeElement.offsetHeight / 2),
            stickToPosition: this.stickInPlace
        };
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndContainerDirective.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.cdkDrag.moved.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onCdkMove(event);
        }));
        this.cdkDrag.released.subscribe((/**
         * @return {?}
         */
        function () {
            _this.onCdkDragReleased();
        }));
        this.cdkDrag.started.subscribe((/**
         * @return {?}
         */
        function () {
            _this.onCdkDragStart();
        }));
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} cdkMovedEvent
     * @return {?}
     */
    DndContainerDirective.prototype.onCdkMove = /**
     * @hidden
     * @param {?} cdkMovedEvent
     * @return {?}
     */
    function (cdkMovedEvent) {
        this.moved.emit(cdkMovedEvent);
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndContainerDirective.prototype.onCdkDragReleased = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** Remove class which is added, when element is dragged */
        this.element.nativeElement.classList.remove(this.CLASS_WHEN_ELEMENT_DRAGGED);
        this.released.emit();
        /** Resets the position of element. */
        this.cdkDrag.reset();
        /** Removes placeholder element */
        this.removePlaceholder();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndContainerDirective.prototype.onCdkDragStart = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** Adds class */
        this.element.nativeElement.classList.add(this.CLASS_WHEN_ELEMENT_DRAGGED);
        if (!this.placeholderElement) {
            this.createPlaceHolder();
        }
        this.started.emit();
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndContainerDirective.prototype.removePlaceholder = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.placeholderElement) {
            this.placeholderElement.remove();
            this.placeholderElement = null;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    DndContainerDirective.prototype.removeLine = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.lineElement) {
            this.lineElement.remove();
            this.lineElement = null;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} position
     * @param {?} listMode
     * @return {?}
     */
    DndContainerDirective.prototype.createLine = /**
     * @hidden
     * @param {?} position
     * @param {?} listMode
     * @return {?}
     */
    function (position, listMode) {
        /** Creating of line element */
        this.lineElement = document.createElement('DIV');
        if (listMode) {
            this.lineElement.classList.add('drop-area__line');
            this.lineElement.classList.add('drop-area__line--horizontal');
        }
        else {
            this.lineElement.classList.add('drop-area__line');
            this.lineElement.classList.add('drop-area__line--vertical');
        }
        if (position === 'after') {
            this.lineElement.classList.add('after');
        }
        if (position === 'before') {
            this.lineElement.classList.add('before');
        }
        /** Putting element to the container */
        this.element.nativeElement.appendChild(this.lineElement);
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    DndContainerDirective.prototype.createPlaceHolder = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        /**
         * Cloning container element
         * @type {?}
         */
        var clone = this.cdkDrag.element.nativeElement.cloneNode(true);
        /** Taking cloned element reference */
        this.placeholderElement = clone.firstChild.parentElement;
        this.placeholderElement.classList.add('fd-dnd-placeholder');
        /** Including element to the container */
        this.element.nativeElement.appendChild(clone);
    };
    DndContainerDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-dnd-container]',
                    host: {
                        'class': 'fd-dnd-container'
                    }
                },] }
    ];
    /** @nocollapse */
    DndContainerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DndContainerDirective.propDecorators = {
        moved: [{ type: Output }],
        released: [{ type: Output }],
        started: [{ type: Output }],
        stickInPlace: [{ type: Input }],
        cdkDrag: [{ type: ContentChild, args: [CdkDrag, { static: false },] }]
    };
    return DndContainerDirective;
}());
export { DndContainerDirective };
if (false) {
    /**
     * Class added to element, when it's dragged.
     * @type {?}
     */
    DndContainerDirective.prototype.CLASS_WHEN_ELEMENT_DRAGGED;
    /**
     * @type {?}
     * @private
     */
    DndContainerDirective.prototype.placeholderElement;
    /**
     * @type {?}
     * @private
     */
    DndContainerDirective.prototype.lineElement;
    /**
     * Event thrown when the element is moved by 1px
     * @type {?}
     */
    DndContainerDirective.prototype.moved;
    /**
     * Event thrown when the element is released
     * @type {?}
     */
    DndContainerDirective.prototype.released;
    /**
     * Event thrown when the element is started to be dragged
     * @type {?}
     */
    DndContainerDirective.prototype.started;
    /**
     * Whether this element should stick in one place, without changing position
     * @type {?}
     */
    DndContainerDirective.prototype.stickInPlace;
    /**
     * @hidden
     * @type {?}
     */
    DndContainerDirective.prototype.cdkDrag;
    /** @type {?} */
    DndContainerDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,