/**
 * @fileoverview added by tsickle
 * Generated from: lib/input-group/input-group-directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
var InputGroupInputDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputGroupInputDirective, _super);
    /** @hidden */
    function InputGroupInputDirective(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        _this.compact = false;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    InputGroupInputDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._addClassToElement('fd-input');
        this._addClassToElement('fd-input-group__input');
        if (this.compact) {
            this._addClassToElement('fd-input--compact');
        }
    };
    InputGroupInputDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-input-group-input]',
                },] }
    ];
    /** @nocollapse */
    InputGroupInputDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    InputGroupInputDirective.propDecorators = {
        compact: [{ type: Input }]
    };
    return InputGroupInputDirective;
}(AbstractFdNgxClass));
export { InputGroupInputDirective };
if (false) {
    /** @type {?} */
    InputGroupInputDirective.prototype.compact;
    /**
     * @type {?}
     * @private
     */
    InputGroupInputDirective.prototype.elementRef;
}
var InputGroupTextareaDirective = /** @class */ (function () {
    function InputGroupTextareaDirective() {
    }
    InputGroupTextareaDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-textarea-group-input]',
                },] }
    ];
    return InputGroupTextareaDirective;
}());
export { InputGroupTextareaDirective };
var InputGroupAddOnDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputGroupAddOnDirective, _super);
    /** @hidden */
    function InputGroupAddOnDirective(elementRef, renderer) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        /**
         * @hidden
         */
        _this.fdInputGroupAddonClass = true;
        /**
         * The placement of the add-on. Options include *before* and *after*
         */
        _this.placement = 'after';
        /**
         * Whether to apply compact mode to the AddOn.
         */
        _this.compact = false;
        /**
         * Whether the icon add-on or the text add-on is a button.
         */
        _this.button = false;
        return _this;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    InputGroupAddOnDirective.prototype._setProperties = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._addClassToElement('fd-input-group__addon');
        if (this.button) {
            this._addClassToElement('fd-input-group__addon--button');
        }
        if (this.type) {
            this._addClassToElement('fd-input-group__addon--' + this.type);
        }
        if (this.state) {
            this._addClassToElement('is-' + this.state);
        }
        if (this.compact) {
            this._addClassToElement('fd-input-group__addon--compact');
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    InputGroupAddOnDirective.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        /**
         * Add fd-input-group__button to button child element
         * @type {?}
         */
        var button = this.elementRef.nativeElement.querySelector('button');
        if (button) {
            this.renderer.addClass(button, 'fd-input-group__button');
        }
    };
    InputGroupAddOnDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-input-group-addon]'
                },] }
    ];
    /** @nocollapse */
    InputGroupAddOnDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    InputGroupAddOnDirective.propDecorators = {
        fdInputGroupAddonClass: [{ type: HostBinding, args: ['class.fd-input-group__addon',] }],
        placement: [{ type: Input }],
        compact: [{ type: Input }],
        type: [{ type: Input }],
        state: [{ type: Input }],
        button: [{ type: Input }]
    };
    return InputGroupAddOnDirective;
}(AbstractFdNgxClass));
export { InputGroupAddOnDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.fdInputGroupAddonClass;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.placement;
    /**
     * Whether to apply compact mode to the AddOn.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.compact;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.type;
    /**
     *  The state of the form control - applies css classes.
     *  Can be `valid`, `invalid`, `warning`, `information` or blank for default.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.state;
    /**
     * Whether the icon add-on or the text add-on is a button.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.button;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC1kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUlwRTtJQUk4QyxvREFBa0I7SUFlNUQsY0FBYztJQUNkLGtDQUFvQixVQUFzQjtRQUExQyxZQUNJLGtCQUFNLFVBQVUsQ0FBQyxTQUNwQjtRQUZtQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQWIxQyxhQUFPLEdBQVksS0FBSyxDQUFDOztJQWV6QixDQUFDO0lBYkQsY0FBYzs7Ozs7SUFDZCxpREFBYzs7OztJQUFkO1FBQ0ksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7Z0JBaEJKLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLHdCQUF3QjtpQkFDckM7Ozs7Z0JBUnFDLFVBQVU7OzswQkFXM0MsS0FBSzs7SUFrQlYsK0JBQUM7Q0FBQSxBQXhCRCxDQUk4QyxrQkFBa0IsR0FvQi9EO1NBcEJZLHdCQUF3Qjs7O0lBRWpDLDJDQUN5Qjs7Ozs7SUFhYiw4Q0FBOEI7O0FBTzlDO0lBQUE7SUFJMkMsQ0FBQzs7Z0JBSjNDLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLDJCQUEyQjtpQkFDeEM7O0lBQzBDLGtDQUFDO0NBQUEsQUFKNUMsSUFJNEM7U0FBL0IsMkJBQTJCO0FBR3hDO0lBSThDLG9EQUFrQjtJQW9ENUQsY0FBYztJQUNkLGtDQUNZLFVBQXNCLEVBQ3RCLFFBQW1CO1FBRi9CLFlBSUksa0JBQU0sVUFBVSxDQUFDLFNBQ3BCO1FBSlcsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsY0FBUSxHQUFSLFFBQVEsQ0FBVzs7OztRQW5EL0IsNEJBQXNCLEdBQVksSUFBSSxDQUFDOzs7O1FBTXZDLGVBQVMsR0FBd0IsT0FBTyxDQUFDOzs7O1FBSXpDLGFBQU8sR0FBWSxLQUFLLENBQUM7Ozs7UUFtQnpCLFlBQU0sR0FBWSxLQUFLLENBQUM7O0lBeUJ4QixDQUFDO0lBdkJELGNBQWM7Ozs7O0lBQ2QsaURBQWM7Ozs7SUFBZDtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsRTtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdDQUFnQyxDQUFDLENBQUE7U0FDNUQ7SUFDTCxDQUFDO0lBVUQsY0FBYzs7Ozs7SUFDZCxxREFBa0I7Ozs7SUFBbEI7Ozs7O1lBRVUsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDcEUsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztTQUM1RDtJQUNMLENBQUM7O2dCQXZFSixTQUFTLFNBQUM7O29CQUVQLFFBQVEsRUFBRSx3QkFBd0I7aUJBQ3JDOzs7O2dCQTFDcUMsVUFBVTtnQkFBc0IsU0FBUzs7O3lDQThDMUUsV0FBVyxTQUFDLDZCQUE2Qjs0QkFNekMsS0FBSzswQkFJTCxLQUFLO3VCQU1MLEtBQUs7d0JBT0wsS0FBSzt5QkFNTCxLQUFLOztJQXFDViwrQkFBQztDQUFBLEFBekVELENBSThDLGtCQUFrQixHQXFFL0Q7U0FyRVksd0JBQXdCOzs7Ozs7SUFHakMsMERBQ3VDOzs7OztJQUt2Qyw2Q0FDeUM7Ozs7O0lBR3pDLDJDQUN5Qjs7Ozs7SUFLekIsd0NBQ2E7Ozs7OztJQU1iLHlDQUNrQjs7Ozs7SUFLbEIsMENBQ3dCOzs7OztJQXFCcEIsOENBQThCOzs7OztJQUM5Qiw0Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZkTmd4Q2xhc3MgfSBmcm9tICcuLi91dGlscy9hYnN0cmFjdC1mZC1uZ3gtY2xhc3MnO1xuaW1wb3J0IHsgSW5wdXRHcm91cFBsYWNlbWVudCB9IGZyb20gJy4vaW5wdXQtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1TdGF0ZXMgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udHJvbC9mb3JtLXN0YXRlcyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1pbnB1dC1ncm91cC1pbnB1dF0nLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwSW5wdXREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdEZkTmd4Q2xhc3Mge1xuXG4gICAgQElucHV0KClcbiAgICBjb21wYWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9zZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQnKTtcbiAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19pbnB1dCcpO1xuICAgICAgICBpZiAodGhpcy5jb21wYWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtLWNvbXBhY3QnKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZik7XG4gICAgfVxuXG59XG5cblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLXRleHRhcmVhLWdyb3VwLWlucHV0XScsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBUZXh0YXJlYURpcmVjdGl2ZSAge31cblxuXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtaW5wdXQtZ3JvdXAtYWRkb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwQWRkT25EaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdEZkTmd4Q2xhc3MgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1pbnB1dC1ncm91cF9fYWRkb24nKVxuICAgIGZkSW5wdXRHcm91cEFkZG9uQ2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlbWVudCBvZiB0aGUgYWRkLW9uLiBPcHRpb25zIGluY2x1ZGUgKmJlZm9yZSogYW5kICphZnRlcipcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHBsYWNlbWVudDogSW5wdXRHcm91cFBsYWNlbWVudCA9ICdhZnRlcic7XG5cbiAgICAvKiogV2hldGhlciB0byBhcHBseSBjb21wYWN0IG1vZGUgdG8gdGhlIEFkZE9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29tcGFjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlbWVudCBvZiB0aGUgYWRkLW9uLiBPcHRpb25zIGluY2x1ZGUgKmJlZm9yZSogYW5kICphZnRlcipcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqICBUaGUgc3RhdGUgb2YgdGhlIGZvcm0gY29udHJvbCAtIGFwcGxpZXMgY3NzIGNsYXNzZXMuXG4gICAgICogIENhbiBiZSBgdmFsaWRgLCBgaW52YWxpZGAsIGB3YXJuaW5nYCwgYGluZm9ybWF0aW9uYCBvciBibGFuayBmb3IgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHN0YXRlOiBGb3JtU3RhdGVzO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgaWNvbiBhZGQtb24gb3IgdGhlIHRleHQgYWRkLW9uIGlzIGEgYnV0dG9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9zZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uJyk7XG4gICAgICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbi0tYnV0dG9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbi0tJyArIHRoaXMudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdpcy0nICsgdGhpcy5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29tcGFjdCkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2ZkLWlucHV0LWdyb3VwX19hZGRvbi0tY29tcGFjdCcpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICAgICkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLyoqIEFkZCBmZC1pbnB1dC1ncm91cF9fYnV0dG9uIHRvIGJ1dHRvbiBjaGlsZCBlbGVtZW50ICovXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpO1xuICAgICAgICBpZiAoYnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGJ1dHRvbiwgJ2ZkLWlucHV0LWdyb3VwX19idXR0b24nKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19