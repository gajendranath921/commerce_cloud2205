/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/calendar-views/calendar-month-view/calendar-month-view.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, ViewEncapsulation, EventEmitter, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { FdDate } from '../../models/fd-date';
import { CalendarI18n } from '../../i18n/calendar-i18n';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CalendarService } from '../../calendar.service';
/**
 * Component representing the month view of the calendar.
 */
export class CalendarMonthViewComponent {
    /**
     * @param {?} eRef
     * @param {?} cdRef
     * @param {?} calendarI18n
     * @param {?} calendarService
     */
    constructor(eRef, cdRef, calendarI18n, calendarService) {
        this.eRef = eRef;
        this.cdRef = cdRef;
        this.calendarI18n = calendarI18n;
        this.calendarService = calendarService;
        /**
         * A number offset used to achieve the 1-12 representation of the calendar
         */
        this._monthOffset = 1;
        this._amountOfColPerRow = 4;
        /**
         * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * An event fired when a new month is selected
         */
        this.monthClicked = new EventEmitter();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;
        this.refreshShortMonthNames();
        this.calendarService.onFocusIdChange
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        index => this.focusElement('#' + this.id + '-fd-month-' + index)));
        this.calendarService.onKeySelect
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        index => this.selectMonth(index)));
        this.calendarI18n.i18nChange
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        () => this.refreshShortMonthNames()));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    /**
     * Get a number (1-12) representing the current month
     * @return {?}
     */
    get currentMonth() {
        return FdDate.getToday().month;
    }
    /**
     * Getter for the private class member _monthOffset
     * @return {?}
     */
    get monthOffset() {
        return this._monthOffset;
    }
    /**
     * Method for handling the mouse click event when a month is selected
     * @param {?} selectedMonth
     * @param {?=} event
     * @return {?}
     */
    selectMonth(selectedMonth, event) {
        if (event) {
            event.stopPropagation();
        }
        this.monthSelected = selectedMonth + this.monthOffset;
        this.monthClicked.emit(this.monthSelected);
    }
    /**
     * Method for handling the keyboard events (a11y)
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    onKeydownMonthHandler(event, index) {
        this.calendarService.onKeydownHandler(event, index);
    }
    /**
     * Method that allows to focus elements inside this component
     * @param {?} elementSelector
     * @return {?}
     */
    focusElement(elementSelector) {
        /** @type {?} */
        const elementToFocus = this.eRef.nativeElement.querySelector(elementSelector);
        if (elementToFocus) {
            elementToFocus.focus();
        }
    }
    /**
     * Method returning id of month cell
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    getId(rowIndex, colIndex) {
        return rowIndex * this._amountOfColPerRow + colIndex;
    }
    /**
     * Method that checks if this is current month
     * @param {?} id
     * @return {?}
     */
    isCurrent(id) {
        return id + this._monthOffset === this.currentMonth;
    }
    /**
     * Method that check if this is selected month
     * @param {?} id
     * @return {?}
     */
    isSelected(id) {
        return id + this._monthOffset === this.monthSelected;
    }
    /**
     * Method that returns grid of short month names from currently provided calendarI18n service
     * @return {?}
     */
    get shortMonthNames() {
        return this._shortMonthNames;
    }
    /**
     * Method that returns the full name of month for grid element.
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    getFullMonthName(rowIndex, colIndex) {
        /** @type {?} */
        const index = this.getId(rowIndex, colIndex);
        return this._fullMonthNames[index];
    }
    /**
     * Method that rewrite short month names, used mostly in case of i18n service language change
     * @private
     * @return {?}
     */
    refreshShortMonthNames() {
        /** @type {?} */
        const monthNames = [...this.calendarI18n.getAllShortMonthNames()];
        this._fullMonthNames = [...this.calendarI18n.getAllFullMonthNames()];
        /** @type {?} */
        const twoDimensionMonthNames = [];
        /** Creating 2d grid */
        while (monthNames.length) {
            twoDimensionMonthNames.push(monthNames.splice(0, this._amountOfColPerRow));
        }
        this._shortMonthNames = twoDimensionMonthNames;
        this.cdRef.markForCheck();
    }
}
CalendarMonthViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-calendar-month-view',
                template: "<div class=\"fd-calendar__months\">\n    <table class=\"fd-calendar__table\" role=\"grid\">\n        <tbody class=\"fd-calendar__group\">\n        <tr class=\"fd-calendar__row\"\n            *ngFor=\"let colMonths of shortMonthNames; let rowIndex = index\">\n            <td class=\"fd-calendar__item\"\n                *ngFor=\"let month of colMonths; let colIndex = index\"\n                [ngClass]=\"{\n                    'fd-calendar__item--current': isCurrent(getId(rowIndex, colIndex)),\n                    'is-selected': isSelected(getId(rowIndex, colIndex))\n                }\"\n                [attr.tabIndex]=\"isSelected(getId(rowIndex, colIndex)) ? 0 : -1\"\n                [attr.id]=\"id + '-fd-month-' + getId(rowIndex, colIndex)\"\n                (keydown)=\"onKeydownMonthHandler($event, getId(rowIndex, colIndex))\"\n                (click)=\"selectMonth(getId(rowIndex, colIndex), $event)\">\n                <span role=\"button\" class=\"fd-calendar__text\" [attr.aria-label]=\"getFullMonthName(rowIndex, colIndex)\">\n                    {{ month }}\n                </span>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[attr.id]': 'id + "-month-view"'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
CalendarMonthViewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: CalendarI18n },
    { type: CalendarService }
];
CalendarMonthViewComponent.propDecorators = {
    id: [{ type: Input }],
    monthSelected: [{ type: Input }],
    focusEscapeFunction: [{ type: Input }],
    monthClicked: [{ type: Output }]
};
if (false) {
    /**
     * A number offset used to achieve the 1-12 representation of the calendar
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype._monthOffset;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype._amountOfColPerRow;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype._shortMonthNames;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype._fullMonthNames;
    /**
     * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype.onDestroy$;
    /**
     * The id of the calendar passed from the parent component
     * @type {?}
     */
    CalendarMonthViewComponent.prototype.id;
    /**
     * A number (1-12) representing the selected month
     * @type {?}
     */
    CalendarMonthViewComponent.prototype.monthSelected;
    /**
     * A function that handles escape focus
     * @type {?}
     */
    CalendarMonthViewComponent.prototype.focusEscapeFunction;
    /**
     * An event fired when a new month is selected
     * @type {?}
     */
    CalendarMonthViewComponent.prototype.monthClicked;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype.eRef;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype.calendarI18n;
    /**
     * @type {?}
     * @private
     */
    CalendarMonthViewComponent.prototype.calendarService;
}
//# sourceMappingURL=data:application/json;base64,