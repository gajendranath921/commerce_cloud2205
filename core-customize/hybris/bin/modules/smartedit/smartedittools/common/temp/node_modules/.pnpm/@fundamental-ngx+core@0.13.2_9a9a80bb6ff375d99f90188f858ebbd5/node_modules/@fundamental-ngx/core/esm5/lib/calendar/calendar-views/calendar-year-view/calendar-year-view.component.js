/**
 * @fileoverview added by tsickle
 * Generated from: lib/calendar/calendar-views/calendar-year-view/calendar-year-view.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Output, Input, EventEmitter, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { FdDate } from '../../models/fd-date';
import { takeUntil } from 'rxjs/operators';
import { CalendarService } from '../../calendar.service';
import { Subject } from 'rxjs';
/**
 * Component representing the YearView of the Calendar Component.
 */
var CalendarYearViewComponent = /** @class */ (function () {
    /** @hidden */
    function CalendarYearViewComponent(eRef, changeDetectorRef, calendarService) {
        this.eRef = eRef;
        this.changeDetectorRef = changeDetectorRef;
        this.calendarService = calendarService;
        this._amountOfColPerRow = 4;
        /**
         * Parameter storing the year of the present day.
         */
        this.currentYear = FdDate.getToday().year;
        /**
         * Parameter storing first shown year on list
         */
        this.firstYearInList = this.currentYear;
        /**
         * An RxJS Subject that will kill the data stream upon componentâ€™s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * Event fired when a year is selected.
         */
        this.yearClicked = new EventEmitter();
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    CalendarYearViewComponent.prototype.ngAfterViewChecked = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.newFocusedYearId) {
            this.focusElement(this.newFocusedYearId);
            this.newFocusedYearId = null;
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    CalendarYearViewComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.firstYearInList = this.yearSelected;
        this.constructYearGrid();
        this.calendarService.onFocusIdChange
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            _this.newFocusedYearId = _this.id + '-fd-year-' + index;
            _this.focusElement(_this.newFocusedYearId);
        }));
        this.calendarService.focusEscapeFunction = this.focusEscapeFunction;
        this.calendarService.onKeySelect
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.selectYear(_this.getYearList()[index]); }));
        this.calendarService.onListStartApproach
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.loadPreviousYearList(); }));
        this.calendarService.onListEndApproach
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.loadNextYearList(); }));
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    CalendarYearViewComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    /**
     * Method that returns active cell, which means:
     * if there is any selected year, return selected year
     * if there is no selected year, but there is current year, return current year
     * if there is no current year, or selected, return first one
     */
    /**
     * Method that returns active cell, which means:
     * if there is any selected year, return selected year
     * if there is no selected year, but there is current year, return current year
     * if there is no current year, or selected, return first one
     * @private
     * @return {?}
     */
    CalendarYearViewComponent.prototype.getActiveYear = /**
     * Method that returns active cell, which means:
     * if there is any selected year, return selected year
     * if there is no selected year, but there is current year, return current year
     * if there is no current year, or selected, return first one
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedYear = this.getYearList().find((/**
         * @param {?} year
         * @return {?}
         */
        function (year) { return year === _this.yearSelected; }));
        if (selectedYear) {
            return selectedYear;
        }
        /** @type {?} */
        var currentYear = this.getYearList().find((/**
         * @param {?} year
         * @return {?}
         */
        function (year) { return year === _this.currentYear; }));
        if (currentYear) {
            return currentYear;
        }
        return this.calendarYearListGrid[0][0];
    };
    /** Method for handling the keyboard navigation. */
    /**
     * Method for handling the keyboard navigation.
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    CalendarYearViewComponent.prototype.onKeydownYearHandler = /**
     * Method for handling the keyboard navigation.
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.calendarService.onKeydownHandler(event, index);
    };
    /** Method used to load the previous 12 years to be displayed. */
    /**
     * Method used to load the previous 12 years to be displayed.
     * @return {?}
     */
    CalendarYearViewComponent.prototype.loadNextYearList = /**
     * Method used to load the previous 12 years to be displayed.
     * @return {?}
     */
    function () {
        this.firstYearInList += 12;
        this.constructYearGrid();
    };
    /** Method used to load the next 12 years to be displayed. */
    /**
     * Method used to load the next 12 years to be displayed.
     * @return {?}
     */
    CalendarYearViewComponent.prototype.loadPreviousYearList = /**
     * Method used to load the next 12 years to be displayed.
     * @return {?}
     */
    function () {
        this.firstYearInList -= 12;
        this.constructYearGrid();
    };
    /** Method allowing focusing on elements within this component. */
    /**
     * Method allowing focusing on elements within this component.
     * @param {?} elementSelector
     * @return {?}
     */
    CalendarYearViewComponent.prototype.focusElement = /**
     * Method allowing focusing on elements within this component.
     * @param {?} elementSelector
     * @return {?}
     */
    function (elementSelector) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var elementToFocus = _this.eRef.nativeElement.querySelector('#' + elementSelector);
            if (elementToFocus) {
                _this.eRef.nativeElement.querySelector('#' + elementSelector).focus();
            }
        }), 0);
    };
    /** Method that sends the year to the parent component when it is clicked. */
    /**
     * Method that sends the year to the parent component when it is clicked.
     * @param {?} selectedYear
     * @param {?=} event
     * @return {?}
     */
    CalendarYearViewComponent.prototype.selectYear = /**
     * Method that sends the year to the parent component when it is clicked.
     * @param {?} selectedYear
     * @param {?=} event
     * @return {?}
     */
    function (selectedYear, event) {
        if (event) {
            event.stopPropagation();
        }
        this.yearSelected = selectedYear;
        this.yearClicked.emit(this.yearSelected);
    };
    /**
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    CalendarYearViewComponent.prototype.getId = /**
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    function (rowIndex, colIndex) {
        return rowIndex * this._amountOfColPerRow + colIndex;
    };
    /** @hidden */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    CalendarYearViewComponent.prototype.constructYearGrid = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var displayedYearsAmount = 12;
        /** @type {?} */
        var calendarYearList = [];
        this.calendarYearListGrid = [];
        for (var x = 0; x < displayedYearsAmount; ++x) {
            calendarYearList.push(this.firstYearInList + x);
        }
        /** Creating 2d grid */
        while (calendarYearList.length) {
            this.calendarYearListGrid.push(calendarYearList.splice(0, this._amountOfColPerRow));
        }
        this.activeYear = this.getActiveYear();
        this.changeDetectorRef.markForCheck();
    };
    /** Returns transformed 1d array from 2d year grid. */
    /**
     * Returns transformed 1d array from 2d year grid.
     * @private
     * @return {?}
     */
    CalendarYearViewComponent.prototype.getYearList = /**
     * Returns transformed 1d array from 2d year grid.
     * @private
     * @return {?}
     */
    function () {
        return [].concat.apply([], this.calendarYearListGrid);
    };
    CalendarYearViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fd-calendar-year-view',
                    template: "<div class=\"fd-calendar__years\">\n    <table class=\"fd-calendar__table\" role=\"grid\">\n        <tbody class=\"fd-calendar__group\">\n        <tr class=\"fd-calendar__row\"\n            *ngFor=\"let colYears of calendarYearListGrid; let rowIndex = index\">\n            <td class=\"fd-calendar__item\"\n                *ngFor=\"let year of colYears; let colIndex = index\"\n                [ngClass]=\"{\n                    'is-selected': (year == yearSelected),\n                    'fd-calendar__item--current': (year == currentYear)\n                }\"\n                [attr.id]=\"id + '-fd-year-' + getId(rowIndex, colIndex)\"\n                [attr.tabindex]=\"year === activeYear ? 0 : -1\"\n                (keydown)=\"onKeydownYearHandler($event, getId(rowIndex, colIndex))\"\n                (click)=\"selectYear(year, $event)\">\n                <span role=\"button\" class=\"fd-calendar__text\">\n                    {{ year }}\n                </span>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[attr.id]': 'id + "-year-view"'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CalendarYearViewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: CalendarService }
    ]; };
    CalendarYearViewComponent.propDecorators = {
        id: [{ type: Input }],
        focusEscapeFunction: [{ type: Input }],
        yearSelected: [{ type: Input }],
        yearClicked: [{ type: Output }]
    };
    return CalendarYearViewComponent;
}());
export { CalendarYearViewComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype._amountOfColPerRow;
    /**
     * @hidden
     *  This variable is used to define which year from calendarYearList should be focusable by tab key
     * @type {?}
     */
    CalendarYearViewComponent.prototype.activeYear;
    /**
     * Parameter that stores the dozen of years that are currently being displayed.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.calendarYearListGrid;
    /**
     * Parameter storing the year of the present day.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.currentYear;
    /**
     * Parameter storing first shown year on list
     * @type {?}
     */
    CalendarYearViewComponent.prototype.firstYearInList;
    /**
     * An RxJS Subject that will kill the data stream upon componentâ€™s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype.onDestroy$;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype.newFocusedYearId;
    /**
     * Parameter used in id of years used for help with focusing on the correct element during keyboard navigation.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.id;
    /**
     * Function that is called when the focus would escape the element.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.focusEscapeFunction;
    /**
     * Parameter holding the year that is currently selected.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.yearSelected;
    /**
     * Event fired when a year is selected.
     * @type {?}
     */
    CalendarYearViewComponent.prototype.yearClicked;
    /**
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype.eRef;
    /**
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    CalendarYearViewComponent.prototype.calendarService;
}
//# sourceMappingURL=data:application/json;base64,