/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover-directive/popover.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, HostBinding, Injector, Input, Output, Renderer2 } from '@angular/core';
import { PopoverContainer } from './popover-container';
import Popper from 'popper.js';
/**
 * Directive which manages the popper and popover components of the library.
 * It can be attached to any element. To bind it to a body, use the following syntax.
 * ```html
 * <div [fdPopover]="template">Control Element</div>
 * <ng-template #template>
 *     Popover Body
 * </ng-template>
 * ```
 */
var PopoverDirective = /** @class */ (function () {
    /** @hidden */
    function PopoverDirective(elRef, cdRef, resolver, injector, appRef, renderer) {
        this.elRef = elRef;
        this.cdRef = cdRef;
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
        this.renderer = renderer;
        /**
         * Whether the popover is open. Can be used through two-way binding.
         */
        this.isOpen = false;
        /**
         * The trigger events that will open/close the popover.
         *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
         */
        this.triggers = ['click'];
        /**
         * Whether the popover should display the default arrow.
         */
        this.noArrow = true;
        /**
         * Whether the popover should be focusTrapped.
         */
        this.focusTrapped = false;
        /**
         * Whether the popover should close when the escape key is pressed.
         */
        this.closeOnEscapeKey = true;
        /**
         * Whether the popover is disabled.
         */
        this.disabled = false;
        /**
         * Whether the popover should close when a click is made outside its boundaries.
         */
        this.closeOnOutsideClick = true;
        /**
         * The element to which the popover should be appended.
         */
        this.appendTo = 'body';
        /**
         * List of additional classes that will be added to popover container element
         */
        this.additionalClasses = [];
        /**
         * The Popper.js options to attach to this popover.
         * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
         */
        this.options = {
            placement: 'bottom-start',
            modifiers: {
                preventOverflow: {
                    enabled: true,
                    escapeWithReference: true,
                    boundariesElement: 'scrollParent'
                }
            }
        };
        /**
         * Event emitted when the state of the isOpen property changes.
         */
        this.isOpenChange = new EventEmitter();
        this.eventRef = [];
        this.isSetup = false;
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    PopoverDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            this.open();
        }
        this.setupFillBehaviour();
        this.initPlacement();
        this.addTriggerListeners();
        this.isSetup = true;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    PopoverDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.popper) {
            this.popper.destroy();
        }
        if (this.containerRef) {
            this.destroyContainer();
        }
        this.destroyTriggerListeners();
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    PopoverDirective.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.isSetup) {
            return;
        }
        if (changes.triggers) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.destroyTriggerListeners();
                _this.addTriggerListeners();
            }));
        }
        if (changes.isOpen) {
            if (changes.isOpen.currentValue) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.isOpen = false;
                    _this.open(false);
                }));
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.isOpen = true;
                    _this.close(false);
                }));
            }
        }
        if (changes.placement) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initPlacement();
            }));
        }
        if (changes.fillControl) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setupFillBehaviour();
            }));
        }
    };
    /**
     * Toggles the popover open state.
     */
    /**
     * Toggles the popover open state.
     * @param {?=} fireEvent
     * @return {?}
     */
    PopoverDirective.prototype.toggle = /**
     * Toggles the popover open state.
     * @param {?=} fireEvent
     * @return {?}
     */
    function (fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        if (this.isOpen) {
            this.close(fireEvent);
        }
        else {
            this.open(fireEvent);
        }
    };
    /**
     * Opens the popover.
     */
    /**
     * Opens the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    PopoverDirective.prototype.open = /**
     * Opens the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    function (fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        if (!this.isOpen && !this.disabled) {
            this.createContainer();
            this._addListenerForOutsideClick();
            this.isOpen = true;
            if (fireEvent) {
                this.isOpenChange.emit(this.isOpen);
            }
        }
    };
    /**
     * Closes the popover.
     */
    /**
     * Closes the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    PopoverDirective.prototype.close = /**
     * Closes the popover.
     * @param {?=} fireEvent
     * @return {?}
     */
    function (fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        if (this._outsideClickEventReference) {
            this._outsideClickEventReference();
            this._outsideClickEventReference = null;
        }
        if (this.isOpen) {
            this.destroyContainer();
            this.isOpen = false;
            if (fireEvent) {
                this.isOpenChange.emit(this.isOpen);
            }
        }
    };
    /**
     * Forces an update of the popover's positioning calculation.
     */
    /**
     * Forces an update of the popover's positioning calculation.
     * @return {?}
     */
    PopoverDirective.prototype.updatePopper = /**
     * Forces an update of the popover's positioning calculation.
     * @return {?}
     */
    function () {
        if (this.popper) {
            this.popper.scheduleUpdate();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.createContainer = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        var _this = this;
        if (this.containerRef) {
            return;
        }
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(PopoverContainer);
        this.containerRef = factory.create(this.injector);
        // Set instance properties
        this.containerRef.instance.context = this;
        this.containerRef.instance.content = this.content;
        this.containerRef.instance.focusTrapped = this.focusTrapped;
        this.containerRef.instance.noArrow = this.noArrow;
        this.containerRef.instance.closeOnEscapeKey = this.closeOnEscapeKey;
        if (this.additionalClasses) {
            (_a = this.containerRef.location.nativeElement.classList).add.apply(_a, tslib_1.__spread(this.additionalClasses));
        }
        this.appRef.attachView(this.containerRef.hostView);
        /** @type {?} */
        var setupRef = this.containerRef.instance.isSetup.subscribe((/**
         * @return {?}
         */
        function () {
            _this.createPopper();
            setupRef.unsubscribe();
        }));
        /** @type {?} */
        var containerEl = (/** @type {?} */ (((/** @type {?} */ (this.containerRef.hostView))).rootNodes[0]));
        if (this.appendTo === 'body') {
            document.body.appendChild(containerEl);
        }
        else {
            this.appendTo.appendChild(containerEl);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.destroyTriggerListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.eventRef && this.eventRef.length > 0) {
            this.eventRef.forEach((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                event();
            }));
            this.eventRef = [];
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.addTriggerListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.triggers && this.triggers.length > 0) {
            this.triggers.forEach((/**
             * @param {?} trigger
             * @return {?}
             */
            function (trigger) {
                _this.eventRef.push(_this.renderer.listen(_this.elRef.nativeElement, trigger, (/**
                 * @return {?}
                 */
                function () {
                    _this.toggle();
                })));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.destroyContainer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.containerRef) {
            this.appRef.detachView(this.containerRef.hostView);
            this.containerRef.destroy();
            this.containerRef = null;
        }
        if (this.popper) {
            this.popper.destroy();
            this.popper = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.createPopper = /**
     * @private
     * @return {?}
     */
    function () {
        this.popper = new Popper((/** @type {?} */ (this.elRef.nativeElement)), (/** @type {?} */ (this.containerRef.location.nativeElement)), this.options);
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    PopoverDirective.prototype.fillReference = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        data.offsets.popper.left = data.offsets.reference.left;
        data.offsets.popper.right = data.offsets.reference.right;
        data.offsets.popper.width = data.styles.width = data.offsets.reference.width;
        return data;
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    PopoverDirective.prototype.atLeastReference = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        data.offsets.popper.left = data.offsets.reference.left;
        data.offsets.popper.right = data.offsets.reference.right;
        data.styles.minWidth = data.offsets.reference.width + 'px';
        return data;
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.initPlacement = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.placement) {
            if (this.options) {
                this.options.placement = this.placement;
            }
            else {
                this.options = { placement: this.placement };
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype.setupFillBehaviour = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fillControlMode) {
            if (this.options && this.options.modifiers) {
                this.options.modifiers.fillReference = {
                    enabled: true,
                    fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,
                    order: 840
                };
            }
            else {
                this.options = {
                    modifiers: {
                        fillReference: {
                            enabled: true,
                            fn: this.fillControlMode === 'equal' ? this.fillReference : this.atLeastReference,
                            order: 840
                        }
                    }
                };
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopoverDirective.prototype._addListenerForOutsideClick = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._outsideClickEventReference) {
            this._outsideClickEventReference = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this._shouldClose(event)) {
                    _this.close();
                    event.preventDefault();
                    event.stopPropagation();
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PopoverDirective.prototype._shouldClose = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.containerRef &&
            this.isOpen &&
            this.closeOnOutsideClick &&
            event.target !== this.elRef.nativeElement &&
            !this.elRef.nativeElement.contains(event.target) &&
            !this.containerRef.location.nativeElement.contains(event.target);
    };
    PopoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fdPopover]'
                },] }
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: Renderer2 }
    ]; };
    PopoverDirective.propDecorators = {
        content: [{ type: Input, args: ['fdPopover',] }],
        isOpen: [{ type: Input }],
        triggers: [{ type: Input }],
        noArrow: [{ type: Input }],
        placement: [{ type: Input }],
        focusTrapped: [{ type: Input }],
        closeOnEscapeKey: [{ type: Input }],
        disabled: [{ type: Input }, { type: HostBinding, args: ['class.fd-popover-custom--disabled',] }],
        closeOnOutsideClick: [{ type: Input }],
        appendTo: [{ type: Input }],
        additionalClasses: [{ type: Input }],
        options: [{ type: Input }],
        fillControlMode: [{ type: Input }],
        isOpenChange: [{ type: Output }]
    };
    return PopoverDirective;
}());
export { PopoverDirective };
if (false) {
    /**
     * Content of the popover. Used through the actual directive tag. Accepts strings or TemplateRefs.
     * @type {?}
     */
    PopoverDirective.prototype.content;
    /**
     * Whether the popover is open. Can be used through two-way binding.
     * @type {?}
     */
    PopoverDirective.prototype.isOpen;
    /**
     * The trigger events that will open/close the popover.
     *  Accepts any [HTML DOM Events](https://www.w3schools.com/jsref/dom_obj_event.asp).
     * @type {?}
     */
    PopoverDirective.prototype.triggers;
    /**
     * Whether the popover should display the default arrow.
     * @type {?}
     */
    PopoverDirective.prototype.noArrow;
    /**
     * The placement of the popover. It can be one of: top, top-start, top-end, bottom,
     *  bottom-start, bottom-end, right, right-start, right-end, left, left-start, left-end.
     * @type {?}
     */
    PopoverDirective.prototype.placement;
    /**
     * Whether the popover should be focusTrapped.
     * @type {?}
     */
    PopoverDirective.prototype.focusTrapped;
    /**
     * Whether the popover should close when the escape key is pressed.
     * @type {?}
     */
    PopoverDirective.prototype.closeOnEscapeKey;
    /**
     * Whether the popover is disabled.
     * @type {?}
     */
    PopoverDirective.prototype.disabled;
    /**
     * Whether the popover should close when a click is made outside its boundaries.
     * @type {?}
     */
    PopoverDirective.prototype.closeOnOutsideClick;
    /**
     * The element to which the popover should be appended.
     * @type {?}
     */
    PopoverDirective.prototype.appendTo;
    /**
     * List of additional classes that will be added to popover container element
     * @type {?}
     */
    PopoverDirective.prototype.additionalClasses;
    /**
     * The Popper.js options to attach to this popover.
     * See the [Popper.js Documentation](https://popper.js.org/popper-documentation.html) for details.
     * @type {?}
     */
    PopoverDirective.prototype.options;
    /**
     * Preset options for the popover body width.
     * * `at-least` will apply a minimum width to the body equivalent to the width of the control.
     * * `equal` will apply a width to the body equivalent to the width of the control.
     * * Leave blank for no effect.
     * @type {?}
     */
    PopoverDirective.prototype.fillControlMode;
    /**
     * Event emitted when the state of the isOpen property changes.
     * @type {?}
     */
    PopoverDirective.prototype.isOpenChange;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.containerRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.popper;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.eventRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.isSetup;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._outsideClickEventReference;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,