/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/abstract-fd-ngx-class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
/*
 This abstract class allows the user to set their own custom styles on a Fundamental NGX directive, in addition to the
 styles the library needs to add itself.
 When library styles were added through the directive's host: {'[class]'} property, any styles the user added would be
 overwritten.  By extending this class, we instead add library styles to the user's classList rather than replace them.
 */
/**
 * @hidden
 * @abstract
 */
export class AbstractFdNgxClass {
    /**
     * @hidden
     * @protected
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this._elementRef = elementRef;
        this._setProperties();
    }
    /**
     * @param {?} className
     * @return {?}
     */
    _setClassToElement(className) {
        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.value = `${className} ${this.class}`;
    }
    /**
     * @return {?}
     */
    _clearElementClass() {
        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.value = '';
    }
    /**
     * @hidden
     * @param {?} className
     * @return {?}
     */
    _addClassToElement(className) {
        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.add(...className.split(' '));
    }
    /**
     * @hidden
     * @param {?} attribute
     * @param {?} value
     * @return {?}
     */
    _addStyleToElement(attribute, value) {
        ((/** @type {?} */ (this._elementRef.nativeElement))).style[attribute] = value;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        const classList = ((/** @type {?} */ (this._elementRef.nativeElement))).classList;
        while (classList.length > 0) {
            classList.remove(classList.item(0));
        }
        if (this.class) {
            this._addClassToElement(this.class);
        }
        this._setProperties();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this._setProperties();
    }
}
AbstractFdNgxClass.propDecorators = {
    class: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AbstractFdNgxClass.prototype._elementRef;
    /**
     * @hidden
     * @type {?}
     */
    AbstractFdNgxClass.prototype.class;
    /**
     * @hidden
     * @abstract
     * @return {?}
     */
    AbstractFdNgxClass.prototype._setProperties = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZmQtbmd4LWNsYXNzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUMsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7OztBQVVyRSxNQUFNLE9BQWdCLGtCQUFrQjs7Ozs7O0lBZ0NwQyxZQUFzQixVQUFzQjtRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUF0QkQsa0JBQWtCLENBQUMsU0FBaUI7UUFDaEMsQ0FBQyxtQkFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBZSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxHQUFHLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkcsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNkLENBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3pFLENBQUM7Ozs7OztJQUdELGtCQUFrQixDQUFDLFNBQWlCO1FBQ2hDLENBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7Ozs7OztJQUdELGtCQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLO1FBQy9CLENBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDN0UsQ0FBQzs7Ozs7SUFTRCxXQUFXOztjQUNELFNBQVMsR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFlLENBQUMsQ0FBQyxTQUFTO1FBQzNFLE9BQU8sU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBR0QsUUFBUTtRQUNKLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7b0JBaERBLEtBQUs7Ozs7Ozs7SUFITix5Q0FBZ0M7Ozs7O0lBR2hDLG1DQUFzQjs7Ozs7O0lBT3RCLDhEQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKlxuIFRoaXMgYWJzdHJhY3QgY2xhc3MgYWxsb3dzIHRoZSB1c2VyIHRvIHNldCB0aGVpciBvd24gY3VzdG9tIHN0eWxlcyBvbiBhIEZ1bmRhbWVudGFsIE5HWCBkaXJlY3RpdmUsIGluIGFkZGl0aW9uIHRvIHRoZVxuIHN0eWxlcyB0aGUgbGlicmFyeSBuZWVkcyB0byBhZGQgaXRzZWxmLlxuIFdoZW4gbGlicmFyeSBzdHlsZXMgd2VyZSBhZGRlZCB0aHJvdWdoIHRoZSBkaXJlY3RpdmUncyBob3N0OiB7J1tjbGFzc10nfSBwcm9wZXJ0eSwgYW55IHN0eWxlcyB0aGUgdXNlciBhZGRlZCB3b3VsZCBiZVxuIG92ZXJ3cml0dGVuLiAgQnkgZXh0ZW5kaW5nIHRoaXMgY2xhc3MsIHdlIGluc3RlYWQgYWRkIGxpYnJhcnkgc3R5bGVzIHRvIHRoZSB1c2VyJ3MgY2xhc3NMaXN0IHJhdGhlciB0aGFuIHJlcGxhY2UgdGhlbS5cbiAqL1xuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RmROZ3hDbGFzcyBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASW5wdXQoKSBjbGFzczogc3RyaW5nIC8vIHVzZXIncyBjdXN0b20gY2xhc3Nlc1xuXG4gICAgLypcbiAgICAgZWFjaCBkaXJlY3RpdmUgdGhhdCBleHRlbmRzIHRoaXMgY2xhc3Mgd2lsbCBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiBhbmQgcG9wdWxhdGUgaXQgd2l0aCBvbmUgb3IgbW9yZSBjYWxscyB0b1xuICAgICB0aGUgJ19hZGRDbGFzc1RvRWxlbWVudCcgZnVuY3Rpb24sIHBhc3NpbmcgdGhlIHN0eWxlIG5hbWVzIHRvIGJlIGFkZGVkIHdpdGggZWFjaCBjYWxsXG4gICAgICovXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBhYnN0cmFjdCBfc2V0UHJvcGVydGllcygpOiB2b2lkO1xuXG4gICAgX3NldENsYXNzVG9FbGVtZW50KGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgICh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC52YWx1ZSA9IGAke2NsYXNzTmFtZX0gJHt0aGlzLmNsYXNzfWA7XG4gICAgfVxuXG4gICAgX2NsZWFyRWxlbWVudENsYXNzKCk6IHZvaWQge1xuICAgICAgICAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9hZGRDbGFzc1RvRWxlbWVudChjbGFzc05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZS5zcGxpdCgnICcpKTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9hZGRTdHlsZVRvRWxlbWVudChhdHRyaWJ1dGUsIHZhbHVlKTogdm9pZCB7XG4gICAgICAgICh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLnN0eWxlW2F0dHJpYnV0ZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBlbGVtZW50UmVmO1xuICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgY29uc3QgY2xhc3NMaXN0ID0gKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0O1xuICAgICAgICB3aGlsZSAoY2xhc3NMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoY2xhc3NMaXN0Lml0ZW0oMCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCh0aGlzLmNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydGllcygpO1xuICAgIH1cbn1cbiJdfQ==