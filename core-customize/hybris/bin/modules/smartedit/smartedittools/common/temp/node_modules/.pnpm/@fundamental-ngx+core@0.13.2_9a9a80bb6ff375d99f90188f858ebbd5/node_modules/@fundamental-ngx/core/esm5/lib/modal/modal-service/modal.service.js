/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-service/modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { ModalComponent } from '../modal.component';
import { ModalBackdrop } from '../modal-utils/modal-backdrop';
import { ModalContainer } from '../modal-utils/modal-container';
import { ModalConfig } from '../modal-utils/modal-config';
import { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';
import { ModalRef } from '../modal-utils/modal-ref';
/**
 * Service used to dynamically generate a modal.
 */
var ModalService = /** @class */ (function () {
    /** @hidden */
    function ModalService(dynamicComponentService) {
        this.dynamicComponentService = dynamicComponentService;
        this.modals = [];
    }
    /**
     * Status of the modal service.
     * Returns true if there are open modals, false otherwise.
     */
    /**
     * Status of the modal service.
     * Returns true if there are open modals, false otherwise.
     * @return {?}
     */
    ModalService.prototype.hasOpenModals = /**
     * Status of the modal service.
     * Returns true if there are open modals, false otherwise.
     * @return {?}
     */
    function () {
        return this.modals && this.modals.length > 0;
    };
    /**
     * Dismisses all currently open modals.
     */
    /**
     * Dismisses all currently open modals.
     * @return {?}
     */
    ModalService.prototype.dismissAll = /**
     * Dismisses all currently open modals.
     * @return {?}
     */
    function () {
        var _this = this;
        this.modals.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.destroyModalComponent(item.modalRef);
        }));
    };
    /**
     * Opens a modal component with a content of type TemplateRef or a component type.
     * @param contentType Content of the modal component.
     * @param modalConfig Configuration of the modal component.
     */
    /**
     * Opens a modal component with a content of type TemplateRef or a component type.
     * @param {?} contentType Content of the modal component.
     * @param {?=} modalConfig Configuration of the modal component.
     * @return {?}
     */
    ModalService.prototype.open = /**
     * Opens a modal component with a content of type TemplateRef or a component type.
     * @param {?} contentType Content of the modal component.
     * @param {?=} modalConfig Configuration of the modal component.
     * @return {?}
     */
    function (contentType, modalConfig) {
        var _this = this;
        if (modalConfig === void 0) { modalConfig = new ModalConfig(); }
        // Get default values from model
        modalConfig = Object.assign(new ModalConfig(), modalConfig);
        // Instantiate modal ref service
        /** @type {?} */
        var service = new ModalRef();
        service.data = modalConfig.data;
        // Create Container
        /** @type {?} */
        var container = this.dynamicComponentService.createDynamicComponent(contentType, ModalContainer, modalConfig);
        // Define Container to put backdrop and component to container
        modalConfig.container = container.location.nativeElement;
        // Create Backdrop
        /** @type {?} */
        var backdrop;
        if (modalConfig.hasBackdrop) {
            backdrop = this.dynamicComponentService.createDynamicComponent(contentType, ModalBackdrop, modalConfig, [service]);
        }
        // Create Component
        /** @type {?} */
        var component = this.dynamicComponentService.createDynamicComponent(contentType, ModalComponent, modalConfig, [service]);
        // Sizing
        this.setModalSize(component, modalConfig);
        // Positioning
        this.setModalPosition(component, modalConfig.position);
        this.modals.push({
            modalRef: component,
            containerRef: container,
            backdropRef: backdrop
        });
        /** @type {?} */
        var defaultBehaviourOnClose = (/**
         * @return {?}
         */
        function () {
            _this.destroyModalComponent(component);
            refSub.unsubscribe();
        });
        /** @type {?} */
        var refSub = service.afterClosed
            .subscribe(defaultBehaviourOnClose, defaultBehaviourOnClose);
        return service;
    };
    /**
     * @private
     * @param {?} modal
     * @return {?}
     */
    ModalService.prototype.destroyModalComponent = /**
     * @private
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        /** @type {?} */
        var arrayRef = this.modals.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.modalRef === modal; }));
        /** @type {?} */
        var indexOf = this.modals.indexOf(arrayRef);
        this.dynamicComponentService.destroyComponent(arrayRef.modalRef);
        this.dynamicComponentService.destroyComponent(arrayRef.containerRef);
        arrayRef.containerRef.destroy();
        arrayRef.modalRef.destroy();
        if (arrayRef.backdropRef) {
            this.dynamicComponentService.destroyComponent(arrayRef.backdropRef);
            arrayRef.backdropRef.destroy();
        }
        this.modals[indexOf] = null;
        this.modals = this.modals.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item !== null && item !== undefined; }));
    };
    /**
     * @private
     * @param {?} componentRef
     * @param {?} configObj
     * @return {?}
     */
    ModalService.prototype.setModalSize = /**
     * @private
     * @param {?} componentRef
     * @param {?} configObj
     * @return {?}
     */
    function (componentRef, configObj) {
        componentRef.location.nativeElement.style.minWidth = configObj.minWidth;
        componentRef.location.nativeElement.style.minHeight = configObj.minHeight;
        componentRef.location.nativeElement.style.maxWidth = configObj.maxWidth;
        componentRef.location.nativeElement.style.maxHeight = configObj.maxHeight;
        componentRef.location.nativeElement.style.width = configObj.width;
        componentRef.location.nativeElement.style.height = configObj.height;
    };
    /**
     * @private
     * @param {?} componentRef
     * @param {?} position
     * @return {?}
     */
    ModalService.prototype.setModalPosition = /**
     * @private
     * @param {?} componentRef
     * @param {?} position
     * @return {?}
     */
    function (componentRef, position) {
        if (position) {
            componentRef.location.nativeElement.style.top = position.top;
            componentRef.location.nativeElement.style.bottom = position.bottom;
            componentRef.location.nativeElement.style.right = position.right;
            componentRef.location.nativeElement.style.left = position.left;
        }
    };
    ModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ModalService.ctorParameters = function () { return [
        { type: DynamicComponentService, decorators: [{ type: Inject, args: [DynamicComponentService,] }] }
    ]; };
    return ModalService;
}());
export { ModalService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.dynamicComponentService;
}
//# sourceMappingURL=data:application/json;base64,