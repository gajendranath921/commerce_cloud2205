/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/functions/compare-objects.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Function used for object comparision
 * source: https://stackoverflow.com/a/1144249/8245136
 *
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
export function compareObjects(obj1, obj2) {
    /** @type {?} */
    const leftChain = [];
    /** @type {?} */
    const rightChain = [];
    // remember that NaN === NaN returns false
    // and isNaN(undefined) returns true
    if (isNaN(obj1) && isNaN(obj2) && typeof obj1 === 'number' && typeof obj2 === 'number') {
        return true;
    }
    // Compare primitives and functions.
    // Check if both arguments link to the same object.
    // Especially useful on the step where we compare prototypes
    if (obj1 === obj2) {
        return true;
    }
    // Works in case when functions are created in constructor.
    // Comparing dates is a common scenario. Another built-ins?
    // We can even handle functions passed across iframes
    if ((typeof obj1 === 'function' && typeof obj2 === 'function') ||
        (obj1 instanceof Date && obj2 instanceof Date) ||
        (obj1 instanceof RegExp && obj2 instanceof RegExp) ||
        (obj1 instanceof String && obj2 instanceof String) ||
        (obj1 instanceof Number && obj2 instanceof Number)) {
        return obj1.toString() === obj2.toString();
    }
    // At last checking prototypes as good as we can
    if (!(obj1 instanceof Object && obj2 instanceof Object)) {
        return false;
    }
    if (obj1.isPrototypeOf(obj2) || obj2.isPrototypeOf(obj1)) {
        return false;
    }
    if (obj1.constructor !== obj2.constructor) {
        return false;
    }
    if (obj1.prototype !== obj2.prototype) {
        return false;
    }
    // Check for infinitive linking loops
    if (leftChain.indexOf(obj1) > -1 || rightChain.indexOf(obj2) > -1) {
        return false;
    }
    // Quick checking of one object being a subset of another.
    for (const p in obj2) {
        if (obj2.hasOwnProperty(p) !== obj1.hasOwnProperty(p)) {
            return false;
        }
        else if (typeof obj2[p] !== typeof obj1[p]) {
            return false;
        }
    }
    for (const p of Object.keys(obj1)) {
        if (obj2.hasOwnProperty(p) !== obj1.hasOwnProperty(p)) {
            return false;
        }
        else if (typeof obj2[p] !== typeof obj1[p]) {
            return false;
        }
        switch (typeof (obj1[p])) {
            case 'object':
            case 'function':
                leftChain.push(obj1);
                rightChain.push(obj2);
                if (!compareObjects(obj1[p], obj2[p])) {
                    return false;
                }
                leftChain.pop();
                rightChain.pop();
                break;
            default:
                if (obj1[p] !== obj2[p]) {
                    return false;
                }
                break;
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS1vYmplY3RzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2Z1bmN0aW9ucy9jb21wYXJlLW9iamVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBLE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBUyxFQUFFLElBQVM7O1VBQ3pDLFNBQVMsR0FBRyxFQUFFOztVQUNkLFVBQVUsR0FBRyxFQUFFO0lBRXJCLDBDQUEwQztJQUMxQyxvQ0FBb0M7SUFDcEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDcEYsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELG9DQUFvQztJQUNwQyxtREFBbUQ7SUFDbkQsNERBQTREO0lBQzVELElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFFRCwyREFBMkQ7SUFDM0QsMkRBQTJEO0lBQzNELHFEQUFxRDtJQUNyRCxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssVUFBVSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsQ0FBQztRQUMxRCxDQUFDLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxZQUFZLElBQUksQ0FBQztRQUM5QyxDQUFDLElBQUksWUFBWSxNQUFNLElBQUksSUFBSSxZQUFZLE1BQU0sQ0FBQztRQUNsRCxDQUFDLElBQUksWUFBWSxNQUFNLElBQUksSUFBSSxZQUFZLE1BQU0sQ0FBQztRQUNsRCxDQUFDLElBQUksWUFBWSxNQUFNLElBQUksSUFBSSxZQUFZLE1BQU0sQ0FBQyxFQUFFO1FBQ3BELE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUM5QztJQUVELGdEQUFnRDtJQUNoRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksTUFBTSxJQUFJLElBQUksWUFBWSxNQUFNLENBQUMsRUFBRTtRQUNyRCxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RELE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDdkMsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNuQyxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELHFDQUFxQztJQUNyQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUMvRCxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELDBEQUEwRDtJQUMxRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNsQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRCxPQUFPLEtBQUssQ0FBQztTQUNoQjthQUFNLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxLQUFLLENBQUM7U0FDaEI7S0FDSjtJQUVELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRCxPQUFPLEtBQUssQ0FBQztTQUNoQjthQUFNLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxRQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QixLQUFLLFFBQVEsQ0FBQztZQUNkLEtBQUssVUFBVTtnQkFFWCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkMsT0FBTyxLQUFLLENBQUM7aUJBQ2hCO2dCQUVELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNqQixNQUFNO1lBRVY7Z0JBQ0ksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNyQixPQUFPLEtBQUssQ0FBQztpQkFDaEI7Z0JBQ0QsTUFBTTtTQUNiO0tBQ0o7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEZ1bmN0aW9uIHVzZWQgZm9yIG9iamVjdCBjb21wYXJpc2lvblxuICogc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE0NDI0OS84MjQ1MTM2XG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVPYmplY3RzKG9iajE6IGFueSwgb2JqMjogYW55KTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGVmdENoYWluID0gW107XG4gICAgY29uc3QgcmlnaHRDaGFpbiA9IFtdO1xuXG4gICAgLy8gcmVtZW1iZXIgdGhhdCBOYU4gPT09IE5hTiByZXR1cm5zIGZhbHNlXG4gICAgLy8gYW5kIGlzTmFOKHVuZGVmaW5lZCkgcmV0dXJucyB0cnVlXG4gICAgaWYgKGlzTmFOKG9iajEpICYmIGlzTmFOKG9iajIpICYmIHR5cGVvZiBvYmoxID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqMiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gQ29tcGFyZSBwcmltaXRpdmVzIGFuZCBmdW5jdGlvbnMuXG4gICAgLy8gQ2hlY2sgaWYgYm90aCBhcmd1bWVudHMgbGluayB0byB0aGUgc2FtZSBvYmplY3QuXG4gICAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIHN0ZXAgd2hlcmUgd2UgY29tcGFyZSBwcm90b3R5cGVzXG4gICAgaWYgKG9iajEgPT09IG9iajIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gV29ya3MgaW4gY2FzZSB3aGVuIGZ1bmN0aW9ucyBhcmUgY3JlYXRlZCBpbiBjb25zdHJ1Y3Rvci5cbiAgICAvLyBDb21wYXJpbmcgZGF0ZXMgaXMgYSBjb21tb24gc2NlbmFyaW8uIEFub3RoZXIgYnVpbHQtaW5zP1xuICAgIC8vIFdlIGNhbiBldmVuIGhhbmRsZSBmdW5jdGlvbnMgcGFzc2VkIGFjcm9zcyBpZnJhbWVzXG4gICAgaWYgKCh0eXBlb2Ygb2JqMSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqMiA9PT0gJ2Z1bmN0aW9uJykgfHxcbiAgICAgICAgKG9iajEgaW5zdGFuY2VvZiBEYXRlICYmIG9iajIgaW5zdGFuY2VvZiBEYXRlKSB8fFxuICAgICAgICAob2JqMSBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBvYmoyIGluc3RhbmNlb2YgUmVnRXhwKSB8fFxuICAgICAgICAob2JqMSBpbnN0YW5jZW9mIFN0cmluZyAmJiBvYmoyIGluc3RhbmNlb2YgU3RyaW5nKSB8fFxuICAgICAgICAob2JqMSBpbnN0YW5jZW9mIE51bWJlciAmJiBvYmoyIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gb2JqMS50b1N0cmluZygpID09PSBvYmoyLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgbGFzdCBjaGVja2luZyBwcm90b3R5cGVzIGFzIGdvb2QgYXMgd2UgY2FuXG4gICAgaWYgKCEob2JqMSBpbnN0YW5jZW9mIE9iamVjdCAmJiBvYmoyIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG9iajEuaXNQcm90b3R5cGVPZihvYmoyKSB8fCBvYmoyLmlzUHJvdG90eXBlT2Yob2JqMSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChvYmoxLmNvbnN0cnVjdG9yICE9PSBvYmoyLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob2JqMS5wcm90b3R5cGUgIT09IG9iajIucHJvdG90eXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgaW5maW5pdGl2ZSBsaW5raW5nIGxvb3BzXG4gICAgaWYgKGxlZnRDaGFpbi5pbmRleE9mKG9iajEpID4gLTEgfHwgcmlnaHRDaGFpbi5pbmRleE9mKG9iajIpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFF1aWNrIGNoZWNraW5nIG9mIG9uZSBvYmplY3QgYmVpbmcgYSBzdWJzZXQgb2YgYW5vdGhlci5cbiAgICBmb3IgKGNvbnN0IHAgaW4gb2JqMikge1xuICAgICAgICBpZiAob2JqMi5oYXNPd25Qcm9wZXJ0eShwKSAhPT0gb2JqMS5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmoyW3BdICE9PSB0eXBlb2Ygb2JqMVtwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwIG9mIE9iamVjdC5rZXlzKG9iajEpKSB7XG4gICAgICAgIGlmIChvYmoyLmhhc093blByb3BlcnR5KHApICE9PSBvYmoxLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iajJbcF0gIT09IHR5cGVvZiBvYmoxW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiAob2JqMVtwXSkpIHtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG5cbiAgICAgICAgICAgICAgICBsZWZ0Q2hhaW4ucHVzaChvYmoxKTtcbiAgICAgICAgICAgICAgICByaWdodENoYWluLnB1c2gob2JqMik7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmVPYmplY3RzKG9iajFbcF0sIG9iajJbcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZWZ0Q2hhaW4ucG9wKCk7XG4gICAgICAgICAgICAgICAgcmlnaHRDaGFpbi5wb3AoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAob2JqMVtwXSAhPT0gb2JqMltwXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbiJdfQ==