/**
 * @fileoverview added by tsickle
 * Generated from: lib/tabs/tab-link/tab-link.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import { AbstractFdNgxClass } from '../../utils/abstract-fd-ngx-class';
/**
 * Tab link for nav mode
 *
 * ```html
 * <a fd-tab-link>
 *    link
 * </a>
 * ```
 */
export class TabLinkDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-tabs__link');
        if (this.active) {
            this._addClassToElement('is-selected');
        }
    }
}
TabLinkDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-tab-link]',
                host: {
                    'role': 'tab',
                }
            },] }
];
/** @nocollapse */
TabLinkDirective.ctorParameters = () => [
    { type: ElementRef }
];
TabLinkDirective.propDecorators = {
    active: [{ type: Input }, { type: HostBinding, args: ['attr.aria-selected',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['attr.aria-disabled',] }]
};
if (false) {
    /**
     * Whether the link is active
     * @type {?}
     */
    TabLinkDirective.prototype.active;
    /**
     * Only visual / accessibility thing on tab-nav mode
     * RouterLink does not respect preventDefault/stopPropagation
     * @type {?}
     */
    TabLinkDirective.prototype.disabled;
    /** @type {?} */
    TabLinkDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWxpbmsuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL3RhYnMvdGFiLWxpbmsvdGFiLWxpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7OztBQW1CdkUsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGtCQUFrQjs7Ozs7SUF3QnBELFlBQW1CLFVBQXNCO1FBQ3JDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQURILGVBQVUsR0FBVixVQUFVLENBQVk7SUFFekMsQ0FBQzs7Ozs7SUFWRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUM7OztZQTVCSixTQUFTLFNBQUM7O2dCQUVQLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixJQUFJLEVBQUU7b0JBQ0YsTUFBTSxFQUFFLEtBQUs7aUJBQ2hCO2FBQ0o7Ozs7WUFuQm1CLFVBQVU7OztxQkF1QnpCLEtBQUssWUFDTCxXQUFXLFNBQUMsb0JBQW9CO3VCQU9oQyxLQUFLLFlBQ0wsV0FBVyxTQUFDLG9CQUFvQjs7Ozs7OztJQVRqQyxrQ0FFZ0I7Ozs7OztJQU1oQixvQ0FFa0I7O0lBV04sc0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0RmROZ3hDbGFzcyB9IGZyb20gJy4uLy4uL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcyc7XG5cbi8qKlxuICogVGFiIGxpbmsgZm9yIG5hdiBtb2RlXG4gKlxuICogYGBgaHRtbFxuICogPGEgZmQtdGFiLWxpbms+XG4gKiAgICBsaW5rXG4gKiA8L2E+XG4gKiBgYGBcbiAqL1xuXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtdGFiLWxpbmtdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBUYWJMaW5rRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RGZE5neENsYXNzIHtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBsaW5rIGlzIGFjdGl2ZSAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtc2VsZWN0ZWQnKVxuICAgIGFjdGl2ZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIE9ubHkgdmlzdWFsIC8gYWNjZXNzaWJpbGl0eSB0aGluZyBvbiB0YWItbmF2IG1vZGVcbiAgICAgKiBSb3V0ZXJMaW5rIGRvZXMgbm90IHJlc3BlY3QgcHJldmVudERlZmF1bHQvc3RvcFByb3BhZ2F0aW9uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1kaXNhYmxlZCcpXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9zZXRQcm9wZXJ0aWVzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtdGFic19fbGluaycpO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgICB9XG5cbn1cbiJdfQ==