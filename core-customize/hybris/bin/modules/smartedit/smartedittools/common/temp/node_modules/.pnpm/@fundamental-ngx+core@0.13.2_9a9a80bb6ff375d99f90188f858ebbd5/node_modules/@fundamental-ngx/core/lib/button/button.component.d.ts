import { ElementRef, OnInit } from '@angular/core';
import { CssStyleBuilder, Hash, CssClassBuilder } from '../utils/public_api';
export declare type ButtonType = 'standard' | 'positive' | 'medium' | 'negative' | 'half';
export declare type ButtonOptions = 'light' | 'emphasized' | 'menu';
/**
 * Button directive, used to enhance standard HTML buttons.
 *
 * ```html
 * <button fd-button>Button Text</button>
 * ```
 */
export declare class ButtonComponent implements OnInit, CssClassBuilder, CssStyleBuilder {
    private _elementRef;
    private _class;
    class: string;
    /** The icon to include in the button. See the icon page for the list of icons.
     * setter is used to control when css class have to be rebuilded
     */
    private _glyph;
    glyph: string;
    /** Defines if there will be added fd-button class. Enabled by default. */
    fdButtonClass: boolean;
    /** Whether to apply compact mode to the button. */
    compact: boolean;
    /** The type of the button. Types include 'standard', 'positive', 'medium', 'negative', 'half'.
     * Leave empty for default (Action button).'*/
    fdType: ButtonType;
    /** @hidden */
    semantic: string;
    /** Button options.  Options include 'emphasized' and 'light'. Leave empty for default.' */
    options: ButtonOptions | ButtonOptions[];
    /** @hidden */
    size: string;
    /** @hidden */
    constructor(_elementRef: ElementRef);
    /** Function runs when component is initialized
     * function should build component css class
     * function should build css style
     */
    ngOnInit(): void;
    /** CssClassBuilder interface implementation
     * function must return single string
     * function is responsible for order which css classes are applied
     */
    buildComponentCssClass(): string;
    /** CssStyleBuilder interface implementation
     * function must return hashmap where
     * key:string
     * value:any
     */
    buildComponentCssStyle(): Hash<number | string>;
    /** HasElementRef interface implementation
     * function used by applyCssClass and applyCssStyle decorators
     */
    elementRef(): ElementRef<any>;
    /** @hidden */
    private _getOptionCssClass;
}
