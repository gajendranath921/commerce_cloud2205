/**
 * @fileoverview added by tsickle
 * Generated from: lib/input-group/input-group-directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input, Renderer2 } from '@angular/core';
import { AbstractFdNgxClass } from '../utils/abstract-fd-ngx-class';
export class InputGroupInputDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.elementRef = elementRef;
        this.compact = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-input');
        this._addClassToElement('fd-input-group__input');
        if (this.compact) {
            this._addClassToElement('fd-input--compact');
        }
    }
}
InputGroupInputDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-input-group-input]',
            },] }
];
/** @nocollapse */
InputGroupInputDirective.ctorParameters = () => [
    { type: ElementRef }
];
InputGroupInputDirective.propDecorators = {
    compact: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    InputGroupInputDirective.prototype.compact;
    /**
     * @type {?}
     * @private
     */
    InputGroupInputDirective.prototype.elementRef;
}
export class InputGroupTextareaDirective {
}
InputGroupTextareaDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-textarea-group-input]',
            },] }
];
export class InputGroupAddOnDirective extends AbstractFdNgxClass {
    /**
     * @hidden
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super(elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * @hidden
         */
        this.fdInputGroupAddonClass = true;
        /**
         * The placement of the add-on. Options include *before* and *after*
         */
        this.placement = 'after';
        /**
         * Whether to apply compact mode to the AddOn.
         */
        this.compact = false;
        /**
         * Whether the icon add-on or the text add-on is a button.
         */
        this.button = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    _setProperties() {
        this._addClassToElement('fd-input-group__addon');
        if (this.button) {
            this._addClassToElement('fd-input-group__addon--button');
        }
        if (this.type) {
            this._addClassToElement('fd-input-group__addon--' + this.type);
        }
        if (this.state) {
            this._addClassToElement('is-' + this.state);
        }
        if (this.compact) {
            this._addClassToElement('fd-input-group__addon--compact');
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        /**
         * Add fd-input-group__button to button child element
         * @type {?}
         */
        const button = this.elementRef.nativeElement.querySelector('button');
        if (button) {
            this.renderer.addClass(button, 'fd-input-group__button');
        }
    }
}
InputGroupAddOnDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-input-group-addon]'
            },] }
];
/** @nocollapse */
InputGroupAddOnDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
InputGroupAddOnDirective.propDecorators = {
    fdInputGroupAddonClass: [{ type: HostBinding, args: ['class.fd-input-group__addon',] }],
    placement: [{ type: Input }],
    compact: [{ type: Input }],
    type: [{ type: Input }],
    state: [{ type: Input }],
    button: [{ type: Input }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.fdInputGroupAddonClass;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.placement;
    /**
     * Whether to apply compact mode to the AddOn.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.compact;
    /**
     * The placement of the add-on. Options include *before* and *after*
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.type;
    /**
     *  The state of the form control - applies css classes.
     *  Can be `valid`, `invalid`, `warning`, `information` or blank for default.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.state;
    /**
     * Whether the icon add-on or the text add-on is a button.
     * @type {?}
     */
    InputGroupAddOnDirective.prototype.button;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    InputGroupAddOnDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC1kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBUXBFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxrQkFBa0I7Ozs7O0lBZ0I1RCxZQUFvQixVQUFzQjtRQUN0QyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFERixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBYjFDLFlBQU8sR0FBWSxLQUFLLENBQUM7SUFlekIsQ0FBQzs7Ozs7SUFaRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2pELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7O1lBaEJKLFNBQVMsU0FBQzs7Z0JBRVAsUUFBUSxFQUFFLHdCQUF3QjthQUNyQzs7OztZQVJxQyxVQUFVOzs7c0JBVzNDLEtBQUs7Ozs7SUFBTiwyQ0FDeUI7Ozs7O0lBYWIsOENBQThCOztBQVc5QyxNQUFNLE9BQU8sMkJBQTJCOzs7WUFKdkMsU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsMkJBQTJCO2FBQ3hDOztBQVFELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxrQkFBa0I7Ozs7OztJQXFENUQsWUFDWSxVQUFzQixFQUN0QixRQUFtQjtRQUUzQixLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFIVixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVc7Ozs7UUFuRC9CLDJCQUFzQixHQUFZLElBQUksQ0FBQzs7OztRQU12QyxjQUFTLEdBQXdCLE9BQU8sQ0FBQzs7OztRQUl6QyxZQUFPLEdBQVksS0FBSyxDQUFDOzs7O1FBbUJ6QixXQUFNLEdBQVksS0FBSyxDQUFDO0lBeUJ4QixDQUFDOzs7OztJQXRCRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDakQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUMsa0JBQWtCLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtTQUM1RDtJQUNMLENBQUM7Ozs7O0lBV0Qsa0JBQWtCOzs7OztjQUVSLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ3BFLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDOzs7WUF2RUosU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsd0JBQXdCO2FBQ3JDOzs7O1lBMUNxQyxVQUFVO1lBQXNCLFNBQVM7OztxQ0E4QzFFLFdBQVcsU0FBQyw2QkFBNkI7d0JBTXpDLEtBQUs7c0JBSUwsS0FBSzttQkFNTCxLQUFLO29CQU9MLEtBQUs7cUJBTUwsS0FBSzs7Ozs7OztJQTdCTiwwREFDdUM7Ozs7O0lBS3ZDLDZDQUN5Qzs7Ozs7SUFHekMsMkNBQ3lCOzs7OztJQUt6Qix3Q0FDYTs7Ozs7O0lBTWIseUNBQ2tCOzs7OztJQUtsQiwwQ0FDd0I7Ozs7O0lBcUJwQiw4Q0FBOEI7Ozs7O0lBQzlCLDRDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0RmROZ3hDbGFzcyB9IGZyb20gJy4uL3V0aWxzL2Fic3RyYWN0LWZkLW5neC1jbGFzcyc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwUGxhY2VtZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybVN0YXRlcyB9IGZyb20gJy4uL2Zvcm0vZm9ybS1jb250cm9sL2Zvcm0tc3RhdGVzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLWlucHV0LWdyb3VwLWlucHV0XScsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBJbnB1dERpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RmROZ3hDbGFzcyB7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbXBhY3Q6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX3NldFByb3BlcnRpZXMoKSB7XG4gICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dCcpO1xuICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2lucHV0Jyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBhY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dC0tY29tcGFjdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgICB9XG5cbn1cblxuXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbZmQtdGV4dGFyZWEtZ3JvdXAtaW5wdXRdJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cFRleHRhcmVhRGlyZWN0aXZlICB7fVxuXG5cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1tmZC1pbnB1dC1ncm91cC1hZGRvbl0nXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBBZGRPbkRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RmROZ3hDbGFzcyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZkLWlucHV0LWdyb3VwX19hZGRvbicpXG4gICAgZmRJbnB1dEdyb3VwQWRkb25DbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2VtZW50IG9mIHRoZSBhZGQtb24uIE9wdGlvbnMgaW5jbHVkZSAqYmVmb3JlKiBhbmQgKmFmdGVyKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGxhY2VtZW50OiBJbnB1dEdyb3VwUGxhY2VtZW50ID0gJ2FmdGVyJztcblxuICAgIC8qKiBXaGV0aGVyIHRvIGFwcGx5IGNvbXBhY3QgbW9kZSB0byB0aGUgQWRkT24uICovXG4gICAgQElucHV0KClcbiAgICBjb21wYWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2VtZW50IG9mIHRoZSBhZGQtb24uIE9wdGlvbnMgaW5jbHVkZSAqYmVmb3JlKiBhbmQgKmFmdGVyKlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogIFRoZSBzdGF0ZSBvZiB0aGUgZm9ybSBjb250cm9sIC0gYXBwbGllcyBjc3MgY2xhc3Nlcy5cbiAgICAgKiAgQ2FuIGJlIGB2YWxpZGAsIGBpbnZhbGlkYCwgYHdhcm5pbmdgLCBgaW5mb3JtYXRpb25gIG9yIGJsYW5rIGZvciBkZWZhdWx0LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhdGU6IEZvcm1TdGF0ZXM7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBpY29uIGFkZC1vbiBvciB0aGUgdGV4dCBhZGQtb24gaXMgYSBidXR0b24uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBidXR0b246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX3NldFByb3BlcnRpZXMoKSB7XG4gICAgICAgIHRoaXMuX2FkZENsYXNzVG9FbGVtZW50KCdmZC1pbnB1dC1ncm91cF9fYWRkb24nKTtcbiAgICAgICAgaWYgKHRoaXMuYnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uLS1idXR0b24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uLS0nICsgdGhpcy50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3NUb0VsZW1lbnQoJ2lzLScgKyB0aGlzLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb21wYWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRDbGFzc1RvRWxlbWVudCgnZmQtaW5wdXQtZ3JvdXBfX2FkZG9uLS1jb21wYWN0JylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICAvKiogQWRkIGZkLWlucHV0LWdyb3VwX19idXR0b24gdG8gYnV0dG9uIGNoaWxkIGVsZW1lbnQgKi9cbiAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XG4gICAgICAgIGlmIChidXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoYnV0dG9uLCAnZmQtaW5wdXQtZ3JvdXBfX2J1dHRvbicpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=