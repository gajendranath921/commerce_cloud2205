/**
 * @fileoverview added by tsickle
 * Generated from: lib/time/i18n/time-i18n.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Provides i18n support for placeholders and meridian modifiers naming in the time component.
 */
export class TimeI18n {
    constructor() {
        /**
         * Ante Meridian naming label. The value written in the input should match this or Post Meridian. Otherwise it would be
         * treated as invalid
         *
         */
        this.meridianAm = 'am';
        /**
         * Post Meridian naming label. The value written in the input should match this or Ante Meridian. Otherwise it would be
         * treated as invalid
         *
         */
        this.meridianPm = 'pm';
        /**
         * Placeholder on the Ante Meridian / Post Meridian input
         *
         */
        this.meridianPlaceholder = 'am';
        /**
         * Placeholder for hours input
         *
         */
        this.hoursPlaceholder = 'hh';
        /**
         * Placeholder for minutes input
         *
         */
        this.minutesPlaceholder = 'mm';
        /**
         * Placeholder for seconds input
         *
         */
        this.secondsPlaceholder = 'ss';
        /**
         * Defines if the meridian validation should be case sensitive.
         *
         */
        this.meridianCaseSensitive = false;
    }
}
TimeI18n.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ TimeI18n.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TimeI18n_Factory() { return new TimeI18n(); }, token: TimeI18n, providedIn: "root" });
if (false) {
    /**
     * Ante Meridian naming label. The value written in the input should match this or Post Meridian. Otherwise it would be
     * treated as invalid
     *
     * @type {?}
     */
    TimeI18n.prototype.meridianAm;
    /**
     * Post Meridian naming label. The value written in the input should match this or Ante Meridian. Otherwise it would be
     * treated as invalid
     *
     * @type {?}
     */
    TimeI18n.prototype.meridianPm;
    /**
     * Placeholder on the Ante Meridian / Post Meridian input
     *
     * @type {?}
     */
    TimeI18n.prototype.meridianPlaceholder;
    /**
     * Placeholder for hours input
     *
     * @type {?}
     */
    TimeI18n.prototype.hoursPlaceholder;
    /**
     * Placeholder for minutes input
     *
     * @type {?}
     */
    TimeI18n.prototype.minutesPlaceholder;
    /**
     * Placeholder for seconds input
     *
     * @type {?}
     */
    TimeI18n.prototype.secondsPlaceholder;
    /**
     * Defines if the meridian validation should be case sensitive.
     *
     * @type {?}
     */
    TimeI18n.prototype.meridianCaseSensitive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1pMThuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL3RpbWUvaTE4bi90aW1lLWkxOG4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQU0zQyxNQUFNLE9BQU8sUUFBUTtJQURyQjs7Ozs7O1FBT0ksZUFBVSxHQUFXLElBQUksQ0FBQzs7Ozs7O1FBTTFCLGVBQVUsR0FBVyxJQUFJLENBQUM7Ozs7O1FBSzFCLHdCQUFtQixHQUFXLElBQUksQ0FBQzs7Ozs7UUFLbkMscUJBQWdCLEdBQVcsSUFBSSxDQUFDOzs7OztRQUtoQyx1QkFBa0IsR0FBVyxJQUFJLENBQUM7Ozs7O1FBS2xDLHVCQUFrQixHQUFXLElBQUksQ0FBQzs7Ozs7UUFLbEMsMEJBQXFCLEdBQVksS0FBSyxDQUFDO0tBRTFDOzs7WUF4Q0EsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7Ozs7Ozs7OztJQU81Qiw4QkFBMEI7Ozs7Ozs7SUFNMUIsOEJBQTBCOzs7Ozs7SUFLMUIsdUNBQW1DOzs7Ozs7SUFLbkMsb0NBQWdDOzs7Ozs7SUFLaEMsc0NBQWtDOzs7Ozs7SUFLbEMsc0NBQWtDOzs7Ozs7SUFLbEMseUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGkxOG4gc3VwcG9ydCBmb3IgcGxhY2Vob2xkZXJzIGFuZCBtZXJpZGlhbiBtb2RpZmllcnMgbmFtaW5nIGluIHRoZSB0aW1lIGNvbXBvbmVudC5cbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgVGltZUkxOG4ge1xuXG4gICAgLyoqXG4gICAgICogQW50ZSBNZXJpZGlhbiBuYW1pbmcgbGFiZWwuIFRoZSB2YWx1ZSB3cml0dGVuIGluIHRoZSBpbnB1dCBzaG91bGQgbWF0Y2ggdGhpcyBvciBQb3N0IE1lcmlkaWFuLiBPdGhlcndpc2UgaXQgd291bGQgYmVcbiAgICAgKiB0cmVhdGVkIGFzIGludmFsaWRcbiAgICAgKiAqL1xuICAgIG1lcmlkaWFuQW06IHN0cmluZyA9ICdhbSc7XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IE1lcmlkaWFuIG5hbWluZyBsYWJlbC4gVGhlIHZhbHVlIHdyaXR0ZW4gaW4gdGhlIGlucHV0IHNob3VsZCBtYXRjaCB0aGlzIG9yIEFudGUgTWVyaWRpYW4uIE90aGVyd2lzZSBpdCB3b3VsZCBiZVxuICAgICAqIHRyZWF0ZWQgYXMgaW52YWxpZFxuICAgICAqICovXG4gICAgbWVyaWRpYW5QbTogc3RyaW5nID0gJ3BtJztcblxuICAgIC8qKlxuICAgICAqIFBsYWNlaG9sZGVyIG9uIHRoZSBBbnRlIE1lcmlkaWFuIC8gUG9zdCBNZXJpZGlhbiBpbnB1dFxuICAgICAqICovXG4gICAgbWVyaWRpYW5QbGFjZWhvbGRlcjogc3RyaW5nID0gJ2FtJztcblxuICAgIC8qKlxuICAgICAqIFBsYWNlaG9sZGVyIGZvciBob3VycyBpbnB1dFxuICAgICAqICovXG4gICAgaG91cnNQbGFjZWhvbGRlcjogc3RyaW5nID0gJ2hoJztcblxuICAgIC8qKlxuICAgICAqIFBsYWNlaG9sZGVyIGZvciBtaW51dGVzIGlucHV0XG4gICAgICogKi9cbiAgICBtaW51dGVzUGxhY2Vob2xkZXI6IHN0cmluZyA9ICdtbSc7XG5cbiAgICAvKipcbiAgICAgKiBQbGFjZWhvbGRlciBmb3Igc2Vjb25kcyBpbnB1dFxuICAgICAqICovXG4gICAgc2Vjb25kc1BsYWNlaG9sZGVyOiBzdHJpbmcgPSAnc3MnO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBpZiB0aGUgbWVyaWRpYW4gdmFsaWRhdGlvbiBzaG91bGQgYmUgY2FzZSBzZW5zaXRpdmUuXG4gICAgICogKi9cbiAgICBtZXJpZGlhbkNhc2VTZW5zaXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcblxufVxuIl19