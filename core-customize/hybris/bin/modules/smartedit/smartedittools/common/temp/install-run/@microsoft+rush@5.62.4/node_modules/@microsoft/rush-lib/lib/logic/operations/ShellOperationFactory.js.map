{"version":3,"file":"ShellOperationFactory.js","sourceRoot":"","sources":["../../../src/logic/operations/ShellOperationFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\nimport type { IPhase } from '../../api/CommandLineConfiguration';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { IRegisteredCustomParameter } from '../../cli/scriptActions/BaseScriptAction';\nimport { ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';\nimport type { IOperationOptions, IOperationFactory } from './OperationSelector';\nimport { RushConstants } from '../RushConstants';\nimport { IOperationRunner } from './IOperationRunner';\nimport { NullOperationRunner } from './NullOperationRunner';\nimport { convertSlashesForWindows, ShellOperationRunner } from './ShellOperationRunner';\nimport { Operation } from './Operation';\nimport { OperationStatus } from './OperationStatus';\n\nexport interface IOperationFactoryOptions {\n  rushConfiguration: RushConfiguration;\n  buildCacheConfiguration?: BuildCacheConfiguration | undefined;\n  isIncrementalBuildAllowed: boolean;\n  customParameters: Iterable<IRegisteredCustomParameter>;\n  projectChangeAnalyzer: ProjectChangeAnalyzer;\n}\n\nexport class OperationFactory implements IOperationFactory {\n  private readonly _options: IOperationFactoryOptions;\n  private readonly _customParametersByPhase: Map<IPhase, string[]>;\n\n  public constructor(options: IOperationFactoryOptions) {\n    this._options = options;\n    this._customParametersByPhase = new Map();\n  }\n\n  public createTask(options: IOperationOptions): Operation {\n    const { phase, project } = options;\n\n    const factoryOptions: IOperationFactoryOptions = this._options;\n\n    const customParameterValues: ReadonlyArray<string> = this._getCustomParameterValuesForPhase(phase);\n\n    const commandToRun: string | undefined = OperationFactory._getScriptToRun(\n      project,\n      phase.name,\n      customParameterValues\n    );\n    if (commandToRun === undefined && !phase.ignoreMissingScript) {\n      throw new Error(\n        `The project '${project.packageName}' does not define a '${phase.name}' command in the 'scripts' section of its package.json`\n      );\n    }\n\n    const displayName: string = OperationFactory._getDisplayName(phase, project);\n\n    // Empty build script indicates a no-op, so use a no-op runner\n    const runner: IOperationRunner = commandToRun\n      ? new ShellOperationRunner({\n          rushProject: project,\n          displayName,\n          rushConfiguration: factoryOptions.rushConfiguration,\n          buildCacheConfiguration: factoryOptions.buildCacheConfiguration,\n          commandToRun: commandToRun || '',\n          isIncrementalBuildAllowed: factoryOptions.isIncrementalBuildAllowed,\n          projectChangeAnalyzer: factoryOptions.projectChangeAnalyzer,\n          phase\n        })\n      : new NullOperationRunner(displayName, OperationStatus.FromCache);\n\n    const operation: Operation = new Operation(runner, OperationStatus.Ready);\n\n    return operation;\n  }\n\n  private static _getScriptToRun(\n    rushProject: RushConfigurationProject,\n    commandToRun: string,\n    customParameterValues: ReadonlyArray<string>\n  ): string | undefined {\n    const { scripts } = rushProject.packageJson;\n\n    const rawCommand: string | undefined | null = scripts?.[commandToRun];\n\n    if (rawCommand === undefined || rawCommand === null) {\n      return undefined;\n    }\n\n    if (!rawCommand) {\n      return '';\n    } else {\n      const shellCommand: string = `${rawCommand} ${customParameterValues.join(' ')}`;\n      return process.platform === 'win32' ? convertSlashesForWindows(shellCommand) : shellCommand;\n    }\n  }\n\n  private static _getDisplayName(phase: IPhase, project: RushConfigurationProject): string {\n    if (phase.isSynthetic) {\n      // Because this is a synthetic phase, just use the project name because there aren't any other phases\n      return project.packageName;\n    } else {\n      const phaseNameWithoutPrefix: string = phase.name.slice(RushConstants.phaseNamePrefix.length);\n      return `${project.packageName} (${phaseNameWithoutPrefix})`;\n    }\n  }\n\n  private _getCustomParameterValuesForPhase(phase: IPhase): ReadonlyArray<string> {\n    let customParameterValues: string[] | undefined = this._customParametersByPhase.get(phase);\n    if (!customParameterValues) {\n      customParameterValues = [];\n      for (const { tsCommandLineParameter, parameter } of this._options.customParameters) {\n        if (phase.associatedParameters.has(parameter)) {\n          tsCommandLineParameter.appendToArgList(customParameterValues);\n        }\n      }\n\n      this._customParametersByPhase.set(phase, customParameterValues);\n    }\n\n    return customParameterValues;\n  }\n}\n"]}