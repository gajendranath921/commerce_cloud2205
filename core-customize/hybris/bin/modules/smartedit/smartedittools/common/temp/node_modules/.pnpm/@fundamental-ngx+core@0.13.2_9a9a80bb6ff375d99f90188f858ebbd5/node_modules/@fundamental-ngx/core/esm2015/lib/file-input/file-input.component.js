/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input/file-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * Tool to facilitate the input of files from the user.
 * It supports drag and drop, multiple input, max file size and more.
 * The drag events make it very easy to create and style elements like a dropzone.
 */
export class FileInputComponent {
    /**
     * @param {?} changeDetRef
     */
    constructor(changeDetRef) {
        this.changeDetRef = changeDetRef;
        /**
         * @hidden
         */
        this.fdFileInputClass = true;
        /**
         * Whether the file input is disabled.
         */
        this.disabled = false;
        /**
         * Whether the file input should accept multiple files.
         */
        this.multiple = true;
        /**
         * Whether the file input accepts drag and dropped files.
         */
        this.dragndrop = true;
        /**
         * Event fired when files are selected. Passed object is the array of files selected.
         */
        this.onSelect = new EventEmitter();
        /**
         * Event fired when some invalid files are selected. Passed object is the array of invalid files.
         */
        this.onInvalidFiles = new EventEmitter();
        /**
         * Event fired when the dragged file enters the component boundaries.
         */
        this.onDragEnter = new EventEmitter();
        /**
         * Event fired when the dragged file exits the component boundaries.
         */
        this.onDragLeave = new EventEmitter();
        /**
         * @hidden
         */
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * @hidden
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.changeDetRef.detectChanges();
    }
    /**
     * @hidden
     * @param {?} files
     * @return {?}
     */
    writeValue(files) {
        // not needed - should be handled by user.
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    selectHandler(event) {
        if (this.maxFileSize) {
            /** @type {?} */
            const valid_files = [];
            /** @type {?} */
            const invalid_files = [];
            event.forEach((/**
             * @param {?} file
             * @return {?}
             */
            file => {
                if (file.size < this.maxFileSize) {
                    valid_files.push(file);
                }
                else {
                    invalid_files.push(file);
                }
            }));
            if (valid_files.length > 0) {
                this.onChange(valid_files);
                this.onSelect.emit(valid_files);
            }
            if (invalid_files.length > 0) {
                this.onInvalidFiles.emit(invalid_files);
            }
        }
        else {
            this.onChange(event);
            this.onSelect.emit(event);
        }
    }
    /**
     * Opens the file selector.
     * @return {?}
     */
    open() {
        this.inputRef.nativeElement.click();
    }
    /**
     * Clears the files from the input.
     * @return {?}
     */
    clear() {
        this.inputRef.nativeElement.value = '';
        this.onChange([]);
    }
}
FileInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-file-input',
                template: "<div style=\"display: block\"\n     fdFileDragnDrop\n     [accept]=\"accept\"\n     [dragndrop]=\"dragndrop\"\n     [disabled]=\"disabled\"\n     [multiple]=\"multiple\"\n     (onFileChange)=\"selectHandler($event)\"\n     (onInvalidFiles)=\"onInvalidFiles.emit($event)\"\n     (onDragEnter)=\"onDragEnter.emit()\"\n     (onDragLeave)=\"onDragLeave.emit()\">\n    <ng-content></ng-content>\n</div>\n<input #input\n       class=\"hidden-file-input\"\n       type=\"file\"\n       [attr.accept]=\"accept\"\n       (onFileSelect)=\"selectHandler($event)\"\n       [multiple]=\"multiple\"\n       [disabled]=\"disabled\"\n       fdFileSelect>\n\n",
                host: {
                    '(blur)': 'onTouched()'
                },
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => FileInputComponent)),
                        multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".fd-file-input{display:inline-block}.fd-file-input input.hidden-file-input{display:none}"]
            }] }
];
/** @nocollapse */
FileInputComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FileInputComponent.propDecorators = {
    fdFileInputClass: [{ type: HostBinding, args: ['class.fd-file-input',] }],
    inputRef: [{ type: ViewChild, args: ['input', { static: false },] }],
    disabled: [{ type: Input }],
    multiple: [{ type: Input }],
    accept: [{ type: Input }],
    dragndrop: [{ type: Input }],
    maxFileSize: [{ type: Input }],
    onSelect: [{ type: Output }],
    onInvalidFiles: [{ type: Output }],
    onDragEnter: [{ type: Output }],
    onDragLeave: [{ type: Output }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.fdFileInputClass;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.inputRef;
    /**
     * Whether the file input is disabled.
     * @type {?}
     */
    FileInputComponent.prototype.disabled;
    /**
     * Whether the file input should accept multiple files.
     * @type {?}
     */
    FileInputComponent.prototype.multiple;
    /**
     * Accepted file extensions. Format: `'.png,.jpg'`.
     * @type {?}
     */
    FileInputComponent.prototype.accept;
    /**
     * Whether the file input accepts drag and dropped files.
     * @type {?}
     */
    FileInputComponent.prototype.dragndrop;
    /**
     * Max file size in bytes that the input will accept.
     * @type {?}
     */
    FileInputComponent.prototype.maxFileSize;
    /**
     * Event fired when files are selected. Passed object is the array of files selected.
     * @type {?}
     */
    FileInputComponent.prototype.onSelect;
    /**
     * Event fired when some invalid files are selected. Passed object is the array of invalid files.
     * @type {?}
     */
    FileInputComponent.prototype.onInvalidFiles;
    /**
     * Event fired when the dragged file enters the component boundaries.
     * @type {?}
     */
    FileInputComponent.prototype.onDragEnter;
    /**
     * Event fired when the dragged file exits the component boundaries.
     * @type {?}
     */
    FileInputComponent.prototype.onDragLeave;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.onChange;
    /**
     * @hidden
     * @type {?}
     */
    FileInputComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype.changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,