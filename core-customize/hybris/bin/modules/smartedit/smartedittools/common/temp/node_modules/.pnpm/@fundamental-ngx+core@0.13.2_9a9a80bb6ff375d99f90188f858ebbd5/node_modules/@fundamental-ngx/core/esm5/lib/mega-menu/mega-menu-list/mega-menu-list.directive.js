/**
 * @fileoverview added by tsickle
 * Generated from: lib/mega-menu/mega-menu-list/mega-menu-list.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, HostBinding, QueryList } from '@angular/core';
import { MegaMenuItemComponent } from '../mega-menu-item/mega-menu-item.component';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { MenuKeyboardService } from '../../menu/menu-keyboard.service';
/**
 *  Directive represents mega menu list, which contains items.
 *  ```html
 *  <ul fd-mega-menu-list>
 *      <fd-mega-menu-item>
 *          <a fd-mega-menu-link>Item 0</a>
 *          <li fd-mega-menu-subitem>
 *              <a fd-mega-menu-sublink>Sub Item 1</a>
 *          </li>
 *          <li fd-mega-menu-subitem>
 *              <a fd-mega-menu-sublink>Sub Item 2</a>
 *          </li>
 *          <li fd-mega-menu-subitem>
 *              <a fd-mega-menu-sublink>Sub Item 3</a>
 *          </li>
 *      </fd-mega-menu-item>
 *  </ul>
 *  ```
 *
 */
var MegaMenuListDirective = /** @class */ (function () {
    /** @hidden */
    function MegaMenuListDirective(menuKeyboardService) {
        this.menuKeyboardService = menuKeyboardService;
        /**
         * @hidden
         */
        this.fdMegaMenuClass = true;
        /**
         * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
         */
        this.onDestroy$ = new Subject();
        /**
         * An RxJS Subject that will kill the data stream upon queryList changes (for unsubscribing)
         */
        this.onRefresh$ = new Subject();
    }
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuListDirective.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.changes
            .pipe(takeUntil(this.onDestroy$), startWith(5))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.refreshSubscription(); }));
    };
    /** Method that provides handles keydown events from menu item list */
    /**
     * Method that provides handles keydown events from menu item list
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    MegaMenuListDirective.prototype.handleListKeyDown = /**
     * Method that provides handles keydown events from menu item list
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.menuKeyboardService.keyDownHandler(event, index, this.items.toArray());
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    MegaMenuListDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    /** Whether any querylist detects any changes */
    /**
     * Whether any querylist detects any changes
     * @private
     * @return {?}
     */
    MegaMenuListDirective.prototype.refreshSubscription = /**
     * Whether any querylist detects any changes
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** Finish all of the streams, form before */
        this.onRefresh$.next();
        /**
         * Merge refresh/destroy observables
         * @type {?}
         */
        var refreshObs = merge(this.onRefresh$, this.onDestroy$);
        /** New subscription streams */
        this.items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) { return item.keyDown
            .pipe(takeUntil(refreshObs))
            .subscribe((/**
         * @param {?} keyboardEvent
         * @return {?}
         */
        function (keyboardEvent) { return _this.handleListKeyDown(keyboardEvent, index); })); }));
    };
    MegaMenuListDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[fd-mega-menu-list]'
                },] }
    ];
    /** @nocollapse */
    MegaMenuListDirective.ctorParameters = function () { return [
        { type: MenuKeyboardService }
    ]; };
    MegaMenuListDirective.propDecorators = {
        fdMegaMenuClass: [{ type: HostBinding, args: ['class.fd-mega-menu__list',] }],
        items: [{ type: ContentChildren, args: [MegaMenuItemComponent,] }]
    };
    return MegaMenuListDirective;
}());
export { MegaMenuListDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuListDirective.prototype.fdMegaMenuClass;
    /**
     * @hidden
     * @type {?}
     */
    MegaMenuListDirective.prototype.items;
    /**
     * An RxJS Subject that will kill the data stream upon component’s destruction (for unsubscribing)
     * @type {?}
     * @private
     */
    MegaMenuListDirective.prototype.onDestroy$;
    /**
     * An RxJS Subject that will kill the data stream upon queryList changes (for unsubscribing)
     * @type {?}
     * @private
     */
    MegaMenuListDirective.prototype.onRefresh$;
    /**
     * @type {?}
     * @private
     */
    MegaMenuListDirective.prototype.menuKeyboardService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVnYS1tZW51LWxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL21lZ2EtbWVudS9tZWdhLW1lbnUtbGlzdC9tZWdhLW1lbnUtbGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBRUgsZUFBZSxFQUNmLFNBQVMsRUFDVCxXQUFXLEVBRVgsU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCdkU7SUFvQkksY0FBYztJQUNkLCtCQUNZLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCOzs7O1FBZHBELG9CQUFlLEdBQVksSUFBSSxDQUFDOzs7O1FBT2YsZUFBVSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBR2hELGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUs5RCxDQUFDO0lBRUosY0FBYzs7Ozs7SUFDZCxrREFBa0I7Ozs7SUFBbEI7UUFBQSxpQkFLQztRQUpHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzthQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QyxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLG1CQUFtQixFQUFFLEVBQTFCLENBQTBCLEVBQUMsQ0FDL0M7SUFDTCxDQUFDO0lBRUQsc0VBQXNFOzs7Ozs7O0lBQ3RFLGlEQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLEtBQW9CLEVBQUUsS0FBYTtRQUNqRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxjQUFjOzs7OztJQUNkLDJDQUFXOzs7O0lBQVg7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELGdEQUFnRDs7Ozs7O0lBQ3hDLG1EQUFtQjs7Ozs7SUFBM0I7UUFBQSxpQkFZQztRQVhHLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDOzs7OztZQUdqQixVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUUxRCwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsSUFBMkIsRUFBRSxLQUFhLElBQUssT0FBQSxJQUFJLENBQUMsT0FBTzthQUMxRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzNCLFNBQVM7Ozs7UUFBQyxVQUFDLGFBQTRCLElBQUssT0FBQSxLQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUE1QyxDQUE0QyxFQUFDLEVBRjNCLENBRTJCLEVBQUMsQ0FDOUY7SUFDTCxDQUFDOztnQkF6REosU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUscUJBQXFCO2lCQUNsQzs7OztnQkF4QlEsbUJBQW1COzs7a0NBNEJ2QixXQUFXLFNBQUMsMEJBQTBCO3dCQUl0QyxlQUFlLFNBQUMscUJBQXFCOztJQStDMUMsNEJBQUM7Q0FBQSxBQTFERCxJQTBEQztTQXREWSxxQkFBcUI7Ozs7OztJQUc5QixnREFDZ0M7Ozs7O0lBR2hDLHNDQUN3Qzs7Ozs7O0lBR3hDLDJDQUFpRTs7Ozs7O0lBR2pFLDJDQUFpRTs7Ozs7SUFJN0Qsb0RBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBEaXJlY3RpdmUsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgT25EZXN0cm95LFxuICAgIFF1ZXJ5TGlzdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lZ2FNZW51SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL21lZ2EtbWVudS1pdGVtL21lZ2EtbWVudS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBtZXJnZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3RhcnRXaXRoLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNZW51S2V5Ym9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbWVudS9tZW51LWtleWJvYXJkLnNlcnZpY2UnO1xuXG4vKipcbiAqICBEaXJlY3RpdmUgcmVwcmVzZW50cyBtZWdhIG1lbnUgbGlzdCwgd2hpY2ggY29udGFpbnMgaXRlbXMuXG4gKiAgYGBgaHRtbFxuICogIDx1bCBmZC1tZWdhLW1lbnUtbGlzdD5cbiAqICAgICAgPGZkLW1lZ2EtbWVudS1pdGVtPlxuICogICAgICAgICAgPGEgZmQtbWVnYS1tZW51LWxpbms+SXRlbSAwPC9hPlxuICogICAgICAgICAgPGxpIGZkLW1lZ2EtbWVudS1zdWJpdGVtPlxuICogICAgICAgICAgICAgIDxhIGZkLW1lZ2EtbWVudS1zdWJsaW5rPlN1YiBJdGVtIDE8L2E+XG4gKiAgICAgICAgICA8L2xpPlxuICogICAgICAgICAgPGxpIGZkLW1lZ2EtbWVudS1zdWJpdGVtPlxuICogICAgICAgICAgICAgIDxhIGZkLW1lZ2EtbWVudS1zdWJsaW5rPlN1YiBJdGVtIDI8L2E+XG4gKiAgICAgICAgICA8L2xpPlxuICogICAgICAgICAgPGxpIGZkLW1lZ2EtbWVudS1zdWJpdGVtPlxuICogICAgICAgICAgICAgIDxhIGZkLW1lZ2EtbWVudS1zdWJsaW5rPlN1YiBJdGVtIDM8L2E+XG4gKiAgICAgICAgICA8L2xpPlxuICogICAgICA8L2ZkLW1lZ2EtbWVudS1pdGVtPlxuICogIDwvdWw+XG4gKiAgYGBgXG4gKiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2ZkLW1lZ2EtbWVudS1saXN0XSdcbn0pXG5leHBvcnQgY2xhc3MgTWVnYU1lbnVMaXN0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mZC1tZWdhLW1lbnVfX2xpc3QnKVxuICAgIGZkTWVnYU1lbnVDbGFzczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBDb250ZW50Q2hpbGRyZW4oTWVnYU1lbnVJdGVtQ29tcG9uZW50KVxuICAgIGl0ZW1zOiBRdWVyeUxpc3Q8TWVnYU1lbnVJdGVtQ29tcG9uZW50PjtcblxuICAgIC8qKiBBbiBSeEpTIFN1YmplY3QgdGhhdCB3aWxsIGtpbGwgdGhlIGRhdGEgc3RyZWFtIHVwb24gY29tcG9uZW504oCZcyBkZXN0cnVjdGlvbiAoZm9yIHVuc3Vic2NyaWJpbmcpICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25EZXN0cm95JDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICAvKiogQW4gUnhKUyBTdWJqZWN0IHRoYXQgd2lsbCBraWxsIHRoZSBkYXRhIHN0cmVhbSB1cG9uIHF1ZXJ5TGlzdCBjaGFuZ2VzIChmb3IgdW5zdWJzY3JpYmluZykgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBvblJlZnJlc2gkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgbWVudUtleWJvYXJkU2VydmljZTogTWVudUtleWJvYXJkU2VydmljZSxcbiAgICApIHt9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtcy5jaGFuZ2VzXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSwgc3RhcnRXaXRoKDUpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZnJlc2hTdWJzY3JpcHRpb24oKSlcbiAgICAgICAgO1xuICAgIH1cblxuICAgIC8qKiBNZXRob2QgdGhhdCBwcm92aWRlcyBoYW5kbGVzIGtleWRvd24gZXZlbnRzIGZyb20gbWVudSBpdGVtIGxpc3QgKi9cbiAgICBoYW5kbGVMaXN0S2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLm1lbnVLZXlib2FyZFNlcnZpY2Uua2V5RG93bkhhbmRsZXIoZXZlbnQsIGluZGV4LCB0aGlzLml0ZW1zLnRvQXJyYXkoKSk7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQoKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLyoqIFdoZXRoZXIgYW55IHF1ZXJ5bGlzdCBkZXRlY3RzIGFueSBjaGFuZ2VzICovXG4gICAgcHJpdmF0ZSByZWZyZXNoU3Vic2NyaXB0aW9uKCk6IHZvaWQge1xuICAgICAgICAvKiogRmluaXNoIGFsbCBvZiB0aGUgc3RyZWFtcywgZm9ybSBiZWZvcmUgKi9cbiAgICAgICAgdGhpcy5vblJlZnJlc2gkLm5leHQoKTtcblxuICAgICAgICAvKiogTWVyZ2UgcmVmcmVzaC9kZXN0cm95IG9ic2VydmFibGVzICovXG4gICAgICAgIGNvbnN0IHJlZnJlc2hPYnMgPSBtZXJnZSh0aGlzLm9uUmVmcmVzaCQsIHRoaXMub25EZXN0cm95JCk7XG5cbiAgICAgICAgLyoqIE5ldyBzdWJzY3JpcHRpb24gc3RyZWFtcyAqL1xuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW06IE1lZ2FNZW51SXRlbUNvbXBvbmVudCwgaW5kZXg6IG51bWJlcikgPT4gaXRlbS5rZXlEb3duXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwocmVmcmVzaE9icykpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChrZXlib2FyZEV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB0aGlzLmhhbmRsZUxpc3RLZXlEb3duKGtleWJvYXJkRXZlbnQsIGluZGV4KSkpXG4gICAgICAgIDtcbiAgICB9XG59XG4iXX0=