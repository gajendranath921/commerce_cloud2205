/**
 * @fileoverview added by tsickle
 * Generated from: lib/date-picker/format/date-parser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FdDate } from '../../calendar/models/fd-date';
import * as i0 from "@angular/core";
/**
 * @return {?}
 */
export function DATE_FORMAT_FACTORY() {
    return new DateFormatParserDefault();
}
/**
 * Abstract class which defines the behaviour of the date format and parser.
 * @abstract
 */
var DateFormatParser = /** @class */ (function () {
    function DateFormatParser() {
        /**
         * Delimiter for the range. This should not show up in the string representation of the dates.
         */
        this.rangeDelimiter = ' - ';
    }
    DateFormatParser.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                    useFactory: DATE_FORMAT_FACTORY
                },] }
    ];
    /** @nocollapse */ DateFormatParser.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: DATE_FORMAT_FACTORY, token: DateFormatParser, providedIn: "root" });
    return DateFormatParser;
}());
export { DateFormatParser };
if (false) {
    /**
     * Delimiter for the range. This should not show up in the string representation of the dates.
     * @type {?}
     */
    DateFormatParser.prototype.rangeDelimiter;
    /**
     * Should take in a string value and return a FdDate model object.
     * @abstract
     * @param {?} value String to concert to a FdDate model object.
     * @return {?}
     */
    DateFormatParser.prototype.parse = function (value) { };
    /**
     * Should take in a FdDate model object and return a string representation.
     * @abstract
     * @param {?} date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     * @return {?}
     */
    DateFormatParser.prototype.format = function (date) { };
}
/**
 * Default implementation of the DateFormatParser service.
 */
var DateFormatParserDefault = /** @class */ (function (_super) {
    tslib_1.__extends(DateFormatParserDefault, _super);
    function DateFormatParserDefault() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Takes in a string value and return a FdDate model object.
     * @param value String to concert to a FdDate model object.
     */
    /**
     * Takes in a string value and return a FdDate model object.
     * @param {?} value String to concert to a FdDate model object.
     * @return {?}
     */
    DateFormatParserDefault.prototype.parse = /**
     * Takes in a string value and return a FdDate model object.
     * @param {?} value String to concert to a FdDate model object.
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var date = new Date(value);
            return new FdDate(date.getFullYear(), date.getMonth() + 1, date.getDate());
        }
        else {
            return new FdDate(null, null, null);
        }
    };
    /**
     * Takes in a FdDate model object and return a string representation.
     * @param date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     */
    /**
     * Takes in a FdDate model object and return a string representation.
     * @param {?} date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     * @return {?}
     */
    DateFormatParserDefault.prototype.format = /**
     * Takes in a FdDate model object and return a string representation.
     * @param {?} date FdDate to format to string value.
     * Return null, to keep default angular DatePipe as a formatter.
     * @return {?}
     */
    function (date) {
        return null;
    };
    DateFormatParserDefault.decorators = [
        { type: Injectable }
    ];
    return DateFormatParserDefault;
}(DateFormatParser));
export { DateFormatParserDefault };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1waWNrZXIvZm9ybWF0L2RhdGUtcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7OztBQUd2RCxNQUFNLFVBQVUsbUJBQW1CO0lBQy9CLE9BQU8sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO0FBQ3pDLENBQUM7Ozs7O0FBS0Q7SUFBQTs7OztRQVNJLG1CQUFjLEdBQVcsS0FBSyxDQUFDO0tBY2xDOztnQkF2QkEsVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO29CQUNsQixVQUFVLEVBQUUsbUJBQW1CO2lCQUNsQzs7OzJCQWREO0NBa0NDLEFBdkJELElBdUJDO1NBbkJxQixnQkFBZ0I7Ozs7OztJQUtsQywwQ0FBK0I7Ozs7Ozs7SUFNL0Isd0RBQXNDOzs7Ozs7OztJQU90Qyx3REFBc0M7Ozs7O0FBTTFDO0lBQzZDLG1EQUFnQjtJQUQ3RDs7SUF3QkEsQ0FBQztJQXJCRzs7O09BR0c7Ozs7OztJQUNJLHVDQUFLOzs7OztJQUFaLFVBQWEsS0FBYTtRQUN0QixJQUFJLEtBQUssRUFBRTs7Z0JBQ0QsSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNsQyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzlFO2FBQU07WUFDSCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNJLHdDQUFNOzs7Ozs7SUFBYixVQUFjLElBQVk7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Z0JBdkJKLFVBQVU7O0lBd0JYLDhCQUFDO0NBQUEsQUF4QkQsQ0FDNkMsZ0JBQWdCLEdBdUI1RDtTQXZCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGZERhdGUgfSBmcm9tICcuLi8uLi9jYWxlbmRhci9tb2RlbHMvZmQtZGF0ZSc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBEQVRFX0ZPUk1BVF9GQUNUT1JZKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZUZvcm1hdFBhcnNlckRlZmF1bHQoKTtcbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB3aGljaCBkZWZpbmVzIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGRhdGUgZm9ybWF0IGFuZCBwYXJzZXIuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgdXNlRmFjdG9yeTogREFURV9GT1JNQVRfRkFDVE9SWVxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXRlRm9ybWF0UGFyc2VyIHtcblxuICAgIC8qKlxuICAgICAqIERlbGltaXRlciBmb3IgdGhlIHJhbmdlLiBUaGlzIHNob3VsZCBub3Qgc2hvdyB1cCBpbiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRlcy5cbiAgICAgKi9cbiAgICByYW5nZURlbGltaXRlcjogc3RyaW5nID0gJyAtICc7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgdGFrZSBpbiBhIHN0cmluZyB2YWx1ZSBhbmQgcmV0dXJuIGEgRmREYXRlIG1vZGVsIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgU3RyaW5nIHRvIGNvbmNlcnQgdG8gYSBGZERhdGUgbW9kZWwgb2JqZWN0LlxuICAgICAqL1xuICAgIGFic3RyYWN0IHBhcnNlKHZhbHVlOiBzdHJpbmcpOiBGZERhdGU7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgdGFrZSBpbiBhIEZkRGF0ZSBtb2RlbCBvYmplY3QgYW5kIHJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0ZSBGZERhdGUgdG8gZm9ybWF0IHRvIHN0cmluZyB2YWx1ZS5cbiAgICAgKiBSZXR1cm4gbnVsbCwgdG8ga2VlcCBkZWZhdWx0IGFuZ3VsYXIgRGF0ZVBpcGUgYXMgYSBmb3JtYXR0ZXIuXG4gICAgICovXG4gICAgYWJzdHJhY3QgZm9ybWF0KGRhdGU6IEZkRGF0ZSk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBEYXRlRm9ybWF0UGFyc2VyIHNlcnZpY2UuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXRlRm9ybWF0UGFyc2VyRGVmYXVsdCBleHRlbmRzIERhdGVGb3JtYXRQYXJzZXIge1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgaW4gYSBzdHJpbmcgdmFsdWUgYW5kIHJldHVybiBhIEZkRGF0ZSBtb2RlbCBvYmplY3QuXG4gICAgICogQHBhcmFtIHZhbHVlIFN0cmluZyB0byBjb25jZXJ0IHRvIGEgRmREYXRlIG1vZGVsIG9iamVjdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcGFyc2UodmFsdWU6IHN0cmluZyk6IEZkRGF0ZSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZTogRGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmREYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGZERhdGUobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBpbiBhIEZkRGF0ZSBtb2RlbCBvYmplY3QgYW5kIHJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0ZSBGZERhdGUgdG8gZm9ybWF0IHRvIHN0cmluZyB2YWx1ZS5cbiAgICAgKiBSZXR1cm4gbnVsbCwgdG8ga2VlcCBkZWZhdWx0IGFuZ3VsYXIgRGF0ZVBpcGUgYXMgYSBmb3JtYXR0ZXIuXG4gICAgICovXG4gICAgcHVibGljIGZvcm1hdChkYXRlOiBGZERhdGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXX0=