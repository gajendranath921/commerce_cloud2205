/**
 * @fileoverview added by tsickle
 * Generated from: lib/alert/alert-service/alert.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AlertComponent } from '../alert.component';
import { AlertContainerComponent } from '../alert-utils/alert-container.component';
import { AlertConfig } from '../alert-utils/alert-config';
import { DynamicComponentService } from '../../utils/dynamic-component/dynamic-component.service';
import { AlertRef } from '../alert-utils/alert-ref';
/**
 * Service used to dynamically generate an alert as an overlay.
 */
export class AlertService {
    /**
     * @hidden
     * @param {?} dynamicComponentService
     */
    constructor(dynamicComponentService) {
        this.dynamicComponentService = dynamicComponentService;
        this.alerts = [];
    }
    /**
     * Returns true if there are some alerts currently open. False otherwise.
     * @return {?}
     */
    hasOpenAlerts() {
        return this.alerts && this.alerts.length > 0;
    }
    /**
     * Opens an alert component with a content of type TemplateRef, Component Type or String.
     * @param {?} content Content of the alert component.
     * @param {?=} alertConfig Configuration of the alert component.
     * @return {?}
     */
    open(content, alertConfig = new AlertConfig()) {
        // Get default values from alert model
        alertConfig = Object.assign(new AlertConfig(), alertConfig);
        // Instantiate alert ref service
        /** @type {?} */
        const service = new AlertRef();
        service.data = alertConfig.data;
        // If empty or undefined alert array, create container
        if (!this.alerts || this.alerts.length === 0 || !this.alertContainerRef) {
            this.alertContainerRef = this.dynamicComponentService.createDynamicComponent(content, AlertContainerComponent, alertConfig);
        }
        // Define Container to put backdrop and component to container
        alertConfig.container = this.alertContainerRef.location.nativeElement;
        /** @type {?} */
        const component = this.dynamicComponentService.createDynamicComponent(content, AlertComponent, alertConfig, [service]);
        component.location.nativeElement.style.marginTop = '10px';
        // Subscription to close alert from ref
        /** @type {?} */
        const refSub = service.afterDismissed.subscribe((/**
         * @return {?}
         */
        () => {
            this.destroyAlertComponent(component);
            refSub.unsubscribe();
        }));
        // Log new component
        this.alerts.push(component);
        return service;
    }
    /**
     * Dismisses all service-opened alerts.
     * @return {?}
     */
    dismissAll() {
        this.alerts.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        ref => {
            this.destroyAlertComponent(ref);
        }));
    }
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    destroyAlertComponent(alert) {
        this.alerts[this.alerts.indexOf(alert)] = null;
        this.alerts = this.alerts.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item !== null && item !== undefined));
        this.dynamicComponentService.destroyComponent(alert);
        if (this.alertContainerRef && (!this.alerts || this.alerts.length === 0)) {
            this.destroyAlertContainer();
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyAlertContainer() {
        this.dynamicComponentService.destroyComponent(this.alertContainerRef);
        this.alertContainerRef = undefined;
    }
}
AlertService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlertService.ctorParameters = () => [
    { type: DynamicComponentService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alerts;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.alertContainerRef;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.dynamicComponentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9hbGVydC9hbGVydC1zZXJ2aWNlL2FsZXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsVUFBVSxFQUliLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDbEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7O0FBTXBELE1BQU0sT0FBTyxZQUFZOzs7OztJQUtyQixZQUNZLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBTHBELFdBQU0sR0FBbUMsRUFBRSxDQUFDO0lBTWpELENBQUM7Ozs7O0lBS0csYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7Ozs7SUFPTSxJQUFJLENBQUMsT0FBOEMsRUFBRSxjQUEyQixJQUFJLFdBQVcsRUFBRTtRQUVwRyxzQ0FBc0M7UUFDdEMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQzs7O2NBR3RELE9BQU8sR0FBYSxJQUFJLFFBQVEsRUFBRTtRQUN4QyxPQUFPLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFaEMsc0RBQXNEO1FBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNyRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHNCQUFzQixDQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxDQUFDLENBQzlFO1NBQ0o7UUFFRCw4REFBOEQ7UUFDOUQsV0FBVyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQzs7Y0FFaEUsU0FBUyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyRSxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQzs7O2NBR3BELE1BQU0sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNqRCxJQUFJLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pCLENBQUMsRUFBQztRQUVGLG9CQUFvQjtRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDOzs7OztJQUtNLFVBQVU7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7SUFFTyxxQkFBcUIsQ0FBQyxLQUFtQztRQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFckQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdEUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDOzs7OztJQUVPLHFCQUFxQjtRQUN6QixJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztJQUN2QyxDQUFDOzs7WUEvRUosVUFBVTs7OztZQU5GLHVCQUF1Qjs7Ozs7OztJQVE1Qiw4QkFBb0Q7Ozs7O0lBQ3BELHlDQUFpRTs7Ozs7SUFJN0QsK0NBQXdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBJbmplY3RhYmxlLFxuICAgIENvbXBvbmVudFJlZixcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBUeXBlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnRDb21wb25lbnQgfSBmcm9tICcuLi9hbGVydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWxlcnRDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuLi9hbGVydC11dGlscy9hbGVydC1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEFsZXJ0Q29uZmlnIH0gZnJvbSAnLi4vYWxlcnQtdXRpbHMvYWxlcnQtY29uZmlnJztcbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFJlZiB9IGZyb20gJy4uL2FsZXJ0LXV0aWxzL2FsZXJ0LXJlZic7XG5cbi8qKlxuICogU2VydmljZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGFuIGFsZXJ0IGFzIGFuIG92ZXJsYXkuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGVydFNlcnZpY2Uge1xuICAgIHByaXZhdGUgYWxlcnRzOiBDb21wb25lbnRSZWY8QWxlcnRDb21wb25lbnQ+W10gPSBbXTtcbiAgICBwcml2YXRlIGFsZXJ0Q29udGFpbmVyUmVmOiBDb21wb25lbnRSZWY8QWxlcnRDb250YWluZXJDb21wb25lbnQ+O1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBkeW5hbWljQ29tcG9uZW50U2VydmljZTogRHluYW1pY0NvbXBvbmVudFNlcnZpY2VcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIHNvbWUgYWxlcnRzIGN1cnJlbnRseSBvcGVuLiBGYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgcHVibGljIGhhc09wZW5BbGVydHMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZXJ0cyAmJiB0aGlzLmFsZXJ0cy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGFuIGFsZXJ0IGNvbXBvbmVudCB3aXRoIGEgY29udGVudCBvZiB0eXBlIFRlbXBsYXRlUmVmLCBDb21wb25lbnQgVHlwZSBvciBTdHJpbmcuXG4gICAgICogQHBhcmFtIGNvbnRlbnQgQ29udGVudCBvZiB0aGUgYWxlcnQgY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSBhbGVydENvbmZpZyBDb25maWd1cmF0aW9uIG9mIHRoZSBhbGVydCBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIG9wZW4oY29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IFR5cGU8YW55PiB8IHN0cmluZywgYWxlcnRDb25maWc6IEFsZXJ0Q29uZmlnID0gbmV3IEFsZXJ0Q29uZmlnKCkpOiBBbGVydFJlZiB7XG5cbiAgICAgICAgLy8gR2V0IGRlZmF1bHQgdmFsdWVzIGZyb20gYWxlcnQgbW9kZWxcbiAgICAgICAgYWxlcnRDb25maWcgPSBPYmplY3QuYXNzaWduKG5ldyBBbGVydENvbmZpZygpLCBhbGVydENvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgYWxlcnQgcmVmIHNlcnZpY2VcbiAgICAgICAgY29uc3Qgc2VydmljZTogQWxlcnRSZWYgPSBuZXcgQWxlcnRSZWYoKTtcbiAgICAgICAgc2VydmljZS5kYXRhID0gYWxlcnRDb25maWcuZGF0YTtcblxuICAgICAgICAvLyBJZiBlbXB0eSBvciB1bmRlZmluZWQgYWxlcnQgYXJyYXksIGNyZWF0ZSBjb250YWluZXJcbiAgICAgICAgaWYgKCF0aGlzLmFsZXJ0cyB8fCB0aGlzLmFsZXJ0cy5sZW5ndGggPT09IDAgfHwgIXRoaXMuYWxlcnRDb250YWluZXJSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRDb250YWluZXJSZWYgPSB0aGlzLmR5bmFtaWNDb21wb25lbnRTZXJ2aWNlLmNyZWF0ZUR5bmFtaWNDb21wb25lbnRcbiAgICAgICAgICAgICAgICA8IEFsZXJ0Q29udGFpbmVyQ29tcG9uZW50ID4gKGNvbnRlbnQsIEFsZXJ0Q29udGFpbmVyQ29tcG9uZW50LCBhbGVydENvbmZpZylcbiAgICAgICAgICAgIDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBDb250YWluZXIgdG8gcHV0IGJhY2tkcm9wIGFuZCBjb21wb25lbnQgdG8gY29udGFpbmVyXG4gICAgICAgIGFsZXJ0Q29uZmlnLmNvbnRhaW5lciA9IHRoaXMuYWxlcnRDb250YWluZXJSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcblxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmR5bmFtaWNDb21wb25lbnRTZXJ2aWNlLmNyZWF0ZUR5bmFtaWNDb21wb25lbnRcbiAgICAgICAgICAgIDxBbGVydENvbXBvbmVudD4oY29udGVudCwgQWxlcnRDb21wb25lbnQsIGFsZXJ0Q29uZmlnLCBbc2VydmljZV0pO1xuXG4gICAgICAgIGNvbXBvbmVudC5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9ICcxMHB4JztcblxuICAgICAgICAvLyBTdWJzY3JpcHRpb24gdG8gY2xvc2UgYWxlcnQgZnJvbSByZWZcbiAgICAgICAgY29uc3QgcmVmU3ViID0gc2VydmljZS5hZnRlckRpc21pc3NlZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95QWxlcnRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIHJlZlN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBMb2cgbmV3IGNvbXBvbmVudFxuICAgICAgICB0aGlzLmFsZXJ0cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc21pc3NlcyBhbGwgc2VydmljZS1vcGVuZWQgYWxlcnRzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNtaXNzQWxsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFsZXJ0cy5mb3JFYWNoKHJlZiA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lBbGVydENvbXBvbmVudChyZWYpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlc3Ryb3lBbGVydENvbXBvbmVudChhbGVydDogQ29tcG9uZW50UmVmPEFsZXJ0Q29tcG9uZW50Pik6IHZvaWQge1xuICAgICAgICB0aGlzLmFsZXJ0c1t0aGlzLmFsZXJ0cy5pbmRleE9mKGFsZXJ0KV0gPSBudWxsO1xuICAgICAgICB0aGlzLmFsZXJ0cyA9IHRoaXMuYWxlcnRzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IG51bGwgJiYgaXRlbSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5keW5hbWljQ29tcG9uZW50U2VydmljZS5kZXN0cm95Q29tcG9uZW50KGFsZXJ0KTtcblxuICAgICAgICBpZiAodGhpcy5hbGVydENvbnRhaW5lclJlZiAmJiAoIXRoaXMuYWxlcnRzIHx8IHRoaXMuYWxlcnRzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUFsZXJ0Q29udGFpbmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlc3Ryb3lBbGVydENvbnRhaW5lcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5keW5hbWljQ29tcG9uZW50U2VydmljZS5kZXN0cm95Q29tcG9uZW50KHRoaXMuYWxlcnRDb250YWluZXJSZWYpO1xuICAgICAgICB0aGlzLmFsZXJ0Q29udGFpbmVyUmVmID0gdW5kZWZpbmVkO1xuICAgIH1cblxufVxuIl19