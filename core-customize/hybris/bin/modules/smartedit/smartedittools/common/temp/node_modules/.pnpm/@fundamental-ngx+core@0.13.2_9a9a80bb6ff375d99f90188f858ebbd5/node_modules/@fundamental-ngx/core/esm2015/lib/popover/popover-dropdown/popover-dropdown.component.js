/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover-dropdown/popover-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, isDevMode, ViewEncapsulation } from '@angular/core';
/**
 * A component used to enforce a certain layout for the popover. With additional styling
 * ```html
 * <fd-popover>
 *     <fd-dropdown>Dropdown</fd-dropdown>
 *     <fd-popover-body>Popover Body</fd-popover-body>
 * </fd-popover>
 * ```
 */
export class PopoverDropdownComponent {
    constructor() {
        /**
         * Whether the popover should have an arrow.
         */
        this.noArrow = true;
        /**
         * Whether the popover is disabled.
         */
        this.disabled = false;
        /**
         * Whether the dropdown is in compact format.
         */
        this.compact = false;
        /**
         * Whether the dropdown is in a toolbar.
         */
        this.toolbar = false;
        /**
         * Whether the dropdown is opened.
         */
        this.isOpen = false;
        if (isDevMode()) {
            console.warn('Popover Dropdown has been deprecated, it will be removed soon. Replace it by popover with menu button');
        }
    }
}
PopoverDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'fd-dropdown-control',
                host: {
                    class: 'fd-dropdown',
                },
                template: "<div class=\"fd-dropdown\">\n    <button\n        fd-button\n        class=\"fd-dropdown__control\"\n        [fdType]=\"btnType\"\n        [glyph]=\"glyph\"\n        [compact]=\"compact\"\n        [disabled]=\"disabled\"\n        [attr.aria-expanded]=\"this.disabled ? false : isOpen\"\n        [attr.aria-disabled]=\"this.disabled\"\n        aria-haspopup=\"true\"\n    >\n        <ng-content></ng-content>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PopoverDropdownComponent.ctorParameters = () => [];
PopoverDropdownComponent.propDecorators = {
    noArrow: [{ type: Input }],
    disabled: [{ type: Input }],
    glyph: [{ type: Input }],
    btnType: [{ type: Input }],
    compact: [{ type: Input }],
    toolbar: [{ type: Input }],
    isOpen: [{ type: Input }]
};
if (false) {
    /**
     * Whether the popover should have an arrow.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.noArrow;
    /**
     * Whether the popover is disabled.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.disabled;
    /**
     * The glyph to display.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.glyph;
    /**
     * The btnType to display.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.btnType;
    /**
     * Whether the dropdown is in compact format.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.compact;
    /**
     * Whether the dropdown is in a toolbar.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.toolbar;
    /**
     * Whether the dropdown is opened.
     * @type {?}
     */
    PopoverDropdownComponent.prototype.isOpen;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1kcm9wZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZnVuZGFtZW50YWwtbmd4L2NvcmUvIiwic291cmNlcyI6WyJsaWIvcG9wb3Zlci9wb3BvdmVyLWRyb3Bkb3duL3BvcG92ZXItZHJvcGRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBZ0IsS0FBSyxFQUFFLFNBQVMsRUFBYSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7OztBQXNCakksTUFBTSxPQUFPLHdCQUF3QjtJQTZCakM7Ozs7UUExQkEsWUFBTyxHQUFZLElBQUksQ0FBQzs7OztRQUl4QixhQUFRLEdBQVksS0FBSyxDQUFDOzs7O1FBWTFCLFlBQU8sR0FBWSxLQUFLLENBQUM7Ozs7UUFJekIsWUFBTyxHQUFZLEtBQUssQ0FBQzs7OztRQUl6QixXQUFNLEdBQVksS0FBSyxDQUFDO1FBR3BCLElBQUksU0FBUyxFQUFFLEVBQUU7WUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLHVHQUF1RyxDQUFDLENBQUM7U0FDekg7SUFDTCxDQUFDOzs7WUExQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLElBQUksRUFBRTtvQkFDRixLQUFLLEVBQUUsYUFBYTtpQkFDdkI7Z0JBQ0QsNGJBQThDO2dCQUM5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7Ozs7O3NCQUdJLEtBQUs7dUJBSUwsS0FBSztvQkFJTCxLQUFLO3NCQUlMLEtBQUs7c0JBSUwsS0FBSztzQkFJTCxLQUFLO3FCQUlMLEtBQUs7Ozs7Ozs7SUF4Qk4sMkNBQ3dCOzs7OztJQUd4Qiw0Q0FDMEI7Ozs7O0lBRzFCLHlDQUNjOzs7OztJQUdkLDJDQUNvQjs7Ozs7SUFHcEIsMkNBQ3lCOzs7OztJQUd6QiwyQ0FDeUI7Ozs7O0lBR3pCLDBDQUN3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEhvc3QsIEluamVjdCwgSW5wdXQsIGlzRGV2TW9kZSwgT25EZXN0cm95LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQb3BvdmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vcG9wb3Zlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnV0dG9uVHlwZSB9IGZyb20gJy4uLy4uL2J1dHRvbi9idXR0b24uY29tcG9uZW50Jztcbi8qKlxuICogQSBjb21wb25lbnQgdXNlZCB0byBlbmZvcmNlIGEgY2VydGFpbiBsYXlvdXQgZm9yIHRoZSBwb3BvdmVyLiBXaXRoIGFkZGl0aW9uYWwgc3R5bGluZ1xuICogYGBgaHRtbFxuICogPGZkLXBvcG92ZXI+XG4gKiAgICAgPGZkLWRyb3Bkb3duPkRyb3Bkb3duPC9mZC1kcm9wZG93bj5cbiAqICAgICA8ZmQtcG9wb3Zlci1ib2R5PlBvcG92ZXIgQm9keTwvZmQtcG9wb3Zlci1ib2R5PlxuICogPC9mZC1wb3BvdmVyPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZmQtZHJvcGRvd24tY29udHJvbCcsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ2ZkLWRyb3Bkb3duJyxcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAncG9wb3Zlci1kcm9wZG93bi5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb3BvdmVyRHJvcGRvd25Db21wb25lbnQge1xuICAgIC8qKiBXaGV0aGVyIHRoZSBwb3BvdmVyIHNob3VsZCBoYXZlIGFuIGFycm93LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9BcnJvdzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogV2hldGhlciB0aGUgcG9wb3ZlciBpcyBkaXNhYmxlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVGhlIGdseXBoIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBnbHlwaDogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBidG5UeXBlIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBidG5UeXBlOiBCdXR0b25UeXBlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGRyb3Bkb3duIGlzIGluIGNvbXBhY3QgZm9ybWF0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29tcGFjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIFdoZXRoZXIgdGhlIGRyb3Bkb3duIGlzIGluIGEgdG9vbGJhci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRvb2xiYXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBXaGV0aGVyIHRoZSBkcm9wZG93biBpcyBvcGVuZWQuICovXG4gICAgQElucHV0KClcbiAgICBpc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignUG9wb3ZlciBEcm9wZG93biBoYXMgYmVlbiBkZXByZWNhdGVkLCBpdCB3aWxsIGJlIHJlbW92ZWQgc29vbi4gUmVwbGFjZSBpdCBieSBwb3BvdmVyIHdpdGggbWVudSBidXR0b24nKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19