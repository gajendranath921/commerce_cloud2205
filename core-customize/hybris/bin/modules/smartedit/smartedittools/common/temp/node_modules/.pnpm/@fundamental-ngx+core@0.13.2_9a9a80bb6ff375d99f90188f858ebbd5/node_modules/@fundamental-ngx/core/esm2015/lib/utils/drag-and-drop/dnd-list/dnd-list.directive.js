/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/drag-and-drop/dnd-list/dnd-list.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { DndContainerDirective } from '../dnd-container/dnd-container.directive';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * @record
 */
export function ElementChord() { }
if (false) {
    /** @type {?} */
    ElementChord.prototype.x;
    /** @type {?} */
    ElementChord.prototype.y;
    /** @type {?} */
    ElementChord.prototype.position;
    /** @type {?|undefined} */
    ElementChord.prototype.stickToPosition;
}
export class DndListDirective {
    constructor() {
        /**
         * Defines if the distance between elements should be counted only by vertical distance
         */
        this.listMode = false;
        /**
         * Event that is thrown, when the item is dropped
         */
        this.itemsChange = new EventEmitter();
        /**
         * @hidden
         */
        this.draggedItemIndex = 1000000;
        /**
         * @hidden
         */
        this.closestLinkIndex = null;
        /**
         * @hidden
         */
        this.closestLinkPosition = null;
        /**
         * An RxJS Subject that will kill the current data stream (for unsubscribing)
         */
        this.refresh$ = new Subject();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        this.refreshQueryList();
        this.dndContainerItems.changes.subscribe((/**
         * @return {?}
         */
        () => this.refreshQueryList()));
    }
    /**
     * Method called, when the item is being moved by 1 px
     * @param {?} event
     * @return {?}
     */
    onMove(event) {
        /**
         * Taking mouse position
         * @type {?}
         */
        const mousePosition = event.pointerPosition;
        /**
         * Temporary object, to store lowest distance values
         * @type {?}
         */
        let lowestDistanceItem = null;
        this.elementChords.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            /** Check if element can be replaced */
            if (!element.stickToPosition) {
                /**
                 * Counting the distances by the mileage of the corner of element and cursor position
                 * @type {?}
                 */
                const distance = Math.hypot(element.x - mousePosition.x, element.y - mousePosition.y);
                if (!lowestDistanceItem || distance < lowestDistanceItem.distance) {
                    lowestDistanceItem = { distance: distance, index: index };
                }
            }
        }));
        /** If the closest element is different than the old one, new one is picked. It prevents from performance issues */
        if (lowestDistanceItem.index !== this.closestLinkIndex) {
            this.closestLinkIndex = lowestDistanceItem.index;
            this.closestLinkPosition = this.elementChords[lowestDistanceItem.index].position;
            /** Generating line, that shows where the element will be placed, on drop */
            this.generateLine(this.closestLinkIndex, this.closestLinkPosition);
        }
    }
    /**
     * Method called, when element is started to be dragged
     * @param {?} ind
     * @return {?}
     */
    dragStart(ind) {
        this.draggedItemIndex = ind;
        /** @type {?} */
        const draggedItemElement = this.dndContainerItems.toArray()[ind].element;
        /** Counting all of the elements's chords */
        this.elementChords = this.dndContainerItems.toArray().map((/**
         * @param {?} link
         * @return {?}
         */
        (link) => link.getElementChord(this.isBefore(draggedItemElement, link.element), this.listMode)));
    }
    /**
     * Method called, when element is released
     * @return {?}
     */
    dragEnd() {
        /** @type {?} */
        const draggedItemIndex = this.draggedItemIndex;
        /** @type {?} */
        const replacedItemIndex = this.closestLinkIndex;
        /** @type {?} */
        const draggedItem = this.items[draggedItemIndex];
        if (draggedItemIndex < replacedItemIndex) {
            for (let i = draggedItemIndex; i < replacedItemIndex; i++) {
                this.items[i] = this.items[i + 1];
            }
        }
        else {
            for (let i = draggedItemIndex; i > replacedItemIndex; i--) {
                this.items[i] = this.items[i - 1];
            }
        }
        /** Replacing items */
        this.items[replacedItemIndex] = draggedItem;
        this.itemsChange.emit(this.items);
        this.removeAllLines();
        /** Reset */
        this.elementChords = [];
        this.closestLinkIndex = null;
        this.closestLinkPosition = null;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    removeAllLines() {
        this.dndContainerItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.removeLine()));
    }
    /**
     * @hidden
     * @private
     * @param {?} closestLinkIndex
     * @param {?} linkPosition
     * @return {?}
     */
    generateLine(closestLinkIndex, linkPosition) {
        this.removeAllLines();
        this.dndContainerItems.toArray()[closestLinkIndex].createLine(linkPosition, this.listMode);
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    refreshQueryList() {
        this.refresh$.next();
        this.dndContainerItems.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.moved.pipe(takeUntil(this.refresh$)).subscribe((/**
             * @param {?} eventMove
             * @return {?}
             */
            eventMove => this.onMove(eventMove)));
            item.started.pipe(takeUntil(this.refresh$)).subscribe((/**
             * @return {?}
             */
            () => this.dragStart(index)));
            item.released.pipe(takeUntil(this.refresh$)).subscribe((/**
             * @return {?}
             */
            () => this.dragEnd()));
        }));
    }
    /**
     * @hidden
     * Return information if element is placed before the dragged element
     * @private
     * @param {?} draggedElement
     * @param {?} targetElement
     * @return {?}
     */
    isBefore(draggedElement, targetElement) {
        /**
         * Sometimes the element are not straight in one column, that's why offset is needed
         * @type {?}
         */
        const VERTICAL_OFFSET = 20;
        /**
         * Distances from the top of screen
         * @type {?}
         */
        const draggedElementBound = (/** @type {?} */ (draggedElement.nativeElement.getBoundingClientRect()));
        /** @type {?} */
        const targetElementBound = (/** @type {?} */ (targetElement.nativeElement.getBoundingClientRect()));
        if (draggedElementBound.y - targetElementBound.y > VERTICAL_OFFSET) {
            /** If element is higher than the dragged element, it's for sure before */
            return true;
        }
        else if (targetElementBound.y - draggedElementBound.y > VERTICAL_OFFSET) {
            /** If element is lower than the dragged element, it's for sure after */
            return false;
        }
        else {
            /** If elements are in same level, the horizontal position decides if it's before/after */
            return draggedElementBound.x - targetElementBound.x > 0;
        }
    }
}
DndListDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[fd-dnd-list]',
            },] }
];
DndListDirective.propDecorators = {
    dndContainerItems: [{ type: ContentChildren, args: [DndContainerDirective,] }],
    listMode: [{ type: Input }],
    items: [{ type: Input }],
    itemsChange: [{ type: Output }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    DndListDirective.prototype.dndContainerItems;
    /**
     * Defines if the distance between elements should be counted only by vertical distance
     * @type {?}
     */
    DndListDirective.prototype.listMode;
    /**
     * Array of items, that will be sorted
     * @type {?}
     */
    DndListDirective.prototype.items;
    /**
     * Event that is thrown, when the item is dropped
     * @type {?}
     */
    DndListDirective.prototype.itemsChange;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.elementChords;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.draggedItemIndex;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.closestLinkIndex;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    DndListDirective.prototype.closestLinkPosition;
    /**
     * An RxJS Subject that will kill the current data stream (for unsubscribing)
     * @type {?}
     * @private
     */
    DndListDirective.prototype.refresh$;
}
//# sourceMappingURL=data:application/json;base64,