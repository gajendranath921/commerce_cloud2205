/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal/modal-utils/modal-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * Reference to a modal component generated via the ModalService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
var /**
 * Reference to a modal component generated via the ModalService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
ModalRef = /** @class */ (function () {
    function ModalRef() {
        this._afterClosed = new Subject();
        /**
         * Observable that is triggered when the modal is closed.
         * On close a *result* is passed back. On dismiss, an *error* is returned instead.
         */
        this.afterClosed = this._afterClosed.asObservable();
    }
    /**
     * Closes the modal and passes the argument to the afterClosed observable.
     * @param result Value passed back to the observable as a result.
     */
    /**
     * Closes the modal and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    ModalRef.prototype.close = /**
     * Closes the modal and passes the argument to the afterClosed observable.
     * @param {?=} result Value passed back to the observable as a result.
     * @return {?}
     */
    function (result) {
        this._afterClosed.next(result);
        this._afterClosed.complete();
    };
    /**
     * Dismisses the modal and passes the argument to the afterClosed observable as an error.
     * @param reason Value passed back to the observable as an error.
     */
    /**
     * Dismisses the modal and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    ModalRef.prototype.dismiss = /**
     * Dismisses the modal and passes the argument to the afterClosed observable as an error.
     * @param {?=} reason Value passed back to the observable as an error.
     * @return {?}
     */
    function (reason) {
        this._afterClosed.error(reason);
    };
    return ModalRef;
}());
/**
 * Reference to a modal component generated via the ModalService.
 * It can be injected into the content component through the constructor.
 * For a template, it is declared as part of the implicit context, see examples.
 */
export { ModalRef };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalRef.prototype._afterClosed;
    /**
     * Observable that is triggered when the modal is closed.
     * On close a *result* is passed back. On dismiss, an *error* is returned instead.
     * @type {?}
     */
    ModalRef.prototype.afterClosed;
    /**
     * Data passed from the calling component to the content.
     * @type {?}
     */
    ModalRef.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtcmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ1bmRhbWVudGFsLW5neC9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGFsL21vZGFsLXV0aWxzL21vZGFsLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQU8zQzs7Ozs7O0lBQUE7UUFDcUIsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDOzs7OztRQU01QyxnQkFBVyxHQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBcUIzRSxDQUFDO0lBaEJHOzs7T0FHRzs7Ozs7O0lBQ0gsd0JBQUs7Ozs7O0lBQUwsVUFBTSxNQUFZO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCwwQkFBTzs7Ozs7SUFBUCxVQUFRLE1BQVk7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBNUJELElBNEJDOzs7Ozs7Ozs7Ozs7SUEzQkcsZ0NBQW1EOzs7Ozs7SUFNbkQsK0JBQXVFOzs7OztJQUd2RSx3QkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIGEgbW9kYWwgY29tcG9uZW50IGdlbmVyYXRlZCB2aWEgdGhlIE1vZGFsU2VydmljZS5cbiAqIEl0IGNhbiBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb250ZW50IGNvbXBvbmVudCB0aHJvdWdoIHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEZvciBhIHRlbXBsYXRlLCBpdCBpcyBkZWNsYXJlZCBhcyBwYXJ0IG9mIHRoZSBpbXBsaWNpdCBjb250ZXh0LCBzZWUgZXhhbXBsZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbFJlZiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYWZ0ZXJDbG9zZWQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIHRoYXQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIG1vZGFsIGlzIGNsb3NlZC5cbiAgICAgKiBPbiBjbG9zZSBhICpyZXN1bHQqIGlzIHBhc3NlZCBiYWNrLiBPbiBkaXNtaXNzLCBhbiAqZXJyb3IqIGlzIHJldHVybmVkIGluc3RlYWQuXG4gICAgICovXG4gICAgcHVibGljIGFmdGVyQ2xvc2VkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLl9hZnRlckNsb3NlZC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKiBEYXRhIHBhc3NlZCBmcm9tIHRoZSBjYWxsaW5nIGNvbXBvbmVudCB0byB0aGUgY29udGVudC4qL1xuICAgIHB1YmxpYyBkYXRhOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG1vZGFsIGFuZCBwYXNzZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBhZnRlckNsb3NlZCBvYnNlcnZhYmxlLlxuICAgICAqIEBwYXJhbSByZXN1bHQgVmFsdWUgcGFzc2VkIGJhY2sgdG8gdGhlIG9ic2VydmFibGUgYXMgYSByZXN1bHQuXG4gICAgICovXG4gICAgY2xvc2UocmVzdWx0PzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLm5leHQocmVzdWx0KTtcbiAgICAgICAgdGhpcy5fYWZ0ZXJDbG9zZWQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNtaXNzZXMgdGhlIG1vZGFsIGFuZCBwYXNzZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBhZnRlckNsb3NlZCBvYnNlcnZhYmxlIGFzIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSByZWFzb24gVmFsdWUgcGFzc2VkIGJhY2sgdG8gdGhlIG9ic2VydmFibGUgYXMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgZGlzbWlzcyhyZWFzb24/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYWZ0ZXJDbG9zZWQuZXJyb3IocmVhc29uKTtcbiAgICB9XG59XG4iXX0=