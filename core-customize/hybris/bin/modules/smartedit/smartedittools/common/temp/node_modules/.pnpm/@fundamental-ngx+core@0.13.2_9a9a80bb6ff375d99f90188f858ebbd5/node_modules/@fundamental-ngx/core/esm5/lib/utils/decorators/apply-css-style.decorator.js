/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/decorators/apply-css-style.decorator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ELEMENT_REF_EXCEPTION } from '../public_api';
/**
 * Method decorator to apply css styles to a component through native element
 * decorator will store original method in variable and wrap it with custom one
 * component has to implement HasElementRef or CssStyleBuilder interface
 * more info abour method decorator: https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators
 * @param {?} target a component
 * @param {?} propertyKey name of the method
 * @param {?} descriptor method
 * @return {?}
 */
export function applyCssStyle(target, propertyKey, descriptor) {
    /** @type {?} */
    var originalMethod = descriptor.value;
    descriptor.value = (/**
     * @return {?}
     */
    function () {
        if (!this.elementRef) {
            throw ELEMENT_REF_EXCEPTION;
        }
        /** @type {?} */
        var _styles = originalMethod.apply(this);
        if (!this.elementRef()) {
            return;
        }
        /** @type {?} */
        var htmlElement = (/** @type {?} */ (this.elementRef().nativeElement));
        Object.keys(_styles).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            htmlElement.style[key] = _styles[key];
        }));
        return _styles;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHktY3NzLXN0eWxlLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmdW5kYW1lbnRhbC1uZ3gvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kZWNvcmF0b3JzL2FwcGx5LWNzcy1zdHlsZS5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQVEscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBVzVELE1BQU0sVUFBVSxhQUFhLENBQUMsTUFBVyxFQUFFLFdBQW1CLEVBQUUsVUFBOEI7O1FBQ3BGLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSztJQUN2QyxVQUFVLENBQUMsS0FBSzs7O0lBQUc7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixNQUFNLHFCQUFxQixDQUFDO1NBQy9COztZQUVLLE9BQU8sR0FBMEIsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPO1NBQ1Y7O1lBRUssV0FBVyxHQUFHLG1CQUFBLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQWU7UUFDbEUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxHQUFHO1lBQzVCLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLENBQUMsRUFBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQyxDQUFBLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzaCwgRUxFTUVOVF9SRUZfRVhDRVBUSU9OIH0gZnJvbSAnLi4vcHVibGljX2FwaSc7XG5cbi8qKlxuICogTWV0aG9kIGRlY29yYXRvciB0byBhcHBseSBjc3Mgc3R5bGVzIHRvIGEgY29tcG9uZW50IHRocm91Z2ggbmF0aXZlIGVsZW1lbnRcbiAqIGRlY29yYXRvciB3aWxsIHN0b3JlIG9yaWdpbmFsIG1ldGhvZCBpbiB2YXJpYWJsZSBhbmQgd3JhcCBpdCB3aXRoIGN1c3RvbSBvbmVcbiAqIGNvbXBvbmVudCBoYXMgdG8gaW1wbGVtZW50IEhhc0VsZW1lbnRSZWYgb3IgQ3NzU3R5bGVCdWlsZGVyIGludGVyZmFjZVxuICogbW9yZSBpbmZvIGFib3VyIG1ldGhvZCBkZWNvcmF0b3I6IGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2RlY29yYXRvcnMuaHRtbCNtZXRob2QtZGVjb3JhdG9yc1xuICogQHBhcmFtIHRhcmdldCBhIGNvbXBvbmVudFxuICogQHBhcmFtIHByb3BlcnR5S2V5IG5hbWUgb2YgdGhlIG1ldGhvZFxuICogQHBhcmFtIGRlc2NyaXB0b3IgbWV0aG9kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNzc1N0eWxlKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uKCk6IEhhc2g8bnVtYmVyIHwgc3RyaW5nPiB7XG4gICAgICAgIGlmICghdGhpcy5lbGVtZW50UmVmKSB7XG4gICAgICAgICAgICB0aHJvdyBFTEVNRU5UX1JFRl9FWENFUFRJT047XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBfc3R5bGVzOiBIYXNoPG51bWJlciB8IHN0cmluZz4gPSBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnRSZWYoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaHRtbEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYoKS5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBPYmplY3Qua2V5cyhfc3R5bGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBodG1sRWxlbWVudC5zdHlsZVtrZXldID0gX3N0eWxlc1trZXldO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX3N0eWxlcztcbiAgICB9O1xufVxuIl19